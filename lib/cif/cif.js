'use strict';

function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  });
  return Object.freeze(n);
}

function _iterableToArrayLimit$2(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _typeof$e(o) {
  "@babel/helpers - typeof";

  return _typeof$e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$e(o);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty$3(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }
  return object;
}
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
function _slicedToArray$2(arr, i) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$5(arr, i) || _nonIterableRest$2();
}
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr)) return arr;
}
function _unsupportedIterableToArray$5(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */var REVISION='137';var CullFaceNone=0;var CullFaceBack=1;var CullFaceFront=2;var PCFShadowMap=1;var PCFSoftShadowMap=2;var VSMShadowMap=3;var FrontSide=0;var BackSide=1;var DoubleSide=2;var FlatShading=1;var NoBlending=0;var NormalBlending=1;var AdditiveBlending=2;var SubtractiveBlending=3;var MultiplyBlending=4;var CustomBlending=5;var AddEquation=100;var SubtractEquation=101;var ReverseSubtractEquation=102;var MinEquation=103;var MaxEquation=104;var ZeroFactor=200;var OneFactor=201;var SrcColorFactor=202;var OneMinusSrcColorFactor=203;var SrcAlphaFactor=204;var OneMinusSrcAlphaFactor=205;var DstAlphaFactor=206;var OneMinusDstAlphaFactor=207;var DstColorFactor=208;var OneMinusDstColorFactor=209;var SrcAlphaSaturateFactor=210;var NeverDepth=0;var AlwaysDepth=1;var LessDepth=2;var LessEqualDepth=3;var EqualDepth=4;var GreaterEqualDepth=5;var GreaterDepth=6;var NotEqualDepth=7;var MultiplyOperation=0;var MixOperation=1;var AddOperation=2;var NoToneMapping=0;var LinearToneMapping=1;var ReinhardToneMapping=2;var CineonToneMapping=3;var ACESFilmicToneMapping=4;var CustomToneMapping=5;var UVMapping=300;var CubeReflectionMapping=301;var CubeRefractionMapping=302;var EquirectangularReflectionMapping=303;var EquirectangularRefractionMapping=304;var CubeUVReflectionMapping=306;var CubeUVRefractionMapping=307;var RepeatWrapping=1000;var ClampToEdgeWrapping=1001;var MirroredRepeatWrapping=1002;var NearestFilter=1003;var NearestMipmapNearestFilter=1004;var NearestMipmapLinearFilter=1005;var LinearFilter=1006;var LinearMipmapNearestFilter=1007;var LinearMipmapLinearFilter=1008;var UnsignedByteType=1009;var ByteType=1010;var ShortType=1011;var UnsignedShortType=1012;var IntType=1013;var UnsignedIntType=1014;var FloatType=1015;var HalfFloatType=1016;var UnsignedShort4444Type=1017;var UnsignedShort5551Type=1018;var UnsignedInt248Type=1020;var AlphaFormat=1021;var RGBFormat=1022;var RGBAFormat=1023;var LuminanceFormat=1024;var LuminanceAlphaFormat=1025;var DepthFormat=1026;var DepthStencilFormat=1027;var RedFormat=1028;var RedIntegerFormat=1029;var RGFormat=1030;var RGIntegerFormat=1031;var RGBAIntegerFormat=1033;var RGB_S3TC_DXT1_Format=33776;var RGBA_S3TC_DXT1_Format=33777;var RGBA_S3TC_DXT3_Format=33778;var RGBA_S3TC_DXT5_Format=33779;var RGB_PVRTC_4BPPV1_Format=35840;var RGB_PVRTC_2BPPV1_Format=35841;var RGBA_PVRTC_4BPPV1_Format=35842;var RGBA_PVRTC_2BPPV1_Format=35843;var RGB_ETC1_Format=36196;var RGB_ETC2_Format=37492;var RGBA_ETC2_EAC_Format=37496;var RGBA_ASTC_4x4_Format=37808;var RGBA_ASTC_5x4_Format=37809;var RGBA_ASTC_5x5_Format=37810;var RGBA_ASTC_6x5_Format=37811;var RGBA_ASTC_6x6_Format=37812;var RGBA_ASTC_8x5_Format=37813;var RGBA_ASTC_8x6_Format=37814;var RGBA_ASTC_8x8_Format=37815;var RGBA_ASTC_10x5_Format=37816;var RGBA_ASTC_10x6_Format=37817;var RGBA_ASTC_10x8_Format=37818;var RGBA_ASTC_10x10_Format=37819;var RGBA_ASTC_12x10_Format=37820;var RGBA_ASTC_12x12_Format=37821;var RGBA_BPTC_Format=36492;var InterpolateDiscrete=2300;var InterpolateLinear=2301;var InterpolateSmooth=2302;var ZeroCurvatureEnding=2400;var ZeroSlopeEnding=2401;var WrapAroundEnding=2402;var AdditiveAnimationBlendMode=2501;var TrianglesDrawMode=0;var LinearEncoding=3000;var sRGBEncoding=3001;var BasicDepthPacking=3200;var RGBADepthPacking=3201;var TangentSpaceNormalMap=0;var ObjectSpaceNormalMap=1;var KeepStencilOp=7680;var AlwaysStencilFunc=519;var StaticDrawUsage=35044;var DynamicDrawUsage=35048;var GLSL3='300 es';var _SRGBAFormat=1035;// fallback for WebGL 1
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */var EventDispatcher=/*#__PURE__*/function(){function EventDispatcher(){_classCallCheck(this,EventDispatcher);}_createClass(EventDispatcher,[{key:"addEventListener",value:function addEventListener(type,listener){if(this._listeners===undefined)this._listeners={};var listeners=this._listeners;if(listeners[type]===undefined){listeners[type]=[];}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener);}}},{key:"hasEventListener",value:function hasEventListener(type,listener){if(this._listeners===undefined)return false;var listeners=this._listeners;return listeners[type]!==undefined&&listeners[type].indexOf(listener)!==-1;}},{key:"removeEventListener",value:function removeEventListener(type,listener){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[type];if(listenerArray!==undefined){var index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1);}}}},{key:"dispatchEvent",value:function dispatchEvent(event){if(this._listeners===undefined)return;var listeners=this._listeners;var listenerArray=listeners[event.type];if(listenerArray!==undefined){event.target=this;// Make a copy, in case listeners are removed while iterating.
var array=listenerArray.slice(0);for(var i=0,l=array.length;i<l;i++){array[i].call(this,event);}event.target=null;}}}]);return EventDispatcher;}();var _lut=[];for(var i$1=0;i$1<256;i$1++){_lut[i$1]=(i$1<16?'0':'')+i$1.toString(16);}var DEG2RAD=Math.PI/180;var RAD2DEG=180/Math.PI;// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID(){var d0=Math.random()*0xffffffff|0;var d1=Math.random()*0xffffffff|0;var d2=Math.random()*0xffffffff|0;var d3=Math.random()*0xffffffff|0;var uuid=_lut[d0&0xff]+_lut[d0>>8&0xff]+_lut[d0>>16&0xff]+_lut[d0>>24&0xff]+'-'+_lut[d1&0xff]+_lut[d1>>8&0xff]+'-'+_lut[d1>>16&0x0f|0x40]+_lut[d1>>24&0xff]+'-'+_lut[d2&0x3f|0x80]+_lut[d2>>8&0xff]+'-'+_lut[d2>>16&0xff]+_lut[d2>>24&0xff]+_lut[d3&0xff]+_lut[d3>>8&0xff]+_lut[d3>>16&0xff]+_lut[d3>>24&0xff];// .toUpperCase() here flattens concatenated strings to save heap memory space.
return uuid.toUpperCase();}function clamp$1(value,min,max){return Math.max(min,Math.min(max,value));}// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo(n,m){return (n%m+m)%m;}// Linear mapping from range <a1, a2> to range <b1, b2>
function lerp(x,y,t){return (1-t)*x+t*y;}// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function isPowerOfTwo(value){return (value&value-1)===0&&value!==0;}function floorPowerOfTwo(value){return Math.pow(2,Math.floor(Math.log(value)/Math.LN2));}var Vector2=/*#__PURE__*/function(_Symbol$iterator){function Vector2(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;_classCallCheck(this,Vector2);this.x=x;this.y=y;}_createClass(Vector2,[{key:"width",get:function get(){return this.x;},set:function set(value){this.x=value;}},{key:"height",get:function get(){return this.y;},set:function set(value){this.y=value;}},{key:"set",value:function set(x,y){this.x=x;this.y=y;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this;}},{key:"multiply",value:function multiply(v){this.x*=v.x;this.y*=v.y;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;return this;}},{key:"divide",value:function divide(v){this.x/=v.x;this.y/=v.y;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"applyMatrix3",value:function applyMatrix3(m){var x=this.x,y=this.y;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6];this.y=e[1]*x+e[4]*y+e[7];return this;}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y;}},{key:"cross",value:function cross(v){return this.x*v.y-this.y*v.x;}},{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"angle",value:function angle(){// computes the angle in radians with respect to the positive x-axis
var angle=Math.atan2(-this.y,-this.x)+Math.PI;return angle;}},{key:"distanceTo",value:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}},{key:"distanceToSquared",value:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy;}},{key:"manhattanDistanceTo",value:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;return this;}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.x=array[offset];this.y=array[offset+1];return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this.x;array[offset+1]=this.y;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);return this;}},{key:"rotateAround",value:function rotateAround(center,angle){var c=Math.cos(angle),s=Math.sin(angle);var x=this.x-center.x;var y=this.y-center.y;this.x=x*c-y*s+center.x;this.y=x*s+y*c+center.y;return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();return this;}},{key:_Symbol$iterator,value:/*#__PURE__*/_regeneratorRuntime().mark(function value(){return _regeneratorRuntime().wrap(function value$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return this.x;case 2:_context2.next=4;return this.y;case 4:case"end":return _context2.stop();}},value,this);})}]);return Vector2;}(Symbol.iterator);Vector2.prototype.isVector2=true;var Matrix3=/*#__PURE__*/function(){function Matrix3(){_classCallCheck(this,Matrix3);this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');}}_createClass(Matrix3,[{key:"set",value:function set(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this;}},{key:"identity",value:function identity(){this.set(1,0,0,0,1,0,0,0,1);return this;}},{key:"copy",value:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];return this;}},{key:"extractBasis",value:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrix3Column(this,0);yAxis.setFromMatrix3Column(this,1);zAxis.setFromMatrix3Column(this,2);return this;}},{key:"setFromMatrix4",value:function setFromMatrix4(m){var me=m.elements;this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]);return this;}},{key:"multiply",value:function multiply(m){return this.multiplyMatrices(this,m);}},{key:"premultiply",value:function premultiply(m){return this.multiplyMatrices(m,this);}},{key:"multiplyMatrices",value:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[3],a13=ae[6];var a21=ae[1],a22=ae[4],a23=ae[7];var a31=ae[2],a32=ae[5],a33=ae[8];var b11=be[0],b12=be[3],b13=be[6];var b21=be[1],b22=be[4],b23=be[7];var b31=be[2],b32=be[5],b33=be[8];te[0]=a11*b11+a12*b21+a13*b31;te[3]=a11*b12+a12*b22+a13*b32;te[6]=a11*b13+a12*b23+a13*b33;te[1]=a21*b11+a22*b21+a23*b31;te[4]=a21*b12+a22*b22+a23*b32;te[7]=a21*b13+a22*b23+a23*b33;te[2]=a31*b11+a32*b21+a33*b31;te[5]=a31*b12+a32*b22+a33*b32;te[8]=a31*b13+a32*b23+a33*b33;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this;}},{key:"determinant",value:function determinant(){var te=this.elements;var a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g;}},{key:"invert",value:function invert(){var te=this.elements,n11=te[0],n21=te[1],n31=te[2],n12=te[3],n22=te[4],n32=te[5],n13=te[6],n23=te[7],n33=te[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(det===0)return this.set(0,0,0,0,0,0,0,0,0);var detInv=1/det;te[0]=t11*detInv;te[1]=(n31*n23-n33*n21)*detInv;te[2]=(n32*n21-n31*n22)*detInv;te[3]=t12*detInv;te[4]=(n33*n11-n31*n13)*detInv;te[5]=(n31*n12-n32*n11)*detInv;te[6]=t13*detInv;te[7]=(n21*n13-n23*n11)*detInv;te[8]=(n22*n11-n21*n12)*detInv;return this;}},{key:"transpose",value:function transpose(){var tmp;var m=this.elements;tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this;}},{key:"getNormalMatrix",value:function getNormalMatrix(matrix4){return this.setFromMatrix4(matrix4).invert().transpose();}},{key:"transposeIntoArray",value:function transposeIntoArray(r){var m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this;}},{key:"setUvTransform",value:function setUvTransform(tx,ty,sx,sy,rotation,cx,cy){var c=Math.cos(rotation);var s=Math.sin(rotation);this.set(sx*c,sx*s,-sx*(c*cx+s*cy)+cx+tx,-sy*s,sy*c,-sy*(-s*cx+c*cy)+cy+ty,0,0,1);return this;}},{key:"scale",value:function scale(sx,sy){var te=this.elements;te[0]*=sx;te[3]*=sx;te[6]*=sx;te[1]*=sy;te[4]*=sy;te[7]*=sy;return this;}},{key:"rotate",value:function rotate(theta){var c=Math.cos(theta);var s=Math.sin(theta);var te=this.elements;var a11=te[0],a12=te[3],a13=te[6];var a21=te[1],a22=te[4],a23=te[7];te[0]=c*a11+s*a21;te[3]=c*a12+s*a22;te[6]=c*a13+s*a23;te[1]=-s*a11+c*a21;te[4]=-s*a12+c*a22;te[7]=-s*a13+c*a23;return this;}},{key:"translate",value:function translate(tx,ty){var te=this.elements;te[0]+=tx*te[2];te[3]+=tx*te[5];te[6]+=tx*te[8];te[1]+=ty*te[2];te[4]+=ty*te[5];te[7]+=ty*te[8];return this;}},{key:"equals",value:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var _i=0;_i<9;_i++){if(te[_i]!==me[_i])return false;}return true;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;for(var _i2=0;_i2<9;_i2++){this.elements[_i2]=array[_i2+offset];}return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array;}},{key:"clone",value:function clone(){return new this.constructor().fromArray(this.elements);}}]);return Matrix3;}();Matrix3.prototype.isMatrix3=true;function arrayNeedsUint32(array){// assumes larger values usually on last
for(var _i3=array.length-1;_i3>=0;--_i3){if(array[_i3]>65535)return true;}return false;}function createElementNS(name){return document.createElementNS('http://www.w3.org/1999/xhtml',name);}var _colorKeywords={'aliceblue':0xF0F8FF,'antiquewhite':0xFAEBD7,'aqua':0x00FFFF,'aquamarine':0x7FFFD4,'azure':0xF0FFFF,'beige':0xF5F5DC,'bisque':0xFFE4C4,'black':0x000000,'blanchedalmond':0xFFEBCD,'blue':0x0000FF,'blueviolet':0x8A2BE2,'brown':0xA52A2A,'burlywood':0xDEB887,'cadetblue':0x5F9EA0,'chartreuse':0x7FFF00,'chocolate':0xD2691E,'coral':0xFF7F50,'cornflowerblue':0x6495ED,'cornsilk':0xFFF8DC,'crimson':0xDC143C,'cyan':0x00FFFF,'darkblue':0x00008B,'darkcyan':0x008B8B,'darkgoldenrod':0xB8860B,'darkgray':0xA9A9A9,'darkgreen':0x006400,'darkgrey':0xA9A9A9,'darkkhaki':0xBDB76B,'darkmagenta':0x8B008B,'darkolivegreen':0x556B2F,'darkorange':0xFF8C00,'darkorchid':0x9932CC,'darkred':0x8B0000,'darksalmon':0xE9967A,'darkseagreen':0x8FBC8F,'darkslateblue':0x483D8B,'darkslategray':0x2F4F4F,'darkslategrey':0x2F4F4F,'darkturquoise':0x00CED1,'darkviolet':0x9400D3,'deeppink':0xFF1493,'deepskyblue':0x00BFFF,'dimgray':0x696969,'dimgrey':0x696969,'dodgerblue':0x1E90FF,'firebrick':0xB22222,'floralwhite':0xFFFAF0,'forestgreen':0x228B22,'fuchsia':0xFF00FF,'gainsboro':0xDCDCDC,'ghostwhite':0xF8F8FF,'gold':0xFFD700,'goldenrod':0xDAA520,'gray':0x808080,'green':0x008000,'greenyellow':0xADFF2F,'grey':0x808080,'honeydew':0xF0FFF0,'hotpink':0xFF69B4,'indianred':0xCD5C5C,'indigo':0x4B0082,'ivory':0xFFFFF0,'khaki':0xF0E68C,'lavender':0xE6E6FA,'lavenderblush':0xFFF0F5,'lawngreen':0x7CFC00,'lemonchiffon':0xFFFACD,'lightblue':0xADD8E6,'lightcoral':0xF08080,'lightcyan':0xE0FFFF,'lightgoldenrodyellow':0xFAFAD2,'lightgray':0xD3D3D3,'lightgreen':0x90EE90,'lightgrey':0xD3D3D3,'lightpink':0xFFB6C1,'lightsalmon':0xFFA07A,'lightseagreen':0x20B2AA,'lightskyblue':0x87CEFA,'lightslategray':0x778899,'lightslategrey':0x778899,'lightsteelblue':0xB0C4DE,'lightyellow':0xFFFFE0,'lime':0x00FF00,'limegreen':0x32CD32,'linen':0xFAF0E6,'magenta':0xFF00FF,'maroon':0x800000,'mediumaquamarine':0x66CDAA,'mediumblue':0x0000CD,'mediumorchid':0xBA55D3,'mediumpurple':0x9370DB,'mediumseagreen':0x3CB371,'mediumslateblue':0x7B68EE,'mediumspringgreen':0x00FA9A,'mediumturquoise':0x48D1CC,'mediumvioletred':0xC71585,'midnightblue':0x191970,'mintcream':0xF5FFFA,'mistyrose':0xFFE4E1,'moccasin':0xFFE4B5,'navajowhite':0xFFDEAD,'navy':0x000080,'oldlace':0xFDF5E6,'olive':0x808000,'olivedrab':0x6B8E23,'orange':0xFFA500,'orangered':0xFF4500,'orchid':0xDA70D6,'palegoldenrod':0xEEE8AA,'palegreen':0x98FB98,'paleturquoise':0xAFEEEE,'palevioletred':0xDB7093,'papayawhip':0xFFEFD5,'peachpuff':0xFFDAB9,'peru':0xCD853F,'pink':0xFFC0CB,'plum':0xDDA0DD,'powderblue':0xB0E0E6,'purple':0x800080,'rebeccapurple':0x663399,'red':0xFF0000,'rosybrown':0xBC8F8F,'royalblue':0x4169E1,'saddlebrown':0x8B4513,'salmon':0xFA8072,'sandybrown':0xF4A460,'seagreen':0x2E8B57,'seashell':0xFFF5EE,'sienna':0xA0522D,'silver':0xC0C0C0,'skyblue':0x87CEEB,'slateblue':0x6A5ACD,'slategray':0x708090,'slategrey':0x708090,'snow':0xFFFAFA,'springgreen':0x00FF7F,'steelblue':0x4682B4,'tan':0xD2B48C,'teal':0x008080,'thistle':0xD8BFD8,'tomato':0xFF6347,'turquoise':0x40E0D0,'violet':0xEE82EE,'wheat':0xF5DEB3,'white':0xFFFFFF,'whitesmoke':0xF5F5F5,'yellow':0xFFFF00,'yellowgreen':0x9ACD32};var _hslA={h:0,s:0,l:0};var _hslB={h:0,s:0,l:0};function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*6*(2/3-t);return p;}function SRGBToLinear(c){return c<0.04045?c*0.0773993808:Math.pow(c*0.9478672986+0.0521327014,2.4);}function LinearToSRGB(c){return c<0.0031308?c*12.92:1.055*Math.pow(c,0.41666)-0.055;}var Color=/*#__PURE__*/function(){function Color(r,g,b){_classCallCheck(this,Color);if(g===undefined&&b===undefined){// r is THREE.Color, hex or string
return this.set(r);}return this.setRGB(r,g,b);}_createClass(Color,[{key:"set",value:function set(value){if(value&&value.isColor){this.copy(value);}else if(typeof value==='number'){this.setHex(value);}else if(typeof value==='string'){this.setStyle(value);}return this;}},{key:"setScalar",value:function setScalar(scalar){this.r=scalar;this.g=scalar;this.b=scalar;return this;}},{key:"setHex",value:function setHex(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this;}},{key:"setRGB",value:function setRGB(r,g,b){this.r=r;this.g=g;this.b=b;return this;}},{key:"setHSL",value:function setHSL(h,s,l){// h,s,l ranges are in 0.0 - 1.0
h=euclideanModulo(h,1);s=clamp$1(s,0,1);l=clamp$1(l,0,1);if(s===0){this.r=this.g=this.b=l;}else {var p=l<=0.5?l*(1+s):l+s-l*s;var q=2*l-p;this.r=hue2rgb(q,p,h+1/3);this.g=hue2rgb(q,p,h);this.b=hue2rgb(q,p,h-1/3);}return this;}},{key:"setStyle",value:function setStyle(style){function handleAlpha(string){if(string===undefined)return;if(parseFloat(string)<1){console.warn('THREE.Color: Alpha component of '+style+' will be ignored.');}}var m;if(m=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)){// rgb / hsl
var color;var name=m[1];var components=m[2];switch(name){case'rgb':case'rgba':if(color=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// rgb(255,0,0) rgba(255,0,0,0.5)
this.r=Math.min(255,parseInt(color[1],10))/255;this.g=Math.min(255,parseInt(color[2],10))/255;this.b=Math.min(255,parseInt(color[3],10))/255;handleAlpha(color[4]);return this;}if(color=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
this.r=Math.min(100,parseInt(color[1],10))/100;this.g=Math.min(100,parseInt(color[2],10))/100;this.b=Math.min(100,parseInt(color[3],10))/100;handleAlpha(color[4]);return this;}break;case'hsl':case'hsla':if(color=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)){// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
var h=parseFloat(color[1])/360;var s=parseInt(color[2],10)/100;var l=parseInt(color[3],10)/100;handleAlpha(color[4]);return this.setHSL(h,s,l);}break;}}else if(m=/^\#([A-Fa-f\d]+)$/.exec(style)){// hex color
var hex=m[1];var size=hex.length;if(size===3){// #ff0
this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255;this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255;this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255;return this;}else if(size===6){// #ff0000
this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255;this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255;this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255;return this;}}if(style&&style.length>0){return this.setColorName(style);}return this;}},{key:"setColorName",value:function setColorName(style){// color keywords
var hex=_colorKeywords[style.toLowerCase()];if(hex!==undefined){// red
this.setHex(hex);}else {// unknown color
console.warn('THREE.Color: Unknown color '+style);}return this;}},{key:"clone",value:function clone(){return new this.constructor(this.r,this.g,this.b);}},{key:"copy",value:function copy(color){this.r=color.r;this.g=color.g;this.b=color.b;return this;}},{key:"copySRGBToLinear",value:function copySRGBToLinear(color){this.r=SRGBToLinear(color.r);this.g=SRGBToLinear(color.g);this.b=SRGBToLinear(color.b);return this;}},{key:"copyLinearToSRGB",value:function copyLinearToSRGB(color){this.r=LinearToSRGB(color.r);this.g=LinearToSRGB(color.g);this.b=LinearToSRGB(color.b);return this;}},{key:"convertSRGBToLinear",value:function convertSRGBToLinear(){this.copySRGBToLinear(this);return this;}},{key:"convertLinearToSRGB",value:function convertLinearToSRGB(){this.copyLinearToSRGB(this);return this;}},{key:"getHex",value:function getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0;}},{key:"getHexString",value:function getHexString(){return ('000000'+this.getHex().toString(16)).slice(-6);}},{key:"getHSL",value:function getHSL(target){// h,s,l ranges are in 0.0 - 1.0
var r=this.r,g=this.g,b=this.b;var max=Math.max(r,g,b);var min=Math.min(r,g,b);var hue,saturation;var lightness=(min+max)/2.0;if(min===max){hue=0;saturation=0;}else {var delta=max-min;saturation=lightness<=0.5?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4;break;}hue/=6;}target.h=hue;target.s=saturation;target.l=lightness;return target;}},{key:"getStyle",value:function getStyle(){return 'rgb('+(this.r*255|0)+','+(this.g*255|0)+','+(this.b*255|0)+')';}},{key:"offsetHSL",value:function offsetHSL(h,s,l){this.getHSL(_hslA);_hslA.h+=h;_hslA.s+=s;_hslA.l+=l;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this;}},{key:"add",value:function add(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this;}},{key:"addColors",value:function addColors(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this;}},{key:"addScalar",value:function addScalar(s){this.r+=s;this.g+=s;this.b+=s;return this;}},{key:"sub",value:function sub(color){this.r=Math.max(0,this.r-color.r);this.g=Math.max(0,this.g-color.g);this.b=Math.max(0,this.b-color.b);return this;}},{key:"multiply",value:function multiply(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){this.r*=s;this.g*=s;this.b*=s;return this;}},{key:"lerp",value:function lerp(color,alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this;}},{key:"lerpColors",value:function lerpColors(color1,color2,alpha){this.r=color1.r+(color2.r-color1.r)*alpha;this.g=color1.g+(color2.g-color1.g)*alpha;this.b=color1.b+(color2.b-color1.b)*alpha;return this;}},{key:"lerpHSL",value:function lerpHSL(color,alpha){this.getHSL(_hslA);color.getHSL(_hslB);var h=lerp(_hslA.h,_hslB.h,alpha);var s=lerp(_hslA.s,_hslB.s,alpha);var l=lerp(_hslA.l,_hslB.l,alpha);this.setHSL(h,s,l);return this;}},{key:"equals",value:function equals(c){return c.r===this.r&&c.g===this.g&&c.b===this.b;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index){this.r=attribute.getX(index);this.g=attribute.getY(index);this.b=attribute.getZ(index);if(attribute.normalized===true){// assuming Uint8Array
this.r/=255;this.g/=255;this.b/=255;}return this;}},{key:"toJSON",value:function toJSON(){return this.getHex();}}]);return Color;}();Color.NAMES=_colorKeywords;Color.prototype.isColor=true;Color.prototype.r=1;Color.prototype.g=1;Color.prototype.b=1;var _canvas;var ImageUtils=/*#__PURE__*/function(){function ImageUtils(){_classCallCheck(this,ImageUtils);}_createClass(ImageUtils,null,[{key:"getDataURL",value:function getDataURL(image){if(/^data:/i.test(image.src)){return image.src;}if(typeof HTMLCanvasElement=='undefined'){return image.src;}var canvas;if(image instanceof HTMLCanvasElement){canvas=image;}else {if(_canvas===undefined)_canvas=createElementNS('canvas');_canvas.width=image.width;_canvas.height=image.height;var context=_canvas.getContext('2d');if(image instanceof ImageData){context.putImageData(image,0,0);}else {context.drawImage(image,0,0,image.width,image.height);}canvas=_canvas;}if(canvas.width>2048||canvas.height>2048){console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons',image);return canvas.toDataURL('image/jpeg',0.6);}else {return canvas.toDataURL('image/png');}}},{key:"sRGBToLinear",value:function sRGBToLinear(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){var canvas=createElementNS('canvas');canvas.width=image.width;canvas.height=image.height;var context=canvas.getContext('2d');context.drawImage(image,0,0,image.width,image.height);var imageData=context.getImageData(0,0,image.width,image.height);var data=imageData.data;for(var _i4=0;_i4<data.length;_i4++){data[_i4]=SRGBToLinear(data[_i4]/255)*255;}context.putImageData(imageData,0,0);return canvas;}else if(image.data){var _data=image.data.slice(0);for(var _i5=0;_i5<_data.length;_i5++){if(_data instanceof Uint8Array||_data instanceof Uint8ClampedArray){_data[_i5]=Math.floor(SRGBToLinear(_data[_i5]/255)*255);}else {// assuming float
_data[_i5]=SRGBToLinear(_data[_i5]);}}return {data:_data,width:image.width,height:image.height};}else {console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.');return image;}}}]);return ImageUtils;}();var textureId=0;var Texture=/*#__PURE__*/function(_EventDispatcher){_inherits(Texture,_EventDispatcher);var _super=_createSuper(Texture);function Texture(){var _this2;var image=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Texture.DEFAULT_IMAGE;var mapping=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Texture.DEFAULT_MAPPING;var wrapS=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ClampToEdgeWrapping;var wrapT=arguments.length>3&&arguments[3]!==undefined?arguments[3]:ClampToEdgeWrapping;var magFilter=arguments.length>4&&arguments[4]!==undefined?arguments[4]:LinearFilter;var minFilter=arguments.length>5&&arguments[5]!==undefined?arguments[5]:LinearMipmapLinearFilter;var format=arguments.length>6&&arguments[6]!==undefined?arguments[6]:RGBAFormat;var type=arguments.length>7&&arguments[7]!==undefined?arguments[7]:UnsignedByteType;var anisotropy=arguments.length>8&&arguments[8]!==undefined?arguments[8]:1;var encoding=arguments.length>9&&arguments[9]!==undefined?arguments[9]:LinearEncoding;_classCallCheck(this,Texture);_this2=_super.call(this);Object.defineProperty(_assertThisInitialized(_this2),'id',{value:textureId++});_this2.uuid=generateUUID();_this2.name='';_this2.image=image;_this2.mipmaps=[];_this2.mapping=mapping;_this2.wrapS=wrapS;_this2.wrapT=wrapT;_this2.magFilter=magFilter;_this2.minFilter=minFilter;_this2.anisotropy=anisotropy;_this2.format=format;_this2.internalFormat=null;_this2.type=type;_this2.offset=new Vector2(0,0);_this2.repeat=new Vector2(1,1);_this2.center=new Vector2(0,0);_this2.rotation=0;_this2.matrixAutoUpdate=true;_this2.matrix=new Matrix3();_this2.generateMipmaps=true;_this2.premultiplyAlpha=false;_this2.flipY=true;_this2.unpackAlignment=4;// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
//
// Also changing the encoding after already used by a Material will not automatically make the Material
// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
_this2.encoding=encoding;_this2.userData={};_this2.version=0;_this2.onUpdate=null;_this2.isRenderTargetTexture=false;// indicates whether a texture belongs to a render target or not
_this2.needsPMREMUpdate=false;// indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
return _this2;}_createClass(Texture,[{key:"updateMatrix",value:function updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){this.name=source.name;this.image=source.image;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.internalFormat=source.internalFormat;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.center.copy(source.center);this.rotation=source.rotation;this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrix.copy(source.matrix);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=source.unpackAlignment;this.encoding=source.encoding;this.userData=JSON.parse(JSON.stringify(source.userData));return this;}},{key:"toJSON",value:function toJSON(meta){var isRootObject=meta===undefined||typeof meta==='string';if(!isRootObject&&meta.textures[this.uuid]!==undefined){return meta.textures[this.uuid];}var output={metadata:{version:4.5,type:'Texture',generator:'Texture.toJSON'},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==undefined){// TODO: Move to THREE.Image
var image=this.image;if(image.uuid===undefined){image.uuid=generateUUID();// UGH
}if(!isRootObject&&meta.images[image.uuid]===undefined){var url;if(Array.isArray(image)){// process array of images e.g. CubeTexture
url=[];for(var _i6=0,l=image.length;_i6<l;_i6++){// check cube texture with data textures
if(image[_i6].isDataTexture){url.push(serializeImage(image[_i6].image));}else {url.push(serializeImage(image[_i6]));}}}else {// process single image
url=serializeImage(image);}meta.images[image.uuid]={uuid:image.uuid,url:url};}output.image=image.uuid;}if(JSON.stringify(this.userData)!=='{}')output.userData=this.userData;if(!isRootObject){meta.textures[this.uuid]=output;}return output;}},{key:"dispose",value:function dispose(){this.dispatchEvent({type:'dispose'});}},{key:"transformUv",value:function transformUv(uv){if(this.mapping!==UVMapping)return uv;uv.applyMatrix3(this.matrix);if(uv.x<0||uv.x>1){switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.x)%2)===1){uv.x=Math.ceil(uv.x)-uv.x;}else {uv.x=uv.x-Math.floor(uv.x);}break;}}if(uv.y<0||uv.y>1){switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(uv.y)%2)===1){uv.y=Math.ceil(uv.y)-uv.y;}else {uv.y=uv.y-Math.floor(uv.y);}break;}}if(this.flipY){uv.y=1-uv.y;}return uv;}},{key:"needsUpdate",set:function set(value){if(value===true)this.version++;}}]);return Texture;}(EventDispatcher);Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype.isTexture=true;function serializeImage(image){if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){// default images
return ImageUtils.getDataURL(image);}else {if(image.data){// images of DataTexture
return {data:Array.prototype.slice.call(image.data),width:image.width,height:image.height,type:image.data.constructor.name};}else {console.warn('THREE.Texture: Unable to serialize Texture.');return {};}}}var Vector4=/*#__PURE__*/function(_Symbol$iterator2){function Vector4(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var w=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,Vector4);this.x=x;this.y=y;this.z=z;this.w=w;}_createClass(Vector4,[{key:"width",get:function get(){return this.z;},set:function set(value){this.z=value;}},{key:"height",get:function get(){return this.w;},set:function set(value){this.w=value;}},{key:"set",value:function set(x,y,z,w){this.x=x;this.y=y;this.z=z;this.w=w;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;this.w=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setZ",value:function setZ(z){this.z=z;return this;}},{key:"setW",value:function setW(w){this.w=w;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y,this.z,this.w);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=v.w!==undefined?v.w:1;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;this.w-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this;}},{key:"multiply",value:function multiply(v){this.x*=v.x;this.y*=v.y;this.z*=v.z;this.w*=v.w;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;this.w*=scalar;return this;}},{key:"applyMatrix4",value:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z,w=this.w;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w;this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w;this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w;this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"setAxisAngleFromQuaternion",value:function setAxisAngleFromQuaternion(q){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
// q is assumed to be normalized
this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);if(s<0.0001){this.x=1;this.y=0;this.z=0;}else {this.x=q.x/s;this.y=q.y/s;this.z=q.z/s;}return this;}},{key:"setAxisAngleFromRotationMatrix",value:function setAxisAngleFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var angle,x,y,z;// variables for result
var epsilon=0.01,// margin to allow for rounding errors
epsilon2=0.1,// margin to distinguish between 0 and 180 degrees
te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){// singularity found
// first check for identity matrix which must have +1 for all terms
// in leading diagonal and zero in other terms
if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2){// this singularity is identity matrix so angle = 0
this.set(1,0,0,0);return this;// zero angle, arbitrary axis
}// otherwise this singularity is angle = 180
angle=Math.PI;var xx=(m11+1)/2;var yy=(m22+1)/2;var zz=(m33+1)/2;var xy=(m12+m21)/4;var xz=(m13+m31)/4;var yz=(m23+m32)/4;if(xx>yy&&xx>zz){// m11 is the largest diagonal term
if(xx<epsilon){x=0;y=0.707106781;z=0.707106781;}else {x=Math.sqrt(xx);y=xy/x;z=xz/x;}}else if(yy>zz){// m22 is the largest diagonal term
if(yy<epsilon){x=0.707106781;y=0;z=0.707106781;}else {y=Math.sqrt(yy);x=xy/y;z=yz/y;}}else {// m33 is the largest diagonal term so base result on this
if(zz<epsilon){x=0.707106781;y=0.707106781;z=0;}else {z=Math.sqrt(zz);x=xz/z;y=yz/z;}}this.set(x,y,z,angle);return this;// return 180 deg rotation
}// as we have reached here there are no singularities so we can handle normally
var s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));// used to normalize
if(Math.abs(s)<0.001)s=1;// prevent divide by zero, should not happen if matrix is orthogonal and should be
// caught by singularity test above, but I've left it in just in case
this.x=(m32-m23)/s;this.y=(m13-m31)/s;this.z=(m21-m12)/s;this.w=Math.acos((m11+m22+m33-1)/2);return this;}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));this.w=Math.max(minVal,Math.min(maxVal,this.w));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w;}},{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;this.w=v1.w+(v2.w-v1.w)*alpha;return this;}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];this.w=array[offset+3];return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);this.w=attribute.getW(index);return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this;}},{key:_Symbol$iterator2,value:/*#__PURE__*/_regeneratorRuntime().mark(function value(){return _regeneratorRuntime().wrap(function value$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return this.x;case 2:_context3.next=4;return this.y;case 4:_context3.next=6;return this.z;case 6:_context3.next=8;return this.w;case 8:case"end":return _context3.stop();}},value,this);})}]);return Vector4;}(Symbol.iterator);Vector4.prototype.isVector4=true;/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/var WebGLRenderTarget=/*#__PURE__*/function(_EventDispatcher2){_inherits(WebGLRenderTarget,_EventDispatcher2);var _super2=_createSuper(WebGLRenderTarget);function WebGLRenderTarget(width,height){var _this3;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,WebGLRenderTarget);_this3=_super2.call(this);_this3.width=width;_this3.height=height;_this3.depth=1;_this3.scissor=new Vector4(0,0,width,height);_this3.scissorTest=false;_this3.viewport=new Vector4(0,0,width,height);_this3.texture=new Texture(undefined,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);_this3.texture.isRenderTargetTexture=true;_this3.texture.image={width:width,height:height,depth:1};_this3.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;_this3.texture.internalFormat=options.internalFormat!==undefined?options.internalFormat:null;_this3.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;_this3.depthBuffer=options.depthBuffer!==undefined?options.depthBuffer:true;_this3.stencilBuffer=options.stencilBuffer!==undefined?options.stencilBuffer:false;_this3.depthTexture=options.depthTexture!==undefined?options.depthTexture:null;return _this3;}_createClass(WebGLRenderTarget,[{key:"setTexture",value:function setTexture(texture){texture.image={width:this.width,height:this.height,depth:this.depth};this.texture=texture;}},{key:"setSize",value:function setSize(width,height){var depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(this.width!==width||this.height!==height||this.depth!==depth){this.width=width;this.height=height;this.depth=depth;this.texture.image.width=width;this.texture.image.height=height;this.texture.image.depth=depth;this.dispose();}this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){this.width=source.width;this.height=source.height;this.depth=source.depth;this.viewport.copy(source.viewport);this.texture=source.texture.clone();// ensure image object is not shared, see #20328
this.texture.image=Object.assign({},source.texture.image);this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;return this;}},{key:"dispose",value:function dispose(){this.dispatchEvent({type:'dispose'});}}]);return WebGLRenderTarget;}(EventDispatcher);WebGLRenderTarget.prototype.isWebGLRenderTarget=true;var WebGLMultisampleRenderTarget=/*#__PURE__*/function(_WebGLRenderTarget2){_inherits(WebGLMultisampleRenderTarget,_WebGLRenderTarget2);var _super4=_createSuper(WebGLMultisampleRenderTarget);function WebGLMultisampleRenderTarget(width,height){var _this5;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,WebGLMultisampleRenderTarget);_this5=_super4.call(this,width,height,options);_this5.samples=4;_this5.ignoreDepthForMultisampleCopy=options.ignoreDepth!==undefined?options.ignoreDepth:true;_this5.useRenderToTexture=options.useRenderToTexture!==undefined?options.useRenderToTexture:false;_this5.useRenderbuffer=_this5.useRenderToTexture===false;return _this5;}_createClass(WebGLMultisampleRenderTarget,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(WebGLMultisampleRenderTarget.prototype),"copy",this).call(this,source);this.samples=source.samples;this.useRenderToTexture=source.useRenderToTexture;this.useRenderbuffer=source.useRenderbuffer;return this;}}]);return WebGLMultisampleRenderTarget;}(WebGLRenderTarget);WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget=true;var Quaternion=/*#__PURE__*/function(){function Quaternion(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var w=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,Quaternion);this._x=x;this._y=y;this._z=z;this._w=w;}_createClass(Quaternion,[{key:"x",get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},{key:"y",get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},{key:"z",get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},{key:"w",get:function get(){return this._w;},set:function set(value){this._w=value;this._onChangeCallback();}},{key:"set",value:function set(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this._onChangeCallback();return this;}},{key:"clone",value:function clone(){return new this.constructor(this._x,this._y,this._z,this._w);}},{key:"copy",value:function copy(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this._onChangeCallback();return this;}},{key:"setFromEuler",value:function setFromEuler(euler,update){if(!(euler&&euler.isEuler)){throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');}var x=euler._x,y=euler._y,z=euler._z,order=euler._order;// http://www.mathworks.com/matlabcentral/fileexchange/
// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
//	content/SpinCalc.m
var cos=Math.cos;var sin=Math.sin;var c1=cos(x/2);var c2=cos(y/2);var c3=cos(z/2);var s1=sin(x/2);var s2=sin(y/2);var s3=sin(z/2);switch(order){case'XYZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'YXZ':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'ZXY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'ZYX':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;case'YZX':this._x=s1*c2*c3+c1*s2*s3;this._y=c1*s2*c3+s1*c2*s3;this._z=c1*c2*s3-s1*s2*c3;this._w=c1*c2*c3-s1*s2*s3;break;case'XZY':this._x=s1*c2*c3-c1*s2*s3;this._y=c1*s2*c3-s1*c2*s3;this._z=c1*c2*s3+s1*s2*c3;this._w=c1*c2*c3+s1*s2*s3;break;default:console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: '+order);}if(update!==false)this._onChangeCallback();return this;}},{key:"setFromAxisAngle",value:function setFromAxisAngle(axis,angle){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
// assumes axis is normalized
var halfAngle=angle/2,s=Math.sin(halfAngle);this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(halfAngle);this._onChangeCallback();return this;}},{key:"setFromRotationMatrix",value:function setFromRotationMatrix(m){// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;if(trace>0){var s=0.5/Math.sqrt(trace+1.0);this._w=0.25/s;this._x=(m32-m23)*s;this._y=(m13-m31)*s;this._z=(m21-m12)*s;}else if(m11>m22&&m11>m33){var _s=2.0*Math.sqrt(1.0+m11-m22-m33);this._w=(m32-m23)/_s;this._x=0.25*_s;this._y=(m12+m21)/_s;this._z=(m13+m31)/_s;}else if(m22>m33){var _s2=2.0*Math.sqrt(1.0+m22-m11-m33);this._w=(m13-m31)/_s2;this._x=(m12+m21)/_s2;this._y=0.25*_s2;this._z=(m23+m32)/_s2;}else {var _s3=2.0*Math.sqrt(1.0+m33-m11-m22);this._w=(m21-m12)/_s3;this._x=(m13+m31)/_s3;this._y=(m23+m32)/_s3;this._z=0.25*_s3;}this._onChangeCallback();return this;}},{key:"setFromUnitVectors",value:function setFromUnitVectors(vFrom,vTo){// assumes direction vectors vFrom and vTo are normalized
var r=vFrom.dot(vTo)+1;if(r<Number.EPSILON){// vFrom and vTo point in opposite directions
r=0;if(Math.abs(vFrom.x)>Math.abs(vFrom.z)){this._x=-vFrom.y;this._y=vFrom.x;this._z=0;this._w=r;}else {this._x=0;this._y=-vFrom.z;this._z=vFrom.y;this._w=r;}}else {// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
this._x=vFrom.y*vTo.z-vFrom.z*vTo.y;this._y=vFrom.z*vTo.x-vFrom.x*vTo.z;this._z=vFrom.x*vTo.y-vFrom.y*vTo.x;this._w=r;}return this.normalize();}},{key:"angleTo",value:function angleTo(q){return 2*Math.acos(Math.abs(clamp$1(this.dot(q),-1,1)));}},{key:"rotateTowards",value:function rotateTowards(q,step){var angle=this.angleTo(q);if(angle===0)return this;var t=Math.min(1,step/angle);this.slerp(q,t);return this;}},{key:"identity",value:function identity(){return this.set(0,0,0,1);}},{key:"invert",value:function invert(){// quaternion is assumed to have unit length
return this.conjugate();}},{key:"conjugate",value:function conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this;}},{key:"dot",value:function dot(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w;}},{key:"lengthSq",value:function lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w;}},{key:"length",value:function length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w);}},{key:"normalize",value:function normalize(){var l=this.length();if(l===0){this._x=0;this._y=0;this._z=0;this._w=1;}else {l=1/l;this._x=this._x*l;this._y=this._y*l;this._z=this._z*l;this._w=this._w*l;}this._onChangeCallback();return this;}},{key:"multiply",value:function multiply(q,p){if(p!==undefined){console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');return this.multiplyQuaternions(q,p);}return this.multiplyQuaternions(this,q);}},{key:"premultiply",value:function premultiply(q){return this.multiplyQuaternions(q,this);}},{key:"multiplyQuaternions",value:function multiplyQuaternions(a,b){// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
var qax=a._x,qay=a._y,qaz=a._z,qaw=a._w;var qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;this._onChangeCallback();return this;}},{key:"slerp",value:function slerp(qb,t){if(t===0)return this;if(t===1)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w;// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
var cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(cosHalfTheta<0){this._w=-qb._w;this._x=-qb._x;this._y=-qb._y;this._z=-qb._z;cosHalfTheta=-cosHalfTheta;}else {this.copy(qb);}if(cosHalfTheta>=1.0){this._w=w;this._x=x;this._y=y;this._z=z;return this;}var sqrSinHalfTheta=1.0-cosHalfTheta*cosHalfTheta;if(sqrSinHalfTheta<=Number.EPSILON){var s=1-t;this._w=s*w+t*this._w;this._x=s*x+t*this._x;this._y=s*y+t*this._y;this._z=s*z+t*this._z;this.normalize();this._onChangeCallback();return this;}var sinHalfTheta=Math.sqrt(sqrSinHalfTheta);var halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta);var ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;this._w=w*ratioA+this._w*ratioB;this._x=x*ratioA+this._x*ratioB;this._y=y*ratioA+this._y*ratioB;this._z=z*ratioA+this._z*ratioB;this._onChangeCallback();return this;}},{key:"slerpQuaternions",value:function slerpQuaternions(qa,qb,t){return this.copy(qa).slerp(qb,t);}},{key:"random",value:function random(){// Derived from http://planning.cs.uiuc.edu/node198.html
// Note, this source uses w, x, y, z ordering,
// so we swap the order below.
var u1=Math.random();var sqrt1u1=Math.sqrt(1-u1);var sqrtu1=Math.sqrt(u1);var u2=2*Math.PI*Math.random();var u3=2*Math.PI*Math.random();return this.set(sqrt1u1*Math.cos(u2),sqrtu1*Math.sin(u3),sqrtu1*Math.cos(u3),sqrt1u1*Math.sin(u2));}},{key:"equals",value:function equals(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this._onChangeCallback();return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._w;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index){this._x=attribute.getX(index);this._y=attribute.getY(index);this._z=attribute.getZ(index);this._w=attribute.getW(index);return this;}},{key:"_onChange",value:function _onChange(callback){this._onChangeCallback=callback;return this;}},{key:"_onChangeCallback",value:function _onChangeCallback(){}}],[{key:"slerp",value:function slerp(qa,qb,qm,t){console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');return qm.slerpQuaternions(qa,qb,t);}},{key:"slerpFlat",value:function slerpFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){// fuzz-free, array-based Quaternion SLERP operation
var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3];var x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(t===0){dst[dstOffset+0]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;return;}if(t===1){dst[dstOffset+0]=x1;dst[dstOffset+1]=y1;dst[dstOffset+2]=z1;dst[dstOffset+3]=w1;return;}if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){var s=1-t;var cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;// Skip the Slerp for tiny steps to avoid numeric problems:
if(sqrSin>Number.EPSILON){var sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin;t=Math.sin(t*len)/sin;}var tDir=t*dir;x0=x0*s+x1*tDir;y0=y0*s+y1*tDir;z0=z0*s+z1*tDir;w0=w0*s+w1*tDir;// Normalize in case we just did a lerp:
if(s===1-t){var f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f;y0*=f;z0*=f;w0*=f;}}dst[dstOffset]=x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=w0;}},{key:"multiplyQuaternionsFlat",value:function multiplyQuaternionsFlat(dst,dstOffset,src0,srcOffset0,src1,srcOffset1){var x0=src0[srcOffset0];var y0=src0[srcOffset0+1];var z0=src0[srcOffset0+2];var w0=src0[srcOffset0+3];var x1=src1[srcOffset1];var y1=src1[srcOffset1+1];var z1=src1[srcOffset1+2];var w1=src1[srcOffset1+3];dst[dstOffset]=x0*w1+w0*x1+y0*z1-z0*y1;dst[dstOffset+1]=y0*w1+w0*y1+z0*x1-x0*z1;dst[dstOffset+2]=z0*w1+w0*z1+x0*y1-y0*x1;dst[dstOffset+3]=w0*w1-x0*x1-y0*y1-z0*z1;return dst;}}]);return Quaternion;}();Quaternion.prototype.isQuaternion=true;var Vector3=/*#__PURE__*/function(_Symbol$iterator3){function Vector3(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;_classCallCheck(this,Vector3);this.x=x;this.y=y;this.z=z;}_createClass(Vector3,[{key:"set",value:function set(x,y,z){if(z===undefined)z=this.z;// sprite.scale.set(x,y)
this.x=x;this.y=y;this.z=z;return this;}},{key:"setScalar",value:function setScalar(scalar){this.x=scalar;this.y=scalar;this.z=scalar;return this;}},{key:"setX",value:function setX(x){this.x=x;return this;}},{key:"setY",value:function setY(y){this.y=y;return this;}},{key:"setZ",value:function setZ(z){this.z=z;return this;}},{key:"setComponent",value:function setComponent(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error('index is out of range: '+index);}return this;}},{key:"getComponent",value:function getComponent(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error('index is out of range: '+index);}}},{key:"clone",value:function clone(){return new this.constructor(this.x,this.y,this.z);}},{key:"copy",value:function copy(v){this.x=v.x;this.y=v.y;this.z=v.z;return this;}},{key:"add",value:function add(v,w){if(w!==undefined){console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');return this.addVectors(v,w);}this.x+=v.x;this.y+=v.y;this.z+=v.z;return this;}},{key:"addScalar",value:function addScalar(s){this.x+=s;this.y+=s;this.z+=s;return this;}},{key:"addVectors",value:function addVectors(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this;}},{key:"addScaledVector",value:function addScaledVector(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this;}},{key:"sub",value:function sub(v,w){if(w!==undefined){console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');return this.subVectors(v,w);}this.x-=v.x;this.y-=v.y;this.z-=v.z;return this;}},{key:"subScalar",value:function subScalar(s){this.x-=s;this.y-=s;this.z-=s;return this;}},{key:"subVectors",value:function subVectors(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this;}},{key:"multiply",value:function multiply(v,w){if(w!==undefined){console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');return this.multiplyVectors(v,w);}this.x*=v.x;this.y*=v.y;this.z*=v.z;return this;}},{key:"multiplyScalar",value:function multiplyScalar(scalar){this.x*=scalar;this.y*=scalar;this.z*=scalar;return this;}},{key:"multiplyVectors",value:function multiplyVectors(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this;}},{key:"applyEuler",value:function applyEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');}return this.applyQuaternion(_quaternion$4.setFromEuler(euler));}},{key:"applyAxisAngle",value:function applyAxisAngle(axis,angle){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis,angle));}},{key:"applyMatrix3",value:function applyMatrix3(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[3]*y+e[6]*z;this.y=e[1]*x+e[4]*y+e[7]*z;this.z=e[2]*x+e[5]*y+e[8]*z;return this;}},{key:"applyNormalMatrix",value:function applyNormalMatrix(m){return this.applyMatrix3(m).normalize();}},{key:"applyMatrix4",value:function applyMatrix4(m){var x=this.x,y=this.y,z=this.z;var e=m.elements;var w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w;this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w;this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w;return this;}},{key:"applyQuaternion",value:function applyQuaternion(q){var x=this.x,y=this.y,z=this.z;var qx=q.x,qy=q.y,qz=q.z,qw=q.w;// calculate quat * vector
var ix=qw*x+qy*z-qz*y;var iy=qw*y+qz*x-qx*z;var iz=qw*z+qx*y-qy*x;var iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat
this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy;this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz;this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx;return this;}},{key:"project",value:function project(camera){return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);}},{key:"unproject",value:function unproject(camera){return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);}},{key:"transformDirection",value:function transformDirection(m){// input: THREE.Matrix4 affine matrix
// vector interpreted as a direction
var x=this.x,y=this.y,z=this.z;var e=m.elements;this.x=e[0]*x+e[4]*y+e[8]*z;this.y=e[1]*x+e[5]*y+e[9]*z;this.z=e[2]*x+e[6]*y+e[10]*z;return this.normalize();}},{key:"divide",value:function divide(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this;}},{key:"divideScalar",value:function divideScalar(scalar){return this.multiplyScalar(1/scalar);}},{key:"min",value:function min(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this;}},{key:"max",value:function max(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this;}},{key:"clamp",value:function clamp(min,max){// assumes min < max, componentwise
this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this;}},{key:"clampScalar",value:function clampScalar(minVal,maxVal){this.x=Math.max(minVal,Math.min(maxVal,this.x));this.y=Math.max(minVal,Math.min(maxVal,this.y));this.z=Math.max(minVal,Math.min(maxVal,this.z));return this;}},{key:"clampLength",value:function clampLength(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)));}},{key:"floor",value:function floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this;}},{key:"ceil",value:function ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this;}},{key:"round",value:function round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this;}},{key:"roundToZero",value:function roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this;}},{key:"negate",value:function negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this;}},{key:"dot",value:function dot(v){return this.x*v.x+this.y*v.y+this.z*v.z;}// TODO lengthSquared?
},{key:"lengthSq",value:function lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z;}},{key:"length",value:function length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);}},{key:"manhattanLength",value:function manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z);}},{key:"normalize",value:function normalize(){return this.divideScalar(this.length()||1);}},{key:"setLength",value:function setLength(length){return this.normalize().multiplyScalar(length);}},{key:"lerp",value:function lerp(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this;}},{key:"lerpVectors",value:function lerpVectors(v1,v2,alpha){this.x=v1.x+(v2.x-v1.x)*alpha;this.y=v1.y+(v2.y-v1.y)*alpha;this.z=v1.z+(v2.z-v1.z)*alpha;return this;}},{key:"cross",value:function cross(v,w){if(w!==undefined){console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');return this.crossVectors(v,w);}return this.crossVectors(this,v);}},{key:"crossVectors",value:function crossVectors(a,b){var ax=a.x,ay=a.y,az=a.z;var bx=b.x,by=b.y,bz=b.z;this.x=ay*bz-az*by;this.y=az*bx-ax*bz;this.z=ax*by-ay*bx;return this;}},{key:"projectOnVector",value:function projectOnVector(v){var denominator=v.lengthSq();if(denominator===0)return this.set(0,0,0);var scalar=v.dot(this)/denominator;return this.copy(v).multiplyScalar(scalar);}},{key:"projectOnPlane",value:function projectOnPlane(planeNormal){_vector$c.copy(this).projectOnVector(planeNormal);return this.sub(_vector$c);}},{key:"reflect",value:function reflect(normal){// reflect incident vector off plane orthogonal to normal
// normal is assumed to have unit length
return this.sub(_vector$c.copy(normal).multiplyScalar(2*this.dot(normal)));}},{key:"angleTo",value:function angleTo(v){var denominator=Math.sqrt(this.lengthSq()*v.lengthSq());if(denominator===0)return Math.PI/2;var theta=this.dot(v)/denominator;// clamp, to handle numerical problems
return Math.acos(clamp$1(theta,-1,1));}},{key:"distanceTo",value:function distanceTo(v){return Math.sqrt(this.distanceToSquared(v));}},{key:"distanceToSquared",value:function distanceToSquared(v){var dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz;}},{key:"manhattanDistanceTo",value:function manhattanDistanceTo(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z);}},{key:"setFromSpherical",value:function setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta);}},{key:"setFromSphericalCoords",value:function setFromSphericalCoords(radius,phi,theta){var sinPhiRadius=Math.sin(phi)*radius;this.x=sinPhiRadius*Math.sin(theta);this.y=Math.cos(phi)*radius;this.z=sinPhiRadius*Math.cos(theta);return this;}},{key:"setFromCylindrical",value:function setFromCylindrical(c){return this.setFromCylindricalCoords(c.radius,c.theta,c.y);}},{key:"setFromCylindricalCoords",value:function setFromCylindricalCoords(radius,theta,y){this.x=radius*Math.sin(theta);this.y=y;this.z=radius*Math.cos(theta);return this;}},{key:"setFromMatrixPosition",value:function setFromMatrixPosition(m){var e=m.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this;}},{key:"setFromMatrixScale",value:function setFromMatrixScale(m){var sx=this.setFromMatrixColumn(m,0).length();var sy=this.setFromMatrixColumn(m,1).length();var sz=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=sz;return this;}},{key:"setFromMatrixColumn",value:function setFromMatrixColumn(m,index){return this.fromArray(m.elements,index*4);}},{key:"setFromMatrix3Column",value:function setFromMatrix3Column(m,index){return this.fromArray(m.elements,index*3);}},{key:"equals",value:function equals(v){return v.x===this.x&&v.y===this.y&&v.z===this.z;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array;}},{key:"fromBufferAttribute",value:function fromBufferAttribute(attribute,index,offset){if(offset!==undefined){console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');}this.x=attribute.getX(index);this.y=attribute.getY(index);this.z=attribute.getZ(index);return this;}},{key:"random",value:function random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this;}},{key:"randomDirection",value:function randomDirection(){// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
var u=(Math.random()-0.5)*2;var t=Math.random()*Math.PI*2;var f=Math.sqrt(1-Math.pow(u,2));this.x=f*Math.cos(t);this.y=f*Math.sin(t);this.z=u;return this;}},{key:_Symbol$iterator3,value:/*#__PURE__*/_regeneratorRuntime().mark(function value(){return _regeneratorRuntime().wrap(function value$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.next=2;return this.x;case 2:_context4.next=4;return this.y;case 4:_context4.next=6;return this.z;case 6:case"end":return _context4.stop();}},value,this);})}]);return Vector3;}(Symbol.iterator);Vector3.prototype.isVector3=true;var _vector$c=/*@__PURE__*/new Vector3();var _quaternion$4=/*@__PURE__*/new Quaternion();var Box3=/*#__PURE__*/function(){function Box3(){var min=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3(+Infinity,+Infinity,+Infinity);var max=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3(-Infinity,-Infinity,-Infinity);_classCallCheck(this,Box3);this.min=min;this.max=max;}_createClass(Box3,[{key:"set",value:function set(min,max){this.min.copy(min);this.max.copy(max);return this;}},{key:"setFromArray",value:function setFromArray(array){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var _i10=0,l=array.length;_i10<l;_i10+=3){var x=array[_i10];var y=array[_i10+1];var z=array[_i10+2];if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}},{key:"setFromBufferAttribute",value:function setFromBufferAttribute(attribute){var minX=+Infinity;var minY=+Infinity;var minZ=+Infinity;var maxX=-Infinity;var maxY=-Infinity;var maxZ=-Infinity;for(var _i11=0,l=attribute.count;_i11<l;_i11++){var x=attribute.getX(_i11);var y=attribute.getY(_i11);var z=attribute.getZ(_i11);if(x<minX)minX=x;if(y<minY)minY=y;if(z<minZ)minZ=z;if(x>maxX)maxX=x;if(y>maxY)maxY=y;if(z>maxZ)maxZ=z;}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ);return this;}},{key:"setFromPoints",value:function setFromPoints(points){this.makeEmpty();for(var _i12=0,il=points.length;_i12<il;_i12++){this.expandByPoint(points[_i12]);}return this;}},{key:"setFromCenterAndSize",value:function setFromCenterAndSize(center,size){var halfSize=_vector$b.copy(size).multiplyScalar(0.5);this.min.copy(center).sub(halfSize);this.max.copy(center).add(halfSize);return this;}},{key:"setFromObject",value:function setFromObject(object){var precise=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.makeEmpty();return this.expandByObject(object,precise);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(box){this.min.copy(box.min);this.max.copy(box.max);return this;}},{key:"makeEmpty",value:function makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this;}},{key:"isEmpty",value:function isEmpty(){// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z;}},{key:"getCenter",value:function getCenter(target){return this.isEmpty()?target.set(0,0,0):target.addVectors(this.min,this.max).multiplyScalar(0.5);}},{key:"getSize",value:function getSize(target){return this.isEmpty()?target.set(0,0,0):target.subVectors(this.max,this.min);}},{key:"expandByPoint",value:function expandByPoint(point){this.min.min(point);this.max.max(point);return this;}},{key:"expandByVector",value:function expandByVector(vector){this.min.sub(vector);this.max.add(vector);return this;}},{key:"expandByScalar",value:function expandByScalar(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this;}},{key:"expandByObject",value:function expandByObject(object){var precise=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// Computes the world-axis-aligned bounding box of an object (including its children),
// accounting for both the object's, and children's, world transforms
object.updateWorldMatrix(false,false);var geometry=object.geometry;if(geometry!==undefined){if(precise&&geometry.attributes!=undefined&&geometry.attributes.position!==undefined){var position=geometry.attributes.position;for(var _i13=0,l=position.count;_i13<l;_i13++){_vector$b.fromBufferAttribute(position,_i13).applyMatrix4(object.matrixWorld);this.expandByPoint(_vector$b);}}else {if(geometry.boundingBox===null){geometry.computeBoundingBox();}_box$3.copy(geometry.boundingBox);_box$3.applyMatrix4(object.matrixWorld);this.union(_box$3);}}var children=object.children;for(var _i14=0,_l=children.length;_i14<_l;_i14++){this.expandByObject(children[_i14],precise);}return this;}},{key:"containsPoint",value:function containsPoint(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?false:true;}},{key:"containsBox",value:function containsBox(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z;}},{key:"getParameter",value:function getParameter(point,target){// This can potentially have a divide by zero if the box
// has a size dimension of 0.
return target.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z));}},{key:"intersectsBox",value:function intersectsBox(box){// using 6 splitting planes to rule out intersections.
return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?false:true;}},{key:"intersectsSphere",value:function intersectsSphere(sphere){// Find the point on the AABB closest to the sphere center.
this.clampPoint(sphere.center,_vector$b);// If that point is inside the sphere, the AABB and sphere intersect.
return _vector$b.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius;}},{key:"intersectsPlane",value:function intersectsPlane(plane){// We compute the minimum and maximum dot product values. If those values
// are on the same side (back or front) of the plane, then there is no intersection.
var min,max;if(plane.normal.x>0){min=plane.normal.x*this.min.x;max=plane.normal.x*this.max.x;}else {min=plane.normal.x*this.max.x;max=plane.normal.x*this.min.x;}if(plane.normal.y>0){min+=plane.normal.y*this.min.y;max+=plane.normal.y*this.max.y;}else {min+=plane.normal.y*this.max.y;max+=plane.normal.y*this.min.y;}if(plane.normal.z>0){min+=plane.normal.z*this.min.z;max+=plane.normal.z*this.max.z;}else {min+=plane.normal.z*this.max.z;max+=plane.normal.z*this.min.z;}return min<=-plane.constant&&max>=-plane.constant;}},{key:"intersectsTriangle",value:function intersectsTriangle(triangle){if(this.isEmpty()){return false;}// compute box center and extents
this.getCenter(_center);_extents.subVectors(this.max,_center);// translate triangle to aabb origin
_v0$2.subVectors(triangle.a,_center);_v1$7.subVectors(triangle.b,_center);_v2$3.subVectors(triangle.c,_center);// compute edge vectors for triangle
_f0.subVectors(_v1$7,_v0$2);_f1.subVectors(_v2$3,_v1$7);_f2.subVectors(_v0$2,_v2$3);// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
var axes=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents)){return false;}// test 3 face normals from the aabb
axes=[1,0,0,0,1,0,0,0,1];if(!satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents)){return false;}// finally testing the face normal of the triangle
// use already existing triangle edge vectors here
_triangleNormal.crossVectors(_f0,_f1);axes=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(axes,_v0$2,_v1$7,_v2$3,_extents);}},{key:"clampPoint",value:function clampPoint(point,target){return target.copy(point).clamp(this.min,this.max);}},{key:"distanceToPoint",value:function distanceToPoint(point){var clampedPoint=_vector$b.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length();}},{key:"getBoundingSphere",value:function getBoundingSphere(target){this.getCenter(target.center);target.radius=this.getSize(_vector$b).length()*0.5;return target;}},{key:"intersect",value:function intersect(box){this.min.max(box.min);this.max.min(box.max);// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
if(this.isEmpty())this.makeEmpty();return this;}},{key:"union",value:function union(box){this.min.min(box.min);this.max.max(box.max);return this;}},{key:"applyMatrix4",value:function applyMatrix4(matrix){// transform of empty box is an empty box.
if(this.isEmpty())return this;// NOTE: I am using a binary pattern to specify all 2^3 combinations below
_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);// 000
_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);// 001
_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix);// 010
_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);// 011
_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);// 100
_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);// 101
_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);// 110
_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);// 111
this.setFromPoints(_points);return this;}},{key:"translate",value:function translate(offset){this.min.add(offset);this.max.add(offset);return this;}},{key:"equals",value:function equals(box){return box.min.equals(this.min)&&box.max.equals(this.max);}}]);return Box3;}();Box3.prototype.isBox3=true;var _points=[/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3(),/*@__PURE__*/new Vector3()];var _vector$b=/*@__PURE__*/new Vector3();var _box$3=/*@__PURE__*/new Box3();// triangle centered vertices
var _v0$2=/*@__PURE__*/new Vector3();var _v1$7=/*@__PURE__*/new Vector3();var _v2$3=/*@__PURE__*/new Vector3();// triangle edge vectors
var _f0=/*@__PURE__*/new Vector3();var _f1=/*@__PURE__*/new Vector3();var _f2=/*@__PURE__*/new Vector3();var _center=/*@__PURE__*/new Vector3();var _extents=/*@__PURE__*/new Vector3();var _triangleNormal=/*@__PURE__*/new Vector3();var _testAxis=/*@__PURE__*/new Vector3();function satForAxes(axes,v0,v1,v2,extents){for(var _i15=0,j=axes.length-3;_i15<=j;_i15+=3){_testAxis.fromArray(axes,_i15);// project the aabb onto the seperating axis
var r=extents.x*Math.abs(_testAxis.x)+extents.y*Math.abs(_testAxis.y)+extents.z*Math.abs(_testAxis.z);// project all 3 vertices of the triangle onto the seperating axis
var p0=v0.dot(_testAxis);var p1=v1.dot(_testAxis);var p2=v2.dot(_testAxis);// actual test, basically see if either of the most extreme of the triangle points intersects r
if(Math.max(-Math.max(p0,p1,p2),Math.min(p0,p1,p2))>r){// points of the projected triangle are outside the projected half-length of the aabb
// the axis is seperating and we can exit
return false;}}return true;}var _box$2=/*@__PURE__*/new Box3();var _v1$6=/*@__PURE__*/new Vector3();var _toFarthestPoint=/*@__PURE__*/new Vector3();var _toPoint=/*@__PURE__*/new Vector3();var Sphere=/*#__PURE__*/function(){function Sphere(){var center=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var radius=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;_classCallCheck(this,Sphere);this.center=center;this.radius=radius;}_createClass(Sphere,[{key:"set",value:function set(center,radius){this.center.copy(center);this.radius=radius;return this;}},{key:"setFromPoints",value:function setFromPoints(points,optionalCenter){var center=this.center;if(optionalCenter!==undefined){center.copy(optionalCenter);}else {_box$2.setFromPoints(points).getCenter(center);}var maxRadiusSq=0;for(var _i16=0,il=points.length;_i16<il;_i16++){maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[_i16]));}this.radius=Math.sqrt(maxRadiusSq);return this;}},{key:"copy",value:function copy(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this;}},{key:"isEmpty",value:function isEmpty(){return this.radius<0;}},{key:"makeEmpty",value:function makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this;}},{key:"containsPoint",value:function containsPoint(point){return point.distanceToSquared(this.center)<=this.radius*this.radius;}},{key:"distanceToPoint",value:function distanceToPoint(point){return point.distanceTo(this.center)-this.radius;}},{key:"intersectsSphere",value:function intersectsSphere(sphere){var radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum;}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsSphere(this);}},{key:"intersectsPlane",value:function intersectsPlane(plane){return Math.abs(plane.distanceToPoint(this.center))<=this.radius;}},{key:"clampPoint",value:function clampPoint(point,target){var deltaLengthSq=this.center.distanceToSquared(point);target.copy(point);if(deltaLengthSq>this.radius*this.radius){target.sub(this.center).normalize();target.multiplyScalar(this.radius).add(this.center);}return target;}},{key:"getBoundingBox",value:function getBoundingBox(target){if(this.isEmpty()){// Empty sphere produces empty bounding box
target.makeEmpty();return target;}target.set(this.center,this.center);target.expandByScalar(this.radius);return target;}},{key:"applyMatrix4",value:function applyMatrix4(matrix){this.center.applyMatrix4(matrix);this.radius=this.radius*matrix.getMaxScaleOnAxis();return this;}},{key:"translate",value:function translate(offset){this.center.add(offset);return this;}},{key:"expandByPoint",value:function expandByPoint(point){// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
_toPoint.subVectors(point,this.center);var lengthSq=_toPoint.lengthSq();if(lengthSq>this.radius*this.radius){var length=Math.sqrt(lengthSq);var missingRadiusHalf=(length-this.radius)*0.5;// Nudge this sphere towards the target point. Add half the missing distance to radius,
// and the other half to position. This gives a tighter enclosure, instead of if
// the whole missing distance were just added to radius.
this.center.add(_toPoint.multiplyScalar(missingRadiusHalf/length));this.radius+=missingRadiusHalf;}return this;}},{key:"union",value:function union(sphere){// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
// To enclose another sphere into this sphere, we only need to enclose two points:
// 1) Enclose the farthest point on the other sphere into this sphere.
// 2) Enclose the opposite point of the farthest point into this sphere.
if(this.center.equals(sphere.center)===true){_toFarthestPoint.set(0,0,1).multiplyScalar(sphere.radius);}else {_toFarthestPoint.subVectors(sphere.center,this.center).normalize().multiplyScalar(sphere.radius);}this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));return this;}},{key:"equals",value:function equals(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}}]);return Sphere;}();var _vector$a=/*@__PURE__*/new Vector3();var _segCenter=/*@__PURE__*/new Vector3();var _segDir=/*@__PURE__*/new Vector3();var _diff=/*@__PURE__*/new Vector3();var _edge1=/*@__PURE__*/new Vector3();var _edge2=/*@__PURE__*/new Vector3();var _normal$1=/*@__PURE__*/new Vector3();var Ray=/*#__PURE__*/function(){function Ray(){var origin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var direction=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3(0,0,-1);_classCallCheck(this,Ray);this.origin=origin;this.direction=direction;}_createClass(Ray,[{key:"set",value:function set(origin,direction){this.origin.copy(origin);this.direction.copy(direction);return this;}},{key:"copy",value:function copy(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this;}},{key:"at",value:function at(t,target){return target.copy(this.direction).multiplyScalar(t).add(this.origin);}},{key:"lookAt",value:function lookAt(v){this.direction.copy(v).sub(this.origin).normalize();return this;}},{key:"recast",value:function recast(t){this.origin.copy(this.at(t,_vector$a));return this;}},{key:"closestPointToPoint",value:function closestPointToPoint(point,target){target.subVectors(point,this.origin);var directionDistance=target.dot(this.direction);if(directionDistance<0){return target.copy(this.origin);}return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);}},{key:"distanceToPoint",value:function distanceToPoint(point){return Math.sqrt(this.distanceSqToPoint(point));}},{key:"distanceSqToPoint",value:function distanceSqToPoint(point){var directionDistance=_vector$a.subVectors(point,this.origin).dot(this.direction);// point behind the ray
if(directionDistance<0){return this.origin.distanceToSquared(point);}_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return _vector$a.distanceToSquared(point);}},{key:"distanceSqToSegment",value:function distanceSqToSegment(v0,v1,optionalPointOnRay,optionalPointOnSegment){// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
// It returns the min distance between the ray and the segment
// defined by v0 and v1
// It can also set two optional targets :
// - The closest point on the ray
// - The closest point on the segment
_segCenter.copy(v0).add(v1).multiplyScalar(0.5);_segDir.copy(v1).sub(v0).normalize();_diff.copy(this.origin).sub(_segCenter);var segExtent=v0.distanceTo(v1)*0.5;var a01=-this.direction.dot(_segDir);var b0=_diff.dot(this.direction);var b1=-_diff.dot(_segDir);var c=_diff.lengthSq();var det=Math.abs(1-a01*a01);var s0,s1,sqrDist,extDet;if(det>0){// The ray and segment are not parallel.
s0=a01*b1-b0;s1=a01*b0-b1;extDet=segExtent*det;if(s0>=0){if(s1>=-extDet){if(s1<=extDet){// region 0
// Minimum at interior points of ray and segment.
var invDet=1/det;s0*=invDet;s1*=invDet;sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c;}else {// region 1
s1=segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else {// region 5
s1=-segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}else {if(s1<=-extDet){// region 4
s0=Math.max(0,-(-a01*segExtent+b0));s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}else if(s1<=extDet){// region 3
s0=0;s1=Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=s1*(s1+2*b1)+c;}else {// region 2
s0=Math.max(0,-(a01*segExtent+b0));s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent);sqrDist=-s0*s0+s1*(s1+2*b1)+c;}}}else {// Ray and segment are parallel.
s1=a01>0?-segExtent:segExtent;s0=Math.max(0,-(a01*s1+b0));sqrDist=-s0*s0+s1*(s1+2*b1)+c;}if(optionalPointOnRay){optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);}if(optionalPointOnSegment){optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);}return sqrDist;}},{key:"intersectSphere",value:function intersectSphere(sphere,target){_vector$a.subVectors(sphere.center,this.origin);var tca=_vector$a.dot(this.direction);var d2=_vector$a.dot(_vector$a)-tca*tca;var radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;var thc=Math.sqrt(radius2-d2);// t0 = first intersect point - entrance on front of sphere
var t0=tca-thc;// t1 = second intersect point - exit point on back of sphere
var t1=tca+thc;// test to see if both t0 and t1 are behind the ray - if so, return null
if(t0<0&&t1<0)return null;// test to see if t0 is behind the ray:
// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
// in order to always return an intersect point that is in front of the ray.
if(t0<0)return this.at(t1,target);// else t0 is in front of the ray, so return the first collision point scaled by t0
return this.at(t0,target);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){return this.distanceSqToPoint(sphere.center)<=sphere.radius*sphere.radius;}},{key:"distanceToPlane",value:function distanceToPlane(plane){var denominator=plane.normal.dot(this.direction);if(denominator===0){// line is coplanar, return origin
if(plane.distanceToPoint(this.origin)===0){return 0;}// Null is preferable to undefined since undefined means.... it is undefined
return null;}var t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;// Return if the ray never intersects the plane
return t>=0?t:null;}},{key:"intersectPlane",value:function intersectPlane(plane,target){var t=this.distanceToPlane(plane);if(t===null){return null;}return this.at(t,target);}},{key:"intersectsPlane",value:function intersectsPlane(plane){// check if the ray lies on the plane first
var distToPoint=plane.distanceToPoint(this.origin);if(distToPoint===0){return true;}var denominator=plane.normal.dot(this.direction);if(denominator*distToPoint<0){return true;}// ray origin is behind the plane (and is pointing behind it)
return false;}},{key:"intersectBox",value:function intersectBox(box,target){var tmin,tmax,tymin,tymax,tzmin,tzmax;var invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z;var origin=this.origin;if(invdirx>=0){tmin=(box.min.x-origin.x)*invdirx;tmax=(box.max.x-origin.x)*invdirx;}else {tmin=(box.max.x-origin.x)*invdirx;tmax=(box.min.x-origin.x)*invdirx;}if(invdiry>=0){tymin=(box.min.y-origin.y)*invdiry;tymax=(box.max.y-origin.y)*invdiry;}else {tymin=(box.max.y-origin.y)*invdiry;tymax=(box.min.y-origin.y)*invdiry;}if(tmin>tymax||tymin>tmax)return null;// These lines also handle the case where tmin or tmax is NaN
// (result of 0 * Infinity). x !== x returns true if x is NaN
if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;if(invdirz>=0){tzmin=(box.min.z-origin.z)*invdirz;tzmax=(box.max.z-origin.z)*invdirz;}else {tzmin=(box.max.z-origin.z)*invdirz;tzmax=(box.min.z-origin.z)*invdirz;}if(tmin>tzmax||tzmin>tmax)return null;if(tzmin>tmin||tmin!==tmin)tmin=tzmin;if(tzmax<tmax||tmax!==tmax)tmax=tzmax;//return point closest to the ray (positive side)
if(tmax<0)return null;return this.at(tmin>=0?tmin:tmax,target);}},{key:"intersectsBox",value:function intersectsBox(box){return this.intersectBox(box,_vector$a)!==null;}},{key:"intersectTriangle",value:function intersectTriangle(a,b,c,backfaceCulling,target){// Compute the offset origin, edges, and normal.
// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
_edge1.subVectors(b,a);_edge2.subVectors(c,a);_normal$1.crossVectors(_edge1,_edge2);// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
var DdN=this.direction.dot(_normal$1);var sign;if(DdN>0){if(backfaceCulling)return null;sign=1;}else if(DdN<0){sign=-1;DdN=-DdN;}else {return null;}_diff.subVectors(this.origin,a);var DdQxE2=sign*this.direction.dot(_edge2.crossVectors(_diff,_edge2));// b1 < 0, no intersection
if(DdQxE2<0){return null;}var DdE1xQ=sign*this.direction.dot(_edge1.cross(_diff));// b2 < 0, no intersection
if(DdE1xQ<0){return null;}// b1+b2 > 1, no intersection
if(DdQxE2+DdE1xQ>DdN){return null;}// Line intersects triangle, check if ray does.
var QdN=-sign*_diff.dot(_normal$1);// t < 0, no intersection
if(QdN<0){return null;}// Ray intersects triangle.
return this.at(QdN/DdN,target);}},{key:"applyMatrix4",value:function applyMatrix4(matrix4){this.origin.applyMatrix4(matrix4);this.direction.transformDirection(matrix4);return this;}},{key:"equals",value:function equals(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}}]);return Ray;}();var Matrix4=/*#__PURE__*/function(){function Matrix4(){_classCallCheck(this,Matrix4);this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');}}_createClass(Matrix4,[{key:"set",value:function set(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this;}},{key:"identity",value:function identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this;}},{key:"clone",value:function clone(){return new Matrix4().fromArray(this.elements);}},{key:"copy",value:function copy(m){var te=this.elements;var me=m.elements;te[0]=me[0];te[1]=me[1];te[2]=me[2];te[3]=me[3];te[4]=me[4];te[5]=me[5];te[6]=me[6];te[7]=me[7];te[8]=me[8];te[9]=me[9];te[10]=me[10];te[11]=me[11];te[12]=me[12];te[13]=me[13];te[14]=me[14];te[15]=me[15];return this;}},{key:"copyPosition",value:function copyPosition(m){var te=this.elements,me=m.elements;te[12]=me[12];te[13]=me[13];te[14]=me[14];return this;}},{key:"setFromMatrix3",value:function setFromMatrix3(m){var me=m.elements;this.set(me[0],me[3],me[6],0,me[1],me[4],me[7],0,me[2],me[5],me[8],0,0,0,0,1);return this;}},{key:"extractBasis",value:function extractBasis(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this;}},{key:"makeBasis",value:function makeBasis(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this;}},{key:"extractRotation",value:function extractRotation(m){// this method does not support reflection matrices
var te=this.elements;var me=m.elements;var scaleX=1/_v1$5.setFromMatrixColumn(m,0).length();var scaleY=1/_v1$5.setFromMatrixColumn(m,1).length();var scaleZ=1/_v1$5.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[3]=0;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[7]=0;te[8]=me[8]*scaleZ;te[9]=me[9]*scaleZ;te[10]=me[10]*scaleZ;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}},{key:"makeRotationFromEuler",value:function makeRotationFromEuler(euler){if(!(euler&&euler.isEuler)){console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');}var te=this.elements;var x=euler.x,y=euler.y,z=euler.z;var a=Math.cos(x),b=Math.sin(x);var c=Math.cos(y),d=Math.sin(y);var e=Math.cos(z),f=Math.sin(z);if(euler.order==='XYZ'){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e;te[4]=-c*f;te[8]=d;te[1]=af+be*d;te[5]=ae-bf*d;te[9]=-b*c;te[2]=bf-ae*d;te[6]=be+af*d;te[10]=a*c;}else if(euler.order==='YXZ'){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b;te[4]=de*b-cf;te[8]=a*d;te[1]=a*f;te[5]=a*e;te[9]=-b;te[2]=cf*b-de;te[6]=df+ce*b;te[10]=a*c;}else if(euler.order==='ZXY'){var _ce=c*e,_cf=c*f,_de=d*e,_df=d*f;te[0]=_ce-_df*b;te[4]=-a*f;te[8]=_de+_cf*b;te[1]=_cf+_de*b;te[5]=a*e;te[9]=_df-_ce*b;te[2]=-a*d;te[6]=b;te[10]=a*c;}else if(euler.order==='ZYX'){var _ae=a*e,_af=a*f,_be=b*e,_bf=b*f;te[0]=c*e;te[4]=_be*d-_af;te[8]=_ae*d+_bf;te[1]=c*f;te[5]=_bf*d+_ae;te[9]=_af*d-_be;te[2]=-d;te[6]=b*c;te[10]=a*c;}else if(euler.order==='YZX'){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e;te[4]=bd-ac*f;te[8]=bc*f+ad;te[1]=f;te[5]=a*e;te[9]=-b*e;te[2]=-d*e;te[6]=ad*f+bc;te[10]=ac-bd*f;}else if(euler.order==='XZY'){var _ac=a*c,_ad=a*d,_bc=b*c,_bd=b*d;te[0]=c*e;te[4]=-f;te[8]=d*e;te[1]=_ac*f+_bd;te[5]=a*e;te[9]=_ad*f-_bc;te[2]=_bc*f-_ad;te[6]=b*e;te[10]=_bd*f+_ac;}// bottom row
te[3]=0;te[7]=0;te[11]=0;// last column
te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this;}},{key:"makeRotationFromQuaternion",value:function makeRotationFromQuaternion(q){return this.compose(_zero,q,_one);}},{key:"lookAt",value:function lookAt(eye,target,up){var te=this.elements;_z.subVectors(eye,target);if(_z.lengthSq()===0){// eye and target are in the same position
_z.z=1;}_z.normalize();_x.crossVectors(up,_z);if(_x.lengthSq()===0){// up and z are parallel
if(Math.abs(up.z)===1){_z.x+=0.0001;}else {_z.z+=0.0001;}_z.normalize();_x.crossVectors(up,_z);}_x.normalize();_y.crossVectors(_z,_x);te[0]=_x.x;te[4]=_y.x;te[8]=_z.x;te[1]=_x.y;te[5]=_y.y;te[9]=_z.y;te[2]=_x.z;te[6]=_y.z;te[10]=_z.z;return this;}},{key:"multiply",value:function multiply(m,n){if(n!==undefined){console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');return this.multiplyMatrices(m,n);}return this.multiplyMatrices(this,m);}},{key:"premultiply",value:function premultiply(m){return this.multiplyMatrices(m,this);}},{key:"multiplyMatrices",value:function multiplyMatrices(a,b){var ae=a.elements;var be=b.elements;var te=this.elements;var a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12];var a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13];var a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14];var a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15];var b11=be[0],b12=be[4],b13=be[8],b14=be[12];var b21=be[1],b22=be[5],b23=be[9],b24=be[13];var b31=be[2],b32=be[6],b33=be[10],b34=be[14];var b41=be[3],b42=be[7],b43=be[11],b44=be[15];te[0]=a11*b11+a12*b21+a13*b31+a14*b41;te[4]=a11*b12+a12*b22+a13*b32+a14*b42;te[8]=a11*b13+a12*b23+a13*b33+a14*b43;te[12]=a11*b14+a12*b24+a13*b34+a14*b44;te[1]=a21*b11+a22*b21+a23*b31+a24*b41;te[5]=a21*b12+a22*b22+a23*b32+a24*b42;te[9]=a21*b13+a22*b23+a23*b33+a24*b43;te[13]=a21*b14+a22*b24+a23*b34+a24*b44;te[2]=a31*b11+a32*b21+a33*b31+a34*b41;te[6]=a31*b12+a32*b22+a33*b32+a34*b42;te[10]=a31*b13+a32*b23+a33*b33+a34*b43;te[14]=a31*b14+a32*b24+a33*b34+a34*b44;te[3]=a41*b11+a42*b21+a43*b31+a44*b41;te[7]=a41*b12+a42*b22+a43*b32+a44*b42;te[11]=a41*b13+a42*b23+a43*b33+a44*b43;te[15]=a41*b14+a42*b24+a43*b34+a44*b44;return this;}},{key:"multiplyScalar",value:function multiplyScalar(s){var te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this;}},{key:"determinant",value:function determinant(){var te=this.elements;var n11=te[0],n12=te[4],n13=te[8],n14=te[12];var n21=te[1],n22=te[5],n23=te[9],n24=te[13];var n31=te[2],n32=te[6],n33=te[10],n34=te[14];var n41=te[3],n42=te[7],n43=te[11],n44=te[15];//TODO: make this more efficient
//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31);}},{key:"transpose",value:function transpose(){var te=this.elements;var tmp;tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];te[11]=te[14];te[14]=tmp;return this;}},{key:"setPosition",value:function setPosition(x,y,z){var te=this.elements;if(x.isVector3){te[12]=x.x;te[13]=x.y;te[14]=x.z;}else {te[12]=x;te[13]=y;te[14]=z;}return this;}},{key:"invert",value:function invert(){// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
var te=this.elements,n11=te[0],n21=te[1],n31=te[2],n41=te[3],n12=te[4],n22=te[5],n32=te[6],n42=te[7],n13=te[8],n23=te[9],n33=te[10],n43=te[11],n14=te[12],n24=te[13],n34=te[14],n44=te[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34;var det=n11*t11+n21*t12+n31*t13+n41*t14;if(det===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);var detInv=1/det;te[0]=t11*detInv;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv;te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv;te[4]=t12*detInv;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv;te[8]=t13*detInv;te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv;te[12]=t14*detInv;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv;te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv;return this;}},{key:"scale",value:function scale(v){var te=this.elements;var x=v.x,y=v.y,z=v.z;te[0]*=x;te[4]*=y;te[8]*=z;te[1]*=x;te[5]*=y;te[9]*=z;te[2]*=x;te[6]*=y;te[10]*=z;te[3]*=x;te[7]*=y;te[11]*=z;return this;}},{key:"getMaxScaleOnAxis",value:function getMaxScaleOnAxis(){var te=this.elements;var scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2];var scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6];var scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq));}},{key:"makeTranslation",value:function makeTranslation(x,y,z){this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this;}},{key:"makeRotationX",value:function makeRotationX(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);return this;}},{key:"makeRotationY",value:function makeRotationY(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);return this;}},{key:"makeRotationZ",value:function makeRotationZ(theta){var c=Math.cos(theta),s=Math.sin(theta);this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return this;}},{key:"makeRotationAxis",value:function makeRotationAxis(axis,angle){// Based on http://www.gamedev.net/reference/articles/article1199.asp
var c=Math.cos(angle);var s=Math.sin(angle);var t=1-c;var x=axis.x,y=axis.y,z=axis.z;var tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1);return this;}},{key:"makeScale",value:function makeScale(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this;}},{key:"makeShear",value:function makeShear(xy,xz,yx,yz,zx,zy){this.set(1,yx,zx,0,xy,1,zy,0,xz,yz,1,0,0,0,0,1);return this;}},{key:"compose",value:function compose(position,quaternion,scale){var te=this.elements;var x=quaternion._x,y=quaternion._y,z=quaternion._z,w=quaternion._w;var x2=x+x,y2=y+y,z2=z+z;var xx=x*x2,xy=x*y2,xz=x*z2;var yy=y*y2,yz=y*z2,zz=z*z2;var wx=w*x2,wy=w*y2,wz=w*z2;var sx=scale.x,sy=scale.y,sz=scale.z;te[0]=(1-(yy+zz))*sx;te[1]=(xy+wz)*sx;te[2]=(xz-wy)*sx;te[3]=0;te[4]=(xy-wz)*sy;te[5]=(1-(xx+zz))*sy;te[6]=(yz+wx)*sy;te[7]=0;te[8]=(xz+wy)*sz;te[9]=(yz-wx)*sz;te[10]=(1-(xx+yy))*sz;te[11]=0;te[12]=position.x;te[13]=position.y;te[14]=position.z;te[15]=1;return this;}},{key:"decompose",value:function decompose(position,quaternion,scale){var te=this.elements;var sx=_v1$5.set(te[0],te[1],te[2]).length();var sy=_v1$5.set(te[4],te[5],te[6]).length();var sz=_v1$5.set(te[8],te[9],te[10]).length();// if determine is negative, we need to invert one scale
var det=this.determinant();if(det<0)sx=-sx;position.x=te[12];position.y=te[13];position.z=te[14];// scale the rotation part
_m1$2.copy(this);var invSX=1/sx;var invSY=1/sy;var invSZ=1/sz;_m1$2.elements[0]*=invSX;_m1$2.elements[1]*=invSX;_m1$2.elements[2]*=invSX;_m1$2.elements[4]*=invSY;_m1$2.elements[5]*=invSY;_m1$2.elements[6]*=invSY;_m1$2.elements[8]*=invSZ;_m1$2.elements[9]*=invSZ;_m1$2.elements[10]*=invSZ;quaternion.setFromRotationMatrix(_m1$2);scale.x=sx;scale.y=sy;scale.z=sz;return this;}},{key:"makePerspective",value:function makePerspective(left,right,top,bottom,near,far){if(far===undefined){console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');}var te=this.elements;var x=2*near/(right-left);var y=2*near/(top-bottom);var a=(right+left)/(right-left);var b=(top+bottom)/(top-bottom);var c=-(far+near)/(far-near);var d=-2*far*near/(far-near);te[0]=x;te[4]=0;te[8]=a;te[12]=0;te[1]=0;te[5]=y;te[9]=b;te[13]=0;te[2]=0;te[6]=0;te[10]=c;te[14]=d;te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this;}},{key:"makeOrthographic",value:function makeOrthographic(left,right,top,bottom,near,far){var te=this.elements;var w=1.0/(right-left);var h=1.0/(top-bottom);var p=1.0/(far-near);var x=(right+left)*w;var y=(top+bottom)*h;var z=(far+near)*p;te[0]=2*w;te[4]=0;te[8]=0;te[12]=-x;te[1]=0;te[5]=2*h;te[9]=0;te[13]=-y;te[2]=0;te[6]=0;te[10]=-2*p;te[14]=-z;te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this;}},{key:"equals",value:function equals(matrix){var te=this.elements;var me=matrix.elements;for(var _i17=0;_i17<16;_i17++){if(te[_i17]!==me[_i17])return false;}return true;}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;for(var _i18=0;_i18<16;_i18++){this.elements[_i18]=array[_i18+offset];}return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array;}}]);return Matrix4;}();Matrix4.prototype.isMatrix4=true;var _v1$5=/*@__PURE__*/new Vector3();var _m1$2=/*@__PURE__*/new Matrix4();var _zero=/*@__PURE__*/new Vector3(0,0,0);var _one=/*@__PURE__*/new Vector3(1,1,1);var _x=/*@__PURE__*/new Vector3();var _y=/*@__PURE__*/new Vector3();var _z=/*@__PURE__*/new Vector3();var _matrix$1=/*@__PURE__*/new Matrix4();var _quaternion$3=/*@__PURE__*/new Quaternion();var Euler=/*#__PURE__*/function(){function Euler(){var x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var order=arguments.length>3&&arguments[3]!==undefined?arguments[3]:Euler.DefaultOrder;_classCallCheck(this,Euler);this._x=x;this._y=y;this._z=z;this._order=order;}_createClass(Euler,[{key:"x",get:function get(){return this._x;},set:function set(value){this._x=value;this._onChangeCallback();}},{key:"y",get:function get(){return this._y;},set:function set(value){this._y=value;this._onChangeCallback();}},{key:"z",get:function get(){return this._z;},set:function set(value){this._z=value;this._onChangeCallback();}},{key:"order",get:function get(){return this._order;},set:function set(value){this._order=value;this._onChangeCallback();}},{key:"set",value:function set(x,y,z){var order=arguments.length>3&&arguments[3]!==undefined?arguments[3]:this._order;this._x=x;this._y=y;this._z=z;this._order=order;this._onChangeCallback();return this;}},{key:"clone",value:function clone(){return new this.constructor(this._x,this._y,this._z,this._order);}},{key:"copy",value:function copy(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this._onChangeCallback();return this;}},{key:"setFromRotationMatrix",value:function setFromRotationMatrix(m){var order=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._order;var update=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
var te=m.elements;var m11=te[0],m12=te[4],m13=te[8];var m21=te[1],m22=te[5],m23=te[9];var m31=te[2],m32=te[6],m33=te[10];switch(order){case'XYZ':this._y=Math.asin(clamp$1(m13,-1,1));if(Math.abs(m13)<0.9999999){this._x=Math.atan2(-m23,m33);this._z=Math.atan2(-m12,m11);}else {this._x=Math.atan2(m32,m22);this._z=0;}break;case'YXZ':this._x=Math.asin(-clamp$1(m23,-1,1));if(Math.abs(m23)<0.9999999){this._y=Math.atan2(m13,m33);this._z=Math.atan2(m21,m22);}else {this._y=Math.atan2(-m31,m11);this._z=0;}break;case'ZXY':this._x=Math.asin(clamp$1(m32,-1,1));if(Math.abs(m32)<0.9999999){this._y=Math.atan2(-m31,m33);this._z=Math.atan2(-m12,m22);}else {this._y=0;this._z=Math.atan2(m21,m11);}break;case'ZYX':this._y=Math.asin(-clamp$1(m31,-1,1));if(Math.abs(m31)<0.9999999){this._x=Math.atan2(m32,m33);this._z=Math.atan2(m21,m11);}else {this._x=0;this._z=Math.atan2(-m12,m22);}break;case'YZX':this._z=Math.asin(clamp$1(m21,-1,1));if(Math.abs(m21)<0.9999999){this._x=Math.atan2(-m23,m22);this._y=Math.atan2(-m31,m11);}else {this._x=0;this._y=Math.atan2(m13,m33);}break;case'XZY':this._z=Math.asin(-clamp$1(m12,-1,1));if(Math.abs(m12)<0.9999999){this._x=Math.atan2(m32,m22);this._y=Math.atan2(m13,m11);}else {this._x=Math.atan2(-m23,m33);this._y=0;}break;default:console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: '+order);}this._order=order;if(update===true)this._onChangeCallback();return this;}},{key:"setFromQuaternion",value:function setFromQuaternion(q,order,update){_matrix$1.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(_matrix$1,order,update);}},{key:"setFromVector3",value:function setFromVector3(v){var order=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._order;return this.set(v.x,v.y,v.z,order);}},{key:"reorder",value:function reorder(newOrder){// WARNING: this discards revolution information -bhouston
_quaternion$3.setFromEuler(this);return this.setFromQuaternion(_quaternion$3,newOrder);}},{key:"equals",value:function equals(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order;}},{key:"fromArray",value:function fromArray(array){this._x=array[0];this._y=array[1];this._z=array[2];if(array[3]!==undefined)this._order=array[3];this._onChangeCallback();return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array;}},{key:"toVector3",value:function toVector3(optionalResult){if(optionalResult){return optionalResult.set(this._x,this._y,this._z);}else {return new Vector3(this._x,this._y,this._z);}}},{key:"_onChange",value:function _onChange(callback){this._onChangeCallback=callback;return this;}},{key:"_onChangeCallback",value:function _onChangeCallback(){}}]);return Euler;}();Euler.prototype.isEuler=true;Euler.DefaultOrder='XYZ';Euler.RotationOrders=['XYZ','YZX','ZXY','XZY','YXZ','ZYX'];var Layers=/*#__PURE__*/function(){function Layers(){_classCallCheck(this,Layers);this.mask=1|0;}_createClass(Layers,[{key:"set",value:function set(channel){this.mask=(1<<channel|0)>>>0;}},{key:"enable",value:function enable(channel){this.mask|=1<<channel|0;}},{key:"enableAll",value:function enableAll(){this.mask=0xffffffff|0;}},{key:"toggle",value:function toggle(channel){this.mask^=1<<channel|0;}},{key:"disable",value:function disable(channel){this.mask&=~(1<<channel|0);}},{key:"disableAll",value:function disableAll(){this.mask=0;}},{key:"test",value:function test(layers){return (this.mask&layers.mask)!==0;}},{key:"isEnabled",value:function isEnabled(channel){return (this.mask&(1<<channel|0))!==0;}}]);return Layers;}();var _object3DId=0;var _v1$4=/*@__PURE__*/new Vector3();var _q1=/*@__PURE__*/new Quaternion();var _m1$1=/*@__PURE__*/new Matrix4();var _target=/*@__PURE__*/new Vector3();var _position$3=/*@__PURE__*/new Vector3();var _scale$2=/*@__PURE__*/new Vector3();var _quaternion$2=/*@__PURE__*/new Quaternion();var _xAxis=/*@__PURE__*/new Vector3(1,0,0);var _yAxis=/*@__PURE__*/new Vector3(0,1,0);var _zAxis=/*@__PURE__*/new Vector3(0,0,1);var _addedEvent={type:'added'};var _removedEvent={type:'removed'};var Object3D=/*#__PURE__*/function(_EventDispatcher3){_inherits(Object3D,_EventDispatcher3);var _super5=_createSuper(Object3D);function Object3D(){var _this6;_classCallCheck(this,Object3D);_this6=_super5.call(this);Object.defineProperty(_assertThisInitialized(_this6),'id',{value:_object3DId++});_this6.uuid=generateUUID();_this6.name='';_this6.type='Object3D';_this6.parent=null;_this6.children=[];_this6.up=Object3D.DefaultUp.clone();var position=new Vector3();var rotation=new Euler();var quaternion=new Quaternion();var scale=new Vector3(1,1,1);function onRotationChange(){quaternion.setFromEuler(rotation,false);}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,undefined,false);}rotation._onChange(onRotationChange);quaternion._onChange(onQuaternionChange);Object.defineProperties(_assertThisInitialized(_this6),{position:{configurable:true,enumerable:true,value:position},rotation:{configurable:true,enumerable:true,value:rotation},quaternion:{configurable:true,enumerable:true,value:quaternion},scale:{configurable:true,enumerable:true,value:scale},modelViewMatrix:{value:new Matrix4()},normalMatrix:{value:new Matrix3()}});_this6.matrix=new Matrix4();_this6.matrixWorld=new Matrix4();_this6.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;_this6.matrixWorldNeedsUpdate=false;_this6.layers=new Layers();_this6.visible=true;_this6.castShadow=false;_this6.receiveShadow=false;_this6.frustumCulled=true;_this6.renderOrder=0;_this6.animations=[];_this6.userData={};return _this6;}_createClass(Object3D,[{key:"onBeforeRender",value:function onBeforeRender(/* renderer, scene, camera, geometry, material, group */){}},{key:"onAfterRender",value:function onAfterRender(/* renderer, scene, camera, geometry, material, group */){}},{key:"applyMatrix4",value:function applyMatrix4(matrix){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(matrix);this.matrix.decompose(this.position,this.quaternion,this.scale);}},{key:"applyQuaternion",value:function applyQuaternion(q){this.quaternion.premultiply(q);return this;}},{key:"setRotationFromAxisAngle",value:function setRotationFromAxisAngle(axis,angle){// assumes axis is normalized
this.quaternion.setFromAxisAngle(axis,angle);}},{key:"setRotationFromEuler",value:function setRotationFromEuler(euler){this.quaternion.setFromEuler(euler,true);}},{key:"setRotationFromMatrix",value:function setRotationFromMatrix(m){// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
this.quaternion.setFromRotationMatrix(m);}},{key:"setRotationFromQuaternion",value:function setRotationFromQuaternion(q){// assumes q is normalized
this.quaternion.copy(q);}},{key:"rotateOnAxis",value:function rotateOnAxis(axis,angle){// rotate object on axis in object space
// axis is assumed to be normalized
_q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(_q1);return this;}},{key:"rotateOnWorldAxis",value:function rotateOnWorldAxis(axis,angle){// rotate object on axis in world space
// axis is assumed to be normalized
// method assumes no rotated parent
_q1.setFromAxisAngle(axis,angle);this.quaternion.premultiply(_q1);return this;}},{key:"rotateX",value:function rotateX(angle){return this.rotateOnAxis(_xAxis,angle);}},{key:"rotateY",value:function rotateY(angle){return this.rotateOnAxis(_yAxis,angle);}},{key:"rotateZ",value:function rotateZ(angle){return this.rotateOnAxis(_zAxis,angle);}},{key:"translateOnAxis",value:function translateOnAxis(axis,distance){// translate object by distance along axis in object space
// axis is assumed to be normalized
_v1$4.copy(axis).applyQuaternion(this.quaternion);this.position.add(_v1$4.multiplyScalar(distance));return this;}},{key:"translateX",value:function translateX(distance){return this.translateOnAxis(_xAxis,distance);}},{key:"translateY",value:function translateY(distance){return this.translateOnAxis(_yAxis,distance);}},{key:"translateZ",value:function translateZ(distance){return this.translateOnAxis(_zAxis,distance);}},{key:"localToWorld",value:function localToWorld(vector){return vector.applyMatrix4(this.matrixWorld);}},{key:"worldToLocal",value:function worldToLocal(vector){return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());}},{key:"lookAt",value:function lookAt(x,y,z){// This method does not support objects having non-uniformly-scaled parent(s)
if(x.isVector3){_target.copy(x);}else {_target.set(x,y,z);}var parent=this.parent;this.updateWorldMatrix(true,false);_position$3.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position$3,_target,this.up);}else {_m1$1.lookAt(_target,_position$3,this.up);}this.quaternion.setFromRotationMatrix(_m1$1);if(parent){_m1$1.extractRotation(parent.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.invert());}}},{key:"add",value:function add(object){if(arguments.length>1){for(var _i19=0;_i19<arguments.length;_i19++){this.add(arguments[_i19]);}return this;}if(object===this){console.error('THREE.Object3D.add: object can\'t be added as a child of itself.',object);return this;}if(object&&object.isObject3D){if(object.parent!==null){object.parent.remove(object);}object.parent=this;this.children.push(object);object.dispatchEvent(_addedEvent);}else {console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.',object);}return this;}},{key:"remove",value:function remove(object){if(arguments.length>1){for(var _i20=0;_i20<arguments.length;_i20++){this.remove(arguments[_i20]);}return this;}var index=this.children.indexOf(object);if(index!==-1){object.parent=null;this.children.splice(index,1);object.dispatchEvent(_removedEvent);}return this;}},{key:"removeFromParent",value:function removeFromParent(){var parent=this.parent;if(parent!==null){parent.remove(this);}return this;}},{key:"clear",value:function clear(){for(var _i21=0;_i21<this.children.length;_i21++){var object=this.children[_i21];object.parent=null;object.dispatchEvent(_removedEvent);}this.children.length=0;return this;}},{key:"attach",value:function attach(object){// adds object as a child of this, while maintaining the object's world transform
// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
this.updateWorldMatrix(true,false);_m1$1.copy(this.matrixWorld).invert();if(object.parent!==null){object.parent.updateWorldMatrix(true,false);_m1$1.multiply(object.parent.matrixWorld);}object.applyMatrix4(_m1$1);this.add(object);object.updateWorldMatrix(false,true);return this;}},{key:"getObjectById",value:function getObjectById(id){return this.getObjectByProperty('id',id);}},{key:"getObjectByName",value:function getObjectByName(name){return this.getObjectByProperty('name',name);}},{key:"getObjectByProperty",value:function getObjectByProperty(name,value){if(this[name]===value)return this;for(var _i22=0,l=this.children.length;_i22<l;_i22++){var child=this.children[_i22];var object=child.getObjectByProperty(name,value);if(object!==undefined){return object;}}return undefined;}},{key:"getWorldPosition",value:function getWorldPosition(target){this.updateWorldMatrix(true,false);return target.setFromMatrixPosition(this.matrixWorld);}},{key:"getWorldQuaternion",value:function getWorldQuaternion(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,target,_scale$2);return target;}},{key:"getWorldScale",value:function getWorldScale(target){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,_quaternion$2,target);return target;}},{key:"getWorldDirection",value:function getWorldDirection(target){this.updateWorldMatrix(true,false);var e=this.matrixWorld.elements;return target.set(e[8],e[9],e[10]).normalize();}},{key:"raycast",value:function raycast(/* raycaster, intersects */){}},{key:"traverse",value:function traverse(callback){callback(this);var children=this.children;for(var _i23=0,l=children.length;_i23<l;_i23++){children[_i23].traverse(callback);}}},{key:"traverseVisible",value:function traverseVisible(callback){if(this.visible===false)return;callback(this);var children=this.children;for(var _i24=0,l=children.length;_i24<l;_i24++){children[_i24].traverseVisible(callback);}}},{key:"traverseAncestors",value:function traverseAncestors(callback){var parent=this.parent;if(parent!==null){callback(parent);parent.traverseAncestors(callback);}}},{key:"updateMatrix",value:function updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true;}},{key:"updateMatrixWorld",value:function updateMatrixWorld(force){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||force){if(this.parent===null){this.matrixWorld.copy(this.matrix);}else {this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}this.matrixWorldNeedsUpdate=false;force=true;}// update children
var children=this.children;for(var _i25=0,l=children.length;_i25<l;_i25++){children[_i25].updateMatrixWorld(force);}}},{key:"updateWorldMatrix",value:function updateWorldMatrix(updateParents,updateChildren){var parent=this.parent;if(updateParents===true&&parent!==null){parent.updateWorldMatrix(true,false);}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix);}else {this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);}// update children
if(updateChildren===true){var children=this.children;for(var _i26=0,l=children.length;_i26<l;_i26++){children[_i26].updateWorldMatrix(false,true);}}}},{key:"toJSON",value:function toJSON(meta){// meta is a string when called from JSON.stringify
var isRootObject=meta===undefined||typeof meta==='string';var output={};// meta is a hash used to collect geometries, materials.
// not providing it implies that this is the root object
// being serialized.
if(isRootObject){// initialize meta obj
meta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}};output.metadata={version:4.5,type:'Object',generator:'Object3D.toJSON'};}// standard Object3D serialization
var object={};object.uuid=this.uuid;object.type=this.type;if(this.name!=='')object.name=this.name;if(this.castShadow===true)object.castShadow=true;if(this.receiveShadow===true)object.receiveShadow=true;if(this.visible===false)object.visible=false;if(this.frustumCulled===false)object.frustumCulled=false;if(this.renderOrder!==0)object.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=='{}')object.userData=this.userData;object.layers=this.layers.mask;object.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)object.matrixAutoUpdate=false;// object specific properties
if(this.isInstancedMesh){object.type='InstancedMesh';object.count=this.count;object.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)object.instanceColor=this.instanceColor.toJSON();}//
function serialize(library,element){if(library[element.uuid]===undefined){library[element.uuid]=element.toJSON(meta);}return element.uuid;}if(this.isScene){if(this.background){if(this.background.isColor){object.background=this.background.toJSON();}else if(this.background.isTexture){object.background=this.background.toJSON(meta).uuid;}}if(this.environment&&this.environment.isTexture){object.environment=this.environment.toJSON(meta).uuid;}}else if(this.isMesh||this.isLine||this.isPoints){object.geometry=serialize(meta.geometries,this.geometry);var parameters=this.geometry.parameters;if(parameters!==undefined&&parameters.shapes!==undefined){var shapes=parameters.shapes;if(Array.isArray(shapes)){for(var _i27=0,l=shapes.length;_i27<l;_i27++){var shape=shapes[_i27];serialize(meta.shapes,shape);}}else {serialize(meta.shapes,shapes);}}}if(this.isSkinnedMesh){object.bindMode=this.bindMode;object.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){serialize(meta.skeletons,this.skeleton);object.skeleton=this.skeleton.uuid;}}if(this.material!==undefined){if(Array.isArray(this.material)){var uuids=[];for(var _i28=0,_l2=this.material.length;_i28<_l2;_i28++){uuids.push(serialize(meta.materials,this.material[_i28]));}object.material=uuids;}else {object.material=serialize(meta.materials,this.material);}}//
if(this.children.length>0){object.children=[];for(var _i29=0;_i29<this.children.length;_i29++){object.children.push(this.children[_i29].toJSON(meta).object);}}//
if(this.animations.length>0){object.animations=[];for(var _i30=0;_i30<this.animations.length;_i30++){var animation=this.animations[_i30];object.animations.push(serialize(meta.animations,animation));}}if(isRootObject){var geometries=extractFromCache(meta.geometries);var materials=extractFromCache(meta.materials);var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);var _shapes=extractFromCache(meta.shapes);var skeletons=extractFromCache(meta.skeletons);var animations=extractFromCache(meta.animations);if(geometries.length>0)output.geometries=geometries;if(materials.length>0)output.materials=materials;if(textures.length>0)output.textures=textures;if(images.length>0)output.images=images;if(_shapes.length>0)output.shapes=_shapes;if(skeletons.length>0)output.skeletons=skeletons;if(animations.length>0)output.animations=animations;}output.object=object;return output;// extract data from the cache hash
// remove metadata on each item
// and return as array
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}return values;}}},{key:"clone",value:function clone(recursive){return new this.constructor().copy(this,recursive);}},{key:"copy",value:function copy(source){var recursive=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.rotation.order=source.rotation.order;this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.layers.mask=source.layers.mask;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(recursive===true){for(var _i31=0;_i31<source.children.length;_i31++){var child=source.children[_i31];this.add(child.clone());}}return this;}}]);return Object3D;}(EventDispatcher);Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype.isObject3D=true;var _v0$1=/*@__PURE__*/new Vector3();var _v1$3=/*@__PURE__*/new Vector3();var _v2$2=/*@__PURE__*/new Vector3();var _v3$1=/*@__PURE__*/new Vector3();var _vab=/*@__PURE__*/new Vector3();var _vac=/*@__PURE__*/new Vector3();var _vbc=/*@__PURE__*/new Vector3();var _vap=/*@__PURE__*/new Vector3();var _vbp=/*@__PURE__*/new Vector3();var _vcp=/*@__PURE__*/new Vector3();var Triangle=/*#__PURE__*/function(){function Triangle(){var a=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var b=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Vector3();_classCallCheck(this,Triangle);this.a=a;this.b=b;this.c=c;}_createClass(Triangle,[{key:"set",value:function set(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this;}},{key:"setFromPointsAndIndices",value:function setFromPointsAndIndices(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this;}},{key:"setFromAttributeAndIndices",value:function setFromAttributeAndIndices(attribute,i0,i1,i2){this.a.fromBufferAttribute(attribute,i0);this.b.fromBufferAttribute(attribute,i1);this.c.fromBufferAttribute(attribute,i2);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this;}},{key:"getArea",value:function getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*0.5;}},{key:"getMidpoint",value:function getMidpoint(target){return target.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3);}},{key:"getNormal",value:function getNormal(target){return Triangle.getNormal(this.a,this.b,this.c,target);}},{key:"getPlane",value:function getPlane(target){return target.setFromCoplanarPoints(this.a,this.b,this.c);}},{key:"getBarycoord",value:function getBarycoord(point,target){return Triangle.getBarycoord(point,this.a,this.b,this.c,target);}},{key:"getUV",value:function getUV(point,uv1,uv2,uv3,target){return Triangle.getUV(point,this.a,this.b,this.c,uv1,uv2,uv3,target);}},{key:"containsPoint",value:function containsPoint(point){return Triangle.containsPoint(point,this.a,this.b,this.c);}},{key:"isFrontFacing",value:function isFrontFacing(direction){return Triangle.isFrontFacing(this.a,this.b,this.c,direction);}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsTriangle(this);}},{key:"closestPointToPoint",value:function closestPointToPoint(p,target){var a=this.a,b=this.b,c=this.c;var v,w;// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
// basically, we're distinguishing which of the voronoi regions of the triangle
// the point lies in with the minimum amount of redundant computation.
_vab.subVectors(b,a);_vac.subVectors(c,a);_vap.subVectors(p,a);var d1=_vab.dot(_vap);var d2=_vac.dot(_vap);if(d1<=0&&d2<=0){// vertex region of A; barycentric coords (1, 0, 0)
return target.copy(a);}_vbp.subVectors(p,b);var d3=_vab.dot(_vbp);var d4=_vac.dot(_vbp);if(d3>=0&&d4<=d3){// vertex region of B; barycentric coords (0, 1, 0)
return target.copy(b);}var vc=d1*d4-d3*d2;if(vc<=0&&d1>=0&&d3<=0){v=d1/(d1-d3);// edge region of AB; barycentric coords (1-v, v, 0)
return target.copy(a).addScaledVector(_vab,v);}_vcp.subVectors(p,c);var d5=_vab.dot(_vcp);var d6=_vac.dot(_vcp);if(d6>=0&&d5<=d6){// vertex region of C; barycentric coords (0, 0, 1)
return target.copy(c);}var vb=d5*d2-d1*d6;if(vb<=0&&d2>=0&&d6<=0){w=d2/(d2-d6);// edge region of AC; barycentric coords (1-w, 0, w)
return target.copy(a).addScaledVector(_vac,w);}var va=d3*d6-d5*d4;if(va<=0&&d4-d3>=0&&d5-d6>=0){_vbc.subVectors(c,b);w=(d4-d3)/(d4-d3+(d5-d6));// edge region of BC; barycentric coords (0, 1-w, w)
return target.copy(b).addScaledVector(_vbc,w);// edge region of BC
}// face region
var denom=1/(va+vb+vc);// u = va * denom
v=vb*denom;w=vc*denom;return target.copy(a).addScaledVector(_vab,v).addScaledVector(_vac,w);}},{key:"equals",value:function equals(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c);}}],[{key:"getNormal",value:function getNormal(a,b,c,target){target.subVectors(c,b);_v0$1.subVectors(a,b);target.cross(_v0$1);var targetLengthSq=target.lengthSq();if(targetLengthSq>0){return target.multiplyScalar(1/Math.sqrt(targetLengthSq));}return target.set(0,0,0);}// static/instance method to calculate barycentric coordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
},{key:"getBarycoord",value:function getBarycoord(point,a,b,c,target){_v0$1.subVectors(c,a);_v1$3.subVectors(b,a);_v2$2.subVectors(point,a);var dot00=_v0$1.dot(_v0$1);var dot01=_v0$1.dot(_v1$3);var dot02=_v0$1.dot(_v2$2);var dot11=_v1$3.dot(_v1$3);var dot12=_v1$3.dot(_v2$2);var denom=dot00*dot11-dot01*dot01;// collinear or singular triangle
if(denom===0){// arbitrary location outside of triangle?
// not sure if this is the best idea, maybe should be returning undefined
return target.set(-2,-1,-1);}var invDenom=1/denom;var u=(dot11*dot02-dot01*dot12)*invDenom;var v=(dot00*dot12-dot01*dot02)*invDenom;// barycentric coordinates must always sum to 1
return target.set(1-u-v,v,u);}},{key:"containsPoint",value:function containsPoint(point,a,b,c){this.getBarycoord(point,a,b,c,_v3$1);return _v3$1.x>=0&&_v3$1.y>=0&&_v3$1.x+_v3$1.y<=1;}},{key:"getUV",value:function getUV(point,p1,p2,p3,uv1,uv2,uv3,target){this.getBarycoord(point,p1,p2,p3,_v3$1);target.set(0,0);target.addScaledVector(uv1,_v3$1.x);target.addScaledVector(uv2,_v3$1.y);target.addScaledVector(uv3,_v3$1.z);return target;}},{key:"isFrontFacing",value:function isFrontFacing(a,b,c,direction){_v0$1.subVectors(c,b);_v1$3.subVectors(a,b);// strictly front facing
return _v0$1.cross(_v1$3).dot(direction)<0?true:false;}}]);return Triangle;}();var materialId=0;var Material=/*#__PURE__*/function(_EventDispatcher4){_inherits(Material,_EventDispatcher4);var _super6=_createSuper(Material);function Material(){var _this7;_classCallCheck(this,Material);_this7=_super6.call(this);Object.defineProperty(_assertThisInitialized(_this7),'id',{value:materialId++});_this7.uuid=generateUUID();_this7.name='';_this7.type='Material';_this7.fog=true;_this7.blending=NormalBlending;_this7.side=FrontSide;_this7.vertexColors=false;_this7.opacity=1;_this7.transparent=false;_this7.blendSrc=SrcAlphaFactor;_this7.blendDst=OneMinusSrcAlphaFactor;_this7.blendEquation=AddEquation;_this7.blendSrcAlpha=null;_this7.blendDstAlpha=null;_this7.blendEquationAlpha=null;_this7.depthFunc=LessEqualDepth;_this7.depthTest=true;_this7.depthWrite=true;_this7.stencilWriteMask=0xff;_this7.stencilFunc=AlwaysStencilFunc;_this7.stencilRef=0;_this7.stencilFuncMask=0xff;_this7.stencilFail=KeepStencilOp;_this7.stencilZFail=KeepStencilOp;_this7.stencilZPass=KeepStencilOp;_this7.stencilWrite=false;_this7.clippingPlanes=null;_this7.clipIntersection=false;_this7.clipShadows=false;_this7.shadowSide=null;_this7.colorWrite=true;_this7.precision=null;// override the renderer's default precision for this material
_this7.polygonOffset=false;_this7.polygonOffsetFactor=0;_this7.polygonOffsetUnits=0;_this7.dithering=false;_this7.alphaToCoverage=false;_this7.premultipliedAlpha=false;_this7.visible=true;_this7.toneMapped=true;_this7.userData={};_this7.version=0;_this7._alphaTest=0;return _this7;}_createClass(Material,[{key:"alphaTest",get:function get(){return this._alphaTest;},set:function set(value){if(this._alphaTest>0!==value>0){this.version++;}this._alphaTest=value;}},{key:"onBuild",value:function onBuild(/* shaderobject, renderer */){}},{key:"onBeforeRender",value:function onBeforeRender(/* renderer, scene, camera, geometry, object, group */){}},{key:"onBeforeCompile",value:function onBeforeCompile(/* shaderobject, renderer */){}},{key:"customProgramCacheKey",value:function customProgramCacheKey(){return this.onBeforeCompile.toString();}},{key:"setValues",value:function setValues(values){if(values===undefined)return;for(var key in values){var newValue=values[key];if(newValue===undefined){console.warn('THREE.Material: \''+key+'\' parameter is undefined.');continue;}// for backward compatability if shading is set in the constructor
if(key==='shading'){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=newValue===FlatShading?true:false;continue;}var currentValue=this[key];if(currentValue===undefined){console.warn('THREE.'+this.type+': \''+key+'\' is not a property of this material.');continue;}if(currentValue&&currentValue.isColor){currentValue.set(newValue);}else if(currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3){currentValue.copy(newValue);}else {this[key]=newValue;}}}},{key:"toJSON",value:function toJSON(meta){var isRoot=meta===undefined||typeof meta==='string';if(isRoot){meta={textures:{},images:{}};}var data={metadata:{version:4.5,type:'Material',generator:'Material.toJSON'}};// standard Material serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(this.color&&this.color.isColor)data.color=this.color.getHex();if(this.roughness!==undefined)data.roughness=this.roughness;if(this.metalness!==undefined)data.metalness=this.metalness;if(this.sheen!==undefined)data.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)data.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)data.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)data.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)data.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)data.specular=this.specular.getHex();if(this.specularIntensity!==undefined)data.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)data.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)data.shininess=this.shininess;if(this.clearcoat!==undefined)data.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)data.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid;}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid;}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid;data.clearcoatNormalScale=this.clearcoatNormalScale.toArray();}if(this.map&&this.map.isTexture)data.map=this.map.toJSON(meta).uuid;if(this.matcap&&this.matcap.isTexture)data.matcap=this.matcap.toJSON(meta).uuid;if(this.alphaMap&&this.alphaMap.isTexture)data.alphaMap=this.alphaMap.toJSON(meta).uuid;if(this.lightMap&&this.lightMap.isTexture){data.lightMap=this.lightMap.toJSON(meta).uuid;data.lightMapIntensity=this.lightMapIntensity;}if(this.aoMap&&this.aoMap.isTexture){data.aoMap=this.aoMap.toJSON(meta).uuid;data.aoMapIntensity=this.aoMapIntensity;}if(this.bumpMap&&this.bumpMap.isTexture){data.bumpMap=this.bumpMap.toJSON(meta).uuid;data.bumpScale=this.bumpScale;}if(this.normalMap&&this.normalMap.isTexture){data.normalMap=this.normalMap.toJSON(meta).uuid;data.normalMapType=this.normalMapType;data.normalScale=this.normalScale.toArray();}if(this.displacementMap&&this.displacementMap.isTexture){data.displacementMap=this.displacementMap.toJSON(meta).uuid;data.displacementScale=this.displacementScale;data.displacementBias=this.displacementBias;}if(this.roughnessMap&&this.roughnessMap.isTexture)data.roughnessMap=this.roughnessMap.toJSON(meta).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)data.metalnessMap=this.metalnessMap.toJSON(meta).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)data.emissiveMap=this.emissiveMap.toJSON(meta).uuid;if(this.specularMap&&this.specularMap.isTexture)data.specularMap=this.specularMap.toJSON(meta).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)data.specularColorMap=this.specularColorMap.toJSON(meta).uuid;if(this.envMap&&this.envMap.isTexture){data.envMap=this.envMap.toJSON(meta).uuid;if(this.combine!==undefined)data.combine=this.combine;}if(this.envMapIntensity!==undefined)data.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)data.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)data.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){data.gradientMap=this.gradientMap.toJSON(meta).uuid;}if(this.transmission!==undefined)data.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)data.transmissionMap=this.transmissionMap.toJSON(meta).uuid;if(this.thickness!==undefined)data.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)data.thicknessMap=this.thicknessMap.toJSON(meta).uuid;if(this.attenuationDistance!==undefined)data.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)data.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)data.size=this.size;if(this.shadowSide!==null)data.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)data.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)data.blending=this.blending;if(this.side!==FrontSide)data.side=this.side;if(this.vertexColors)data.vertexColors=true;if(this.opacity<1)data.opacity=this.opacity;if(this.transparent===true)data.transparent=this.transparent;data.depthFunc=this.depthFunc;data.depthTest=this.depthTest;data.depthWrite=this.depthWrite;data.colorWrite=this.colorWrite;data.stencilWrite=this.stencilWrite;data.stencilWriteMask=this.stencilWriteMask;data.stencilFunc=this.stencilFunc;data.stencilRef=this.stencilRef;data.stencilFuncMask=this.stencilFuncMask;data.stencilFail=this.stencilFail;data.stencilZFail=this.stencilZFail;data.stencilZPass=this.stencilZPass;// rotation (SpriteMaterial)
if(this.rotation&&this.rotation!==0)data.rotation=this.rotation;if(this.polygonOffset===true)data.polygonOffset=true;if(this.polygonOffsetFactor!==0)data.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)data.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth&&this.linewidth!==1)data.linewidth=this.linewidth;if(this.dashSize!==undefined)data.dashSize=this.dashSize;if(this.gapSize!==undefined)data.gapSize=this.gapSize;if(this.scale!==undefined)data.scale=this.scale;if(this.dithering===true)data.dithering=true;if(this.alphaTest>0)data.alphaTest=this.alphaTest;if(this.alphaToCoverage===true)data.alphaToCoverage=this.alphaToCoverage;if(this.premultipliedAlpha===true)data.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)data.wireframe=this.wireframe;if(this.wireframeLinewidth>1)data.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=='round')data.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=='round')data.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)data.flatShading=this.flatShading;if(this.visible===false)data.visible=false;if(this.toneMapped===false)data.toneMapped=false;if(JSON.stringify(this.userData)!=='{}')data.userData=this.userData;// TODO: Copied from Object3D.toJSON
function extractFromCache(cache){var values=[];for(var key in cache){var _data2=cache[key];delete _data2.metadata;values.push(_data2);}return values;}if(isRoot){var textures=extractFromCache(meta.textures);var images=extractFromCache(meta.images);if(textures.length>0)data.textures=textures;if(images.length>0)data.images=images;}return data;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){this.name=source.name;this.fog=source.fog;this.blending=source.blending;this.side=source.side;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=source.depthWrite;this.stencilWriteMask=source.stencilWriteMask;this.stencilFunc=source.stencilFunc;this.stencilRef=source.stencilRef;this.stencilFuncMask=source.stencilFuncMask;this.stencilFail=source.stencilFail;this.stencilZFail=source.stencilZFail;this.stencilZPass=source.stencilZPass;this.stencilWrite=source.stencilWrite;var srcPlanes=source.clippingPlanes;var dstPlanes=null;if(srcPlanes!==null){var n=srcPlanes.length;dstPlanes=new Array(n);for(var _i32=0;_i32!==n;++_i32){dstPlanes[_i32]=srcPlanes[_i32].clone();}}this.clippingPlanes=dstPlanes;this.clipIntersection=source.clipIntersection;this.clipShadows=source.clipShadows;this.shadowSide=source.shadowSide;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.dithering=source.dithering;this.alphaTest=source.alphaTest;this.alphaToCoverage=source.alphaToCoverage;this.premultipliedAlpha=source.premultipliedAlpha;this.visible=source.visible;this.toneMapped=source.toneMapped;this.userData=JSON.parse(JSON.stringify(source.userData));return this;}},{key:"dispose",value:function dispose(){this.dispatchEvent({type:'dispose'});}},{key:"needsUpdate",set:function set(value){if(value===true)this.version++;}}]);return Material;}(EventDispatcher);Material.prototype.isMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */var MeshBasicMaterial=/*#__PURE__*/function(_Material){_inherits(MeshBasicMaterial,_Material);var _super7=_createSuper(MeshBasicMaterial);function MeshBasicMaterial(parameters){var _this8;_classCallCheck(this,MeshBasicMaterial);_this8=_super7.call(this);_this8.type='MeshBasicMaterial';_this8.color=new Color(0xffffff);// emissive
_this8.map=null;_this8.lightMap=null;_this8.lightMapIntensity=1.0;_this8.aoMap=null;_this8.aoMapIntensity=1.0;_this8.specularMap=null;_this8.alphaMap=null;_this8.envMap=null;_this8.combine=MultiplyOperation;_this8.reflectivity=1;_this8.refractionRatio=0.98;_this8.wireframe=false;_this8.wireframeLinewidth=1;_this8.wireframeLinecap='round';_this8.wireframeLinejoin='round';_this8.setValues(parameters);return _this8;}_createClass(MeshBasicMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshBasicMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}]);return MeshBasicMaterial;}(Material);MeshBasicMaterial.prototype.isMeshBasicMaterial=true;var _vector$9=/*@__PURE__*/new Vector3();var _vector2$1=/*@__PURE__*/new Vector2();var BufferAttribute=/*#__PURE__*/function(){function BufferAttribute(array,itemSize,normalized){_classCallCheck(this,BufferAttribute);if(Array.isArray(array)){throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');}this.name='';this.array=array;this.itemSize=itemSize;this.count=array!==undefined?array.length/itemSize:0;this.normalized=normalized===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;}_createClass(BufferAttribute,[{key:"onUploadCallback",value:function onUploadCallback(){}},{key:"needsUpdate",set:function set(value){if(value===true)this.version++;}},{key:"setUsage",value:function setUsage(value){this.usage=value;return this;}},{key:"copy",value:function copy(source){this.name=source.name;this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.count=source.count;this.normalized=source.normalized;this.usage=source.usage;return this;}},{key:"copyAt",value:function copyAt(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(var _i33=0,l=this.itemSize;_i33<l;_i33++){this.array[index1+_i33]=attribute.array[index2+_i33];}return this;}},{key:"copyArray",value:function copyArray(array){this.array.set(array);return this;}},{key:"copyColorsArray",value:function copyColorsArray(colors){var array=this.array;var offset=0;for(var _i34=0,l=colors.length;_i34<l;_i34++){var color=colors[_i34];if(color===undefined){console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined',_i34);color=new Color();}array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b;}return this;}},{key:"copyVector2sArray",value:function copyVector2sArray(vectors){var array=this.array;var offset=0;for(var _i35=0,l=vectors.length;_i35<l;_i35++){var vector=vectors[_i35];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined',_i35);vector=new Vector2();}array[offset++]=vector.x;array[offset++]=vector.y;}return this;}},{key:"copyVector3sArray",value:function copyVector3sArray(vectors){var array=this.array;var offset=0;for(var _i36=0,l=vectors.length;_i36<l;_i36++){var vector=vectors[_i36];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined',_i36);vector=new Vector3();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;}return this;}},{key:"copyVector4sArray",value:function copyVector4sArray(vectors){var array=this.array;var offset=0;for(var _i37=0,l=vectors.length;_i37<l;_i37++){var vector=vectors[_i37];if(vector===undefined){console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined',_i37);vector=new Vector4();}array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w;}return this;}},{key:"applyMatrix3",value:function applyMatrix3(m){if(this.itemSize===2){for(var _i38=0,l=this.count;_i38<l;_i38++){_vector2$1.fromBufferAttribute(this,_i38);_vector2$1.applyMatrix3(m);this.setXY(_i38,_vector2$1.x,_vector2$1.y);}}else if(this.itemSize===3){for(var _i39=0,_l3=this.count;_i39<_l3;_i39++){_vector$9.fromBufferAttribute(this,_i39);_vector$9.applyMatrix3(m);this.setXYZ(_i39,_vector$9.x,_vector$9.y,_vector$9.z);}}return this;}},{key:"applyMatrix4",value:function applyMatrix4(m){for(var _i40=0,l=this.count;_i40<l;_i40++){_vector$9.x=this.getX(_i40);_vector$9.y=this.getY(_i40);_vector$9.z=this.getZ(_i40);_vector$9.applyMatrix4(m);this.setXYZ(_i40,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}},{key:"applyNormalMatrix",value:function applyNormalMatrix(m){for(var _i41=0,l=this.count;_i41<l;_i41++){_vector$9.x=this.getX(_i41);_vector$9.y=this.getY(_i41);_vector$9.z=this.getZ(_i41);_vector$9.applyNormalMatrix(m);this.setXYZ(_i41,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}},{key:"transformDirection",value:function transformDirection(m){for(var _i42=0,l=this.count;_i42<l;_i42++){_vector$9.x=this.getX(_i42);_vector$9.y=this.getY(_i42);_vector$9.z=this.getZ(_i42);_vector$9.transformDirection(m);this.setXYZ(_i42,_vector$9.x,_vector$9.y,_vector$9.z);}return this;}},{key:"set",value:function set(value){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;this.array.set(value,offset);return this;}},{key:"getX",value:function getX(index){return this.array[index*this.itemSize];}},{key:"setX",value:function setX(index,x){this.array[index*this.itemSize]=x;return this;}},{key:"getY",value:function getY(index){return this.array[index*this.itemSize+1];}},{key:"setY",value:function setY(index,y){this.array[index*this.itemSize+1]=y;return this;}},{key:"getZ",value:function getZ(index){return this.array[index*this.itemSize+2];}},{key:"setZ",value:function setZ(index,z){this.array[index*this.itemSize+2]=z;return this;}},{key:"getW",value:function getW(index){return this.array[index*this.itemSize+3];}},{key:"setW",value:function setW(index,w){this.array[index*this.itemSize+3]=w;return this;}},{key:"setXY",value:function setXY(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this;}},{key:"setXYZ",value:function setXYZ(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this;}},{key:"setXYZW",value:function setXYZW(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this;}},{key:"onUpload",value:function onUpload(callback){this.onUploadCallback=callback;return this;}},{key:"clone",value:function clone(){return new this.constructor(this.array,this.itemSize).copy(this);}},{key:"toJSON",value:function toJSON(){var data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};if(this.name!=='')data.name=this.name;if(this.usage!==StaticDrawUsage)data.usage=this.usage;if(this.updateRange.offset!==0||this.updateRange.count!==-1)data.updateRange=this.updateRange;return data;}}]);return BufferAttribute;}();BufferAttribute.prototype.isBufferAttribute=true;//
var Uint16BufferAttribute=/*#__PURE__*/function(_BufferAttribute5){_inherits(Uint16BufferAttribute,_BufferAttribute5);var _super12=_createSuper(Uint16BufferAttribute);function Uint16BufferAttribute(array,itemSize,normalized){_classCallCheck(this,Uint16BufferAttribute);return _super12.call(this,new Uint16Array(array),itemSize,normalized);}return _createClass(Uint16BufferAttribute);}(BufferAttribute);var Uint32BufferAttribute=/*#__PURE__*/function(_BufferAttribute7){_inherits(Uint32BufferAttribute,_BufferAttribute7);var _super14=_createSuper(Uint32BufferAttribute);function Uint32BufferAttribute(array,itemSize,normalized){_classCallCheck(this,Uint32BufferAttribute);return _super14.call(this,new Uint32Array(array),itemSize,normalized);}return _createClass(Uint32BufferAttribute);}(BufferAttribute);var Float16BufferAttribute=/*#__PURE__*/function(_BufferAttribute8){_inherits(Float16BufferAttribute,_BufferAttribute8);var _super15=_createSuper(Float16BufferAttribute);function Float16BufferAttribute(array,itemSize,normalized){_classCallCheck(this,Float16BufferAttribute);return _super15.call(this,new Uint16Array(array),itemSize,normalized);}return _createClass(Float16BufferAttribute);}(BufferAttribute);Float16BufferAttribute.prototype.isFloat16BufferAttribute=true;var Float32BufferAttribute=/*#__PURE__*/function(_BufferAttribute9){_inherits(Float32BufferAttribute,_BufferAttribute9);var _super16=_createSuper(Float32BufferAttribute);function Float32BufferAttribute(array,itemSize,normalized){_classCallCheck(this,Float32BufferAttribute);return _super16.call(this,new Float32Array(array),itemSize,normalized);}return _createClass(Float32BufferAttribute);}(BufferAttribute);var _id$1=0;var _m1=/*@__PURE__*/new Matrix4();var _obj=/*@__PURE__*/new Object3D();var _offset=/*@__PURE__*/new Vector3();var _box$1=/*@__PURE__*/new Box3();var _boxMorphTargets=/*@__PURE__*/new Box3();var _vector$8=/*@__PURE__*/new Vector3();var BufferGeometry=/*#__PURE__*/function(_EventDispatcher5){_inherits(BufferGeometry,_EventDispatcher5);var _super18=_createSuper(BufferGeometry);function BufferGeometry(){var _this9;_classCallCheck(this,BufferGeometry);_this9=_super18.call(this);Object.defineProperty(_assertThisInitialized(_this9),'id',{value:_id$1++});_this9.uuid=generateUUID();_this9.name='';_this9.type='BufferGeometry';_this9.index=null;_this9.attributes={};_this9.morphAttributes={};_this9.morphTargetsRelative=false;_this9.groups=[];_this9.boundingBox=null;_this9.boundingSphere=null;_this9.drawRange={start:0,count:Infinity};_this9.userData={};return _this9;}_createClass(BufferGeometry,[{key:"getIndex",value:function getIndex(){return this.index;}},{key:"setIndex",value:function setIndex(index){if(Array.isArray(index)){this.index=new(arrayNeedsUint32(index)?Uint32BufferAttribute:Uint16BufferAttribute)(index,1);}else {this.index=index;}return this;}},{key:"getAttribute",value:function getAttribute(name){return this.attributes[name];}},{key:"setAttribute",value:function setAttribute(name,attribute){this.attributes[name]=attribute;return this;}},{key:"deleteAttribute",value:function deleteAttribute(name){delete this.attributes[name];return this;}},{key:"hasAttribute",value:function hasAttribute(name){return this.attributes[name]!==undefined;}},{key:"addGroup",value:function addGroup(start,count){var materialIndex=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;this.groups.push({start:start,count:count,materialIndex:materialIndex});}},{key:"clearGroups",value:function clearGroups(){this.groups=[];}},{key:"setDrawRange",value:function setDrawRange(start,count){this.drawRange.start=start;this.drawRange.count=count;}},{key:"applyMatrix4",value:function applyMatrix4(matrix){var position=this.attributes.position;if(position!==undefined){position.applyMatrix4(matrix);position.needsUpdate=true;}var normal=this.attributes.normal;if(normal!==undefined){var normalMatrix=new Matrix3().getNormalMatrix(matrix);normal.applyNormalMatrix(normalMatrix);normal.needsUpdate=true;}var tangent=this.attributes.tangent;if(tangent!==undefined){tangent.transformDirection(matrix);tangent.needsUpdate=true;}if(this.boundingBox!==null){this.computeBoundingBox();}if(this.boundingSphere!==null){this.computeBoundingSphere();}return this;}},{key:"applyQuaternion",value:function applyQuaternion(q){_m1.makeRotationFromQuaternion(q);this.applyMatrix4(_m1);return this;}},{key:"rotateX",value:function rotateX(angle){// rotate geometry around world x-axis
_m1.makeRotationX(angle);this.applyMatrix4(_m1);return this;}},{key:"rotateY",value:function rotateY(angle){// rotate geometry around world y-axis
_m1.makeRotationY(angle);this.applyMatrix4(_m1);return this;}},{key:"rotateZ",value:function rotateZ(angle){// rotate geometry around world z-axis
_m1.makeRotationZ(angle);this.applyMatrix4(_m1);return this;}},{key:"translate",value:function translate(x,y,z){// translate geometry
_m1.makeTranslation(x,y,z);this.applyMatrix4(_m1);return this;}},{key:"scale",value:function scale(x,y,z){// scale geometry
_m1.makeScale(x,y,z);this.applyMatrix4(_m1);return this;}},{key:"lookAt",value:function lookAt(vector){_obj.lookAt(vector);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this;}},{key:"center",value:function center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this;}},{key:"setFromPoints",value:function setFromPoints(points){var position=[];for(var _i43=0,l=points.length;_i43<l;_i43++){var point=points[_i43];position.push(point.x,point.y,point.z||0);}this.setAttribute('position',new Float32BufferAttribute(position,3));return this;}},{key:"computeBoundingBox",value:function computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return;}if(position!==undefined){this.boundingBox.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(var _i44=0,il=morphAttributesPosition.length;_i44<il;_i44++){var morphAttribute=morphAttributesPosition[_i44];_box$1.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(this.boundingBox.min,_box$1.min);this.boundingBox.expandByPoint(_vector$8);_vector$8.addVectors(this.boundingBox.max,_box$1.max);this.boundingBox.expandByPoint(_vector$8);}else {this.boundingBox.expandByPoint(_box$1.min);this.boundingBox.expandByPoint(_box$1.max);}}}}else {this.boundingBox.makeEmpty();}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this);}}},{key:"computeBoundingSphere",value:function computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere();}var position=this.attributes.position;var morphAttributesPosition=this.morphAttributes.position;if(position&&position.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3(),Infinity);return;}if(position){// first, find the center of the bounding sphere
var center=this.boundingSphere.center;_box$1.setFromBufferAttribute(position);// process morph attributes if present
if(morphAttributesPosition){for(var _i45=0,il=morphAttributesPosition.length;_i45<il;_i45++){var morphAttribute=morphAttributesPosition[_i45];_boxMorphTargets.setFromBufferAttribute(morphAttribute);if(this.morphTargetsRelative){_vector$8.addVectors(_box$1.min,_boxMorphTargets.min);_box$1.expandByPoint(_vector$8);_vector$8.addVectors(_box$1.max,_boxMorphTargets.max);_box$1.expandByPoint(_vector$8);}else {_box$1.expandByPoint(_boxMorphTargets.min);_box$1.expandByPoint(_boxMorphTargets.max);}}}_box$1.getCenter(center);// second, try to find a boundingSphere with a radius smaller than the
// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
var maxRadiusSq=0;for(var _i46=0,_il=position.count;_i46<_il;_i46++){_vector$8.fromBufferAttribute(position,_i46);maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}// process morph attributes if present
if(morphAttributesPosition){for(var _i47=0,_il2=morphAttributesPosition.length;_i47<_il2;_i47++){var _morphAttribute=morphAttributesPosition[_i47];var morphTargetsRelative=this.morphTargetsRelative;for(var j=0,jl=_morphAttribute.count;j<jl;j++){_vector$8.fromBufferAttribute(_morphAttribute,j);if(morphTargetsRelative){_offset.fromBufferAttribute(position,j);_vector$8.add(_offset);}maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(_vector$8));}}}this.boundingSphere.radius=Math.sqrt(maxRadiusSq);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this);}}}},{key:"computeTangents",value:function computeTangents(){var index=this.index;var attributes=this.attributes;// based on http://www.terathon.com/code/tangent.html
// (per vertex tangents)
if(index===null||attributes.position===undefined||attributes.normal===undefined||attributes.uv===undefined){console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');return;}var indices=index.array;var positions=attributes.position.array;var normals=attributes.normal.array;var uvs=attributes.uv.array;var nVertices=positions.length/3;if(attributes.tangent===undefined){this.setAttribute('tangent',new BufferAttribute(new Float32Array(4*nVertices),4));}var tangents=attributes.tangent.array;var tan1=[],tan2=[];for(var _i48=0;_i48<nVertices;_i48++){tan1[_i48]=new Vector3();tan2[_i48]=new Vector3();}var vA=new Vector3(),vB=new Vector3(),vC=new Vector3(),uvA=new Vector2(),uvB=new Vector2(),uvC=new Vector2(),sdir=new Vector3(),tdir=new Vector3();function handleTriangle(a,b,c){vA.fromArray(positions,a*3);vB.fromArray(positions,b*3);vC.fromArray(positions,c*3);uvA.fromArray(uvs,a*2);uvB.fromArray(uvs,b*2);uvC.fromArray(uvs,c*2);vB.sub(vA);vC.sub(vA);uvB.sub(uvA);uvC.sub(uvA);var r=1.0/(uvB.x*uvC.y-uvC.x*uvB.y);// silently ignore degenerate uv triangles having coincident or colinear vertices
if(!isFinite(r))return;sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC,-uvB.y).multiplyScalar(r);tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB,-uvC.x).multiplyScalar(r);tan1[a].add(sdir);tan1[b].add(sdir);tan1[c].add(sdir);tan2[a].add(tdir);tan2[b].add(tdir);tan2[c].add(tdir);}var groups=this.groups;if(groups.length===0){groups=[{start:0,count:indices.length}];}for(var _i49=0,il=groups.length;_i49<il;++_i49){var group=groups[_i49];var start=group.start;var count=group.count;for(var j=start,jl=start+count;j<jl;j+=3){handleTriangle(indices[j+0],indices[j+1],indices[j+2]);}}var tmp=new Vector3(),tmp2=new Vector3();var n=new Vector3(),n2=new Vector3();function handleVertex(v){n.fromArray(normals,v*3);n2.copy(n);var t=tan1[v];// Gram-Schmidt orthogonalize
tmp.copy(t);tmp.sub(n.multiplyScalar(n.dot(t))).normalize();// Calculate handedness
tmp2.crossVectors(n2,t);var test=tmp2.dot(tan2[v]);var w=test<0.0?-1.0:1.0;tangents[v*4]=tmp.x;tangents[v*4+1]=tmp.y;tangents[v*4+2]=tmp.z;tangents[v*4+3]=w;}for(var _i50=0,_il3=groups.length;_i50<_il3;++_i50){var _group=groups[_i50];var _start2=_group.start;var _count=_group.count;for(var _j=_start2,_jl=_start2+_count;_j<_jl;_j+=3){handleVertex(indices[_j+0]);handleVertex(indices[_j+1]);handleVertex(indices[_j+2]);}}}},{key:"computeVertexNormals",value:function computeVertexNormals(){var index=this.index;var positionAttribute=this.getAttribute('position');if(positionAttribute!==undefined){var normalAttribute=this.getAttribute('normal');if(normalAttribute===undefined){normalAttribute=new BufferAttribute(new Float32Array(positionAttribute.count*3),3);this.setAttribute('normal',normalAttribute);}else {// reset existing normals to zero
for(var _i51=0,il=normalAttribute.count;_i51<il;_i51++){normalAttribute.setXYZ(_i51,0,0,0);}}var pA=new Vector3(),pB=new Vector3(),pC=new Vector3();var nA=new Vector3(),nB=new Vector3(),nC=new Vector3();var cb=new Vector3(),ab=new Vector3();// indexed elements
if(index){for(var _i52=0,_il4=index.count;_i52<_il4;_i52+=3){var vA=index.getX(_i52+0);var vB=index.getX(_i52+1);var vC=index.getX(_i52+2);pA.fromBufferAttribute(positionAttribute,vA);pB.fromBufferAttribute(positionAttribute,vB);pC.fromBufferAttribute(positionAttribute,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);nA.fromBufferAttribute(normalAttribute,vA);nB.fromBufferAttribute(normalAttribute,vB);nC.fromBufferAttribute(normalAttribute,vC);nA.add(cb);nB.add(cb);nC.add(cb);normalAttribute.setXYZ(vA,nA.x,nA.y,nA.z);normalAttribute.setXYZ(vB,nB.x,nB.y,nB.z);normalAttribute.setXYZ(vC,nC.x,nC.y,nC.z);}}else {// non-indexed elements (unconnected triangle soup)
for(var _i53=0,_il5=positionAttribute.count;_i53<_il5;_i53+=3){pA.fromBufferAttribute(positionAttribute,_i53+0);pB.fromBufferAttribute(positionAttribute,_i53+1);pC.fromBufferAttribute(positionAttribute,_i53+2);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);normalAttribute.setXYZ(_i53+0,cb.x,cb.y,cb.z);normalAttribute.setXYZ(_i53+1,cb.x,cb.y,cb.z);normalAttribute.setXYZ(_i53+2,cb.x,cb.y,cb.z);}}this.normalizeNormals();normalAttribute.needsUpdate=true;}}},{key:"merge",value:function merge(geometry,offset){if(!(geometry&&geometry.isBufferGeometry)){console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',geometry);return;}if(offset===undefined){offset=0;console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '+'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');}var attributes=this.attributes;for(var key in attributes){if(geometry.attributes[key]===undefined)continue;var attribute1=attributes[key];var attributeArray1=attribute1.array;var attribute2=geometry.attributes[key];var attributeArray2=attribute2.array;var attributeOffset=attribute2.itemSize*offset;var length=Math.min(attributeArray2.length,attributeArray1.length-attributeOffset);for(var _i54=0,j=attributeOffset;_i54<length;_i54++,j++){attributeArray1[j]=attributeArray2[_i54];}}return this;}},{key:"normalizeNormals",value:function normalizeNormals(){var normals=this.attributes.normal;for(var _i55=0,il=normals.count;_i55<il;_i55++){_vector$8.fromBufferAttribute(normals,_i55);_vector$8.normalize();normals.setXYZ(_i55,_vector$8.x,_vector$8.y,_vector$8.z);}}},{key:"toNonIndexed",value:function toNonIndexed(){function convertBufferAttribute(attribute,indices){var array=attribute.array;var itemSize=attribute.itemSize;var normalized=attribute.normalized;var array2=new array.constructor(indices.length*itemSize);var index=0,index2=0;for(var _i56=0,l=indices.length;_i56<l;_i56++){if(attribute.isInterleavedBufferAttribute){index=indices[_i56]*attribute.data.stride+attribute.offset;}else {index=indices[_i56]*itemSize;}for(var j=0;j<itemSize;j++){array2[index2++]=array[index++];}}return new BufferAttribute(array2,itemSize,normalized);}//
if(this.index===null){console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');return this;}var geometry2=new BufferGeometry();var indices=this.index.array;var attributes=this.attributes;// attributes
for(var name in attributes){var attribute=attributes[name];var newAttribute=convertBufferAttribute(attribute,indices);geometry2.setAttribute(name,newAttribute);}// morph attributes
var morphAttributes=this.morphAttributes;for(var _name in morphAttributes){var morphArray=[];var morphAttribute=morphAttributes[_name];// morphAttribute: array of Float32BufferAttributes
for(var _i57=0,il=morphAttribute.length;_i57<il;_i57++){var _attribute=morphAttribute[_i57];var _newAttribute=convertBufferAttribute(_attribute,indices);morphArray.push(_newAttribute);}geometry2.morphAttributes[_name]=morphArray;}geometry2.morphTargetsRelative=this.morphTargetsRelative;// groups
var groups=this.groups;for(var _i58=0,l=groups.length;_i58<l;_i58++){var group=groups[_i58];geometry2.addGroup(group.start,group.count,group.materialIndex);}return geometry2;}},{key:"toJSON",value:function toJSON(){var data={metadata:{version:4.5,type:'BufferGeometry',generator:'BufferGeometry.toJSON'}};// standard BufferGeometry serialization
data.uuid=this.uuid;data.type=this.type;if(this.name!=='')data.name=this.name;if(Object.keys(this.userData).length>0)data.userData=this.userData;if(this.parameters!==undefined){var parameters=this.parameters;for(var key in parameters){if(parameters[key]!==undefined)data[key]=parameters[key];}return data;}// for simplicity the code assumes attributes are not shared across geometries, see #15811
data.data={attributes:{}};var index=this.index;if(index!==null){data.data.index={type:index.array.constructor.name,array:Array.prototype.slice.call(index.array)};}var attributes=this.attributes;for(var _key in attributes){var attribute=attributes[_key];data.data.attributes[_key]=attribute.toJSON(data.data);}var morphAttributes={};var hasMorphAttributes=false;for(var _key2 in this.morphAttributes){var attributeArray=this.morphAttributes[_key2];var array=[];for(var _i59=0,il=attributeArray.length;_i59<il;_i59++){var _attribute2=attributeArray[_i59];array.push(_attribute2.toJSON(data.data));}if(array.length>0){morphAttributes[_key2]=array;hasMorphAttributes=true;}}if(hasMorphAttributes){data.data.morphAttributes=morphAttributes;data.data.morphTargetsRelative=this.morphTargetsRelative;}var groups=this.groups;if(groups.length>0){data.data.groups=JSON.parse(JSON.stringify(groups));}var boundingSphere=this.boundingSphere;if(boundingSphere!==null){data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius};}return data;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){// reset
this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;// used for storing cloned, shared data
var data={};// name
this.name=source.name;// index
var index=source.index;if(index!==null){this.setIndex(index.clone(data));}// attributes
var attributes=source.attributes;for(var name in attributes){var attribute=attributes[name];this.setAttribute(name,attribute.clone(data));}// morph attributes
var morphAttributes=source.morphAttributes;for(var _name2 in morphAttributes){var array=[];var morphAttribute=morphAttributes[_name2];// morphAttribute: array of Float32BufferAttributes
for(var _i60=0,l=morphAttribute.length;_i60<l;_i60++){array.push(morphAttribute[_i60].clone(data));}this.morphAttributes[_name2]=array;}this.morphTargetsRelative=source.morphTargetsRelative;// groups
var groups=source.groups;for(var _i61=0,_l4=groups.length;_i61<_l4;_i61++){var group=groups[_i61];this.addGroup(group.start,group.count,group.materialIndex);}// bounding box
var boundingBox=source.boundingBox;if(boundingBox!==null){this.boundingBox=boundingBox.clone();}// bounding sphere
var boundingSphere=source.boundingSphere;if(boundingSphere!==null){this.boundingSphere=boundingSphere.clone();}// draw range
this.drawRange.start=source.drawRange.start;this.drawRange.count=source.drawRange.count;// user data
this.userData=source.userData;// geometry generator parameters
if(source.parameters!==undefined)this.parameters=Object.assign({},source.parameters);return this;}},{key:"dispose",value:function dispose(){this.dispatchEvent({type:'dispose'});}}]);return BufferGeometry;}(EventDispatcher);BufferGeometry.prototype.isBufferGeometry=true;var _inverseMatrix$2=/*@__PURE__*/new Matrix4();var _ray$2=/*@__PURE__*/new Ray();var _sphere$3=/*@__PURE__*/new Sphere();var _vA$1=/*@__PURE__*/new Vector3();var _vB$1=/*@__PURE__*/new Vector3();var _vC$1=/*@__PURE__*/new Vector3();var _tempA=/*@__PURE__*/new Vector3();var _tempB=/*@__PURE__*/new Vector3();var _tempC=/*@__PURE__*/new Vector3();var _morphA=/*@__PURE__*/new Vector3();var _morphB=/*@__PURE__*/new Vector3();var _morphC=/*@__PURE__*/new Vector3();var _uvA$1=/*@__PURE__*/new Vector2();var _uvB$1=/*@__PURE__*/new Vector2();var _uvC$1=/*@__PURE__*/new Vector2();var _intersectionPoint=/*@__PURE__*/new Vector3();var _intersectionPointWorld=/*@__PURE__*/new Vector3();var Mesh=/*#__PURE__*/function(_Object3D){_inherits(Mesh,_Object3D);var _super19=_createSuper(Mesh);function Mesh(){var _this10;var geometry=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new BufferGeometry();var material=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new MeshBasicMaterial();_classCallCheck(this,Mesh);_this10=_super19.call(this);_this10.type='Mesh';_this10.geometry=geometry;_this10.material=material;_this10.updateMorphTargets();return _this10;}_createClass(Mesh,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(Mesh.prototype),"copy",this).call(this,source);if(source.morphTargetInfluences!==undefined){this.morphTargetInfluences=source.morphTargetInfluences.slice();}if(source.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary);}this.material=source.material;this.geometry=source.geometry;return this;}},{key:"updateMorphTargets",value:function updateMorphTargets(){var geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var m=0,ml=morphAttribute.length;m<ml;m++){var name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else {var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}}},{key:"raycast",value:function raycast(raycaster,intersects){var geometry=this.geometry;var material=this.material;var matrixWorld=this.matrixWorld;if(material===undefined)return;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$3.copy(geometry.boundingSphere);_sphere$3.applyMatrix4(matrixWorld);if(raycaster.ray.intersectsSphere(_sphere$3)===false)return;//
_inverseMatrix$2.copy(matrixWorld).invert();_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);// Check boundingBox before continuing
if(geometry.boundingBox!==null){if(_ray$2.intersectsBox(geometry.boundingBox)===false)return;}var intersection;if(geometry.isBufferGeometry){var index=geometry.index;var position=geometry.attributes.position;var morphPosition=geometry.morphAttributes.position;var morphTargetsRelative=geometry.morphTargetsRelative;var uv=geometry.attributes.uv;var uv2=geometry.attributes.uv2;var groups=geometry.groups;var drawRange=geometry.drawRange;if(index!==null){// indexed buffer geometry
if(Array.isArray(material)){for(var _i62=0,il=groups.length;_i62<il;_i62++){var group=groups[_i62];var groupMaterial=material[group.materialIndex];var start=Math.max(group.start,drawRange.start);var end=Math.min(index.count,Math.min(group.start+group.count,drawRange.start+drawRange.count));for(var j=start,jl=end;j<jl;j+=3){var a=index.getX(j);var b=index.getX(j+1);var c=index.getX(j+2);intersection=checkBufferGeometryIntersection(this,groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c);if(intersection){intersection.faceIndex=Math.floor(j/3);// triangle number in indexed buffer semantics
intersection.face.materialIndex=group.materialIndex;intersects.push(intersection);}}}}else {var _start3=Math.max(0,drawRange.start);var _end2=Math.min(index.count,drawRange.start+drawRange.count);for(var _i63=_start3,_il6=_end2;_i63<_il6;_i63+=3){var _a=index.getX(_i63);var _b=index.getX(_i63+1);var _c=index.getX(_i63+2);intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,_a,_b,_c);if(intersection){intersection.faceIndex=Math.floor(_i63/3);// triangle number in indexed buffer semantics
intersects.push(intersection);}}}}else if(position!==undefined){// non-indexed buffer geometry
if(Array.isArray(material)){for(var _i64=0,_il7=groups.length;_i64<_il7;_i64++){var _group2=groups[_i64];var _groupMaterial=material[_group2.materialIndex];var _start4=Math.max(_group2.start,drawRange.start);var _end3=Math.min(position.count,Math.min(_group2.start+_group2.count,drawRange.start+drawRange.count));for(var _j2=_start4,_jl2=_end3;_j2<_jl2;_j2+=3){var _a2=_j2;var _b2=_j2+1;var _c2=_j2+2;intersection=checkBufferGeometryIntersection(this,_groupMaterial,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,_a2,_b2,_c2);if(intersection){intersection.faceIndex=Math.floor(_j2/3);// triangle number in non-indexed buffer semantics
intersection.face.materialIndex=_group2.materialIndex;intersects.push(intersection);}}}}else {var _start5=Math.max(0,drawRange.start);var _end4=Math.min(position.count,drawRange.start+drawRange.count);for(var _i65=_start5,_il8=_end4;_i65<_il8;_i65+=3){var _a3=_i65;var _b3=_i65+1;var _c3=_i65+2;intersection=checkBufferGeometryIntersection(this,material,raycaster,_ray$2,position,morphPosition,morphTargetsRelative,uv,uv2,_a3,_b3,_c3);if(intersection){intersection.faceIndex=Math.floor(_i65/3);// triangle number in non-indexed buffer semantics
intersects.push(intersection);}}}}}else if(geometry.isGeometry){console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}}]);return Mesh;}(Object3D);Mesh.prototype.isMesh=true;function checkIntersection(object,material,raycaster,ray,pA,pB,pC,point){var intersect;if(material.side===BackSide){intersect=ray.intersectTriangle(pC,pB,pA,true,point);}else {intersect=ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point);}if(intersect===null)return null;_intersectionPointWorld.copy(point);_intersectionPointWorld.applyMatrix4(object.matrixWorld);var distance=raycaster.ray.origin.distanceTo(_intersectionPointWorld);if(distance<raycaster.near||distance>raycaster.far)return null;return {distance:distance,point:_intersectionPointWorld.clone(),object:object};}function checkBufferGeometryIntersection(object,material,raycaster,ray,position,morphPosition,morphTargetsRelative,uv,uv2,a,b,c){_vA$1.fromBufferAttribute(position,a);_vB$1.fromBufferAttribute(position,b);_vC$1.fromBufferAttribute(position,c);var morphInfluences=object.morphTargetInfluences;if(morphPosition&&morphInfluences){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(var _i66=0,il=morphPosition.length;_i66<il;_i66++){var influence=morphInfluences[_i66];var morphAttribute=morphPosition[_i66];if(influence===0)continue;_tempA.fromBufferAttribute(morphAttribute,a);_tempB.fromBufferAttribute(morphAttribute,b);_tempC.fromBufferAttribute(morphAttribute,c);if(morphTargetsRelative){_morphA.addScaledVector(_tempA,influence);_morphB.addScaledVector(_tempB,influence);_morphC.addScaledVector(_tempC,influence);}else {_morphA.addScaledVector(_tempA.sub(_vA$1),influence);_morphB.addScaledVector(_tempB.sub(_vB$1),influence);_morphC.addScaledVector(_tempC.sub(_vC$1),influence);}}_vA$1.add(_morphA);_vB$1.add(_morphB);_vC$1.add(_morphC);}if(object.isSkinnedMesh){object.boneTransform(a,_vA$1);object.boneTransform(b,_vB$1);object.boneTransform(c,_vC$1);}var intersection=checkIntersection(object,material,raycaster,ray,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(intersection){if(uv){_uvA$1.fromBufferAttribute(uv,a);_uvB$1.fromBufferAttribute(uv,b);_uvC$1.fromBufferAttribute(uv,c);intersection.uv=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2());}if(uv2){_uvA$1.fromBufferAttribute(uv2,a);_uvB$1.fromBufferAttribute(uv2,b);_uvC$1.fromBufferAttribute(uv2,c);intersection.uv2=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2());}var face={a:a,b:b,c:c,normal:new Vector3(),materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,face.normal);intersection.face=face;}return intersection;}var BoxGeometry=/*#__PURE__*/function(_BufferGeometry){_inherits(BoxGeometry,_BufferGeometry);var _super20=_createSuper(BoxGeometry);function BoxGeometry(){var _this11;var width=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var widthSegments=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var heightSegments=arguments.length>4&&arguments[4]!==undefined?arguments[4]:1;var depthSegments=arguments.length>5&&arguments[5]!==undefined?arguments[5]:1;_classCallCheck(this,BoxGeometry);_this11=_super20.call(this);_this11.type='BoxGeometry';_this11.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=_assertThisInitialized(_this11);// segments
widthSegments=Math.floor(widthSegments);heightSegments=Math.floor(heightSegments);depthSegments=Math.floor(depthSegments);// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var numberOfVertices=0;var groupStart=0;// build each side of the box geometry
buildPlane('z','y','x',-1,-1,depth,height,width,depthSegments,heightSegments,0);// px
buildPlane('z','y','x',1,-1,depth,height,-width,depthSegments,heightSegments,1);// nx
buildPlane('x','z','y',1,1,width,depth,height,widthSegments,depthSegments,2);// py
buildPlane('x','z','y',1,-1,width,depth,-height,widthSegments,depthSegments,3);// ny
buildPlane('x','y','z',1,-1,width,height,depth,widthSegments,heightSegments,4);// pz
buildPlane('x','y','z',-1,-1,width,height,-depth,widthSegments,heightSegments,5);// nz
// build geometry
_this11.setIndex(indices);_this11.setAttribute('position',new Float32BufferAttribute(vertices,3));_this11.setAttribute('normal',new Float32BufferAttribute(normals,3));_this11.setAttribute('uv',new Float32BufferAttribute(uvs,2));function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var segmentWidth=width/gridX;var segmentHeight=height/gridY;var widthHalf=width/2;var heightHalf=height/2;var depthHalf=depth/2;var gridX1=gridX+1;var gridY1=gridY+1;var vertexCounter=0;var groupCount=0;var vector=new Vector3();// generate vertices, normals and uvs
for(var iy=0;iy<gridY1;iy++){var y=iy*segmentHeight-heightHalf;for(var ix=0;ix<gridX1;ix++){var x=ix*segmentWidth-widthHalf;// set values to correct vector component
vector[u]=x*udir;vector[v]=y*vdir;vector[w]=depthHalf;// now apply vector to vertex buffer
vertices.push(vector.x,vector.y,vector.z);// set values to correct vector component
vector[u]=0;vector[v]=0;vector[w]=depth>0?1:-1;// now apply vector to normal buffer
normals.push(vector.x,vector.y,vector.z);// uvs
uvs.push(ix/gridX);uvs.push(1-iy/gridY);// counters
vertexCounter+=1;}}// indices
// 1. you need three indices to draw a single face
// 2. a single segment consists of two faces
// 3. so we need to generate six (2*3) indices per segment
for(var _iy=0;_iy<gridY;_iy++){for(var _ix=0;_ix<gridX;_ix++){var a=numberOfVertices+_ix+gridX1*_iy;var b=numberOfVertices+_ix+gridX1*(_iy+1);var c=numberOfVertices+(_ix+1)+gridX1*(_iy+1);var d=numberOfVertices+(_ix+1)+gridX1*_iy;// faces
indices.push(a,b,d);indices.push(b,c,d);// increase counter
groupCount+=6;}}// add a group to the geometry. this will ensure multi material support
scope.addGroup(groupStart,groupCount,materialIndex);// calculate new start value for groups
groupStart+=groupCount;// update total number of vertices
numberOfVertices+=vertexCounter;}return _this11;}_createClass(BoxGeometry,null,[{key:"fromJSON",value:function fromJSON(data){return new BoxGeometry(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);}}]);return BoxGeometry;}(BufferGeometry);/**
 * Uniform Utilities
 */function cloneUniforms(src){var dst={};for(var u in src){dst[u]={};for(var p in src[u]){var property=src[u][p];if(property&&(property.isColor||property.isMatrix3||property.isMatrix4||property.isVector2||property.isVector3||property.isVector4||property.isTexture||property.isQuaternion)){dst[u][p]=property.clone();}else if(Array.isArray(property)){dst[u][p]=property.slice();}else {dst[u][p]=property;}}}return dst;}function mergeUniforms(uniforms){var merged={};for(var u=0;u<uniforms.length;u++){var _tmp=cloneUniforms(uniforms[u]);for(var p in _tmp){merged[p]=_tmp[p];}}return merged;}// Legacy
var UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */var ShaderMaterial=/*#__PURE__*/function(_Material2){_inherits(ShaderMaterial,_Material2);var _super21=_createSuper(ShaderMaterial);function ShaderMaterial(parameters){var _this12;_classCallCheck(this,ShaderMaterial);_this12=_super21.call(this);_this12.type='ShaderMaterial';_this12.defines={};_this12.uniforms={};_this12.vertexShader=default_vertex;_this12.fragmentShader=default_fragment;_this12.linewidth=1;_this12.wireframe=false;_this12.wireframeLinewidth=1;_this12.fog=false;// set to use scene fog
_this12.lights=false;// set to use scene lights
_this12.clipping=false;// set to use user-defined clipping planes
_this12.extensions={derivatives:false,// set to use derivatives
fragDepth:false,// set to use fragment depth values
drawBuffers:false,// set to use draw buffers
shaderTextureLOD:false// set to use shader texture LOD
};// When rendered geometry doesn't include these attributes but the material does,
// use these default values in WebGL. This avoids errors when buffer data is missing.
_this12.defaultAttributeValues={'color':[1,1,1],'uv':[0,0],'uv2':[0,0]};_this12.index0AttributeName=undefined;_this12.uniformsNeedUpdate=false;_this12.glslVersion=null;if(parameters!==undefined){if(parameters.attributes!==undefined){console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');}_this12.setValues(parameters);}return _this12;}_createClass(ShaderMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(ShaderMaterial.prototype),"copy",this).call(this,source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=cloneUniforms(source.uniforms);this.defines=Object.assign({},source.defines);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.lights=source.lights;this.clipping=source.clipping;this.extensions=Object.assign({},source.extensions);this.glslVersion=source.glslVersion;return this;}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(ShaderMaterial.prototype),"toJSON",this).call(this,meta);data.glslVersion=this.glslVersion;data.uniforms={};for(var name in this.uniforms){var uniform=this.uniforms[name];var _value=uniform.value;if(_value&&_value.isTexture){data.uniforms[name]={type:'t',value:_value.toJSON(meta).uuid};}else if(_value&&_value.isColor){data.uniforms[name]={type:'c',value:_value.getHex()};}else if(_value&&_value.isVector2){data.uniforms[name]={type:'v2',value:_value.toArray()};}else if(_value&&_value.isVector3){data.uniforms[name]={type:'v3',value:_value.toArray()};}else if(_value&&_value.isVector4){data.uniforms[name]={type:'v4',value:_value.toArray()};}else if(_value&&_value.isMatrix3){data.uniforms[name]={type:'m3',value:_value.toArray()};}else if(_value&&_value.isMatrix4){data.uniforms[name]={type:'m4',value:_value.toArray()};}else {data.uniforms[name]={value:_value};// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
}}if(Object.keys(this.defines).length>0)data.defines=this.defines;data.vertexShader=this.vertexShader;data.fragmentShader=this.fragmentShader;var extensions={};for(var key in this.extensions){if(this.extensions[key]===true)extensions[key]=true;}if(Object.keys(extensions).length>0)data.extensions=extensions;return data;}}]);return ShaderMaterial;}(Material);ShaderMaterial.prototype.isShaderMaterial=true;var Camera=/*#__PURE__*/function(_Object3D2){_inherits(Camera,_Object3D2);var _super22=_createSuper(Camera);function Camera(){var _this13;_classCallCheck(this,Camera);_this13=_super22.call(this);_this13.type='Camera';_this13.matrixWorldInverse=new Matrix4();_this13.projectionMatrix=new Matrix4();_this13.projectionMatrixInverse=new Matrix4();return _this13;}_createClass(Camera,[{key:"copy",value:function copy(source,recursive){_get(_getPrototypeOf(Camera.prototype),"copy",this).call(this,source,recursive);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);this.projectionMatrixInverse.copy(source.projectionMatrixInverse);return this;}},{key:"getWorldDirection",value:function getWorldDirection(target){this.updateWorldMatrix(true,false);var e=this.matrixWorld.elements;return target.set(-e[8],-e[9],-e[10]).normalize();}},{key:"updateMatrixWorld",value:function updateMatrixWorld(force){_get(_getPrototypeOf(Camera.prototype),"updateMatrixWorld",this).call(this,force);this.matrixWorldInverse.copy(this.matrixWorld).invert();}},{key:"updateWorldMatrix",value:function updateWorldMatrix(updateParents,updateChildren){_get(_getPrototypeOf(Camera.prototype),"updateWorldMatrix",this).call(this,updateParents,updateChildren);this.matrixWorldInverse.copy(this.matrixWorld).invert();}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}}]);return Camera;}(Object3D);Camera.prototype.isCamera=true;var PerspectiveCamera=/*#__PURE__*/function(_Camera){_inherits(PerspectiveCamera,_Camera);var _super23=_createSuper(PerspectiveCamera);function PerspectiveCamera(){var _this14;var fov=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;var aspect=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var near=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.1;var far=arguments.length>3&&arguments[3]!==undefined?arguments[3]:2000;_classCallCheck(this,PerspectiveCamera);_this14=_super23.call(this);_this14.type='PerspectiveCamera';_this14.fov=fov;_this14.zoom=1;_this14.near=near;_this14.far=far;_this14.focus=10;_this14.aspect=aspect;_this14.view=null;_this14.filmGauge=35;// width of the film (default in millimeters)
_this14.filmOffset=0;// horizontal film offset (same unit as gauge)
_this14.updateProjectionMatrix();return _this14;}_createClass(PerspectiveCamera,[{key:"copy",value:function copy(source,recursive){_get(_getPrototypeOf(PerspectiveCamera.prototype),"copy",this).call(this,source,recursive);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=source.view===null?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this;}/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */},{key:"setFocalLength",value:function setFocalLength(focalLength){/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */var vExtentSlope=0.5*this.getFilmHeight()/focalLength;this.fov=RAD2DEG*2*Math.atan(vExtentSlope);this.updateProjectionMatrix();}/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */},{key:"getFocalLength",value:function getFocalLength(){var vExtentSlope=Math.tan(DEG2RAD*0.5*this.fov);return 0.5*this.getFilmHeight()/vExtentSlope;}},{key:"getEffectiveFOV",value:function getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*0.5*this.fov)/this.zoom);}},{key:"getFilmWidth",value:function getFilmWidth(){// film not completely covered in portrait format (aspect < 1)
return this.filmGauge*Math.min(this.aspect,1);}},{key:"getFilmHeight",value:function getFilmHeight(){// film not completely covered in landscape format (aspect > 1)
return this.filmGauge/Math.max(this.aspect,1);}/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */},{key:"setViewOffset",value:function setViewOffset(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}},{key:"clearViewOffset",value:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}},{key:"updateProjectionMatrix",value:function updateProjectionMatrix(){var near=this.near;var top=near*Math.tan(DEG2RAD*0.5*this.fov)/this.zoom;var height=2*top;var width=this.aspect*height;var left=-0.5*width;var view=this.view;if(this.view!==null&&this.view.enabled){var fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight;}var skew=this.filmOffset;if(skew!==0)left+=near*skew/this.getFilmWidth();this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(PerspectiveCamera.prototype),"toJSON",this).call(this,meta);data.object.fov=this.fov;data.object.zoom=this.zoom;data.object.near=this.near;data.object.far=this.far;data.object.focus=this.focus;data.object.aspect=this.aspect;if(this.view!==null)data.object.view=Object.assign({},this.view);data.object.filmGauge=this.filmGauge;data.object.filmOffset=this.filmOffset;return data;}}]);return PerspectiveCamera;}(Camera);PerspectiveCamera.prototype.isPerspectiveCamera=true;var fov=90,aspect=1;var CubeCamera=/*#__PURE__*/function(_Object3D3){_inherits(CubeCamera,_Object3D3);var _super24=_createSuper(CubeCamera);function CubeCamera(near,far,renderTarget){var _this15;_classCallCheck(this,CubeCamera);_this15=_super24.call(this);_this15.type='CubeCamera';if(renderTarget.isWebGLCubeRenderTarget!==true){console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');return _possibleConstructorReturn(_this15);}_this15.renderTarget=renderTarget;var cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.layers=_this15.layers;cameraPX.up.set(0,-1,0);cameraPX.lookAt(new Vector3(1,0,0));_this15.add(cameraPX);var cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.layers=_this15.layers;cameraNX.up.set(0,-1,0);cameraNX.lookAt(new Vector3(-1,0,0));_this15.add(cameraNX);var cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.layers=_this15.layers;cameraPY.up.set(0,0,1);cameraPY.lookAt(new Vector3(0,1,0));_this15.add(cameraPY);var cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.layers=_this15.layers;cameraNY.up.set(0,0,-1);cameraNY.lookAt(new Vector3(0,-1,0));_this15.add(cameraNY);var cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.layers=_this15.layers;cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new Vector3(0,0,1));_this15.add(cameraPZ);var cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.layers=_this15.layers;cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new Vector3(0,0,-1));_this15.add(cameraNZ);return _this15;}_createClass(CubeCamera,[{key:"update",value:function update(renderer,scene){if(this.parent===null)this.updateMatrixWorld();var renderTarget=this.renderTarget;var _this$children=_slicedToArray$2(this.children,6),cameraPX=_this$children[0],cameraNX=_this$children[1],cameraPY=_this$children[2],cameraNY=_this$children[3],cameraPZ=_this$children[4],cameraNZ=_this$children[5];var currentXrEnabled=renderer.xr.enabled;var currentRenderTarget=renderer.getRenderTarget();renderer.xr.enabled=false;var generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=false;renderer.setRenderTarget(renderTarget,0);renderer.render(scene,cameraPX);renderer.setRenderTarget(renderTarget,1);renderer.render(scene,cameraNX);renderer.setRenderTarget(renderTarget,2);renderer.render(scene,cameraPY);renderer.setRenderTarget(renderTarget,3);renderer.render(scene,cameraNY);renderer.setRenderTarget(renderTarget,4);renderer.render(scene,cameraPZ);renderTarget.texture.generateMipmaps=generateMipmaps;renderer.setRenderTarget(renderTarget,5);renderer.render(scene,cameraNZ);renderer.setRenderTarget(currentRenderTarget);renderer.xr.enabled=currentXrEnabled;renderTarget.texture.needsPMREMUpdate=true;}}]);return CubeCamera;}(Object3D);var CubeTexture=/*#__PURE__*/function(_Texture){_inherits(CubeTexture,_Texture);var _super25=_createSuper(CubeTexture);function CubeTexture(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){var _this16;_classCallCheck(this,CubeTexture);images=images!==undefined?images:[];mapping=mapping!==undefined?mapping:CubeReflectionMapping;_this16=_super25.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);_this16.flipY=false;return _this16;}_createClass(CubeTexture,[{key:"images",get:function get(){return this.image;},set:function set(value){this.image=value;}}]);return CubeTexture;}(Texture);CubeTexture.prototype.isCubeTexture=true;var WebGLCubeRenderTarget=/*#__PURE__*/function(_WebGLRenderTarget3){_inherits(WebGLCubeRenderTarget,_WebGLRenderTarget3);var _super26=_createSuper(WebGLCubeRenderTarget);function WebGLCubeRenderTarget(size,options,dummy){var _this17;_classCallCheck(this,WebGLCubeRenderTarget);if(Number.isInteger(options)){console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');options=dummy;}_this17=_super26.call(this,size,size,options);options=options||{};// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
_this17.texture=new CubeTexture(undefined,options.mapping,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);_this17.texture.isRenderTargetTexture=true;_this17.texture.generateMipmaps=options.generateMipmaps!==undefined?options.generateMipmaps:false;_this17.texture.minFilter=options.minFilter!==undefined?options.minFilter:LinearFilter;return _this17;}_createClass(WebGLCubeRenderTarget,[{key:"fromEquirectangularTexture",value:function fromEquirectangularTexture(renderer,texture){this.texture.type=texture.type;this.texture.format=RGBAFormat;// see #18859
this.texture.encoding=texture.encoding;this.texture.generateMipmaps=texture.generateMipmaps;this.texture.minFilter=texture.minFilter;this.texture.magFilter=texture.magFilter;var shader={uniforms:{tEquirect:{value:null}},vertexShader:/* glsl */"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:/* glsl */"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"};var geometry=new BoxGeometry(5,5,5);var material=new ShaderMaterial({name:'CubemapFromEquirect',uniforms:cloneUniforms(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader,side:BackSide,blending:NoBlending});material.uniforms.tEquirect.value=texture;var mesh=new Mesh(geometry,material);var currentMinFilter=texture.minFilter;// Avoid blurred poles
if(texture.minFilter===LinearMipmapLinearFilter)texture.minFilter=LinearFilter;var camera=new CubeCamera(1,10,this);camera.update(renderer,mesh);texture.minFilter=currentMinFilter;mesh.geometry.dispose();mesh.material.dispose();return this;}},{key:"clear",value:function clear(renderer,color,depth,stencil){var currentRenderTarget=renderer.getRenderTarget();for(var _i67=0;_i67<6;_i67++){renderer.setRenderTarget(this,_i67);renderer.clear(color,depth,stencil);}renderer.setRenderTarget(currentRenderTarget);}}]);return WebGLCubeRenderTarget;}(WebGLRenderTarget);WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;var _vector1=/*@__PURE__*/new Vector3();var _vector2=/*@__PURE__*/new Vector3();var _normalMatrix=/*@__PURE__*/new Matrix3();var Plane=/*#__PURE__*/function(){function Plane(){var normal=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3(1,0,0);var constant=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;_classCallCheck(this,Plane);// normal is assumed to be normalized
this.normal=normal;this.constant=constant;}_createClass(Plane,[{key:"set",value:function set(normal,constant){this.normal.copy(normal);this.constant=constant;return this;}},{key:"setComponents",value:function setComponents(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this;}},{key:"setFromNormalAndCoplanarPoint",value:function setFromNormalAndCoplanarPoint(normal,point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this;}},{key:"setFromCoplanarPoints",value:function setFromCoplanarPoints(a,b,c){var normal=_vector1.subVectors(c,b).cross(_vector2.subVectors(a,b)).normalize();// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
this.setFromNormalAndCoplanarPoint(normal,a);return this;}},{key:"copy",value:function copy(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this;}},{key:"normalize",value:function normalize(){// Note: will lead to a divide by zero if the plane is invalid.
var inverseNormalLength=1.0/this.normal.length();this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this;}},{key:"negate",value:function negate(){this.constant*=-1;this.normal.negate();return this;}},{key:"distanceToPoint",value:function distanceToPoint(point){return this.normal.dot(point)+this.constant;}},{key:"distanceToSphere",value:function distanceToSphere(sphere){return this.distanceToPoint(sphere.center)-sphere.radius;}},{key:"projectPoint",value:function projectPoint(point,target){return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);}},{key:"intersectLine",value:function intersectLine(line,target){var direction=line.delta(_vector1);var denominator=this.normal.dot(direction);if(denominator===0){// line is coplanar, return origin
if(this.distanceToPoint(line.start)===0){return target.copy(line.start);}// Unsure if this is the correct method to handle this case.
return null;}var t=-(line.start.dot(this.normal)+this.constant)/denominator;if(t<0||t>1){return null;}return target.copy(direction).multiplyScalar(t).add(line.start);}},{key:"intersectsLine",value:function intersectsLine(line){// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
var startSign=this.distanceToPoint(line.start);var endSign=this.distanceToPoint(line.end);return startSign<0&&endSign>0||endSign<0&&startSign>0;}},{key:"intersectsBox",value:function intersectsBox(box){return box.intersectsPlane(this);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){return sphere.intersectsPlane(this);}},{key:"coplanarPoint",value:function coplanarPoint(target){return target.copy(this.normal).multiplyScalar(-this.constant);}},{key:"applyMatrix4",value:function applyMatrix4(matrix,optionalNormalMatrix){var normalMatrix=optionalNormalMatrix||_normalMatrix.getNormalMatrix(matrix);var referencePoint=this.coplanarPoint(_vector1).applyMatrix4(matrix);var normal=this.normal.applyMatrix3(normalMatrix).normalize();this.constant=-referencePoint.dot(normal);return this;}},{key:"translate",value:function translate(offset){this.constant-=offset.dot(this.normal);return this;}},{key:"equals",value:function equals(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}}]);return Plane;}();Plane.prototype.isPlane=true;var _sphere$2=/*@__PURE__*/new Sphere();var _vector$7=/*@__PURE__*/new Vector3();var Frustum=/*#__PURE__*/function(){function Frustum(){var p0=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Plane();var p1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Plane();var p2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Plane();var p3=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new Plane();var p4=arguments.length>4&&arguments[4]!==undefined?arguments[4]:new Plane();var p5=arguments.length>5&&arguments[5]!==undefined?arguments[5]:new Plane();_classCallCheck(this,Frustum);this.planes=[p0,p1,p2,p3,p4,p5];}_createClass(Frustum,[{key:"set",value:function set(p0,p1,p2,p3,p4,p5){var planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this;}},{key:"copy",value:function copy(frustum){var planes=this.planes;for(var _i68=0;_i68<6;_i68++){planes[_i68].copy(frustum.planes[_i68]);}return this;}},{key:"setFromProjectionMatrix",value:function setFromProjectionMatrix(m){var planes=this.planes;var me=m.elements;var me0=me[0],me1=me[1],me2=me[2],me3=me[3];var me4=me[4],me5=me[5],me6=me[6],me7=me[7];var me8=me[8],me9=me[9],me10=me[10],me11=me[11];var me12=me[12],me13=me[13],me14=me[14],me15=me[15];planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize();planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize();return this;}},{key:"intersectsObject",value:function intersectsObject(object){var geometry=object.geometry;if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(_sphere$2);}},{key:"intersectsSprite",value:function intersectsSprite(sprite){_sphere$2.center.set(0,0,0);_sphere$2.radius=0.7071067811865476;_sphere$2.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(_sphere$2);}},{key:"intersectsSphere",value:function intersectsSphere(sphere){var planes=this.planes;var center=sphere.center;var negRadius=-sphere.radius;for(var _i69=0;_i69<6;_i69++){var distance=planes[_i69].distanceToPoint(center);if(distance<negRadius){return false;}}return true;}},{key:"intersectsBox",value:function intersectsBox(box){var planes=this.planes;for(var _i70=0;_i70<6;_i70++){var plane=planes[_i70];// corner at max distance
_vector$7.x=plane.normal.x>0?box.max.x:box.min.x;_vector$7.y=plane.normal.y>0?box.max.y:box.min.y;_vector$7.z=plane.normal.z>0?box.max.z:box.min.z;if(plane.distanceToPoint(_vector$7)<0){return false;}}return true;}},{key:"containsPoint",value:function containsPoint(point){var planes=this.planes;for(var _i71=0;_i71<6;_i71++){if(planes[_i71].distanceToPoint(point)<0){return false;}}return true;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}}]);return Frustum;}();function WebGLAnimation(){var context=null;var isAnimating=false;var animationLoop=null;var requestId=null;function onAnimationFrame(time,frame){animationLoop(time,frame);requestId=context.requestAnimationFrame(onAnimationFrame);}return {start:function start(){if(isAnimating===true)return;if(animationLoop===null)return;requestId=context.requestAnimationFrame(onAnimationFrame);isAnimating=true;},stop:function stop(){context.cancelAnimationFrame(requestId);isAnimating=false;},setAnimationLoop:function setAnimationLoop(callback){animationLoop=callback;},setContext:function setContext(value){context=value;}};}function WebGLAttributes(gl,capabilities){var isWebGL2=capabilities.isWebGL2;var buffers=new WeakMap();function createBuffer(attribute,bufferType){var array=attribute.array;var usage=attribute.usage;var buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer);gl.bufferData(bufferType,array,usage);attribute.onUploadCallback();var type=5126;if(array instanceof Float32Array){type=5126;}else if(array instanceof Float64Array){console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');}else if(array instanceof Uint16Array){if(attribute.isFloat16BufferAttribute){if(isWebGL2){type=5131;}else {console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');}}else {type=5123;}}else if(array instanceof Int16Array){type=5122;}else if(array instanceof Uint32Array){type=5125;}else if(array instanceof Int32Array){type=5124;}else if(array instanceof Int8Array){type=5120;}else if(array instanceof Uint8Array){type=5121;}else if(array instanceof Uint8ClampedArray){type=5121;}return {buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version};}function updateBuffer(buffer,attribute,bufferType){var array=attribute.array;var updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer);if(updateRange.count===-1){// Not using update ranges
gl.bufferSubData(bufferType,0,array);}else {if(isWebGL2){gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array,updateRange.offset,updateRange.count);}else {gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count));}updateRange.count=-1;// reset range
}}//
function get(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;return buffers.get(attribute);}function remove(attribute){if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data){gl.deleteBuffer(data.buffer);buffers["delete"](attribute);}}function update(attribute,bufferType){if(attribute.isGLBufferAttribute){var cached=buffers.get(attribute);if(!cached||cached.version<attribute.version){buffers.set(attribute,{buffer:attribute.buffer,type:attribute.type,bytesPerElement:attribute.elementSize,version:attribute.version});}return;}if(attribute.isInterleavedBufferAttribute)attribute=attribute.data;var data=buffers.get(attribute);if(data===undefined){buffers.set(attribute,createBuffer(attribute,bufferType));}else if(data.version<attribute.version){updateBuffer(data.buffer,attribute,bufferType);data.version=attribute.version;}}return {get:get,remove:remove,update:update};}var PlaneGeometry=/*#__PURE__*/function(_BufferGeometry2){_inherits(PlaneGeometry,_BufferGeometry2);var _super27=_createSuper(PlaneGeometry);function PlaneGeometry(){var _this18;var width=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var widthSegments=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var heightSegments=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,PlaneGeometry);_this18=_super27.call(this);_this18.type='PlaneGeometry';_this18.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};var width_half=width/2;var height_half=height/2;var gridX=Math.floor(widthSegments);var gridY=Math.floor(heightSegments);var gridX1=gridX+1;var gridY1=gridY+1;var segment_width=width/gridX;var segment_height=height/gridY;//
var indices=[];var vertices=[];var normals=[];var uvs=[];for(var iy=0;iy<gridY1;iy++){var y=iy*segment_height-height_half;for(var ix=0;ix<gridX1;ix++){var x=ix*segment_width-width_half;vertices.push(x,-y,0);normals.push(0,0,1);uvs.push(ix/gridX);uvs.push(1-iy/gridY);}}for(var _iy2=0;_iy2<gridY;_iy2++){for(var _ix2=0;_ix2<gridX;_ix2++){var a=_ix2+gridX1*_iy2;var b=_ix2+gridX1*(_iy2+1);var c=_ix2+1+gridX1*(_iy2+1);var d=_ix2+1+gridX1*_iy2;indices.push(a,b,d);indices.push(b,c,d);}}_this18.setIndex(indices);_this18.setAttribute('position',new Float32BufferAttribute(vertices,3));_this18.setAttribute('normal',new Float32BufferAttribute(normals,3));_this18.setAttribute('uv',new Float32BufferAttribute(uvs,2));return _this18;}_createClass(PlaneGeometry,null,[{key:"fromJSON",value:function fromJSON(data){return new PlaneGeometry(data.width,data.height,data.widthSegments,data.heightSegments);}}]);return PlaneGeometry;}(BufferGeometry);var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";var alphatest_pars_fragment="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";var normal_fragment_begin="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var normal_pars_fragment="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_pars_vertex="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_vertex="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var output_fragment="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmission_fragment="#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";var transmission_pars_fragment="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";var vertex$g="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";var fragment$g="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var vertex$f="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";var fragment$f="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var vertex$e="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";var fragment$e="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";var vertex$d="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";var fragment$d="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";var vertex$c="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";var fragment$c="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var vertex$b="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var fragment$b="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var vertex$a="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";var fragment$a="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$9="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var fragment$9="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$8="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";var fragment$8="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$7="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";var fragment$7="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";var vertex$6="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var fragment$6="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$5="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";var fragment$5="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$4="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var fragment$4="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var vertex$3="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";var fragment$3="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var vertex$2="#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var fragment$2="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var vertex$1="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var fragment$1="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,alphatest_pars_fragment:alphatest_pars_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normal_pars_fragment:normal_pars_fragment,normal_pars_vertex:normal_pars_vertex,normal_vertex:normal_vertex,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,output_fragment:output_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmission_fragment:transmission_fragment,transmission_pars_fragment:transmission_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_vert:vertex$g,background_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1};/**
 * Uniforms library for shared webgl shaders
 */var UniformsLib={common:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},map:{value:null},uvTransform:{value:new Matrix3()},uv2Transform:{value:new Matrix3()},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1.0},// basic, lambert, phong
ior:{value:1.5},// standard, physical
refractionRatio:{value:0.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:0.00025},fogNear:{value:1},fogFar:{value:2000},fogColor:{value:new Color(0xffffff)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},size:{value:1.0},scale:{value:1.0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3()}},sprite:{diffuse:{value:new Color(0xffffff)},opacity:{value:1.0},center:{value:new Vector2(0.5,0.5)},rotation:{value:0.0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3()}}};var ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},specular:{value:new Color(0x111111)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)},roughness:{value:1.0},metalness:{value:0.0},envMapIntensity:{value:1}// temporary
}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0x000000)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3()},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1.0}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3()},nearDistance:{value:1},farDistance:{value:1000}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0x00000)},opacity:{value:1.0}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Color(0x000000)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Vector2()},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Color(0x000000)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Color(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(renderer,cubemaps,state,objects,alpha,premultipliedAlpha){var clearColor=new Color(0x000000);var clearAlpha=alpha===true?0:1;var planeMesh;var boxMesh;var currentBackground=null;var currentBackgroundVersion=0;var currentTonemapping=null;function render(renderList,scene){var forceClear=false;var background=scene.isScene===true?scene.background:null;if(background&&background.isTexture){background=cubemaps.get(background);}// Ignore background in AR
// TODO: Reconsider this.
var xr=renderer.xr;var session=xr.getSession&&xr.getSession();if(session&&session.environmentBlendMode==='additive'){background=null;}if(background===null){setClear(clearColor,clearAlpha);}else if(background&&background.isColor){setClear(background,1);forceClear=true;}if(renderer.autoClear||forceClear){renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil);}if(background&&(background.isCubeTexture||background.mapping===CubeUVReflectionMapping)){if(boxMesh===undefined){boxMesh=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:'BackgroundCubeMaterial',uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));boxMesh.geometry.deleteAttribute('normal');boxMesh.geometry.deleteAttribute('uv');boxMesh.onBeforeRender=function(renderer,scene,camera){this.matrixWorld.copyPosition(camera.matrixWorld);};// enable code injection for non-built-in material
Object.defineProperty(boxMesh.material,'envMap',{get:function get(){return this.uniforms.envMap.value;}});objects.update(boxMesh);}boxMesh.material.uniforms.envMap.value=background;boxMesh.material.uniforms.flipEnvMap.value=background.isCubeTexture&&background.isRenderTargetTexture===false?-1:1;if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){boxMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(boxMesh,boxMesh.geometry,boxMesh.material,0,0,null);}else if(background&&background.isTexture){if(planeMesh===undefined){planeMesh=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:'BackgroundMaterial',uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));planeMesh.geometry.deleteAttribute('normal');// enable code injection for non-built-in material
Object.defineProperty(planeMesh.material,'map',{get:function get(){return this.uniforms.t2D.value;}});objects.update(planeMesh);}planeMesh.material.uniforms.t2D.value=background;if(background.matrixAutoUpdate===true){background.updateMatrix();}planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);if(currentBackground!==background||currentBackgroundVersion!==background.version||currentTonemapping!==renderer.toneMapping){planeMesh.material.needsUpdate=true;currentBackground=background;currentBackgroundVersion=background.version;currentTonemapping=renderer.toneMapping;}// push to the pre-sorted opaque render list
renderList.unshift(planeMesh,planeMesh.geometry,planeMesh.material,0,0,null);}}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha);}return {getClearColor:function getClearColor(){return clearColor;},setClearColor:function setClearColor(color){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;clearColor.set(color);clearAlpha=alpha;setClear(clearColor,clearAlpha);},getClearAlpha:function getClearAlpha(){return clearAlpha;},setClearAlpha:function setClearAlpha(alpha){clearAlpha=alpha;setClear(clearColor,clearAlpha);},render:render};}function WebGLBindingStates(gl,extensions,attributes,capabilities){var maxVertexAttributes=gl.getParameter(34921);var extension=capabilities.isWebGL2?null:extensions.get('OES_vertex_array_object');var vaoAvailable=capabilities.isWebGL2||extension!==null;var bindingStates={};var defaultState=createBindingState(null);var currentState=defaultState;function setup(object,material,program,geometry,index){var updateBuffers=false;if(vaoAvailable){var state=getBindingState(geometry,program,material);if(currentState!==state){currentState=state;bindVertexArrayObject(currentState.object);}updateBuffers=needsUpdate(geometry,index);if(updateBuffers)saveCache(geometry,index);}else {var wireframe=material.wireframe===true;if(currentState.geometry!==geometry.id||currentState.program!==program.id||currentState.wireframe!==wireframe){currentState.geometry=geometry.id;currentState.program=program.id;currentState.wireframe=wireframe;updateBuffers=true;}}if(object.isInstancedMesh===true){updateBuffers=true;}if(index!==null){attributes.update(index,34963);}if(updateBuffers){setupVertexAttributes(object,material,program,geometry);if(index!==null){gl.bindBuffer(34963,attributes.get(index).buffer);}}}function createVertexArrayObject(){if(capabilities.isWebGL2)return gl.createVertexArray();return extension.createVertexArrayOES();}function bindVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.bindVertexArray(vao);return extension.bindVertexArrayOES(vao);}function deleteVertexArrayObject(vao){if(capabilities.isWebGL2)return gl.deleteVertexArray(vao);return extension.deleteVertexArrayOES(vao);}function getBindingState(geometry,program,material){var wireframe=material.wireframe===true;var programMap=bindingStates[geometry.id];if(programMap===undefined){programMap={};bindingStates[geometry.id]=programMap;}var stateMap=programMap[program.id];if(stateMap===undefined){stateMap={};programMap[program.id]=stateMap;}var state=stateMap[wireframe];if(state===undefined){state=createBindingState(createVertexArrayObject());stateMap[wireframe]=state;}return state;}function createBindingState(vao){var newAttributes=[];var enabledAttributes=[];var attributeDivisors=[];for(var _i72=0;_i72<maxVertexAttributes;_i72++){newAttributes[_i72]=0;enabledAttributes[_i72]=0;attributeDivisors[_i72]=0;}return {// for backward compatibility on non-VAO support browser
geometry:null,program:null,wireframe:false,newAttributes:newAttributes,enabledAttributes:enabledAttributes,attributeDivisors:attributeDivisors,object:vao,attributes:{},index:null};}function needsUpdate(geometry,index){var cachedAttributes=currentState.attributes;var geometryAttributes=geometry.attributes;var attributesNum=0;for(var key in geometryAttributes){var cachedAttribute=cachedAttributes[key];var geometryAttribute=geometryAttributes[key];if(cachedAttribute===undefined)return true;if(cachedAttribute.attribute!==geometryAttribute)return true;if(cachedAttribute.data!==geometryAttribute.data)return true;attributesNum++;}if(currentState.attributesNum!==attributesNum)return true;if(currentState.index!==index)return true;return false;}function saveCache(geometry,index){var cache={};var attributes=geometry.attributes;var attributesNum=0;for(var key in attributes){var attribute=attributes[key];var data={};data.attribute=attribute;if(attribute.data){data.data=attribute.data;}cache[key]=data;attributesNum++;}currentState.attributes=cache;currentState.attributesNum=attributesNum;currentState.index=index;}function initAttributes(){var newAttributes=currentState.newAttributes;for(var _i73=0,il=newAttributes.length;_i73<il;_i73++){newAttributes[_i73]=0;}}function enableAttribute(attribute){enableAttributeAndDivisor(attribute,0);}function enableAttributeAndDivisor(attribute,meshPerAttribute){var newAttributes=currentState.newAttributes;var enabledAttributes=currentState.enabledAttributes;var attributeDivisors=currentState.attributeDivisors;newAttributes[attribute]=1;if(enabledAttributes[attribute]===0){gl.enableVertexAttribArray(attribute);enabledAttributes[attribute]=1;}if(attributeDivisors[attribute]!==meshPerAttribute){var _extension=capabilities.isWebGL2?gl:extensions.get('ANGLE_instanced_arrays');_extension[capabilities.isWebGL2?'vertexAttribDivisor':'vertexAttribDivisorANGLE'](attribute,meshPerAttribute);attributeDivisors[attribute]=meshPerAttribute;}}function disableUnusedAttributes(){var newAttributes=currentState.newAttributes;var enabledAttributes=currentState.enabledAttributes;for(var _i74=0,il=enabledAttributes.length;_i74<il;_i74++){if(enabledAttributes[_i74]!==newAttributes[_i74]){gl.disableVertexAttribArray(_i74);enabledAttributes[_i74]=0;}}}function vertexAttribPointer(index,size,type,normalized,stride,offset){if(capabilities.isWebGL2===true&&(type===5124||type===5125)){gl.vertexAttribIPointer(index,size,type,stride,offset);}else {gl.vertexAttribPointer(index,size,type,normalized,stride,offset);}}function setupVertexAttributes(object,material,program,geometry){if(capabilities.isWebGL2===false&&(object.isInstancedMesh||geometry.isInstancedBufferGeometry)){if(extensions.get('ANGLE_instanced_arrays')===null)return;}initAttributes();var geometryAttributes=geometry.attributes;var programAttributes=program.getAttributes();var materialDefaultAttributeValues=material.defaultAttributeValues;for(var name in programAttributes){var programAttribute=programAttributes[name];if(programAttribute.location>=0){var geometryAttribute=geometryAttributes[name];if(geometryAttribute===undefined){if(name==='instanceMatrix'&&object.instanceMatrix)geometryAttribute=object.instanceMatrix;if(name==='instanceColor'&&object.instanceColor)geometryAttribute=object.instanceColor;}if(geometryAttribute!==undefined){var normalized=geometryAttribute.normalized;var size=geometryAttribute.itemSize;var attribute=attributes.get(geometryAttribute);// TODO Attribute may not be available on context restore
if(attribute===undefined)continue;var buffer=attribute.buffer;var type=attribute.type;var bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){var data=geometryAttribute.data;var stride=data.stride;var offset=geometryAttribute.offset;if(data&&data.isInstancedInterleavedBuffer){for(var _i75=0;_i75<programAttribute.locationSize;_i75++){enableAttributeAndDivisor(programAttribute.location+_i75,data.meshPerAttribute);}if(object.isInstancedMesh!==true&&geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=data.meshPerAttribute*data.count;}}else {for(var _i76=0;_i76<programAttribute.locationSize;_i76++){enableAttribute(programAttribute.location+_i76);}}gl.bindBuffer(34962,buffer);for(var _i77=0;_i77<programAttribute.locationSize;_i77++){vertexAttribPointer(programAttribute.location+_i77,size/programAttribute.locationSize,type,normalized,stride*bytesPerElement,(offset+size/programAttribute.locationSize*_i77)*bytesPerElement);}}else {if(geometryAttribute.isInstancedBufferAttribute){for(var _i78=0;_i78<programAttribute.locationSize;_i78++){enableAttributeAndDivisor(programAttribute.location+_i78,geometryAttribute.meshPerAttribute);}if(object.isInstancedMesh!==true&&geometry._maxInstanceCount===undefined){geometry._maxInstanceCount=geometryAttribute.meshPerAttribute*geometryAttribute.count;}}else {for(var _i79=0;_i79<programAttribute.locationSize;_i79++){enableAttribute(programAttribute.location+_i79);}}gl.bindBuffer(34962,buffer);for(var _i80=0;_i80<programAttribute.locationSize;_i80++){vertexAttribPointer(programAttribute.location+_i80,size/programAttribute.locationSize,type,normalized,size*bytesPerElement,size/programAttribute.locationSize*_i80*bytesPerElement);}}}else if(materialDefaultAttributeValues!==undefined){var _value2=materialDefaultAttributeValues[name];if(_value2!==undefined){switch(_value2.length){case 2:gl.vertexAttrib2fv(programAttribute.location,_value2);break;case 3:gl.vertexAttrib3fv(programAttribute.location,_value2);break;case 4:gl.vertexAttrib4fv(programAttribute.location,_value2);break;default:gl.vertexAttrib1fv(programAttribute.location,_value2);}}}}}disableUnusedAttributes();}function dispose(){reset();for(var geometryId in bindingStates){var programMap=bindingStates[geometryId];for(var programId in programMap){var stateMap=programMap[programId];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometryId];}}function releaseStatesOfGeometry(geometry){if(bindingStates[geometry.id]===undefined)return;var programMap=bindingStates[geometry.id];for(var programId in programMap){var stateMap=programMap[programId];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[programId];}delete bindingStates[geometry.id];}function releaseStatesOfProgram(program){for(var geometryId in bindingStates){var programMap=bindingStates[geometryId];if(programMap[program.id]===undefined)continue;var stateMap=programMap[program.id];for(var wireframe in stateMap){deleteVertexArrayObject(stateMap[wireframe].object);delete stateMap[wireframe];}delete programMap[program.id];}}function reset(){resetDefaultState();if(currentState===defaultState)return;currentState=defaultState;bindVertexArrayObject(currentState.object);}// for backward-compatilibity
function resetDefaultState(){defaultState.geometry=null;defaultState.program=null;defaultState.wireframe=false;}return {setup:setup,reset:reset,resetDefaultState:resetDefaultState,dispose:dispose,releaseStatesOfGeometry:releaseStatesOfGeometry,releaseStatesOfProgram:releaseStatesOfProgram,initAttributes:initAttributes,enableAttribute:enableAttribute,disableUnusedAttributes:disableUnusedAttributes};}function WebGLBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}function render(start,count){gl.drawArrays(mode,start,count);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawArraysInstanced';}else {extension=extensions.get('ANGLE_instanced_arrays');methodName='drawArraysInstancedANGLE';if(extension===null){console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,start,count,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.render=render;this.renderInstances=renderInstances;}function WebGLCapabilities(gl,extensions,parameters){var maxAnisotropy;function getMaxAnisotropy(){if(maxAnisotropy!==undefined)return maxAnisotropy;if(extensions.has('EXT_texture_filter_anisotropic')===true){var extension=extensions.get('EXT_texture_filter_anisotropic');maxAnisotropy=gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);}else {maxAnisotropy=0;}return maxAnisotropy;}function getMaxPrecision(precision){if(precision==='highp'){if(gl.getShaderPrecisionFormat(35633,36338).precision>0&&gl.getShaderPrecisionFormat(35632,36338).precision>0){return 'highp';}precision='mediump';}if(precision==='mediump'){if(gl.getShaderPrecisionFormat(35633,36337).precision>0&&gl.getShaderPrecisionFormat(35632,36337).precision>0){return 'mediump';}}return 'lowp';}var isWebGL2=typeof WebGL2RenderingContext!=='undefined'&&gl instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=='undefined'&&gl instanceof WebGL2ComputeRenderingContext;var precision=parameters.precision!==undefined?parameters.precision:'highp';var maxPrecision=getMaxPrecision(precision);if(maxPrecision!==precision){console.warn('THREE.WebGLRenderer:',precision,'not supported, using',maxPrecision,'instead.');precision=maxPrecision;}var drawBuffers=isWebGL2||extensions.has('WEBGL_draw_buffers');var logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===true;var maxTextures=gl.getParameter(34930);var maxVertexTextures=gl.getParameter(35660);var maxTextureSize=gl.getParameter(3379);var maxCubemapSize=gl.getParameter(34076);var maxAttributes=gl.getParameter(34921);var maxVertexUniforms=gl.getParameter(36347);var maxVaryings=gl.getParameter(36348);var maxFragmentUniforms=gl.getParameter(36349);var vertexTextures=maxVertexTextures>0;var floatFragmentTextures=isWebGL2||extensions.has('OES_texture_float');var floatVertexTextures=vertexTextures&&floatFragmentTextures;var maxSamples=isWebGL2?gl.getParameter(36183):0;return {isWebGL2:isWebGL2,drawBuffers:drawBuffers,getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures,maxSamples:maxSamples};}function WebGLClipping(properties){var scope=this;var globalState=null,numGlobalPlanes=0,localClippingEnabled=false,renderingShadows=false;var plane=new Plane(),viewNormalMatrix=new Matrix3(),uniform={value:null,needsUpdate:false};this.uniform=uniform;this.numPlanes=0;this.numIntersection=0;this.init=function(planes,enableLocalClipping,camera){var enabled=planes.length!==0||enableLocalClipping||// enable state of previous frame - the clipping code has to
// run another frame in order to reset the state:
numGlobalPlanes!==0||localClippingEnabled;localClippingEnabled=enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled;};this.beginShadows=function(){renderingShadows=true;projectPlanes(null);};this.endShadows=function(){renderingShadows=false;resetGlobalState();};this.setState=function(material,camera,useCache){var planes=material.clippingPlanes,clipIntersection=material.clipIntersection,clipShadows=material.clipShadows;var materialProperties=properties.get(material);if(!localClippingEnabled||planes===null||planes.length===0||renderingShadows&&!clipShadows){// there's no local clipping
if(renderingShadows){// there's no global clipping
projectPlanes(null);}else {resetGlobalState();}}else {var nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=nGlobal*4;var dstArray=materialProperties.clippingState||null;uniform.value=dstArray;// ensure unique state
dstArray=projectPlanes(planes,camera,lGlobal,useCache);for(var _i81=0;_i81!==lGlobal;++_i81){dstArray[_i81]=globalState[_i81];}materialProperties.clippingState=dstArray;this.numIntersection=clipIntersection?this.numPlanes:0;this.numPlanes+=nGlobal;}};function resetGlobalState(){if(uniform.value!==globalState){uniform.value=globalState;uniform.needsUpdate=numGlobalPlanes>0;}scope.numPlanes=numGlobalPlanes;scope.numIntersection=0;}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=planes!==null?planes.length:0;var dstArray=null;if(nPlanes!==0){dstArray=uniform.value;if(skipTransform!==true||dstArray===null){var flatSize=dstOffset+nPlanes*4,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix);if(dstArray===null||dstArray.length<flatSize){dstArray=new Float32Array(flatSize);}for(var _i82=0,i4=dstOffset;_i82!==nPlanes;++_i82,i4+=4){plane.copy(planes[_i82]).applyMatrix4(viewMatrix,viewNormalMatrix);plane.normal.toArray(dstArray,i4);dstArray[i4+3]=plane.constant;}}uniform.value=dstArray;uniform.needsUpdate=true;}scope.numPlanes=nPlanes;scope.numIntersection=0;return dstArray;}}function WebGLCubeMaps(renderer){var cubemaps=new WeakMap();function mapTextureMapping(texture,mapping){if(mapping===EquirectangularReflectionMapping){texture.mapping=CubeReflectionMapping;}else if(mapping===EquirectangularRefractionMapping){texture.mapping=CubeRefractionMapping;}return texture;}function get(texture){if(texture&&texture.isTexture&&texture.isRenderTargetTexture===false){var mapping=texture.mapping;if(mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping){if(cubemaps.has(texture)){var cubemap=cubemaps.get(texture).texture;return mapTextureMapping(cubemap,texture.mapping);}else {var image=texture.image;if(image&&image.height>0){var renderTarget=new WebGLCubeRenderTarget(image.height/2);renderTarget.fromEquirectangularTexture(renderer,texture);cubemaps.set(texture,renderTarget);texture.addEventListener('dispose',onTextureDispose);return mapTextureMapping(renderTarget.texture,texture.mapping);}else {// image not yet ready. try the conversion next frame
return null;}}}}return texture;}function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);var cubemap=cubemaps.get(texture);if(cubemap!==undefined){cubemaps["delete"](texture);cubemap.dispose();}}function dispose(){cubemaps=new WeakMap();}return {get:get,dispose:dispose};}var OrthographicCamera=/*#__PURE__*/function(_Camera2){_inherits(OrthographicCamera,_Camera2);var _super28=_createSuper(OrthographicCamera);function OrthographicCamera(){var _this19;var left=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-1;var right=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var top=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var bottom=arguments.length>3&&arguments[3]!==undefined?arguments[3]:-1;var near=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0.1;var far=arguments.length>5&&arguments[5]!==undefined?arguments[5]:2000;_classCallCheck(this,OrthographicCamera);_this19=_super28.call(this);_this19.type='OrthographicCamera';_this19.zoom=1;_this19.view=null;_this19.left=left;_this19.right=right;_this19.top=top;_this19.bottom=bottom;_this19.near=near;_this19.far=far;_this19.updateProjectionMatrix();return _this19;}_createClass(OrthographicCamera,[{key:"copy",value:function copy(source,recursive){_get(_getPrototypeOf(OrthographicCamera.prototype),"copy",this).call(this,source,recursive);this.left=source.left;this.right=source.right;this.top=source.top;this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;this.view=source.view===null?null:Object.assign({},source.view);return this;}},{key:"setViewOffset",value:function setViewOffset(fullWidth,fullHeight,x,y,width,height){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1};}this.view.enabled=true;this.view.fullWidth=fullWidth;this.view.fullHeight=fullHeight;this.view.offsetX=x;this.view.offsetY=y;this.view.width=width;this.view.height=height;this.updateProjectionMatrix();}},{key:"clearViewOffset",value:function clearViewOffset(){if(this.view!==null){this.view.enabled=false;}this.updateProjectionMatrix();}},{key:"updateProjectionMatrix",value:function updateProjectionMatrix(){var dx=(this.right-this.left)/(2*this.zoom);var dy=(this.top-this.bottom)/(2*this.zoom);var cx=(this.right+this.left)/2;var cy=(this.top+this.bottom)/2;var left=cx-dx;var right=cx+dx;var top=cy+dy;var bottom=cy-dy;if(this.view!==null&&this.view.enabled){var scaleW=(this.right-this.left)/this.view.fullWidth/this.zoom;var scaleH=(this.top-this.bottom)/this.view.fullHeight/this.zoom;left+=scaleW*this.view.offsetX;right=left+scaleW*this.view.width;top-=scaleH*this.view.offsetY;bottom=top-scaleH*this.view.height;}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert();}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(OrthographicCamera.prototype),"toJSON",this).call(this,meta);data.object.zoom=this.zoom;data.object.left=this.left;data.object.right=this.right;data.object.top=this.top;data.object.bottom=this.bottom;data.object.near=this.near;data.object.far=this.far;if(this.view!==null)data.object.view=Object.assign({},this.view);return data;}}]);return OrthographicCamera;}(Camera);OrthographicCamera.prototype.isOrthographicCamera=true;var RawShaderMaterial=/*#__PURE__*/function(_ShaderMaterial){_inherits(RawShaderMaterial,_ShaderMaterial);var _super29=_createSuper(RawShaderMaterial);function RawShaderMaterial(parameters){var _this20;_classCallCheck(this,RawShaderMaterial);_this20=_super29.call(this,parameters);_this20.type='RawShaderMaterial';return _this20;}return _createClass(RawShaderMaterial);}(ShaderMaterial);RawShaderMaterial.prototype.isRawShaderMaterial=true;var LOD_MIN=4;var LOD_MAX=8;var SIZE_MAX=Math.pow(2,LOD_MAX);// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
var EXTRA_LOD_SIGMA=[0.125,0.215,0.35,0.446,0.526,0.582];var TOTAL_LODS=LOD_MAX-LOD_MIN+1+EXTRA_LOD_SIGMA.length;// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
var MAX_SAMPLES=20;var _flatCamera=/*@__PURE__*/new OrthographicCamera();var _createPlanes2=/*@__PURE__*/_createPlanes(),_lodPlanes=_createPlanes2._lodPlanes,_sizeLods=_createPlanes2._sizeLods,_sigmas=_createPlanes2._sigmas;var _clearColor=/*@__PURE__*/new Color();var _oldTarget=null;// Golden Ratio
var PHI=(1+Math.sqrt(5))/2;var INV_PHI=1/PHI;// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
var _axisDirections=[/*@__PURE__*/new Vector3(1,1,1),/*@__PURE__*/new Vector3(-1,1,1),/*@__PURE__*/new Vector3(1,1,-1),/*@__PURE__*/new Vector3(-1,1,-1),/*@__PURE__*/new Vector3(0,PHI,INV_PHI),/*@__PURE__*/new Vector3(0,PHI,-INV_PHI),/*@__PURE__*/new Vector3(INV_PHI,0,PHI),/*@__PURE__*/new Vector3(-INV_PHI,0,PHI),/*@__PURE__*/new Vector3(PHI,INV_PHI,0),/*@__PURE__*/new Vector3(-PHI,INV_PHI,0)];/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/var PMREMGenerator=/*#__PURE__*/function(){function PMREMGenerator(renderer){_classCallCheck(this,PMREMGenerator);this._renderer=renderer;this._pingPongRenderTarget=null;this._blurMaterial=_getBlurShader(MAX_SAMPLES);this._equirectShader=null;this._cubemapShader=null;this._compileMaterial(this._blurMaterial);}/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */_createClass(PMREMGenerator,[{key:"fromScene",value:function fromScene(scene){var sigma=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var near=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.1;var far=arguments.length>3&&arguments[3]!==undefined?arguments[3]:100;_oldTarget=this._renderer.getRenderTarget();var cubeUVRenderTarget=this._allocateTargets();this._sceneToCubeUV(scene,near,far,cubeUVRenderTarget);if(sigma>0){this._blur(cubeUVRenderTarget,0,0,sigma);}this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */},{key:"fromEquirectangular",value:function fromEquirectangular(equirectangular){var renderTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this._fromTexture(equirectangular,renderTarget);}/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */},{key:"fromCubemap",value:function fromCubemap(cubemap){var renderTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return this._fromTexture(cubemap,renderTarget);}/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */},{key:"compileCubemapShader",value:function compileCubemapShader(){if(this._cubemapShader===null){this._cubemapShader=_getCubemapShader();this._compileMaterial(this._cubemapShader);}}/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */},{key:"compileEquirectangularShader",value:function compileEquirectangularShader(){if(this._equirectShader===null){this._equirectShader=_getEquirectShader();this._compileMaterial(this._equirectShader);}}/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */},{key:"dispose",value:function dispose(){this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();if(this._cubemapShader!==null)this._cubemapShader.dispose();if(this._equirectShader!==null)this._equirectShader.dispose();for(var _i83=0;_i83<_lodPlanes.length;_i83++){_lodPlanes[_i83].dispose();}}// private interface
},{key:"_cleanup",value:function _cleanup(outputTarget){this._renderer.setRenderTarget(_oldTarget);outputTarget.scissorTest=false;_setViewport(outputTarget,0,0,outputTarget.width,outputTarget.height);}},{key:"_fromTexture",value:function _fromTexture(texture,renderTarget){_oldTarget=this._renderer.getRenderTarget();var cubeUVRenderTarget=renderTarget||this._allocateTargets(texture);this._textureToCubeUV(texture,cubeUVRenderTarget);this._applyPMREM(cubeUVRenderTarget);this._cleanup(cubeUVRenderTarget);return cubeUVRenderTarget;}},{key:"_allocateTargets",value:function _allocateTargets(texture){// warning: null texture is valid
var params={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:false,type:HalfFloatType,format:RGBAFormat,encoding:LinearEncoding,depthBuffer:false};var cubeUVRenderTarget=_createRenderTarget(params);cubeUVRenderTarget.depthBuffer=texture?false:true;if(this._pingPongRenderTarget===null){this._pingPongRenderTarget=_createRenderTarget(params);}return cubeUVRenderTarget;}},{key:"_compileMaterial",value:function _compileMaterial(material){var tmpMesh=new Mesh(_lodPlanes[0],material);this._renderer.compile(tmpMesh,_flatCamera);}},{key:"_sceneToCubeUV",value:function _sceneToCubeUV(scene,near,far,cubeUVRenderTarget){var fov=90;var aspect=1;var cubeCamera=new PerspectiveCamera(fov,aspect,near,far);var upSign=[1,-1,1,1,1,1];var forwardSign=[1,1,1,-1,-1,-1];var renderer=this._renderer;var originalAutoClear=renderer.autoClear;var toneMapping=renderer.toneMapping;renderer.getClearColor(_clearColor);renderer.toneMapping=NoToneMapping;renderer.autoClear=false;var backgroundMaterial=new MeshBasicMaterial({name:'PMREM.Background',side:BackSide,depthWrite:false,depthTest:false});var backgroundBox=new Mesh(new BoxGeometry(),backgroundMaterial);var useSolidColor=false;var background=scene.background;if(background){if(background.isColor){backgroundMaterial.color.copy(background);scene.background=null;useSolidColor=true;}}else {backgroundMaterial.color.copy(_clearColor);useSolidColor=true;}for(var _i84=0;_i84<6;_i84++){var col=_i84%3;if(col===0){cubeCamera.up.set(0,upSign[_i84],0);cubeCamera.lookAt(forwardSign[_i84],0,0);}else if(col===1){cubeCamera.up.set(0,0,upSign[_i84]);cubeCamera.lookAt(0,forwardSign[_i84],0);}else {cubeCamera.up.set(0,upSign[_i84],0);cubeCamera.lookAt(0,0,forwardSign[_i84]);}_setViewport(cubeUVRenderTarget,col*SIZE_MAX,_i84>2?SIZE_MAX:0,SIZE_MAX,SIZE_MAX);renderer.setRenderTarget(cubeUVRenderTarget);if(useSolidColor){renderer.render(backgroundBox,cubeCamera);}renderer.render(scene,cubeCamera);}backgroundBox.geometry.dispose();backgroundBox.material.dispose();renderer.toneMapping=toneMapping;renderer.autoClear=originalAutoClear;scene.background=background;}},{key:"_textureToCubeUV",value:function _textureToCubeUV(texture,cubeUVRenderTarget){var renderer=this._renderer;var isCubeTexture=texture.mapping===CubeReflectionMapping||texture.mapping===CubeRefractionMapping;if(isCubeTexture){if(this._cubemapShader===null){this._cubemapShader=_getCubemapShader();}this._cubemapShader.uniforms.flipEnvMap.value=texture.isRenderTargetTexture===false?-1:1;}else {if(this._equirectShader===null){this._equirectShader=_getEquirectShader();}}var material=isCubeTexture?this._cubemapShader:this._equirectShader;var mesh=new Mesh(_lodPlanes[0],material);var uniforms=material.uniforms;uniforms['envMap'].value=texture;if(!isCubeTexture){uniforms['texelSize'].value.set(1.0/texture.image.width,1.0/texture.image.height);}_setViewport(cubeUVRenderTarget,0,0,3*SIZE_MAX,2*SIZE_MAX);renderer.setRenderTarget(cubeUVRenderTarget);renderer.render(mesh,_flatCamera);}},{key:"_applyPMREM",value:function _applyPMREM(cubeUVRenderTarget){var renderer=this._renderer;var autoClear=renderer.autoClear;renderer.autoClear=false;for(var _i85=1;_i85<TOTAL_LODS;_i85++){var sigma=Math.sqrt(_sigmas[_i85]*_sigmas[_i85]-_sigmas[_i85-1]*_sigmas[_i85-1]);var poleAxis=_axisDirections[(_i85-1)%_axisDirections.length];this._blur(cubeUVRenderTarget,_i85-1,_i85,sigma,poleAxis);}renderer.autoClear=autoClear;}/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */},{key:"_blur",value:function _blur(cubeUVRenderTarget,lodIn,lodOut,sigma,poleAxis){var pingPongRenderTarget=this._pingPongRenderTarget;this._halfBlur(cubeUVRenderTarget,pingPongRenderTarget,lodIn,lodOut,sigma,'latitudinal',poleAxis);this._halfBlur(pingPongRenderTarget,cubeUVRenderTarget,lodOut,lodOut,sigma,'longitudinal',poleAxis);}},{key:"_halfBlur",value:function _halfBlur(targetIn,targetOut,lodIn,lodOut,sigmaRadians,direction,poleAxis){var renderer=this._renderer;var blurMaterial=this._blurMaterial;if(direction!=='latitudinal'&&direction!=='longitudinal'){console.error('blur direction must be either latitudinal or longitudinal!');}// Number of standard deviations at which to cut off the discrete approximation.
var STANDARD_DEVIATIONS=3;var blurMesh=new Mesh(_lodPlanes[lodOut],blurMaterial);var blurUniforms=blurMaterial.uniforms;var pixels=_sizeLods[lodIn]-1;var radiansPerPixel=isFinite(sigmaRadians)?Math.PI/(2*pixels):2*Math.PI/(2*MAX_SAMPLES-1);var sigmaPixels=sigmaRadians/radiansPerPixel;var samples=isFinite(sigmaRadians)?1+Math.floor(STANDARD_DEVIATIONS*sigmaPixels):MAX_SAMPLES;if(samples>MAX_SAMPLES){console.warn("sigmaRadians, ".concat(sigmaRadians,", is too large and will clip, as it requested ").concat(samples," samples when the maximum is set to ").concat(MAX_SAMPLES));}var weights=[];var sum=0;for(var _i86=0;_i86<MAX_SAMPLES;++_i86){var _x2=_i86/sigmaPixels;var weight=Math.exp(-_x2*_x2/2);weights.push(weight);if(_i86===0){sum+=weight;}else if(_i86<samples){sum+=2*weight;}}for(var _i87=0;_i87<weights.length;_i87++){weights[_i87]=weights[_i87]/sum;}blurUniforms['envMap'].value=targetIn.texture;blurUniforms['samples'].value=samples;blurUniforms['weights'].value=weights;blurUniforms['latitudinal'].value=direction==='latitudinal';if(poleAxis){blurUniforms['poleAxis'].value=poleAxis;}blurUniforms['dTheta'].value=radiansPerPixel;blurUniforms['mipInt'].value=LOD_MAX-lodIn;var outputSize=_sizeLods[lodOut];var x=3*Math.max(0,SIZE_MAX-2*outputSize);var y=(lodOut===0?0:2*SIZE_MAX)+2*outputSize*(lodOut>LOD_MAX-LOD_MIN?lodOut-LOD_MAX+LOD_MIN:0);_setViewport(targetOut,x,y,3*outputSize,2*outputSize);renderer.setRenderTarget(targetOut);renderer.render(blurMesh,_flatCamera);}}]);return PMREMGenerator;}();function _createPlanes(){var _lodPlanes=[];var _sizeLods=[];var _sigmas=[];var lod=LOD_MAX;for(var _i88=0;_i88<TOTAL_LODS;_i88++){var sizeLod=Math.pow(2,lod);_sizeLods.push(sizeLod);var sigma=1.0/sizeLod;if(_i88>LOD_MAX-LOD_MIN){sigma=EXTRA_LOD_SIGMA[_i88-LOD_MAX+LOD_MIN-1];}else if(_i88===0){sigma=0;}_sigmas.push(sigma);var texelSize=1.0/(sizeLod-1);var min=-texelSize/2;var max=1+texelSize/2;var uv1=[min,min,max,min,max,max,min,min,max,max,min,max];var cubeFaces=6;var vertices=6;var positionSize=3;var uvSize=2;var faceIndexSize=1;var position=new Float32Array(positionSize*vertices*cubeFaces);var uv=new Float32Array(uvSize*vertices*cubeFaces);var faceIndex=new Float32Array(faceIndexSize*vertices*cubeFaces);for(var face=0;face<cubeFaces;face++){var x=face%3*2/3-1;var y=face>2?0:-1;var coordinates=[x,y,0,x+2/3,y,0,x+2/3,y+1,0,x,y,0,x+2/3,y+1,0,x,y+1,0];position.set(coordinates,positionSize*vertices*face);uv.set(uv1,uvSize*vertices*face);var fill=[face,face,face,face,face,face];faceIndex.set(fill,faceIndexSize*vertices*face);}var planes=new BufferGeometry();planes.setAttribute('position',new BufferAttribute(position,positionSize));planes.setAttribute('uv',new BufferAttribute(uv,uvSize));planes.setAttribute('faceIndex',new BufferAttribute(faceIndex,faceIndexSize));_lodPlanes.push(planes);if(lod>LOD_MIN){lod--;}}return {_lodPlanes:_lodPlanes,_sizeLods:_sizeLods,_sigmas:_sigmas};}function _createRenderTarget(params){var cubeUVRenderTarget=new WebGLRenderTarget(3*SIZE_MAX,3*SIZE_MAX,params);cubeUVRenderTarget.texture.mapping=CubeUVReflectionMapping;cubeUVRenderTarget.texture.name='PMREM.cubeUv';cubeUVRenderTarget.scissorTest=true;return cubeUVRenderTarget;}function _setViewport(target,x,y,width,height){target.viewport.set(x,y,width,height);target.scissor.set(x,y,width,height);}function _getBlurShader(maxSamples){var weights=new Float32Array(maxSamples);var poleAxis=new Vector3(0,1,0);var shaderMaterial=new RawShaderMaterial({name:'SphericalGaussianBlur',defines:{'n':maxSamples},uniforms:{'envMap':{value:null},'samples':{value:1},'weights':{value:weights},'latitudinal':{value:false},'dTheta':{value:0},'mipInt':{value:0},'poleAxis':{value:poleAxis}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getEquirectShader(){var texelSize=new Vector2(1,1);var shaderMaterial=new RawShaderMaterial({name:'EquirectangularToCubeUV',uniforms:{'envMap':{value:null},'texelSize':{value:texelSize}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = texture2D ( envMap, uv ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t}\n\t\t",blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getCubemapShader(){var shaderMaterial=new RawShaderMaterial({name:'CubemapToCubeUV',uniforms:{'envMap':{value:null},'flipEnvMap':{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:/* glsl */"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:NoBlending,depthTest:false,depthWrite:false});return shaderMaterial;}function _getCommonVertexShader(){return(/* glsl */"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t");}function WebGLCubeUVMaps(renderer){var cubeUVmaps=new WeakMap();var pmremGenerator=null;function get(texture){if(texture&&texture.isTexture){var mapping=texture.mapping;var isEquirectMap=mapping===EquirectangularReflectionMapping||mapping===EquirectangularRefractionMapping;var isCubeMap=mapping===CubeReflectionMapping||mapping===CubeRefractionMapping;// equirect/cube map to cubeUV conversion
if(isEquirectMap||isCubeMap){if(texture.isRenderTargetTexture&&texture.needsPMREMUpdate===true){texture.needsPMREMUpdate=false;var renderTarget=cubeUVmaps.get(texture);if(pmremGenerator===null)pmremGenerator=new PMREMGenerator(renderer);renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture,renderTarget):pmremGenerator.fromCubemap(texture,renderTarget);cubeUVmaps.set(texture,renderTarget);return renderTarget.texture;}else {if(cubeUVmaps.has(texture)){return cubeUVmaps.get(texture).texture;}else {var image=texture.image;if(isEquirectMap&&image&&image.height>0||isCubeMap&&image&&isCubeTextureComplete(image)){if(pmremGenerator===null)pmremGenerator=new PMREMGenerator(renderer);var _renderTarget=isEquirectMap?pmremGenerator.fromEquirectangular(texture):pmremGenerator.fromCubemap(texture);cubeUVmaps.set(texture,_renderTarget);texture.addEventListener('dispose',onTextureDispose);return _renderTarget.texture;}else {// image not yet ready. try the conversion next frame
return null;}}}}}return texture;}function isCubeTextureComplete(image){var count=0;var length=6;for(var _i89=0;_i89<length;_i89++){if(image[_i89]!==undefined)count++;}return count===length;}function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);var cubemapUV=cubeUVmaps.get(texture);if(cubemapUV!==undefined){cubeUVmaps["delete"](texture);cubemapUV.dispose();}}function dispose(){cubeUVmaps=new WeakMap();if(pmremGenerator!==null){pmremGenerator.dispose();pmremGenerator=null;}}return {get:get,dispose:dispose};}function WebGLExtensions(gl){var extensions={};function getExtension(name){if(extensions[name]!==undefined){return extensions[name];}var extension;switch(name){case'WEBGL_depth_texture':extension=gl.getExtension('WEBGL_depth_texture')||gl.getExtension('MOZ_WEBGL_depth_texture')||gl.getExtension('WEBKIT_WEBGL_depth_texture');break;case'EXT_texture_filter_anisotropic':extension=gl.getExtension('EXT_texture_filter_anisotropic')||gl.getExtension('MOZ_EXT_texture_filter_anisotropic')||gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');break;case'WEBGL_compressed_texture_s3tc':extension=gl.getExtension('WEBGL_compressed_texture_s3tc')||gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');break;case'WEBGL_compressed_texture_pvrtc':extension=gl.getExtension('WEBGL_compressed_texture_pvrtc')||gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');break;default:extension=gl.getExtension(name);}extensions[name]=extension;return extension;}return {has:function has(name){return getExtension(name)!==null;},init:function init(capabilities){if(capabilities.isWebGL2){getExtension('EXT_color_buffer_float');}else {getExtension('WEBGL_depth_texture');getExtension('OES_texture_float');getExtension('OES_texture_half_float');getExtension('OES_texture_half_float_linear');getExtension('OES_standard_derivatives');getExtension('OES_element_index_uint');getExtension('OES_vertex_array_object');getExtension('ANGLE_instanced_arrays');}getExtension('OES_texture_float_linear');getExtension('EXT_color_buffer_half_float');getExtension('WEBGL_multisampled_render_to_texture');},get:function get(name){var extension=getExtension(name);if(extension===null){console.warn('THREE.WebGLRenderer: '+name+' extension not supported.');}return extension;}};}function WebGLGeometries(gl,attributes,info,bindingStates){var geometries={};var wireframeAttributes=new WeakMap();function onGeometryDispose(event){var geometry=event.target;if(geometry.index!==null){attributes.remove(geometry.index);}for(var name in geometry.attributes){attributes.remove(geometry.attributes[name]);}geometry.removeEventListener('dispose',onGeometryDispose);delete geometries[geometry.id];var attribute=wireframeAttributes.get(geometry);if(attribute){attributes.remove(attribute);wireframeAttributes["delete"](geometry);}bindingStates.releaseStatesOfGeometry(geometry);if(geometry.isInstancedBufferGeometry===true){delete geometry._maxInstanceCount;}//
info.memory.geometries--;}function get(object,geometry){if(geometries[geometry.id]===true)return geometry;geometry.addEventListener('dispose',onGeometryDispose);geometries[geometry.id]=true;info.memory.geometries++;return geometry;}function update(geometry){var geometryAttributes=geometry.attributes;// Updating index buffer in VAO now. See WebGLBindingStates.
for(var name in geometryAttributes){attributes.update(geometryAttributes[name],34962);}// morph targets
var morphAttributes=geometry.morphAttributes;for(var _name3 in morphAttributes){var array=morphAttributes[_name3];for(var _i90=0,l=array.length;_i90<l;_i90++){attributes.update(array[_i90],34962);}}}function updateWireframeAttribute(geometry){var indices=[];var geometryIndex=geometry.index;var geometryPosition=geometry.attributes.position;var version=0;if(geometryIndex!==null){var array=geometryIndex.array;version=geometryIndex.version;for(var _i91=0,l=array.length;_i91<l;_i91+=3){var a=array[_i91+0];var b=array[_i91+1];var c=array[_i91+2];indices.push(a,b,b,c,c,a);}}else {var _array=geometryPosition.array;version=geometryPosition.version;for(var _i92=0,_l5=_array.length/3-1;_i92<_l5;_i92+=3){var _a4=_i92+0;var _b4=_i92+1;var _c4=_i92+2;indices.push(_a4,_b4,_b4,_c4,_c4,_a4);}}var attribute=new(arrayNeedsUint32(indices)?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1);attribute.version=version;// Updating index buffer in VAO now. See WebGLBindingStates
//
var previousAttribute=wireframeAttributes.get(geometry);if(previousAttribute)attributes.remove(previousAttribute);//
wireframeAttributes.set(geometry,attribute);}function getWireframeAttribute(geometry){var currentAttribute=wireframeAttributes.get(geometry);if(currentAttribute){var geometryIndex=geometry.index;if(geometryIndex!==null){// if the attribute is obsolete, create a new one
if(currentAttribute.version<geometryIndex.version){updateWireframeAttribute(geometry);}}}else {updateWireframeAttribute(geometry);}return wireframeAttributes.get(geometry);}return {get:get,update:update,getWireframeAttribute:getWireframeAttribute};}function WebGLIndexedBufferRenderer(gl,extensions,info,capabilities){var isWebGL2=capabilities.isWebGL2;var mode;function setMode(value){mode=value;}var type,bytesPerElement;function setIndex(value){type=value.type;bytesPerElement=value.bytesPerElement;}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement);info.update(count,mode,1);}function renderInstances(start,count,primcount){if(primcount===0)return;var extension,methodName;if(isWebGL2){extension=gl;methodName='drawElementsInstanced';}else {extension=extensions.get('ANGLE_instanced_arrays');methodName='drawElementsInstancedANGLE';if(extension===null){console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');return;}}extension[methodName](mode,count,type,start*bytesPerElement,primcount);info.update(count,mode,primcount);}//
this.setMode=setMode;this.setIndex=setIndex;this.render=render;this.renderInstances=renderInstances;}function WebGLInfo(gl){var memory={geometries:0,textures:0};var render={frame:0,calls:0,triangles:0,points:0,lines:0};function update(count,mode,instanceCount){render.calls++;switch(mode){case 4:render.triangles+=instanceCount*(count/3);break;case 1:render.lines+=instanceCount*(count/2);break;case 3:render.lines+=instanceCount*(count-1);break;case 2:render.lines+=instanceCount*count;break;case 0:render.points+=instanceCount*count;break;default:console.error('THREE.WebGLInfo: Unknown draw mode:',mode);break;}}function reset(){render.frame++;render.calls=0;render.triangles=0;render.points=0;render.lines=0;}return {memory:memory,render:render,programs:null,autoReset:true,reset:reset,update:update};}var DataTexture2DArray=/*#__PURE__*/function(_Texture2){_inherits(DataTexture2DArray,_Texture2);var _super30=_createSuper(DataTexture2DArray);function DataTexture2DArray(){var _this21;var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var width=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var height=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var depth=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,DataTexture2DArray);_this21=_super30.call(this,null);_this21.image={data:data,width:width,height:height,depth:depth};_this21.magFilter=NearestFilter;_this21.minFilter=NearestFilter;_this21.wrapR=ClampToEdgeWrapping;_this21.generateMipmaps=false;_this21.flipY=false;_this21.unpackAlignment=1;return _this21;}return _createClass(DataTexture2DArray);}(Texture);DataTexture2DArray.prototype.isDataTexture2DArray=true;function numericalSort(a,b){return a[0]-b[0];}function absNumericalSort(a,b){return Math.abs(b[1])-Math.abs(a[1]);}function denormalize(morph,attribute){var denominator=1;var array=attribute.isInterleavedBufferAttribute?attribute.data.array:attribute.array;if(array instanceof Int8Array)denominator=127;else if(array instanceof Int16Array)denominator=32767;else if(array instanceof Int32Array)denominator=2147483647;else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ',array);morph.divideScalar(denominator);}function WebGLMorphtargets(gl,capabilities,textures){var influencesList={};var morphInfluences=new Float32Array(8);var morphTextures=new WeakMap();var morph=new Vector3();var workInfluences=[];for(var _i93=0;_i93<8;_i93++){workInfluences[_i93]=[_i93,0];}function update(object,geometry,material,program){var objectInfluences=object.morphTargetInfluences;if(capabilities.isWebGL2===true){// instead of using attributes, the WebGL 2 code path encodes morph targets
// into an array of data textures. Each layer represents a single morph target.
var numberOfMorphTargets=geometry.morphAttributes.position.length;var entry=morphTextures.get(geometry);if(entry===undefined||entry.count!==numberOfMorphTargets){var disposeTexture=function disposeTexture(){texture.dispose();morphTextures["delete"](geometry);geometry.removeEventListener('dispose',disposeTexture);};if(entry!==undefined)entry.texture.dispose();var hasMorphNormals=geometry.morphAttributes.normal!==undefined;var morphTargets=geometry.morphAttributes.position;var morphNormals=geometry.morphAttributes.normal||[];var numberOfVertices=geometry.attributes.position.count;var numberOfVertexData=hasMorphNormals===true?2:1;// (v,n) vs. (v)
var width=numberOfVertices*numberOfVertexData;var height=1;if(width>capabilities.maxTextureSize){height=Math.ceil(width/capabilities.maxTextureSize);width=capabilities.maxTextureSize;}var buffer=new Float32Array(width*height*4*numberOfMorphTargets);var texture=new DataTexture2DArray(buffer,width,height,numberOfMorphTargets);texture.format=RGBAFormat;// using RGBA since RGB might be emulated (and is thus slower)
texture.type=FloatType;texture.needsUpdate=true;// fill buffer
var vertexDataStride=numberOfVertexData*4;for(var _i94=0;_i94<numberOfMorphTargets;_i94++){var morphTarget=morphTargets[_i94];var morphNormal=morphNormals[_i94];var offset=width*height*4*_i94;for(var j=0;j<morphTarget.count;j++){morph.fromBufferAttribute(morphTarget,j);if(morphTarget.normalized===true)denormalize(morph,morphTarget);var stride=j*vertexDataStride;buffer[offset+stride+0]=morph.x;buffer[offset+stride+1]=morph.y;buffer[offset+stride+2]=morph.z;buffer[offset+stride+3]=0;if(hasMorphNormals===true){morph.fromBufferAttribute(morphNormal,j);if(morphNormal.normalized===true)denormalize(morph,morphNormal);buffer[offset+stride+4]=morph.x;buffer[offset+stride+5]=morph.y;buffer[offset+stride+6]=morph.z;buffer[offset+stride+7]=0;}}}entry={count:numberOfMorphTargets,texture:texture,size:new Vector2(width,height)};morphTextures.set(geometry,entry);geometry.addEventListener('dispose',disposeTexture);}//
var morphInfluencesSum=0;for(var _i95=0;_i95<objectInfluences.length;_i95++){morphInfluencesSum+=objectInfluences[_i95];}var morphBaseInfluence=geometry.morphTargetsRelative?1:1-morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',objectInfluences);program.getUniforms().setValue(gl,'morphTargetsTexture',entry.texture,textures);program.getUniforms().setValue(gl,'morphTargetsTextureSize',entry.size);}else {// When object doesn't have morph target influences defined, we treat it as a 0-length array
// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
var length=objectInfluences===undefined?0:objectInfluences.length;var influences=influencesList[geometry.id];if(influences===undefined||influences.length!==length){// initialise list
influences=[];for(var _i96=0;_i96<length;_i96++){influences[_i96]=[_i96,0];}influencesList[geometry.id]=influences;}// Collect influences
for(var _i97=0;_i97<length;_i97++){var influence=influences[_i97];influence[0]=_i97;influence[1]=objectInfluences[_i97];}influences.sort(absNumericalSort);for(var _i98=0;_i98<8;_i98++){if(_i98<length&&influences[_i98][1]){workInfluences[_i98][0]=influences[_i98][0];workInfluences[_i98][1]=influences[_i98][1];}else {workInfluences[_i98][0]=Number.MAX_SAFE_INTEGER;workInfluences[_i98][1]=0;}}workInfluences.sort(numericalSort);var _morphTargets=geometry.morphAttributes.position;var _morphNormals=geometry.morphAttributes.normal;var _morphInfluencesSum=0;for(var _i99=0;_i99<8;_i99++){var _influence=workInfluences[_i99];var index=_influence[0];var _value3=_influence[1];if(index!==Number.MAX_SAFE_INTEGER&&_value3){if(_morphTargets&&geometry.getAttribute('morphTarget'+_i99)!==_morphTargets[index]){geometry.setAttribute('morphTarget'+_i99,_morphTargets[index]);}if(_morphNormals&&geometry.getAttribute('morphNormal'+_i99)!==_morphNormals[index]){geometry.setAttribute('morphNormal'+_i99,_morphNormals[index]);}morphInfluences[_i99]=_value3;_morphInfluencesSum+=_value3;}else {if(_morphTargets&&geometry.hasAttribute('morphTarget'+_i99)===true){geometry.deleteAttribute('morphTarget'+_i99);}if(_morphNormals&&geometry.hasAttribute('morphNormal'+_i99)===true){geometry.deleteAttribute('morphNormal'+_i99);}morphInfluences[_i99]=0;}}// GLSL shader uses formula baseinfluence * base + sum(target * influence)
// This allows us to switch between absolute morphs and relative morphs without changing shader code
// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
var _morphBaseInfluence=geometry.morphTargetsRelative?1:1-_morphInfluencesSum;program.getUniforms().setValue(gl,'morphTargetBaseInfluence',_morphBaseInfluence);program.getUniforms().setValue(gl,'morphTargetInfluences',morphInfluences);}}return {update:update};}function WebGLObjects(gl,geometries,attributes,info){var updateMap=new WeakMap();function update(object){var frame=info.render.frame;var geometry=object.geometry;var buffergeometry=geometries.get(object,geometry);// Update once per frame
if(updateMap.get(buffergeometry)!==frame){geometries.update(buffergeometry);updateMap.set(buffergeometry,frame);}if(object.isInstancedMesh){if(object.hasEventListener('dispose',onInstancedMeshDispose)===false){object.addEventListener('dispose',onInstancedMeshDispose);}attributes.update(object.instanceMatrix,34962);if(object.instanceColor!==null){attributes.update(object.instanceColor,34962);}}return buffergeometry;}function dispose(){updateMap=new WeakMap();}function onInstancedMeshDispose(event){var instancedMesh=event.target;instancedMesh.removeEventListener('dispose',onInstancedMeshDispose);attributes.remove(instancedMesh.instanceMatrix);if(instancedMesh.instanceColor!==null)attributes.remove(instancedMesh.instanceColor);}return {update:update,dispose:dispose};}var DataTexture3D=/*#__PURE__*/function(_Texture3){_inherits(DataTexture3D,_Texture3);var _super31=_createSuper(DataTexture3D);function DataTexture3D(){var _this22;var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var width=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var height=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var depth=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,DataTexture3D);// We're going to add .setXXX() methods for setting properties later.
// Users can still set in DataTexture3D directly.
//
//	const texture = new THREE.DataTexture3D( data, width, height, depth );
// 	texture.anisotropy = 16;
//
// See #14839
_this22=_super31.call(this,null);_this22.image={data:data,width:width,height:height,depth:depth};_this22.magFilter=NearestFilter;_this22.minFilter=NearestFilter;_this22.wrapR=ClampToEdgeWrapping;_this22.generateMipmaps=false;_this22.flipY=false;_this22.unpackAlignment=1;return _this22;}return _createClass(DataTexture3D);}(Texture);DataTexture3D.prototype.isDataTexture3D=true;/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */var emptyTexture=new Texture();var emptyTexture2dArray=new DataTexture2DArray();var emptyTexture3d=new DataTexture3D();var emptyCubeTexture=new CubeTexture();// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
var arrayCacheF32=[];var arrayCacheI32=[];// Float32Array caches used for uploading Matrix uniforms
var mat4array=new Float32Array(16);var mat3array=new Float32Array(9);var mat2array=new Float32Array(4);// Flattening for arrays of vectors and matrices
function flatten$2(array,nBlocks,blockSize){var firstElem=array[0];if(firstElem<=0||firstElem>0)return array;// unoptimized: ! isNaN( firstElem )
// see http://jacksondunstan.com/articles/983
var n=nBlocks*blockSize;var r=arrayCacheF32[n];if(r===undefined){r=new Float32Array(n);arrayCacheF32[n]=r;}if(nBlocks!==0){firstElem.toArray(r,0);for(var _i100=1,offset=0;_i100!==nBlocks;++_i100){offset+=blockSize;array[_i100].toArray(r,offset);}}return r;}function arraysEqual(a,b){if(a.length!==b.length)return false;for(var _i101=0,l=a.length;_i101<l;_i101++){if(a[_i101]!==b[_i101])return false;}return true;}function copyArray(a,b){for(var _i102=0,l=b.length;_i102<l;_i102++){a[_i102]=b[_i102];}}// Texture unit allocation
function allocTexUnits(textures,n){var r=arrayCacheI32[n];if(r===undefined){r=new Int32Array(n);arrayCacheI32[n]=r;}for(var _i103=0;_i103!==n;++_i103){r[_i103]=textures.allocateTextureUnit();}return r;}// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function setValueV1f(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1f(this.addr,v);cache[0]=v;}// Single float vector (from flat array or THREE.VectorN)
function setValueV2f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y){gl.uniform2f(this.addr,v.x,v.y);cache[0]=v.x;cache[1]=v.y;}}else {if(arraysEqual(cache,v))return;gl.uniform2fv(this.addr,v);copyArray(cache,v);}}function setValueV3f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z){gl.uniform3f(this.addr,v.x,v.y,v.z);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;}}else if(v.r!==undefined){if(cache[0]!==v.r||cache[1]!==v.g||cache[2]!==v.b){gl.uniform3f(this.addr,v.r,v.g,v.b);cache[0]=v.r;cache[1]=v.g;cache[2]=v.b;}}else {if(arraysEqual(cache,v))return;gl.uniform3fv(this.addr,v);copyArray(cache,v);}}function setValueV4f(gl,v){var cache=this.cache;if(v.x!==undefined){if(cache[0]!==v.x||cache[1]!==v.y||cache[2]!==v.z||cache[3]!==v.w){gl.uniform4f(this.addr,v.x,v.y,v.z,v.w);cache[0]=v.x;cache[1]=v.y;cache[2]=v.z;cache[3]=v.w;}}else {if(arraysEqual(cache,v))return;gl.uniform4fv(this.addr,v);copyArray(cache,v);}}// Single matrix (from flat array or THREE.MatrixN)
function setValueM2(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix2fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat2array.set(elements);gl.uniformMatrix2fv(this.addr,false,mat2array);copyArray(cache,elements);}}function setValueM3(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix3fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat3array.set(elements);gl.uniformMatrix3fv(this.addr,false,mat3array);copyArray(cache,elements);}}function setValueM4(gl,v){var cache=this.cache;var elements=v.elements;if(elements===undefined){if(arraysEqual(cache,v))return;gl.uniformMatrix4fv(this.addr,false,v);copyArray(cache,v);}else {if(arraysEqual(cache,elements))return;mat4array.set(elements);gl.uniformMatrix4fv(this.addr,false,mat4array);copyArray(cache,elements);}}// Single integer / boolean
function setValueV1i(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1i(this.addr,v);cache[0]=v;}// Single integer / boolean vector (from flat array)
function setValueV2i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2iv(this.addr,v);copyArray(cache,v);}function setValueV3i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3iv(this.addr,v);copyArray(cache,v);}function setValueV4i(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4iv(this.addr,v);copyArray(cache,v);}// Single unsigned integer
function setValueV1ui(gl,v){var cache=this.cache;if(cache[0]===v)return;gl.uniform1ui(this.addr,v);cache[0]=v;}// Single unsigned integer vector (from flat array)
function setValueV2ui(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform2uiv(this.addr,v);copyArray(cache,v);}function setValueV3ui(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform3uiv(this.addr,v);copyArray(cache,v);}function setValueV4ui(gl,v){var cache=this.cache;if(arraysEqual(cache,v))return;gl.uniform4uiv(this.addr,v);copyArray(cache,v);}// Single texture (2D / Cube)
function setValueT1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTexture2D(v||emptyTexture,unit);}function setValueT3D1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture3D(v||emptyTexture3d,unit);}function setValueT6(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.safeSetTextureCube(v||emptyCubeTexture,unit);}function setValueT2DArray1(gl,v,textures){var cache=this.cache;var unit=textures.allocateTextureUnit();if(cache[0]!==unit){gl.uniform1i(this.addr,unit);cache[0]=unit;}textures.setTexture2DArray(v||emptyTexture2dArray,unit);}// Helper to pick the right setter for the singular case
function getSingularSetter(type){switch(type){case 0x1406:return setValueV1f;// FLOAT
case 0x8b50:return setValueV2f;// _VEC2
case 0x8b51:return setValueV3f;// _VEC3
case 0x8b52:return setValueV4f;// _VEC4
case 0x8b5a:return setValueM2;// _MAT2
case 0x8b5b:return setValueM3;// _MAT3
case 0x8b5c:return setValueM4;// _MAT4
case 0x1404:case 0x8b56:return setValueV1i;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2i;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3i;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4i;// _VEC4
case 0x1405:return setValueV1ui;// UINT
case 0x8dc6:return setValueV2ui;// _VEC2
case 0x8dc7:return setValueV3ui;// _VEC3
case 0x8dc8:return setValueV4ui;// _VEC4
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1;case 0x8b5f:// SAMPLER_3D
case 0x8dcb:// INT_SAMPLER_3D
case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
return setValueT3D1;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6;case 0x8dc1:// SAMPLER_2D_ARRAY
case 0x8dcf:// INT_SAMPLER_2D_ARRAY
case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
return setValueT2DArray1;}}// Array of scalars
function setValueV1fArray(gl,v){gl.uniform1fv(this.addr,v);}// Array of vectors (from flat array or array of THREE.VectorN)
function setValueV2fArray(gl,v){var data=flatten$2(v,this.size,2);gl.uniform2fv(this.addr,data);}function setValueV3fArray(gl,v){var data=flatten$2(v,this.size,3);gl.uniform3fv(this.addr,data);}function setValueV4fArray(gl,v){var data=flatten$2(v,this.size,4);gl.uniform4fv(this.addr,data);}// Array of matrices (from flat array or array of THREE.MatrixN)
function setValueM2Array(gl,v){var data=flatten$2(v,this.size,4);gl.uniformMatrix2fv(this.addr,false,data);}function setValueM3Array(gl,v){var data=flatten$2(v,this.size,9);gl.uniformMatrix3fv(this.addr,false,data);}function setValueM4Array(gl,v){var data=flatten$2(v,this.size,16);gl.uniformMatrix4fv(this.addr,false,data);}// Array of integer / boolean
function setValueV1iArray(gl,v){gl.uniform1iv(this.addr,v);}// Array of integer / boolean vectors (from flat array)
function setValueV2iArray(gl,v){gl.uniform2iv(this.addr,v);}function setValueV3iArray(gl,v){gl.uniform3iv(this.addr,v);}function setValueV4iArray(gl,v){gl.uniform4iv(this.addr,v);}// Array of unsigned integer
function setValueV1uiArray(gl,v){gl.uniform1uiv(this.addr,v);}// Array of unsigned integer vectors (from flat array)
function setValueV2uiArray(gl,v){gl.uniform2uiv(this.addr,v);}function setValueV3uiArray(gl,v){gl.uniform3uiv(this.addr,v);}function setValueV4uiArray(gl,v){gl.uniform4uiv(this.addr,v);}// Array of textures (2D / 3D / Cube / 2DArray)
function setValueT1Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i104=0;_i104!==n;++_i104){textures.safeSetTexture2D(v[_i104]||emptyTexture,units[_i104]);}}function setValueT3DArray(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i105=0;_i105!==n;++_i105){textures.setTexture3D(v[_i105]||emptyTexture3d,units[_i105]);}}function setValueT6Array(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i106=0;_i106!==n;++_i106){textures.safeSetTextureCube(v[_i106]||emptyCubeTexture,units[_i106]);}}function setValueT2DArrayArray(gl,v,textures){var n=v.length;var units=allocTexUnits(textures,n);gl.uniform1iv(this.addr,units);for(var _i107=0;_i107!==n;++_i107){textures.setTexture2DArray(v[_i107]||emptyTexture2dArray,units[_i107]);}}// Helper to pick the right setter for a pure (bottom-level) array
function getPureArraySetter(type){switch(type){case 0x1406:return setValueV1fArray;// FLOAT
case 0x8b50:return setValueV2fArray;// _VEC2
case 0x8b51:return setValueV3fArray;// _VEC3
case 0x8b52:return setValueV4fArray;// _VEC4
case 0x8b5a:return setValueM2Array;// _MAT2
case 0x8b5b:return setValueM3Array;// _MAT3
case 0x8b5c:return setValueM4Array;// _MAT4
case 0x1404:case 0x8b56:return setValueV1iArray;// INT, BOOL
case 0x8b53:case 0x8b57:return setValueV2iArray;// _VEC2
case 0x8b54:case 0x8b58:return setValueV3iArray;// _VEC3
case 0x8b55:case 0x8b59:return setValueV4iArray;// _VEC4
case 0x1405:return setValueV1uiArray;// UINT
case 0x8dc6:return setValueV2uiArray;// _VEC2
case 0x8dc7:return setValueV3uiArray;// _VEC3
case 0x8dc8:return setValueV4uiArray;// _VEC4
case 0x8b5e:// SAMPLER_2D
case 0x8d66:// SAMPLER_EXTERNAL_OES
case 0x8dca:// INT_SAMPLER_2D
case 0x8dd2:// UNSIGNED_INT_SAMPLER_2D
case 0x8b62:// SAMPLER_2D_SHADOW
return setValueT1Array;case 0x8b5f:// SAMPLER_3D
case 0x8dcb:// INT_SAMPLER_3D
case 0x8dd3:// UNSIGNED_INT_SAMPLER_3D
return setValueT3DArray;case 0x8b60:// SAMPLER_CUBE
case 0x8dcc:// INT_SAMPLER_CUBE
case 0x8dd4:// UNSIGNED_INT_SAMPLER_CUBE
case 0x8dc5:// SAMPLER_CUBE_SHADOW
return setValueT6Array;case 0x8dc1:// SAMPLER_2D_ARRAY
case 0x8dcf:// INT_SAMPLER_2D_ARRAY
case 0x8dd7:// UNSIGNED_INT_SAMPLER_2D_ARRAY
case 0x8dc4:// SAMPLER_2D_ARRAY_SHADOW
return setValueT2DArrayArray;}}// --- Uniform Classes ---
function SingleUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.setValue=getSingularSetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}function PureArrayUniform(id,activeInfo,addr){this.id=id;this.addr=addr;this.cache=[];this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type);// this.path = activeInfo.name; // DEBUG
}PureArrayUniform.prototype.updateCache=function(data){var cache=this.cache;if(data instanceof Float32Array&&cache.length!==data.length){this.cache=new Float32Array(data.length);}copyArray(cache,data);};function StructuredUniform(id){this.id=id;this.seq=[];this.map={};}StructuredUniform.prototype.setValue=function(gl,value,textures){var seq=this.seq;for(var _i108=0,n=seq.length;_i108!==n;++_i108){var u=seq[_i108];u.setValue(gl,value[u.id],textures);}};// --- Top-level ---
// Parser - builds up the property tree from the path strings
var RePathPart=/(\w+)(\])?(\[|\.)?/g;// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function addUniform(container,uniformObject){container.seq.push(uniformObject);container.map[uniformObject.id]=uniformObject;}function parseUniform(activeInfo,addr,container){var path=activeInfo.name,pathLength=path.length;// reset RegExp object, because of the early exit of a previous run
RePathPart.lastIndex=0;while(true){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex;var id=match[1];var idIsIndex=match[2]===']',subscript=match[3];if(idIsIndex)id=id|0;// convert to integer
if(subscript===undefined||subscript==='['&&matchEnd+2===pathLength){// bare name or "pure" bottom-level array "[0]" suffix
addUniform(container,subscript===undefined?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break;}else {// step into inner node / create it in case it doesn't exist
var map=container.map;var next=map[id];if(next===undefined){next=new StructuredUniform(id);addUniform(container,next);}container=next;}}}// Root Container
function WebGLUniforms(gl,program){this.seq=[];this.map={};var n=gl.getProgramParameter(program,35718);for(var _i109=0;_i109<n;++_i109){var info=gl.getActiveUniform(program,_i109),addr=gl.getUniformLocation(program,info.name);parseUniform(info,addr,this);}}WebGLUniforms.prototype.setValue=function(gl,name,value,textures){var u=this.map[name];if(u!==undefined)u.setValue(gl,value,textures);};WebGLUniforms.prototype.setOptional=function(gl,object,name){var v=object[name];if(v!==undefined)this.setValue(gl,name,v);};// Static interface
WebGLUniforms.upload=function(gl,seq,values,textures){for(var _i110=0,n=seq.length;_i110!==n;++_i110){var u=seq[_i110],v=values[u.id];if(v.needsUpdate!==false){// note: always updating when .needsUpdate is undefined
u.setValue(gl,v.value,textures);}}};WebGLUniforms.seqWithValue=function(seq,values){var r=[];for(var _i111=0,n=seq.length;_i111!==n;++_i111){var u=seq[_i111];if(u.id in values)r.push(u);}return r;};function WebGLShader(gl,type,string){var shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);return shader;}var programIdCount=0;function addLineNumbers(string){var lines=string.split('\n');for(var _i112=0;_i112<lines.length;_i112++){lines[_i112]=_i112+1+': '+lines[_i112];}return lines.join('\n');}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return ['Linear','( value )'];case sRGBEncoding:return ['sRGB','( value )'];default:console.warn('THREE.WebGLProgram: Unsupported encoding:',encoding);return ['Linear','( value )'];}}function getShaderErrors(gl,shader,type){var status=gl.getShaderParameter(shader,35713);var errors=gl.getShaderInfoLog(shader).trim();if(status&&errors==='')return '';// --enable-privileged-webgl-extension
// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
return type.toUpperCase()+'\n\n'+errors+'\n\n'+addLineNumbers(gl.getShaderSource(shader));}function getTexelEncodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return 'vec4 '+functionName+'( vec4 value ) { return LinearTo'+components[0]+components[1]+'; }';}function getToneMappingFunction(functionName,toneMapping){var toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName='Linear';break;case ReinhardToneMapping:toneMappingName='Reinhard';break;case CineonToneMapping:toneMappingName='OptimizedCineon';break;case ACESFilmicToneMapping:toneMappingName='ACESFilmic';break;case CustomToneMapping:toneMappingName='Custom';break;default:console.warn('THREE.WebGLProgram: Unsupported toneMapping:',toneMapping);toneMappingName='Linear';}return 'vec3 '+functionName+'( vec3 color ) { return '+toneMappingName+'ToneMapping( color ); }';}function generateExtensions(parameters){var chunks=[parameters.extensionDerivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.tangentSpaceNormalMap||parameters.clearcoatNormalMap||parameters.flatShading||parameters.shaderID==='physical'?'#extension GL_OES_standard_derivatives : enable':'',(parameters.extensionFragDepth||parameters.logarithmicDepthBuffer)&&parameters.rendererExtensionFragDepth?'#extension GL_EXT_frag_depth : enable':'',parameters.extensionDrawBuffers&&parameters.rendererExtensionDrawBuffers?'#extension GL_EXT_draw_buffers : require':'',(parameters.extensionShaderTextureLOD||parameters.envMap||parameters.transmission)&&parameters.rendererExtensionShaderTextureLod?'#extension GL_EXT_shader_texture_lod : enable':''];return chunks.filter(filterEmptyLine).join('\n');}function generateDefines(defines){var chunks=[];for(var name in defines){var _value4=defines[name];if(_value4===false)continue;chunks.push('#define '+name+' '+_value4);}return chunks.join('\n');}function fetchAttributeLocations(gl,program){var attributes={};var n=gl.getProgramParameter(program,35721);for(var _i113=0;_i113<n;_i113++){var info=gl.getActiveAttrib(program,_i113);var name=info.name;var locationSize=1;if(info.type===35674)locationSize=2;if(info.type===35675)locationSize=3;if(info.type===35676)locationSize=4;// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
attributes[name]={type:info.type,location:gl.getAttribLocation(program,name),locationSize:locationSize};}return attributes;}function filterEmptyLine(string){return string!=='';}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,parameters.numPointLightShadows);}function replaceClippingPlaneNums(string,parameters){return string.replace(/NUM_CLIPPING_PLANES/g,parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,parameters.numClippingPlanes-parameters.numClipIntersection);}// Resolve Includes
var includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(string){return string.replace(includePattern,includeReplacer);}function includeReplacer(match,include){var string=ShaderChunk[include];if(string===undefined){throw new Error('Can not resolve #include <'+include+'>');}return resolveIncludes(string);}// Unroll Loops
var deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;var unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(string){return string.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer);}function deprecatedLoopReplacer(match,start,end,snippet){console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');return loopReplacer(match,start,end,snippet);}function loopReplacer(match,start,end,snippet){var string='';for(var _i114=parseInt(start);_i114<parseInt(end);_i114++){string+=snippet.replace(/\[\s*i\s*\]/g,'[ '+_i114+' ]').replace(/UNROLLED_LOOP_INDEX/g,_i114);}return string;}//
function generatePrecision(parameters){var precisionstring='precision '+parameters.precision+' float;\nprecision '+parameters.precision+' int;';if(parameters.precision==='highp'){precisionstring+='\n#define HIGH_PRECISION';}else if(parameters.precision==='mediump'){precisionstring+='\n#define MEDIUM_PRECISION';}else if(parameters.precision==='lowp'){precisionstring+='\n#define LOW_PRECISION';}return precisionstring;}function generateShadowMapTypeDefine(parameters){var shadowMapTypeDefine='SHADOWMAP_TYPE_BASIC';if(parameters.shadowMapType===PCFShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF';}else if(parameters.shadowMapType===PCFSoftShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_PCF_SOFT';}else if(parameters.shadowMapType===VSMShadowMap){shadowMapTypeDefine='SHADOWMAP_TYPE_VSM';}return shadowMapTypeDefine;}function generateEnvMapTypeDefine(parameters){var envMapTypeDefine='ENVMAP_TYPE_CUBE';if(parameters.envMap){switch(parameters.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE';break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine='ENVMAP_TYPE_CUBE_UV';break;}}return envMapTypeDefine;}function generateEnvMapModeDefine(parameters){var envMapModeDefine='ENVMAP_MODE_REFLECTION';if(parameters.envMap){switch(parameters.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:envMapModeDefine='ENVMAP_MODE_REFRACTION';break;}}return envMapModeDefine;}function generateEnvMapBlendingDefine(parameters){var envMapBlendingDefine='ENVMAP_BLENDING_NONE';if(parameters.envMap){switch(parameters.combine){case MultiplyOperation:envMapBlendingDefine='ENVMAP_BLENDING_MULTIPLY';break;case MixOperation:envMapBlendingDefine='ENVMAP_BLENDING_MIX';break;case AddOperation:envMapBlendingDefine='ENVMAP_BLENDING_ADD';break;}}return envMapBlendingDefine;}function WebGLProgram(renderer,cacheKey,parameters,bindingStates){// TODO Send this event to Three.js DevTools
// console.log( 'WebGLProgram', cacheKey );
var gl=renderer.getContext();var defines=parameters.defines;var vertexShader=parameters.vertexShader;var fragmentShader=parameters.fragmentShader;var shadowMapTypeDefine=generateShadowMapTypeDefine(parameters);var envMapTypeDefine=generateEnvMapTypeDefine(parameters);var envMapModeDefine=generateEnvMapModeDefine(parameters);var envMapBlendingDefine=generateEnvMapBlendingDefine(parameters);var customExtensions=parameters.isWebGL2?'':generateExtensions(parameters);var customDefines=generateDefines(defines);var program=gl.createProgram();var prefixVertex,prefixFragment;var versionString=parameters.glslVersion?'#version '+parameters.glslVersion+'\n':'';if(parameters.isRawShaderMaterial){prefixVertex=[customDefines].filter(filterEmptyLine).join('\n');if(prefixVertex.length>0){prefixVertex+='\n';}prefixFragment=[customExtensions,customDefines].filter(filterEmptyLine).join('\n');if(prefixFragment.length>0){prefixFragment+='\n';}}else {prefixVertex=[generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.instancing?'#define USE_INSTANCING':'',parameters.instancingColor?'#define USE_INSTANCING_COLOR':'',parameters.supportsVertexTextures?'#define VERTEX_TEXTURES':'','#define MAX_BONES '+parameters.maxBones,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.displacementMap&&parameters.supportsVertexTextures?'#define USE_DISPLACEMENTMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.specularIntensityMap?'#define USE_SPECULARINTENSITYMAP':'',parameters.specularColorMap?'#define USE_SPECULARCOLORMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.transmission?'#define USE_TRANSMISSION':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.thicknessMap?'#define USE_THICKNESSMAP':'',parameters.sheenColorMap?'#define USE_SHEENCOLORMAP':'',parameters.sheenRoughnessMap?'#define USE_SHEENROUGHNESSMAP':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors?'#define USE_COLOR':'',parameters.vertexAlphas?'#define USE_COLOR_ALPHA':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.skinning?'#define USE_SKINNING':'',parameters.useVertexTexture?'#define BONE_TEXTURE':'',parameters.morphTargets?'#define USE_MORPHTARGETS':'',parameters.morphNormals&&parameters.flatShading===false?'#define USE_MORPHNORMALS':'',parameters.morphTargets&&parameters.isWebGL2?'#define MORPHTARGETS_TEXTURE':'',parameters.morphTargets&&parameters.isWebGL2?'#define MORPHTARGETS_COUNT '+parameters.morphTargetsCount:'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.sizeAttenuation?'#define USE_SIZEATTENUATION':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'','uniform mat4 modelMatrix;','uniform mat4 modelViewMatrix;','uniform mat4 projectionMatrix;','uniform mat4 viewMatrix;','uniform mat3 normalMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;','#ifdef USE_INSTANCING','	attribute mat4 instanceMatrix;','#endif','#ifdef USE_INSTANCING_COLOR','	attribute vec3 instanceColor;','#endif','attribute vec3 position;','attribute vec3 normal;','attribute vec2 uv;','#ifdef USE_TANGENT','	attribute vec4 tangent;','#endif','#if defined( USE_COLOR_ALPHA )','	attribute vec4 color;','#elif defined( USE_COLOR )','	attribute vec3 color;','#endif','#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )','	attribute vec3 morphTarget0;','	attribute vec3 morphTarget1;','	attribute vec3 morphTarget2;','	attribute vec3 morphTarget3;','	#ifdef USE_MORPHNORMALS','		attribute vec3 morphNormal0;','		attribute vec3 morphNormal1;','		attribute vec3 morphNormal2;','		attribute vec3 morphNormal3;','	#else','		attribute vec3 morphTarget4;','		attribute vec3 morphTarget5;','		attribute vec3 morphTarget6;','		attribute vec3 morphTarget7;','	#endif','#endif','#ifdef USE_SKINNING','	attribute vec4 skinIndex;','	attribute vec4 skinWeight;','#endif','\n'].filter(filterEmptyLine).join('\n');prefixFragment=[customExtensions,generatePrecision(parameters),'#define SHADER_NAME '+parameters.shaderName,customDefines,parameters.useFog&&parameters.fog?'#define USE_FOG':'',parameters.useFog&&parameters.fogExp2?'#define FOG_EXP2':'',parameters.map?'#define USE_MAP':'',parameters.matcap?'#define USE_MATCAP':'',parameters.envMap?'#define USE_ENVMAP':'',parameters.envMap?'#define '+envMapTypeDefine:'',parameters.envMap?'#define '+envMapModeDefine:'',parameters.envMap?'#define '+envMapBlendingDefine:'',parameters.lightMap?'#define USE_LIGHTMAP':'',parameters.aoMap?'#define USE_AOMAP':'',parameters.emissiveMap?'#define USE_EMISSIVEMAP':'',parameters.bumpMap?'#define USE_BUMPMAP':'',parameters.normalMap?'#define USE_NORMALMAP':'',parameters.normalMap&&parameters.objectSpaceNormalMap?'#define OBJECTSPACE_NORMALMAP':'',parameters.normalMap&&parameters.tangentSpaceNormalMap?'#define TANGENTSPACE_NORMALMAP':'',parameters.clearcoat?'#define USE_CLEARCOAT':'',parameters.clearcoatMap?'#define USE_CLEARCOATMAP':'',parameters.clearcoatRoughnessMap?'#define USE_CLEARCOAT_ROUGHNESSMAP':'',parameters.clearcoatNormalMap?'#define USE_CLEARCOAT_NORMALMAP':'',parameters.specularMap?'#define USE_SPECULARMAP':'',parameters.specularIntensityMap?'#define USE_SPECULARINTENSITYMAP':'',parameters.specularColorMap?'#define USE_SPECULARCOLORMAP':'',parameters.roughnessMap?'#define USE_ROUGHNESSMAP':'',parameters.metalnessMap?'#define USE_METALNESSMAP':'',parameters.alphaMap?'#define USE_ALPHAMAP':'',parameters.alphaTest?'#define USE_ALPHATEST':'',parameters.sheen?'#define USE_SHEEN':'',parameters.sheenColorMap?'#define USE_SHEENCOLORMAP':'',parameters.sheenRoughnessMap?'#define USE_SHEENROUGHNESSMAP':'',parameters.transmission?'#define USE_TRANSMISSION':'',parameters.transmissionMap?'#define USE_TRANSMISSIONMAP':'',parameters.thicknessMap?'#define USE_THICKNESSMAP':'',parameters.decodeVideoTexture?'#define DECODE_VIDEO_TEXTURE':'',parameters.vertexTangents?'#define USE_TANGENT':'',parameters.vertexColors||parameters.instancingColor?'#define USE_COLOR':'',parameters.vertexAlphas?'#define USE_COLOR_ALPHA':'',parameters.vertexUvs?'#define USE_UV':'',parameters.uvsVertexOnly?'#define UVS_VERTEX_ONLY':'',parameters.gradientMap?'#define USE_GRADIENTMAP':'',parameters.flatShading?'#define FLAT_SHADED':'',parameters.doubleSided?'#define DOUBLE_SIDED':'',parameters.flipSided?'#define FLIP_SIDED':'',parameters.shadowMapEnabled?'#define USE_SHADOWMAP':'',parameters.shadowMapEnabled?'#define '+shadowMapTypeDefine:'',parameters.premultipliedAlpha?'#define PREMULTIPLIED_ALPHA':'',parameters.physicallyCorrectLights?'#define PHYSICALLY_CORRECT_LIGHTS':'',parameters.logarithmicDepthBuffer?'#define USE_LOGDEPTHBUF':'',parameters.logarithmicDepthBuffer&&parameters.rendererExtensionFragDepth?'#define USE_LOGDEPTHBUF_EXT':'',(parameters.extensionShaderTextureLOD||parameters.envMap)&&parameters.rendererExtensionShaderTextureLod?'#define TEXTURE_LOD_EXT':'','uniform mat4 viewMatrix;','uniform vec3 cameraPosition;','uniform bool isOrthographic;',parameters.toneMapping!==NoToneMapping?'#define TONE_MAPPING':'',parameters.toneMapping!==NoToneMapping?ShaderChunk['tonemapping_pars_fragment']:'',// this code is required here because it is used by the toneMapping() function defined below
parameters.toneMapping!==NoToneMapping?getToneMappingFunction('toneMapping',parameters.toneMapping):'',parameters.dithering?'#define DITHERING':'',parameters.transparent?'':'#define OPAQUE',ShaderChunk['encodings_pars_fragment'],// this code is required here because it is used by the various encoding/decoding function defined below
getTexelEncodingFunction('linearToOutputTexel',parameters.outputEncoding),parameters.depthPacking?'#define DEPTH_PACKING '+parameters.depthPacking:'','\n'].filter(filterEmptyLine).join('\n');}vertexShader=resolveIncludes(vertexShader);vertexShader=replaceLightNums(vertexShader,parameters);vertexShader=replaceClippingPlaneNums(vertexShader,parameters);fragmentShader=resolveIncludes(fragmentShader);fragmentShader=replaceLightNums(fragmentShader,parameters);fragmentShader=replaceClippingPlaneNums(fragmentShader,parameters);vertexShader=unrollLoops(vertexShader);fragmentShader=unrollLoops(fragmentShader);if(parameters.isWebGL2&&parameters.isRawShaderMaterial!==true){// GLSL 3.0 conversion for built-in materials and ShaderMaterial
versionString='#version 300 es\n';prefixVertex=['precision mediump sampler2DArray;','#define attribute in','#define varying out','#define texture2D texture'].join('\n')+'\n'+prefixVertex;prefixFragment=['#define varying in',parameters.glslVersion===GLSL3?'':'layout(location = 0) out highp vec4 pc_fragColor;',parameters.glslVersion===GLSL3?'':'#define gl_FragColor pc_fragColor','#define gl_FragDepthEXT gl_FragDepth','#define texture2D texture','#define textureCube texture','#define texture2DProj textureProj','#define texture2DLodEXT textureLod','#define texture2DProjLodEXT textureProjLod','#define textureCubeLodEXT textureLod','#define texture2DGradEXT textureGrad','#define texture2DProjGradEXT textureProjGrad','#define textureCubeGradEXT textureGrad'].join('\n')+'\n'+prefixFragment;}var vertexGlsl=versionString+prefixVertex+vertexShader;var fragmentGlsl=versionString+prefixFragment+fragmentShader;// console.log( '*VERTEX*', vertexGlsl );
// console.log( '*FRAGMENT*', fragmentGlsl );
var glVertexShader=WebGLShader(gl,35633,vertexGlsl);var glFragmentShader=WebGLShader(gl,35632,fragmentGlsl);gl.attachShader(program,glVertexShader);gl.attachShader(program,glFragmentShader);// Force a particular attribute to index 0.
if(parameters.index0AttributeName!==undefined){gl.bindAttribLocation(program,0,parameters.index0AttributeName);}else if(parameters.morphTargets===true){// programs with morphTargets displace position out of attribute 0
gl.bindAttribLocation(program,0,'position');}gl.linkProgram(program);// check for link errors
if(renderer.debug.checkShaderErrors){var programLog=gl.getProgramInfoLog(program).trim();var vertexLog=gl.getShaderInfoLog(glVertexShader).trim();var fragmentLog=gl.getShaderInfoLog(glFragmentShader).trim();var runnable=true;var haveDiagnostics=true;if(gl.getProgramParameter(program,35714)===false){runnable=false;var vertexErrors=getShaderErrors(gl,glVertexShader,'vertex');var fragmentErrors=getShaderErrors(gl,glFragmentShader,'fragment');console.error('THREE.WebGLProgram: Shader Error '+gl.getError()+' - '+'VALIDATE_STATUS '+gl.getProgramParameter(program,35715)+'\n\n'+'Program Info Log: '+programLog+'\n'+vertexErrors+'\n'+fragmentErrors);}else if(programLog!==''){console.warn('THREE.WebGLProgram: Program Info Log:',programLog);}else if(vertexLog===''||fragmentLog===''){haveDiagnostics=false;}if(haveDiagnostics){this.diagnostics={runnable:runnable,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}};}}// Clean up
// Crashes in iOS9 and iOS10. #18402
// gl.detachShader( program, glVertexShader );
// gl.detachShader( program, glFragmentShader );
gl.deleteShader(glVertexShader);gl.deleteShader(glFragmentShader);// set up caching for uniform locations
var cachedUniforms;this.getUniforms=function(){if(cachedUniforms===undefined){cachedUniforms=new WebGLUniforms(gl,program);}return cachedUniforms;};// set up caching for attribute locations
var cachedAttributes;this.getAttributes=function(){if(cachedAttributes===undefined){cachedAttributes=fetchAttributeLocations(gl,program);}return cachedAttributes;};// free resource
this.destroy=function(){bindingStates.releaseStatesOfProgram(this);gl.deleteProgram(program);this.program=undefined;};//
this.name=parameters.shaderName;this.id=programIdCount++;this.cacheKey=cacheKey;this.usedTimes=1;this.program=program;this.vertexShader=glVertexShader;this.fragmentShader=glFragmentShader;return this;}var _id=0;var WebGLShaderCache=/*#__PURE__*/function(){function WebGLShaderCache(){_classCallCheck(this,WebGLShaderCache);this.shaderCache=new Map();this.materialCache=new Map();}_createClass(WebGLShaderCache,[{key:"update",value:function update(material){var vertexShader=material.vertexShader;var fragmentShader=material.fragmentShader;var vertexShaderStage=this._getShaderStage(vertexShader);var fragmentShaderStage=this._getShaderStage(fragmentShader);var materialShaders=this._getShaderCacheForMaterial(material);if(materialShaders.has(vertexShaderStage)===false){materialShaders.add(vertexShaderStage);vertexShaderStage.usedTimes++;}if(materialShaders.has(fragmentShaderStage)===false){materialShaders.add(fragmentShaderStage);fragmentShaderStage.usedTimes++;}return this;}},{key:"remove",value:function remove(material){var materialShaders=this.materialCache.get(material);var _iterator=_createForOfIteratorHelper(materialShaders),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var shaderStage=_step.value;shaderStage.usedTimes--;if(shaderStage.usedTimes===0)this.shaderCache["delete"](shaderStage);}}catch(err){_iterator.e(err);}finally{_iterator.f();}this.materialCache["delete"](material);return this;}},{key:"getVertexShaderID",value:function getVertexShaderID(material){return this._getShaderStage(material.vertexShader).id;}},{key:"getFragmentShaderID",value:function getFragmentShaderID(material){return this._getShaderStage(material.fragmentShader).id;}},{key:"dispose",value:function dispose(){this.shaderCache.clear();this.materialCache.clear();}},{key:"_getShaderCacheForMaterial",value:function _getShaderCacheForMaterial(material){var cache=this.materialCache;if(cache.has(material)===false){cache.set(material,new Set());}return cache.get(material);}},{key:"_getShaderStage",value:function _getShaderStage(code){var cache=this.shaderCache;if(cache.has(code)===false){var stage=new WebGLShaderStage();cache.set(code,stage);}return cache.get(code);}}]);return WebGLShaderCache;}();var WebGLShaderStage=/*#__PURE__*/_createClass(function WebGLShaderStage(){_classCallCheck(this,WebGLShaderStage);this.id=_id++;this.usedTimes=0;});function WebGLPrograms(renderer,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping){var _programLayers=new Layers();var _customShaders=new WebGLShaderCache();var programs=[];var isWebGL2=capabilities.isWebGL2;var logarithmicDepthBuffer=capabilities.logarithmicDepthBuffer;var floatVertexTextures=capabilities.floatVertexTextures;var maxVertexUniforms=capabilities.maxVertexUniforms;var vertexTextures=capabilities.vertexTextures;var precision=capabilities.precision;var shaderIDs={MeshDepthMaterial:'depth',MeshDistanceMaterial:'distanceRGBA',MeshNormalMaterial:'normal',MeshBasicMaterial:'basic',MeshLambertMaterial:'lambert',MeshPhongMaterial:'phong',MeshToonMaterial:'toon',MeshStandardMaterial:'physical',MeshPhysicalMaterial:'physical',MeshMatcapMaterial:'matcap',LineBasicMaterial:'basic',LineDashedMaterial:'dashed',PointsMaterial:'points',ShadowMaterial:'shadow',SpriteMaterial:'sprite'};function getMaxBones(object){var skeleton=object.skeleton;var bones=skeleton.bones;if(floatVertexTextures){return 1024;}else {// default for when object is not specified
// ( for example when prebuilding shader to be used with multiple objects )
//
//  - leave some extra space for other uniforms
//  - limit here is ANGLE's 254 max uniform vectors
//    (up to 54 should be safe)
var nVertexUniforms=maxVertexUniforms;var nVertexMatrices=Math.floor((nVertexUniforms-20)/4);var maxBones=Math.min(nVertexMatrices,bones.length);if(maxBones<bones.length){console.warn('THREE.WebGLRenderer: Skeleton has '+bones.length+' bones. This GPU supports '+maxBones+'.');return 0;}return maxBones;}}function getParameters(material,lights,shadows,scene,object){var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment);var shaderID=shaderIDs[material.type];// heuristics to create shader parameters according to lights in the scene
// (not to blow over maxLights budget)
var maxBones=object.isSkinnedMesh?getMaxBones(object):0;if(material.precision!==null){precision=capabilities.getMaxPrecision(material.precision);if(precision!==material.precision){console.warn('THREE.WebGLProgram.getParameters:',material.precision,'not supported, using',precision,'instead.');}}var vertexShader,fragmentShader;var customVertexShaderID,customFragmentShaderID;if(shaderID){var shader=ShaderLib[shaderID];vertexShader=shader.vertexShader;fragmentShader=shader.fragmentShader;}else {vertexShader=material.vertexShader;fragmentShader=material.fragmentShader;_customShaders.update(material);customVertexShaderID=_customShaders.getVertexShaderID(material);customFragmentShaderID=_customShaders.getFragmentShaderID(material);}var currentRenderTarget=renderer.getRenderTarget();var useAlphaTest=material.alphaTest>0;var useClearcoat=material.clearcoat>0;var parameters={isWebGL2:isWebGL2,shaderID:shaderID,shaderName:material.type,vertexShader:vertexShader,fragmentShader:fragmentShader,defines:material.defines,customVertexShaderID:customVertexShaderID,customFragmentShaderID:customFragmentShaderID,isRawShaderMaterial:material.isRawShaderMaterial===true,glslVersion:material.glslVersion,precision:precision,instancing:object.isInstancedMesh===true,instancingColor:object.isInstancedMesh===true&&object.instanceColor!==null,supportsVertexTextures:vertexTextures,outputEncoding:currentRenderTarget===null?renderer.outputEncoding:currentRenderTarget.isXRRenderTarget===true?currentRenderTarget.texture.encoding:LinearEncoding,map:!!material.map,matcap:!!material.matcap,envMap:!!envMap,envMapMode:envMap&&envMap.mapping,envMapCubeUV:!!envMap&&(envMap.mapping===CubeUVReflectionMapping||envMap.mapping===CubeUVRefractionMapping),lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,objectSpaceNormalMap:material.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:material.normalMapType===TangentSpaceNormalMap,decodeVideoTexture:!!material.map&&material.map.isVideoTexture===true&&material.map.encoding===sRGBEncoding,clearcoat:useClearcoat,clearcoatMap:useClearcoat&&!!material.clearcoatMap,clearcoatRoughnessMap:useClearcoat&&!!material.clearcoatRoughnessMap,clearcoatNormalMap:useClearcoat&&!!material.clearcoatNormalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,specularIntensityMap:!!material.specularIntensityMap,specularColorMap:!!material.specularColorMap,transparent:material.transparent,alphaMap:!!material.alphaMap,alphaTest:useAlphaTest,gradientMap:!!material.gradientMap,sheen:material.sheen>0,sheenColorMap:!!material.sheenColorMap,sheenRoughnessMap:!!material.sheenRoughnessMap,transmission:material.transmission>0,transmissionMap:!!material.transmissionMap,thicknessMap:!!material.thicknessMap,combine:material.combine,vertexTangents:!!material.normalMap&&!!object.geometry&&!!object.geometry.attributes.tangent,vertexColors:material.vertexColors,vertexAlphas:material.vertexColors===true&&!!object.geometry&&!!object.geometry.attributes.color&&object.geometry.attributes.color.itemSize===4,vertexUvs:!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatMap||!!material.clearcoatRoughnessMap||!!material.clearcoatNormalMap||!!material.displacementMap||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||!!material.sheenColorMap||!!material.sheenRoughnessMap,uvsVertexOnly:!(!!material.map||!!material.bumpMap||!!material.normalMap||!!material.specularMap||!!material.alphaMap||!!material.emissiveMap||!!material.roughnessMap||!!material.metalnessMap||!!material.clearcoatNormalMap||material.transmission>0||!!material.transmissionMap||!!material.thicknessMap||!!material.specularIntensityMap||!!material.specularColorMap||material.sheen>0||!!material.sheenColorMap||!!material.sheenRoughnessMap)&&!!material.displacementMap,fog:!!fog,useFog:material.fog,fogExp2:fog&&fog.isFogExp2,flatShading:!!material.flatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:logarithmicDepthBuffer,skinning:object.isSkinnedMesh===true&&maxBones>0,maxBones:maxBones,useVertexTexture:floatVertexTextures,morphTargets:!!object.geometry&&!!object.geometry.morphAttributes.position,morphNormals:!!object.geometry&&!!object.geometry.morphAttributes.normal,morphTargetsCount:!!object.geometry&&!!object.geometry.morphAttributes.position?object.geometry.morphAttributes.position.length:0,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numDirLightShadows:lights.directionalShadowMap.length,numPointLightShadows:lights.pointShadowMap.length,numSpotLightShadows:lights.spotShadowMap.length,numClippingPlanes:clipping.numPlanes,numClipIntersection:clipping.numIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:material.toneMapped?renderer.toneMapping:NoToneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:material.depthPacking!==undefined?material.depthPacking:false,index0AttributeName:material.index0AttributeName,extensionDerivatives:material.extensions&&material.extensions.derivatives,extensionFragDepth:material.extensions&&material.extensions.fragDepth,extensionDrawBuffers:material.extensions&&material.extensions.drawBuffers,extensionShaderTextureLOD:material.extensions&&material.extensions.shaderTextureLOD,rendererExtensionFragDepth:isWebGL2||extensions.has('EXT_frag_depth'),rendererExtensionDrawBuffers:isWebGL2||extensions.has('WEBGL_draw_buffers'),rendererExtensionShaderTextureLod:isWebGL2||extensions.has('EXT_shader_texture_lod'),customProgramCacheKey:material.customProgramCacheKey()};return parameters;}function getProgramCacheKey(parameters){var array=[];if(parameters.shaderID){array.push(parameters.shaderID);}else {array.push(parameters.customVertexShaderID);array.push(parameters.customFragmentShaderID);}if(parameters.defines!==undefined){for(var name in parameters.defines){array.push(name);array.push(parameters.defines[name]);}}if(parameters.isRawShaderMaterial===false){getProgramCacheKeyParameters(array,parameters);getProgramCacheKeyBooleans(array,parameters);array.push(renderer.outputEncoding);}array.push(parameters.customProgramCacheKey);return array.join();}function getProgramCacheKeyParameters(array,parameters){array.push(parameters.precision);array.push(parameters.outputEncoding);array.push(parameters.envMapMode);array.push(parameters.combine);array.push(parameters.vertexUvs);array.push(parameters.fogExp2);array.push(parameters.sizeAttenuation);array.push(parameters.maxBones);array.push(parameters.morphTargetsCount);array.push(parameters.numDirLights);array.push(parameters.numPointLights);array.push(parameters.numSpotLights);array.push(parameters.numHemiLights);array.push(parameters.numRectAreaLights);array.push(parameters.numDirLightShadows);array.push(parameters.numPointLightShadows);array.push(parameters.numSpotLightShadows);array.push(parameters.shadowMapType);array.push(parameters.toneMapping);array.push(parameters.numClippingPlanes);array.push(parameters.numClipIntersection);}function getProgramCacheKeyBooleans(array,parameters){_programLayers.disableAll();if(parameters.isWebGL2)_programLayers.enable(0);if(parameters.supportsVertexTextures)_programLayers.enable(1);if(parameters.instancing)_programLayers.enable(2);if(parameters.instancingColor)_programLayers.enable(3);if(parameters.map)_programLayers.enable(4);if(parameters.matcap)_programLayers.enable(5);if(parameters.envMap)_programLayers.enable(6);if(parameters.envMapCubeUV)_programLayers.enable(7);if(parameters.lightMap)_programLayers.enable(8);if(parameters.aoMap)_programLayers.enable(9);if(parameters.emissiveMap)_programLayers.enable(10);if(parameters.bumpMap)_programLayers.enable(11);if(parameters.normalMap)_programLayers.enable(12);if(parameters.objectSpaceNormalMap)_programLayers.enable(13);if(parameters.tangentSpaceNormalMap)_programLayers.enable(14);if(parameters.clearcoat)_programLayers.enable(15);if(parameters.clearcoatMap)_programLayers.enable(16);if(parameters.clearcoatRoughnessMap)_programLayers.enable(17);if(parameters.clearcoatNormalMap)_programLayers.enable(18);if(parameters.displacementMap)_programLayers.enable(19);if(parameters.specularMap)_programLayers.enable(20);if(parameters.roughnessMap)_programLayers.enable(21);if(parameters.metalnessMap)_programLayers.enable(22);if(parameters.gradientMap)_programLayers.enable(23);if(parameters.alphaMap)_programLayers.enable(24);if(parameters.alphaTest)_programLayers.enable(25);if(parameters.vertexColors)_programLayers.enable(26);if(parameters.vertexAlphas)_programLayers.enable(27);if(parameters.vertexUvs)_programLayers.enable(28);if(parameters.vertexTangents)_programLayers.enable(29);if(parameters.uvsVertexOnly)_programLayers.enable(30);if(parameters.fog)_programLayers.enable(31);array.push(_programLayers.mask);_programLayers.disableAll();if(parameters.useFog)_programLayers.enable(0);if(parameters.flatShading)_programLayers.enable(1);if(parameters.logarithmicDepthBuffer)_programLayers.enable(2);if(parameters.skinning)_programLayers.enable(3);if(parameters.useVertexTexture)_programLayers.enable(4);if(parameters.morphTargets)_programLayers.enable(5);if(parameters.morphNormals)_programLayers.enable(6);if(parameters.premultipliedAlpha)_programLayers.enable(7);if(parameters.shadowMapEnabled)_programLayers.enable(8);if(parameters.physicallyCorrectLights)_programLayers.enable(9);if(parameters.doubleSided)_programLayers.enable(10);if(parameters.flipSided)_programLayers.enable(11);if(parameters.depthPacking)_programLayers.enable(12);if(parameters.dithering)_programLayers.enable(13);if(parameters.specularIntensityMap)_programLayers.enable(14);if(parameters.specularColorMap)_programLayers.enable(15);if(parameters.transmission)_programLayers.enable(16);if(parameters.transmissionMap)_programLayers.enable(17);if(parameters.thicknessMap)_programLayers.enable(18);if(parameters.sheen)_programLayers.enable(19);if(parameters.sheenColorMap)_programLayers.enable(20);if(parameters.sheenRoughnessMap)_programLayers.enable(21);if(parameters.decodeVideoTexture)_programLayers.enable(22);if(parameters.transparent)_programLayers.enable(23);array.push(_programLayers.mask);}function getUniforms(material){var shaderID=shaderIDs[material.type];var uniforms;if(shaderID){var shader=ShaderLib[shaderID];uniforms=UniformsUtils.clone(shader.uniforms);}else {uniforms=material.uniforms;}return uniforms;}function acquireProgram(parameters,cacheKey){var program;// Check if code has been already compiled
for(var p=0,pl=programs.length;p<pl;p++){var preexistingProgram=programs[p];if(preexistingProgram.cacheKey===cacheKey){program=preexistingProgram;++program.usedTimes;break;}}if(program===undefined){program=new WebGLProgram(renderer,cacheKey,parameters,bindingStates);programs.push(program);}return program;}function releaseProgram(program){if(--program.usedTimes===0){// Remove from unordered set
var _i115=programs.indexOf(program);programs[_i115]=programs[programs.length-1];programs.pop();// Free WebGL resources
program.destroy();}}function releaseShaderCache(material){_customShaders.remove(material);}function dispose(){_customShaders.dispose();}return {getParameters:getParameters,getProgramCacheKey:getProgramCacheKey,getUniforms:getUniforms,acquireProgram:acquireProgram,releaseProgram:releaseProgram,releaseShaderCache:releaseShaderCache,// Exposed for resource monitoring & error feedback via renderer.info:
programs:programs,dispose:dispose};}function WebGLProperties(){var properties=new WeakMap();function get(object){var map=properties.get(object);if(map===undefined){map={};properties.set(object,map);}return map;}function remove(object){properties["delete"](object);}function update(object,key,value){properties.get(object)[key]=value;}function dispose(){properties=new WeakMap();}return {get:get,remove:remove,update:update,dispose:dispose};}function painterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.material.id!==b.material.id){return a.material.id-b.material.id;}else if(a.z!==b.z){return a.z-b.z;}else {return a.id-b.id;}}function reversePainterSortStable(a,b){if(a.groupOrder!==b.groupOrder){return a.groupOrder-b.groupOrder;}else if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.z!==b.z){return b.z-a.z;}else {return a.id-b.id;}}function WebGLRenderList(){var renderItems=[];var renderItemsIndex=0;var opaque=[];var transmissive=[];var transparent=[];function init(){renderItemsIndex=0;opaque.length=0;transmissive.length=0;transparent.length=0;}function getNextRenderItem(object,geometry,material,groupOrder,z,group){var renderItem=renderItems[renderItemsIndex];if(renderItem===undefined){renderItem={id:object.id,object:object,geometry:geometry,material:material,groupOrder:groupOrder,renderOrder:object.renderOrder,z:z,group:group};renderItems[renderItemsIndex]=renderItem;}else {renderItem.id=object.id;renderItem.object=object;renderItem.geometry=geometry;renderItem.material=material;renderItem.groupOrder=groupOrder;renderItem.renderOrder=object.renderOrder;renderItem.z=z;renderItem.group=group;}renderItemsIndex++;return renderItem;}function push(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);if(material.transmission>0.0){transmissive.push(renderItem);}else if(material.transparent===true){transparent.push(renderItem);}else {opaque.push(renderItem);}}function unshift(object,geometry,material,groupOrder,z,group){var renderItem=getNextRenderItem(object,geometry,material,groupOrder,z,group);if(material.transmission>0.0){transmissive.unshift(renderItem);}else if(material.transparent===true){transparent.unshift(renderItem);}else {opaque.unshift(renderItem);}}function sort(customOpaqueSort,customTransparentSort){if(opaque.length>1)opaque.sort(customOpaqueSort||painterSortStable);if(transmissive.length>1)transmissive.sort(customTransparentSort||reversePainterSortStable);if(transparent.length>1)transparent.sort(customTransparentSort||reversePainterSortStable);}function finish(){// Clear references from inactive renderItems in the list
for(var _i116=renderItemsIndex,il=renderItems.length;_i116<il;_i116++){var renderItem=renderItems[_i116];if(renderItem.id===null)break;renderItem.id=null;renderItem.object=null;renderItem.geometry=null;renderItem.material=null;renderItem.group=null;}}return {opaque:opaque,transmissive:transmissive,transparent:transparent,init:init,push:push,unshift:unshift,finish:finish,sort:sort};}function WebGLRenderLists(){var lists=new WeakMap();function get(scene,renderCallDepth){var list;if(lists.has(scene)===false){list=new WebGLRenderList();lists.set(scene,[list]);}else {if(renderCallDepth>=lists.get(scene).length){list=new WebGLRenderList();lists.get(scene).push(list);}else {list=lists.get(scene)[renderCallDepth];}}return list;}function dispose(){lists=new WeakMap();}return {get:get,dispose:dispose};}function UniformsCache(){var lights={};return {get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={direction:new Vector3(),color:new Color()};break;case'SpotLight':uniforms={position:new Vector3(),direction:new Vector3(),color:new Color(),distance:0,coneCos:0,penumbraCos:0,decay:0};break;case'PointLight':uniforms={position:new Vector3(),color:new Color(),distance:0,decay:0};break;case'HemisphereLight':uniforms={direction:new Vector3(),skyColor:new Color(),groundColor:new Color()};break;case'RectAreaLight':uniforms={color:new Color(),position:new Vector3(),halfWidth:new Vector3(),halfHeight:new Vector3()};break;}lights[light.id]=uniforms;return uniforms;}};}function ShadowUniformsCache(){var lights={};return {get:function get(light){if(lights[light.id]!==undefined){return lights[light.id];}var uniforms;switch(light.type){case'DirectionalLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'SpotLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2()};break;case'PointLight':uniforms={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2(),shadowCameraNear:1,shadowCameraFar:1000};break;// TODO (abelnation): set RectAreaLight shadow uniforms
}lights[light.id]=uniforms;return uniforms;}};}var nextVersion=0;function shadowCastingLightsFirst(lightA,lightB){return (lightB.castShadow?1:0)-(lightA.castShadow?1:0);}function WebGLLights(extensions,capabilities){var cache=new UniformsCache();var shadowCache=ShadowUniformsCache();var state={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(var _i117=0;_i117<9;_i117++)state.probe.push(new Vector3());var vector3=new Vector3();var matrix4=new Matrix4();var matrix42=new Matrix4();function setup(lights,physicallyCorrectLights){var r=0,g=0,b=0;for(var _i118=0;_i118<9;_i118++)state.probe[_i118].set(0,0,0);var directionalLength=0;var pointLength=0;var spotLength=0;var rectAreaLength=0;var hemiLength=0;var numDirectionalShadows=0;var numPointShadows=0;var numSpotShadows=0;lights.sort(shadowCastingLightsFirst);// artist-friendly light intensity scaling factor
var scaleFactor=physicallyCorrectLights!==true?Math.PI:1;for(var _i119=0,l=lights.length;_i119<l;_i119++){var light=lights[_i119];var color=light.color;var intensity=light.intensity;var distance=light.distance;var shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null;if(light.isAmbientLight){r+=color.r*intensity*scaleFactor;g+=color.g*intensity*scaleFactor;b+=color.b*intensity*scaleFactor;}else if(light.isLightProbe){for(var j=0;j<9;j++){state.probe[j].addScaledVector(light.sh.coefficients[j],intensity);}}else if(light.isDirectionalLight){var uniforms=cache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor);if(light.castShadow){var shadow=light.shadow;var shadowUniforms=shadowCache.get(light);shadowUniforms.shadowBias=shadow.bias;shadowUniforms.shadowNormalBias=shadow.normalBias;shadowUniforms.shadowRadius=shadow.radius;shadowUniforms.shadowMapSize=shadow.mapSize;state.directionalShadow[directionalLength]=shadowUniforms;state.directionalShadowMap[directionalLength]=shadowMap;state.directionalShadowMatrix[directionalLength]=light.shadow.matrix;numDirectionalShadows++;}state.directional[directionalLength]=uniforms;directionalLength++;}else if(light.isSpotLight){var _uniforms=cache.get(light);_uniforms.position.setFromMatrixPosition(light.matrixWorld);_uniforms.color.copy(color).multiplyScalar(intensity*scaleFactor);_uniforms.distance=distance;_uniforms.coneCos=Math.cos(light.angle);_uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra));_uniforms.decay=light.decay;if(light.castShadow){var _shadow=light.shadow;var _shadowUniforms=shadowCache.get(light);_shadowUniforms.shadowBias=_shadow.bias;_shadowUniforms.shadowNormalBias=_shadow.normalBias;_shadowUniforms.shadowRadius=_shadow.radius;_shadowUniforms.shadowMapSize=_shadow.mapSize;state.spotShadow[spotLength]=_shadowUniforms;state.spotShadowMap[spotLength]=shadowMap;state.spotShadowMatrix[spotLength]=light.shadow.matrix;numSpotShadows++;}state.spot[spotLength]=_uniforms;spotLength++;}else if(light.isRectAreaLight){var _uniforms2=cache.get(light);// (a) intensity is the total visible light emitted
//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
// (b) intensity is the brightness of the light
_uniforms2.color.copy(color).multiplyScalar(intensity);_uniforms2.halfWidth.set(light.width*0.5,0.0,0.0);_uniforms2.halfHeight.set(0.0,light.height*0.5,0.0);state.rectArea[rectAreaLength]=_uniforms2;rectAreaLength++;}else if(light.isPointLight){var _uniforms3=cache.get(light);_uniforms3.color.copy(light.color).multiplyScalar(light.intensity*scaleFactor);_uniforms3.distance=light.distance;_uniforms3.decay=light.decay;if(light.castShadow){var _shadow2=light.shadow;var _shadowUniforms2=shadowCache.get(light);_shadowUniforms2.shadowBias=_shadow2.bias;_shadowUniforms2.shadowNormalBias=_shadow2.normalBias;_shadowUniforms2.shadowRadius=_shadow2.radius;_shadowUniforms2.shadowMapSize=_shadow2.mapSize;_shadowUniforms2.shadowCameraNear=_shadow2.camera.near;_shadowUniforms2.shadowCameraFar=_shadow2.camera.far;state.pointShadow[pointLength]=_shadowUniforms2;state.pointShadowMap[pointLength]=shadowMap;state.pointShadowMatrix[pointLength]=light.shadow.matrix;numPointShadows++;}state.point[pointLength]=_uniforms3;pointLength++;}else if(light.isHemisphereLight){var _uniforms4=cache.get(light);_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity*scaleFactor);_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity*scaleFactor);state.hemi[hemiLength]=_uniforms4;hemiLength++;}}if(rectAreaLength>0){if(capabilities.isWebGL2){// WebGL 2
state.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;state.rectAreaLTC2=UniformsLib.LTC_FLOAT_2;}else {// WebGL 1
if(extensions.has('OES_texture_float_linear')===true){state.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;state.rectAreaLTC2=UniformsLib.LTC_FLOAT_2;}else if(extensions.has('OES_texture_half_float_linear')===true){state.rectAreaLTC1=UniformsLib.LTC_HALF_1;state.rectAreaLTC2=UniformsLib.LTC_HALF_2;}else {console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');}}}state.ambient[0]=r;state.ambient[1]=g;state.ambient[2]=b;var hash=state.hash;if(hash.directionalLength!==directionalLength||hash.pointLength!==pointLength||hash.spotLength!==spotLength||hash.rectAreaLength!==rectAreaLength||hash.hemiLength!==hemiLength||hash.numDirectionalShadows!==numDirectionalShadows||hash.numPointShadows!==numPointShadows||hash.numSpotShadows!==numSpotShadows){state.directional.length=directionalLength;state.spot.length=spotLength;state.rectArea.length=rectAreaLength;state.point.length=pointLength;state.hemi.length=hemiLength;state.directionalShadow.length=numDirectionalShadows;state.directionalShadowMap.length=numDirectionalShadows;state.pointShadow.length=numPointShadows;state.pointShadowMap.length=numPointShadows;state.spotShadow.length=numSpotShadows;state.spotShadowMap.length=numSpotShadows;state.directionalShadowMatrix.length=numDirectionalShadows;state.pointShadowMatrix.length=numPointShadows;state.spotShadowMatrix.length=numSpotShadows;hash.directionalLength=directionalLength;hash.pointLength=pointLength;hash.spotLength=spotLength;hash.rectAreaLength=rectAreaLength;hash.hemiLength=hemiLength;hash.numDirectionalShadows=numDirectionalShadows;hash.numPointShadows=numPointShadows;hash.numSpotShadows=numSpotShadows;state.version=nextVersion++;}}function setupView(lights,camera){var directionalLength=0;var pointLength=0;var spotLength=0;var rectAreaLength=0;var hemiLength=0;var viewMatrix=camera.matrixWorldInverse;for(var _i120=0,l=lights.length;_i120<l;_i120++){var light=lights[_i120];if(light.isDirectionalLight){var uniforms=state.directional[directionalLength];uniforms.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);uniforms.direction.sub(vector3);uniforms.direction.transformDirection(viewMatrix);directionalLength++;}else if(light.isSpotLight){var _uniforms5=state.spot[spotLength];_uniforms5.position.setFromMatrixPosition(light.matrixWorld);_uniforms5.position.applyMatrix4(viewMatrix);_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);vector3.setFromMatrixPosition(light.target.matrixWorld);_uniforms5.direction.sub(vector3);_uniforms5.direction.transformDirection(viewMatrix);spotLength++;}else if(light.isRectAreaLight){var _uniforms6=state.rectArea[rectAreaLength];_uniforms6.position.setFromMatrixPosition(light.matrixWorld);_uniforms6.position.applyMatrix4(viewMatrix);// extract local rotation of light to derive width/height half vectors
matrix42.identity();matrix4.copy(light.matrixWorld);matrix4.premultiply(viewMatrix);matrix42.extractRotation(matrix4);_uniforms6.halfWidth.set(light.width*0.5,0.0,0.0);_uniforms6.halfHeight.set(0.0,light.height*0.5,0.0);_uniforms6.halfWidth.applyMatrix4(matrix42);_uniforms6.halfHeight.applyMatrix4(matrix42);rectAreaLength++;}else if(light.isPointLight){var _uniforms7=state.point[pointLength];_uniforms7.position.setFromMatrixPosition(light.matrixWorld);_uniforms7.position.applyMatrix4(viewMatrix);pointLength++;}else if(light.isHemisphereLight){var _uniforms8=state.hemi[hemiLength];_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);_uniforms8.direction.transformDirection(viewMatrix);_uniforms8.direction.normalize();hemiLength++;}}}return {setup:setup,setupView:setupView,state:state};}function WebGLRenderState(extensions,capabilities){var lights=new WebGLLights(extensions,capabilities);var lightsArray=[];var shadowsArray=[];function init(){lightsArray.length=0;shadowsArray.length=0;}function pushLight(light){lightsArray.push(light);}function pushShadow(shadowLight){shadowsArray.push(shadowLight);}function setupLights(physicallyCorrectLights){lights.setup(lightsArray,physicallyCorrectLights);}function setupLightsView(camera){lights.setupView(lightsArray,camera);}var state={lightsArray:lightsArray,shadowsArray:shadowsArray,lights:lights};return {init:init,state:state,setupLights:setupLights,setupLightsView:setupLightsView,pushLight:pushLight,pushShadow:pushShadow};}function WebGLRenderStates(extensions,capabilities){var renderStates=new WeakMap();function get(scene){var renderCallDepth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var renderState;if(renderStates.has(scene)===false){renderState=new WebGLRenderState(extensions,capabilities);renderStates.set(scene,[renderState]);}else {if(renderCallDepth>=renderStates.get(scene).length){renderState=new WebGLRenderState(extensions,capabilities);renderStates.get(scene).push(renderState);}else {renderState=renderStates.get(scene)[renderCallDepth];}}return renderState;}function dispose(){renderStates=new WeakMap();}return {get:get,dispose:dispose};}/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */var MeshDepthMaterial=/*#__PURE__*/function(_Material3){_inherits(MeshDepthMaterial,_Material3);var _super32=_createSuper(MeshDepthMaterial);function MeshDepthMaterial(parameters){var _this23;_classCallCheck(this,MeshDepthMaterial);_this23=_super32.call(this);_this23.type='MeshDepthMaterial';_this23.depthPacking=BasicDepthPacking;_this23.map=null;_this23.alphaMap=null;_this23.displacementMap=null;_this23.displacementScale=1;_this23.displacementBias=0;_this23.wireframe=false;_this23.wireframeLinewidth=1;_this23.fog=false;_this23.setValues(parameters);return _this23;}_createClass(MeshDepthMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshDepthMaterial.prototype),"copy",this).call(this,source);this.depthPacking=source.depthPacking;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this;}}]);return MeshDepthMaterial;}(Material);MeshDepthMaterial.prototype.isMeshDepthMaterial=true;/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */var MeshDistanceMaterial=/*#__PURE__*/function(_Material4){_inherits(MeshDistanceMaterial,_Material4);var _super33=_createSuper(MeshDistanceMaterial);function MeshDistanceMaterial(parameters){var _this24;_classCallCheck(this,MeshDistanceMaterial);_this24=_super33.call(this);_this24.type='MeshDistanceMaterial';_this24.referencePosition=new Vector3();_this24.nearDistance=1;_this24.farDistance=1000;_this24.map=null;_this24.alphaMap=null;_this24.displacementMap=null;_this24.displacementScale=1;_this24.displacementBias=0;_this24.fog=false;_this24.setValues(parameters);return _this24;}_createClass(MeshDistanceMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshDistanceMaterial.prototype),"copy",this).call(this,source);this.referencePosition.copy(source.referencePosition);this.nearDistance=source.nearDistance;this.farDistance=source.farDistance;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;return this;}}]);return MeshDistanceMaterial;}(Material);MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;var vertex="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";var fragment="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function WebGLShadowMap(_renderer,_objects,_capabilities){var _frustum=new Frustum();var _shadowMapSize=new Vector2(),_viewportSize=new Vector2(),_viewport=new Vector4(),_depthMaterial=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),_distanceMaterial=new MeshDistanceMaterial(),_materialCache={},_maxTextureSize=_capabilities.maxTextureSize;var shadowSide={0:BackSide,1:FrontSide,2:DoubleSide};var shadowMaterialVertical=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2()},radius:{value:4.0}},vertexShader:vertex,fragmentShader:fragment});var shadowMaterialHorizontal=shadowMaterialVertical.clone();shadowMaterialHorizontal.defines.HORIZONTAL_PASS=1;var fullScreenTri=new BufferGeometry();fullScreenTri.setAttribute('position',new BufferAttribute(new Float32Array([-1,-1,0.5,3,-1,0.5,-1,3,0.5]),3));var fullScreenMesh=new Mesh(fullScreenTri,shadowMaterialVertical);var scope=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(lights,scene,camera){if(scope.enabled===false)return;if(scope.autoUpdate===false&&scope.needsUpdate===false)return;if(lights.length===0)return;var currentRenderTarget=_renderer.getRenderTarget();var activeCubeFace=_renderer.getActiveCubeFace();var activeMipmapLevel=_renderer.getActiveMipmapLevel();var _state=_renderer.state;// Set GL state for depth map.
_state.setBlending(NoBlending);_state.buffers.color.setClear(1,1,1,1);_state.buffers.depth.setTest(true);_state.setScissorTest(false);// render depth map
for(var _i121=0,il=lights.length;_i121<il;_i121++){var light=lights[_i121];var shadow=light.shadow;if(shadow===undefined){console.warn('THREE.WebGLShadowMap:',light,'has no shadow.');continue;}if(shadow.autoUpdate===false&&shadow.needsUpdate===false)continue;_shadowMapSize.copy(shadow.mapSize);var shadowFrameExtents=shadow.getFrameExtents();_shadowMapSize.multiply(shadowFrameExtents);_viewportSize.copy(shadow.mapSize);if(_shadowMapSize.x>_maxTextureSize||_shadowMapSize.y>_maxTextureSize){if(_shadowMapSize.x>_maxTextureSize){_viewportSize.x=Math.floor(_maxTextureSize/shadowFrameExtents.x);_shadowMapSize.x=_viewportSize.x*shadowFrameExtents.x;shadow.mapSize.x=_viewportSize.x;}if(_shadowMapSize.y>_maxTextureSize){_viewportSize.y=Math.floor(_maxTextureSize/shadowFrameExtents.y);_shadowMapSize.y=_viewportSize.y*shadowFrameExtents.y;shadow.mapSize.y=_viewportSize.y;}}if(shadow.map===null&&!shadow.isPointLightShadow&&this.type===VSMShadowMap){var pars={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.map.texture.name=light.name+'.shadowMap';shadow.mapPass=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars);shadow.camera.updateProjectionMatrix();}if(shadow.map===null){var _pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,_pars);shadow.map.texture.name=light.name+'.shadowMap';shadow.camera.updateProjectionMatrix();}_renderer.setRenderTarget(shadow.map);_renderer.clear();var viewportCount=shadow.getViewportCount();for(var vp=0;vp<viewportCount;vp++){var viewport=shadow.getViewport(vp);_viewport.set(_viewportSize.x*viewport.x,_viewportSize.y*viewport.y,_viewportSize.x*viewport.z,_viewportSize.y*viewport.w);_state.viewport(_viewport);shadow.updateMatrices(light,vp);_frustum=shadow.getFrustum();renderObject(scene,camera,shadow.camera,light,this.type);}// do blur pass for VSM
if(!shadow.isPointLightShadow&&this.type===VSMShadowMap){VSMPass(shadow,camera);}shadow.needsUpdate=false;}scope.needsUpdate=false;_renderer.setRenderTarget(currentRenderTarget,activeCubeFace,activeMipmapLevel);};function VSMPass(shadow,camera){var geometry=_objects.update(fullScreenMesh);if(shadowMaterialVertical.defines.VSM_SAMPLES!==shadow.blurSamples){shadowMaterialVertical.defines.VSM_SAMPLES=shadow.blurSamples;shadowMaterialHorizontal.defines.VSM_SAMPLES=shadow.blurSamples;shadowMaterialVertical.needsUpdate=true;shadowMaterialHorizontal.needsUpdate=true;}// vertical pass
shadowMaterialVertical.uniforms.shadow_pass.value=shadow.map.texture;shadowMaterialVertical.uniforms.resolution.value=shadow.mapSize;shadowMaterialVertical.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.mapPass);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialVertical,fullScreenMesh,null);// horizontal pass
shadowMaterialHorizontal.uniforms.shadow_pass.value=shadow.mapPass.texture;shadowMaterialHorizontal.uniforms.resolution.value=shadow.mapSize;shadowMaterialHorizontal.uniforms.radius.value=shadow.radius;_renderer.setRenderTarget(shadow.map);_renderer.clear();_renderer.renderBufferDirect(camera,null,geometry,shadowMaterialHorizontal,fullScreenMesh,null);}function getDepthMaterial(object,geometry,material,light,shadowCameraNear,shadowCameraFar,type){var result=null;var customMaterial=light.isPointLight===true?object.customDistanceMaterial:object.customDepthMaterial;if(customMaterial!==undefined){result=customMaterial;}else {result=light.isPointLight===true?_distanceMaterial:_depthMaterial;}if(_renderer.localClippingEnabled&&material.clipShadows===true&&material.clippingPlanes.length!==0||material.displacementMap&&material.displacementScale!==0||material.alphaMap&&material.alphaTest>0){// in this case we need a unique material instance reflecting the
// appropriate state
var keyA=result.uuid,keyB=material.uuid;var materialsForVariant=_materialCache[keyA];if(materialsForVariant===undefined){materialsForVariant={};_materialCache[keyA]=materialsForVariant;}var cachedMaterial=materialsForVariant[keyB];if(cachedMaterial===undefined){cachedMaterial=result.clone();materialsForVariant[keyB]=cachedMaterial;}result=cachedMaterial;}result.visible=material.visible;result.wireframe=material.wireframe;if(type===VSMShadowMap){result.side=material.shadowSide!==null?material.shadowSide:material.side;}else {result.side=material.shadowSide!==null?material.shadowSide:shadowSide[material.side];}result.alphaMap=material.alphaMap;result.alphaTest=material.alphaTest;result.clipShadows=material.clipShadows;result.clippingPlanes=material.clippingPlanes;result.clipIntersection=material.clipIntersection;result.displacementMap=material.displacementMap;result.displacementScale=material.displacementScale;result.displacementBias=material.displacementBias;result.wireframeLinewidth=material.wireframeLinewidth;result.linewidth=material.linewidth;if(light.isPointLight===true&&result.isMeshDistanceMaterial===true){result.referencePosition.setFromMatrixPosition(light.matrixWorld);result.nearDistance=shadowCameraNear;result.farDistance=shadowCameraFar;}return result;}function renderObject(object,camera,shadowCamera,light,type){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)){if((object.castShadow||object.receiveShadow&&type===VSMShadowMap)&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);var geometry=_objects.update(object);var material=object.material;if(Array.isArray(material)){var groups=geometry.groups;for(var k=0,kl=groups.length;k<kl;k++){var group=groups[k];var groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){var depthMaterial=getDepthMaterial(object,geometry,groupMaterial,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group);}}}else if(material.visible){var _depthMaterial2=getDepthMaterial(object,geometry,material,light,shadowCamera.near,shadowCamera.far,type);_renderer.renderBufferDirect(shadowCamera,null,geometry,_depthMaterial2,object,null);}}}var children=object.children;for(var _i122=0,l=children.length;_i122<l;_i122++){renderObject(children[_i122],camera,shadowCamera,light,type);}}}function WebGLState(gl,extensions,capabilities){var _factorToGL;var isWebGL2=capabilities.isWebGL2;function ColorBuffer(){var locked=false;var color=new Vector4();var currentColorMask=null;var currentColorClear=new Vector4(0,0,0,0);return {setMask:function setMask(colorMask){if(currentColorMask!==colorMask&&!locked){gl.colorMask(colorMask,colorMask,colorMask,colorMask);currentColorMask=colorMask;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(r,g,b,a,premultipliedAlpha){if(premultipliedAlpha===true){r*=a;g*=a;b*=a;}color.set(r,g,b,a);if(currentColorClear.equals(color)===false){gl.clearColor(r,g,b,a);currentColorClear.copy(color);}},reset:function reset(){locked=false;currentColorMask=null;currentColorClear.set(-1,0,0,0);// set to invalid state
}};}function DepthBuffer(){var locked=false;var currentDepthMask=null;var currentDepthFunc=null;var currentDepthClear=null;return {setTest:function setTest(depthTest){if(depthTest){enable(2929);}else {disable(2929);}},setMask:function setMask(depthMask){if(currentDepthMask!==depthMask&&!locked){gl.depthMask(depthMask);currentDepthMask=depthMask;}},setFunc:function setFunc(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc){switch(depthFunc){case NeverDepth:gl.depthFunc(512);break;case AlwaysDepth:gl.depthFunc(519);break;case LessDepth:gl.depthFunc(513);break;case LessEqualDepth:gl.depthFunc(515);break;case EqualDepth:gl.depthFunc(514);break;case GreaterEqualDepth:gl.depthFunc(518);break;case GreaterDepth:gl.depthFunc(516);break;case NotEqualDepth:gl.depthFunc(517);break;default:gl.depthFunc(515);}}else {gl.depthFunc(515);}currentDepthFunc=depthFunc;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(depth){if(currentDepthClear!==depth){gl.clearDepth(depth);currentDepthClear=depth;}},reset:function reset(){locked=false;currentDepthMask=null;currentDepthFunc=null;currentDepthClear=null;}};}function StencilBuffer(){var locked=false;var currentStencilMask=null;var currentStencilFunc=null;var currentStencilRef=null;var currentStencilFuncMask=null;var currentStencilFail=null;var currentStencilZFail=null;var currentStencilZPass=null;var currentStencilClear=null;return {setTest:function setTest(stencilTest){if(!locked){if(stencilTest){enable(2960);}else {disable(2960);}}},setMask:function setMask(stencilMask){if(currentStencilMask!==stencilMask&&!locked){gl.stencilMask(stencilMask);currentStencilMask=stencilMask;}},setFunc:function setFunc(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask){gl.stencilFunc(stencilFunc,stencilRef,stencilMask);currentStencilFunc=stencilFunc;currentStencilRef=stencilRef;currentStencilFuncMask=stencilMask;}},setOp:function setOp(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass){gl.stencilOp(stencilFail,stencilZFail,stencilZPass);currentStencilFail=stencilFail;currentStencilZFail=stencilZFail;currentStencilZPass=stencilZPass;}},setLocked:function setLocked(lock){locked=lock;},setClear:function setClear(stencil){if(currentStencilClear!==stencil){gl.clearStencil(stencil);currentStencilClear=stencil;}},reset:function reset(){locked=false;currentStencilMask=null;currentStencilFunc=null;currentStencilRef=null;currentStencilFuncMask=null;currentStencilFail=null;currentStencilZFail=null;currentStencilZPass=null;currentStencilClear=null;}};}//
var colorBuffer=new ColorBuffer();var depthBuffer=new DepthBuffer();var stencilBuffer=new StencilBuffer();var enabledCapabilities={};var currentBoundFramebuffers={};var currentDrawbuffers=new WeakMap();var defaultDrawbuffers=[];var currentProgram=null;var currentBlendingEnabled=false;var currentBlending=null;var currentBlendEquation=null;var currentBlendSrc=null;var currentBlendDst=null;var currentBlendEquationAlpha=null;var currentBlendSrcAlpha=null;var currentBlendDstAlpha=null;var currentPremultipledAlpha=false;var currentFlipSided=null;var currentCullFace=null;var currentLineWidth=null;var currentPolygonOffsetFactor=null;var currentPolygonOffsetUnits=null;var maxTextures=gl.getParameter(35661);var lineWidthAvailable=false;var version=0;var glVersion=gl.getParameter(7938);if(glVersion.indexOf('WebGL')!==-1){version=parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);lineWidthAvailable=version>=1.0;}else if(glVersion.indexOf('OpenGL ES')!==-1){version=parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);lineWidthAvailable=version>=2.0;}var currentTextureSlot=null;var currentBoundTextures={};var scissorParam=gl.getParameter(3088);var viewportParam=gl.getParameter(2978);var currentScissor=new Vector4().fromArray(scissorParam);var currentViewport=new Vector4().fromArray(viewportParam);function createTexture(type,target,count){var data=new Uint8Array(4);// 4 is required to match default unpack alignment of 4.
var texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,10241,9728);gl.texParameteri(type,10240,9728);for(var _i123=0;_i123<count;_i123++){gl.texImage2D(target+_i123,0,6408,1,1,0,6408,5121,data);}return texture;}var emptyTextures={};emptyTextures[3553]=createTexture(3553,3553,1);emptyTextures[34067]=createTexture(34067,34069,6);// init
colorBuffer.setClear(0,0,0,1);depthBuffer.setClear(1);stencilBuffer.setClear(0);enable(2929);depthBuffer.setFunc(LessEqualDepth);setFlipSided(false);setCullFace(CullFaceBack);enable(2884);setBlending(NoBlending);//
function enable(id){if(enabledCapabilities[id]!==true){gl.enable(id);enabledCapabilities[id]=true;}}function disable(id){if(enabledCapabilities[id]!==false){gl.disable(id);enabledCapabilities[id]=false;}}function bindFramebuffer(target,framebuffer){if(currentBoundFramebuffers[target]!==framebuffer){gl.bindFramebuffer(target,framebuffer);currentBoundFramebuffers[target]=framebuffer;if(isWebGL2){// 36009 is equivalent to 36160
if(target===36009){currentBoundFramebuffers[36160]=framebuffer;}if(target===36160){currentBoundFramebuffers[36009]=framebuffer;}}return true;}return false;}function drawBuffers(renderTarget,framebuffer){var drawBuffers=defaultDrawbuffers;var needsUpdate=false;if(renderTarget){drawBuffers=currentDrawbuffers.get(framebuffer);if(drawBuffers===undefined){drawBuffers=[];currentDrawbuffers.set(framebuffer,drawBuffers);}if(renderTarget.isWebGLMultipleRenderTargets){var textures=renderTarget.texture;if(drawBuffers.length!==textures.length||drawBuffers[0]!==36064){for(var _i124=0,il=textures.length;_i124<il;_i124++){drawBuffers[_i124]=36064+_i124;}drawBuffers.length=textures.length;needsUpdate=true;}}else {if(drawBuffers[0]!==36064){drawBuffers[0]=36064;needsUpdate=true;}}}else {if(drawBuffers[0]!==1029){drawBuffers[0]=1029;needsUpdate=true;}}if(needsUpdate){if(capabilities.isWebGL2){gl.drawBuffers(drawBuffers);}else {extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(drawBuffers);}}}function useProgram(program){if(currentProgram!==program){gl.useProgram(program);currentProgram=program;return true;}return false;}var equationToGL=_defineProperty$3(_defineProperty$3(_defineProperty$3({},AddEquation,32774),SubtractEquation,32778),ReverseSubtractEquation,32779);if(isWebGL2){equationToGL[MinEquation]=32775;equationToGL[MaxEquation]=32776;}else {var extension=extensions.get('EXT_blend_minmax');if(extension!==null){equationToGL[MinEquation]=extension.MIN_EXT;equationToGL[MaxEquation]=extension.MAX_EXT;}}var factorToGL=(_factorToGL={},_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_factorToGL,ZeroFactor,0),OneFactor,1),SrcColorFactor,768),SrcAlphaFactor,770),SrcAlphaSaturateFactor,776),DstColorFactor,774),DstAlphaFactor,772),OneMinusSrcColorFactor,769),OneMinusSrcAlphaFactor,771),OneMinusDstColorFactor,775),_defineProperty$3(_factorToGL,OneMinusDstAlphaFactor,773));function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending===NoBlending){if(currentBlendingEnabled===true){disable(3042);currentBlendingEnabled=false;}return;}if(currentBlendingEnabled===false){enable(3042);currentBlendingEnabled=true;}if(blending!==CustomBlending){if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha){if(currentBlendEquation!==AddEquation||currentBlendEquationAlpha!==AddEquation){gl.blendEquation(32774);currentBlendEquation=AddEquation;currentBlendEquationAlpha=AddEquation;}if(premultipliedAlpha){switch(blending){case NormalBlending:gl.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:gl.blendFunc(1,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFuncSeparate(0,768,0,770);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}else {switch(blending){case NormalBlending:gl.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:gl.blendFunc(770,1);break;case SubtractiveBlending:gl.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:gl.blendFunc(0,768);break;default:console.error('THREE.WebGLState: Invalid blending: ',blending);break;}}currentBlendSrc=null;currentBlendDst=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentBlending=blending;currentPremultipledAlpha=premultipliedAlpha;}return;}// custom blending
blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||blendEquationAlpha!==currentBlendEquationAlpha){gl.blendEquationSeparate(equationToGL[blendEquation],equationToGL[blendEquationAlpha]);currentBlendEquation=blendEquation;currentBlendEquationAlpha=blendEquationAlpha;}if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha){gl.blendFuncSeparate(factorToGL[blendSrc],factorToGL[blendDst],factorToGL[blendSrcAlpha],factorToGL[blendDstAlpha]);currentBlendSrc=blendSrc;currentBlendDst=blendDst;currentBlendSrcAlpha=blendSrcAlpha;currentBlendDstAlpha=blendDstAlpha;}currentBlending=blending;currentPremultipledAlpha=null;}function setMaterial(material,frontFaceCW){material.side===DoubleSide?disable(2884):enable(2884);var flipSided=material.side===BackSide;if(frontFaceCW)flipSided=!flipSided;setFlipSided(flipSided);material.blending===NormalBlending&&material.transparent===false?setBlending(NoBlending):setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha);depthBuffer.setFunc(material.depthFunc);depthBuffer.setTest(material.depthTest);depthBuffer.setMask(material.depthWrite);colorBuffer.setMask(material.colorWrite);var stencilWrite=material.stencilWrite;stencilBuffer.setTest(stencilWrite);if(stencilWrite){stencilBuffer.setMask(material.stencilWriteMask);stencilBuffer.setFunc(material.stencilFunc,material.stencilRef,material.stencilFuncMask);stencilBuffer.setOp(material.stencilFail,material.stencilZFail,material.stencilZPass);}setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits);material.alphaToCoverage===true?enable(32926):disable(32926);}//
function setFlipSided(flipSided){if(currentFlipSided!==flipSided){if(flipSided){gl.frontFace(2304);}else {gl.frontFace(2305);}currentFlipSided=flipSided;}}function setCullFace(cullFace){if(cullFace!==CullFaceNone){enable(2884);if(cullFace!==currentCullFace){if(cullFace===CullFaceBack){gl.cullFace(1029);}else if(cullFace===CullFaceFront){gl.cullFace(1028);}else {gl.cullFace(1032);}}}else {disable(2884);}currentCullFace=cullFace;}function setLineWidth(width){if(width!==currentLineWidth){if(lineWidthAvailable)gl.lineWidth(width);currentLineWidth=width;}}function setPolygonOffset(polygonOffset,factor,units){if(polygonOffset){enable(32823);if(currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units){gl.polygonOffset(factor,units);currentPolygonOffsetFactor=factor;currentPolygonOffsetUnits=units;}}else {disable(32823);}}function setScissorTest(scissorTest){if(scissorTest){enable(3089);}else {disable(3089);}}// texture
function activeTexture(webglSlot){if(webglSlot===undefined)webglSlot=33984+maxTextures-1;if(currentTextureSlot!==webglSlot){gl.activeTexture(webglSlot);currentTextureSlot=webglSlot;}}function bindTexture(webglType,webglTexture){if(currentTextureSlot===null){activeTexture();}var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture===undefined){boundTexture={type:undefined,texture:undefined};currentBoundTextures[currentTextureSlot]=boundTexture;}if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture){gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]);boundTexture.type=webglType;boundTexture.texture=webglTexture;}}function unbindTexture(){var boundTexture=currentBoundTextures[currentTextureSlot];if(boundTexture!==undefined&&boundTexture.type!==undefined){gl.bindTexture(boundTexture.type,null);boundTexture.type=undefined;boundTexture.texture=undefined;}}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texSubImage2D(){try{gl.texSubImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texSubImage3D(){try{gl.texSubImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function compressedTexSubImage2D(){try{gl.compressedTexSubImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texStorage2D(){try{gl.texStorage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texStorage3D(){try{gl.texStorage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}function texImage3D(){try{gl.texImage3D.apply(gl,arguments);}catch(error){console.error('THREE.WebGLState:',error);}}//
function scissor(scissor){if(currentScissor.equals(scissor)===false){gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w);currentScissor.copy(scissor);}}function viewport(viewport){if(currentViewport.equals(viewport)===false){gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w);currentViewport.copy(viewport);}}//
function reset(){// reset state
gl.disable(3042);gl.disable(2884);gl.disable(2929);gl.disable(32823);gl.disable(3089);gl.disable(2960);gl.disable(32926);gl.blendEquation(32774);gl.blendFunc(1,0);gl.blendFuncSeparate(1,0,1,0);gl.colorMask(true,true,true,true);gl.clearColor(0,0,0,0);gl.depthMask(true);gl.depthFunc(513);gl.clearDepth(1);gl.stencilMask(0xffffffff);gl.stencilFunc(519,0,0xffffffff);gl.stencilOp(7680,7680,7680);gl.clearStencil(0);gl.cullFace(1029);gl.frontFace(2305);gl.polygonOffset(0,0);gl.activeTexture(33984);gl.bindFramebuffer(36160,null);if(isWebGL2===true){gl.bindFramebuffer(36009,null);gl.bindFramebuffer(36008,null);}gl.useProgram(null);gl.lineWidth(1);gl.scissor(0,0,gl.canvas.width,gl.canvas.height);gl.viewport(0,0,gl.canvas.width,gl.canvas.height);// reset internals
enabledCapabilities={};currentTextureSlot=null;currentBoundTextures={};currentBoundFramebuffers={};currentDrawbuffers=new WeakMap();defaultDrawbuffers=[];currentProgram=null;currentBlendingEnabled=false;currentBlending=null;currentBlendEquation=null;currentBlendSrc=null;currentBlendDst=null;currentBlendEquationAlpha=null;currentBlendSrcAlpha=null;currentBlendDstAlpha=null;currentPremultipledAlpha=false;currentFlipSided=null;currentCullFace=null;currentLineWidth=null;currentPolygonOffsetFactor=null;currentPolygonOffsetUnits=null;currentScissor.set(0,0,gl.canvas.width,gl.canvas.height);currentViewport.set(0,0,gl.canvas.width,gl.canvas.height);colorBuffer.reset();depthBuffer.reset();stencilBuffer.reset();}return {buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},enable:enable,disable:disable,bindFramebuffer:bindFramebuffer,drawBuffers:drawBuffers,useProgram:useProgram,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,unbindTexture:unbindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,texImage3D:texImage3D,texStorage2D:texStorage2D,texStorage3D:texStorage3D,texSubImage2D:texSubImage2D,texSubImage3D:texSubImage3D,compressedTexSubImage2D:compressedTexSubImage2D,scissor:scissor,viewport:viewport,reset:reset};}function WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info){var isWebGL2=capabilities.isWebGL2;var maxTextures=capabilities.maxTextures;var maxCubemapSize=capabilities.maxCubemapSize;var maxTextureSize=capabilities.maxTextureSize;var maxSamples=capabilities.maxSamples;var hasMultisampledRenderToTexture=extensions.has('WEBGL_multisampled_render_to_texture');var MultisampledRenderToTextureExtension=hasMultisampledRenderToTexture?extensions.get('WEBGL_multisampled_render_to_texture'):undefined;var _videoTextures=new WeakMap();var _canvas;// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
var useOffscreenCanvas=false;try{useOffscreenCanvas=typeof OffscreenCanvas!=='undefined'&&new OffscreenCanvas(1,1).getContext('2d')!==null;}catch(err){// Ignore any errors
}function createCanvas(width,height){// Use OffscreenCanvas when available. Specially needed in web workers
return useOffscreenCanvas?new OffscreenCanvas(width,height):createElementNS('canvas');}function resizeImage(image,needsPowerOfTwo,needsNewCanvas,maxSize){var scale=1;// handle case if texture exceeds max size
if(image.width>maxSize||image.height>maxSize){scale=maxSize/Math.max(image.width,image.height);}// only perform resize if necessary
if(scale<1||needsPowerOfTwo===true){// only perform resize for certain image types
if(typeof HTMLImageElement!=='undefined'&&image instanceof HTMLImageElement||typeof HTMLCanvasElement!=='undefined'&&image instanceof HTMLCanvasElement||typeof ImageBitmap!=='undefined'&&image instanceof ImageBitmap){var floor=needsPowerOfTwo?floorPowerOfTwo:Math.floor;var width=floor(scale*image.width);var height=floor(scale*image.height);if(_canvas===undefined)_canvas=createCanvas(width,height);// cube textures can't reuse the same canvas
var canvas=needsNewCanvas?createCanvas(width,height):_canvas;canvas.width=width;canvas.height=height;var context=canvas.getContext('2d');context.drawImage(image,0,0,width,height);console.warn('THREE.WebGLRenderer: Texture has been resized from ('+image.width+'x'+image.height+') to ('+width+'x'+height+').');return canvas;}else {if('data'in image){console.warn('THREE.WebGLRenderer: Image in DataTexture is too big ('+image.width+'x'+image.height+').');}return image;}}return image;}function isPowerOfTwo$1(image){return isPowerOfTwo(image.width)&&isPowerOfTwo(image.height);}function textureNeedsPowerOfTwo(texture){if(isWebGL2)return false;return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function textureNeedsGenerateMipmaps(texture,supportsMips){return texture.generateMipmaps&&supportsMips&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter;}function generateMipmap(target){_gl.generateMipmap(target);}function getInternalFormat(internalFormatName,glFormat,glType,encoding){var isVideoTexture=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;if(isWebGL2===false)return glFormat;if(internalFormatName!==null){if(_gl[internalFormatName]!==undefined)return _gl[internalFormatName];console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \''+internalFormatName+'\'');}var internalFormat=glFormat;if(glFormat===6403){if(glType===5126)internalFormat=33326;if(glType===5131)internalFormat=33325;if(glType===5121)internalFormat=33321;}if(glFormat===33319){if(glType===5126)internalFormat=33328;if(glType===5131)internalFormat=33327;if(glType===5121)internalFormat=33323;}if(glFormat===6408){if(glType===5126)internalFormat=34836;if(glType===5131)internalFormat=34842;if(glType===5121)internalFormat=encoding===sRGBEncoding&&isVideoTexture===false?35907:32856;if(glType===32819)internalFormat=32854;if(glType===32820)internalFormat=32855;}if(internalFormat===33325||internalFormat===33326||internalFormat===33327||internalFormat===33328||internalFormat===34842||internalFormat===34836){extensions.get('EXT_color_buffer_float');}return internalFormat;}function getMipLevels(texture,image,supportsMips){if(textureNeedsGenerateMipmaps(texture,supportsMips)===true||texture.isFramebufferTexture&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){return Math.log2(Math.max(image.width,image.height))+1;}else if(texture.mipmaps!==undefined&&texture.mipmaps.length>0){// user-defined mipmaps
return texture.mipmaps.length;}else if(texture.isCompressedTexture&&Array.isArray(texture.image)){return image.mipmaps.length;}else {// texture without mipmaps (only base level)
return 1;}}// Fallback filters for non-power-of-2 textures
function filterFallback(f){if(f===NearestFilter||f===NearestMipmapNearestFilter||f===NearestMipmapLinearFilter){return 9728;}return 9729;}//
function onTextureDispose(event){var texture=event.target;texture.removeEventListener('dispose',onTextureDispose);deallocateTexture(texture);if(texture.isVideoTexture){_videoTextures["delete"](texture);}info.memory.textures--;}function onRenderTargetDispose(event){var renderTarget=event.target;renderTarget.removeEventListener('dispose',onRenderTargetDispose);deallocateRenderTarget(renderTarget);}//
function deallocateTexture(texture){var textureProperties=properties.get(texture);if(textureProperties.__webglInit===undefined)return;_gl.deleteTexture(textureProperties.__webglTexture);properties.remove(texture);}function deallocateRenderTarget(renderTarget){var texture=renderTarget.texture;var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(texture);if(!renderTarget)return;if(textureProperties.__webglTexture!==undefined){_gl.deleteTexture(textureProperties.__webglTexture);info.memory.textures--;}if(renderTarget.depthTexture){renderTarget.depthTexture.dispose();}if(renderTarget.isWebGLCubeRenderTarget){for(var _i125=0;_i125<6;_i125++){_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[_i125]);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[_i125]);}}else {_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);if(renderTargetProperties.__webglDepthbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);if(renderTargetProperties.__webglMultisampledFramebuffer)_gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);if(renderTargetProperties.__webglColorRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);if(renderTargetProperties.__webglDepthRenderbuffer)_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);}if(renderTarget.isWebGLMultipleRenderTargets){for(var _i126=0,il=texture.length;_i126<il;_i126++){var attachmentProperties=properties.get(texture[_i126]);if(attachmentProperties.__webglTexture){_gl.deleteTexture(attachmentProperties.__webglTexture);info.memory.textures--;}properties.remove(texture[_i126]);}}properties.remove(texture);properties.remove(renderTarget);}//
var textureUnits=0;function resetTextureUnits(){textureUnits=0;}function allocateTextureUnit(){var textureUnit=textureUnits;if(textureUnit>=maxTextures){console.warn('THREE.WebGLTextures: Trying to use '+textureUnit+' texture units while this GPU supports only '+maxTextures);}textureUnits+=1;return textureUnit;}//
function setTexture2D(texture,slot){var textureProperties=properties.get(texture);if(texture.isVideoTexture)updateVideoTexture(texture);if(texture.version>0&&textureProperties.__version!==texture.version){var image=texture.image;if(image===undefined){console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');}else if(image.complete===false){console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');}else {uploadTexture(textureProperties,texture,slot);return;}}state.activeTexture(33984+slot);state.bindTexture(3553,textureProperties.__webglTexture);}function setTexture2DArray(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(35866,textureProperties.__webglTexture);}function setTexture3D(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(32879,textureProperties.__webglTexture);}function setTextureCube(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){uploadCubeTexture(textureProperties,texture,slot);return;}state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);}var wrappingToGL=_defineProperty$3(_defineProperty$3(_defineProperty$3({},RepeatWrapping,10497),ClampToEdgeWrapping,33071),MirroredRepeatWrapping,33648);var filterToGL=_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3(_defineProperty$3({},NearestFilter,9728),NearestMipmapNearestFilter,9984),NearestMipmapLinearFilter,9986),LinearFilter,9729),LinearMipmapNearestFilter,9985),LinearMipmapLinearFilter,9987);function setTextureParameters(textureType,texture,supportsMips){if(supportsMips){_gl.texParameteri(textureType,10242,wrappingToGL[texture.wrapS]);_gl.texParameteri(textureType,10243,wrappingToGL[texture.wrapT]);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,wrappingToGL[texture.wrapR]);}_gl.texParameteri(textureType,10240,filterToGL[texture.magFilter]);_gl.texParameteri(textureType,10241,filterToGL[texture.minFilter]);}else {_gl.texParameteri(textureType,10242,33071);_gl.texParameteri(textureType,10243,33071);if(textureType===32879||textureType===35866){_gl.texParameteri(textureType,32882,33071);}if(texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');}_gl.texParameteri(textureType,10240,filterFallback(texture.magFilter));_gl.texParameteri(textureType,10241,filterFallback(texture.minFilter));if(texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter){console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');}}if(extensions.has('EXT_texture_filter_anisotropic')===true){var extension=extensions.get('EXT_texture_filter_anisotropic');if(texture.type===FloatType&&extensions.has('OES_texture_float_linear')===false)return;// verify extension for WebGL 1 and WebGL 2
if(isWebGL2===false&&texture.type===HalfFloatType&&extensions.has('OES_texture_half_float_linear')===false)return;// verify extension for WebGL 1 only
if(texture.anisotropy>1||properties.get(texture).__currentAnisotropy){_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy()));properties.get(texture).__currentAnisotropy=texture.anisotropy;}}}function initTexture(textureProperties,texture){if(textureProperties.__webglInit===undefined){textureProperties.__webglInit=true;texture.addEventListener('dispose',onTextureDispose);textureProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}}function uploadTexture(textureProperties,texture,slot){var textureType=3553;if(texture.isDataTexture2DArray)textureType=35866;if(texture.isDataTexture3D)textureType=32879;initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(textureType,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);_gl.pixelStorei(37443,0);var needsPowerOfTwo=textureNeedsPowerOfTwo(texture)&&isPowerOfTwo$1(texture.image)===false;var image=resizeImage(texture.image,needsPowerOfTwo,false,maxTextureSize);image=verifyColorSpace(texture,image);var supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding);var glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding,texture.isVideoTexture);setTextureParameters(textureType,texture,supportsMips);var mipmap;var mipmaps=texture.mipmaps;var useTexStorage=isWebGL2&&texture.isVideoTexture!==true;var allocateMemory=textureProperties.__version===undefined;var levels=getMipLevels(texture,image,supportsMips);if(texture.isDepthTexture){// populate depth texture with dummy data
glInternalFormat=6402;if(isWebGL2){if(texture.type===FloatType){glInternalFormat=36012;}else if(texture.type===UnsignedIntType){glInternalFormat=33190;}else if(texture.type===UnsignedInt248Type){glInternalFormat=35056;}else {glInternalFormat=33189;// WebGL2 requires sized internalformat for glTexImage2D
}}else {if(texture.type===FloatType){console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');}}// validation checks for WebGL 1
if(texture.format===DepthFormat&&glInternalFormat===6402){// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType){console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');texture.type=UnsignedShortType;glType=utils.convert(texture.type);}}if(texture.format===DepthStencilFormat&&glInternalFormat===6402){// Depth stencil textures need the DEPTH_STENCIL internal format
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
glInternalFormat=34041;// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
if(texture.type!==UnsignedInt248Type){console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');texture.type=UnsignedInt248Type;glType=utils.convert(texture.type);}}//
if(useTexStorage&&allocateMemory){state.texStorage2D(3553,1,glInternalFormat,image.width,image.height);}else {state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}}else if(texture.isDataTexture){// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(var _i127=0,il=mipmaps.length;_i127<il;_i127++){mipmap=mipmaps[_i127];if(useTexStorage){state.texSubImage2D(3553,0,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else {state.texImage2D(3553,_i127,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}texture.generateMipmaps=false;}else {if(useTexStorage){if(allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}state.texSubImage2D(3553,0,0,0,image.width,image.height,glFormat,glType,image.data);}else {state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,image.data);}}}else if(texture.isCompressedTexture){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(var _i128=0,_il9=mipmaps.length;_i128<_il9;_i128++){mipmap=mipmaps[_i128];if(texture.format!==RGBAFormat){if(glFormat!==null){if(useTexStorage){state.compressedTexSubImage2D(3553,_i128,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data);}else {state.compressedTexImage2D(3553,_i128,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}}else {console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');}}else {if(useTexStorage){state.texSubImage2D(3553,_i128,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else {state.texImage2D(3553,_i128,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}}else if(texture.isDataTexture2DArray){if(useTexStorage){if(allocateMemory){state.texStorage3D(35866,levels,glInternalFormat,image.width,image.height,image.depth);}state.texSubImage3D(35866,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data);}else {state.texImage3D(35866,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);}}else if(texture.isDataTexture3D){if(useTexStorage){if(allocateMemory){state.texStorage3D(32879,levels,glInternalFormat,image.width,image.height,image.depth);}state.texSubImage3D(32879,0,0,0,0,image.width,image.height,image.depth,glFormat,glType,image.data);}else {state.texImage3D(32879,0,glInternalFormat,image.width,image.height,image.depth,0,glFormat,glType,image.data);}}else if(texture.isFramebufferTexture){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}else {state.texImage2D(3553,0,glInternalFormat,image.width,image.height,0,glFormat,glType,null);}}else {// regular Texture (image, video, canvas)
// use manually created mipmaps if available
// if there are no manual mipmaps
// set 0 level mipmap and then use GL to generate other mipmap levels
if(mipmaps.length>0&&supportsMips){if(useTexStorage&&allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,mipmaps[0].width,mipmaps[0].height);}for(var _i129=0,_il10=mipmaps.length;_i129<_il10;_i129++){mipmap=mipmaps[_i129];if(useTexStorage){state.texSubImage2D(3553,_i129,0,0,glFormat,glType,mipmap);}else {state.texImage2D(3553,_i129,glInternalFormat,glFormat,glType,mipmap);}}texture.generateMipmaps=false;}else {if(useTexStorage){if(allocateMemory){state.texStorage2D(3553,levels,glInternalFormat,image.width,image.height);}state.texSubImage2D(3553,0,0,0,glFormat,glType,image);}else {state.texImage2D(3553,0,glInternalFormat,glFormat,glType,image);}}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(textureType);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}function uploadCubeTexture(textureProperties,texture,slot){if(texture.image.length!==6)return;initTexture(textureProperties,texture);state.activeTexture(33984+slot);state.bindTexture(34067,textureProperties.__webglTexture);_gl.pixelStorei(37440,texture.flipY);_gl.pixelStorei(37441,texture.premultiplyAlpha);_gl.pixelStorei(3317,texture.unpackAlignment);_gl.pixelStorei(37443,0);var isCompressed=texture&&(texture.isCompressedTexture||texture.image[0].isCompressedTexture);var isDataTexture=texture.image[0]&&texture.image[0].isDataTexture;var cubeImage=[];for(var _i130=0;_i130<6;_i130++){if(!isCompressed&&!isDataTexture){cubeImage[_i130]=resizeImage(texture.image[_i130],false,true,maxCubemapSize);}else {cubeImage[_i130]=isDataTexture?texture.image[_i130].image:texture.image[_i130];}cubeImage[_i130]=verifyColorSpace(texture,cubeImage[_i130]);}var image=cubeImage[0],supportsMips=isPowerOfTwo$1(image)||isWebGL2,glFormat=utils.convert(texture.format,texture.encoding),glType=utils.convert(texture.type),glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);var useTexStorage=isWebGL2&&texture.isVideoTexture!==true;var allocateMemory=textureProperties.__version===undefined;var levels=getMipLevels(texture,image,supportsMips);setTextureParameters(34067,texture,supportsMips);var mipmaps;if(isCompressed){if(useTexStorage&&allocateMemory){state.texStorage2D(34067,levels,glInternalFormat,image.width,image.height);}for(var _i131=0;_i131<6;_i131++){mipmaps=cubeImage[_i131].mipmaps;for(var j=0;j<mipmaps.length;j++){var mipmap=mipmaps[j];if(texture.format!==RGBAFormat){if(glFormat!==null){if(useTexStorage){state.compressedTexSubImage2D(34069+_i131,j,0,0,mipmap.width,mipmap.height,glFormat,mipmap.data);}else {state.compressedTexImage2D(34069+_i131,j,glInternalFormat,mipmap.width,mipmap.height,0,mipmap.data);}}else {console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');}}else {if(useTexStorage){state.texSubImage2D(34069+_i131,j,0,0,mipmap.width,mipmap.height,glFormat,glType,mipmap.data);}else {state.texImage2D(34069+_i131,j,glInternalFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);}}}}}else {mipmaps=texture.mipmaps;if(useTexStorage&&allocateMemory){// TODO: Uniformly handle mipmap definitions
// Normal textures and compressed cube textures define base level + mips with their mipmap array
// Uncompressed cube textures use their mipmap array only for mips (no base level)
if(mipmaps.length>0)levels++;state.texStorage2D(34067,levels,glInternalFormat,cubeImage[0].width,cubeImage[0].height);}for(var _i132=0;_i132<6;_i132++){if(isDataTexture){if(useTexStorage){state.texSubImage2D(34069+_i132,0,0,0,cubeImage[_i132].width,cubeImage[_i132].height,glFormat,glType,cubeImage[_i132].data);}else {state.texImage2D(34069+_i132,0,glInternalFormat,cubeImage[_i132].width,cubeImage[_i132].height,0,glFormat,glType,cubeImage[_i132].data);}for(var _j3=0;_j3<mipmaps.length;_j3++){var _mipmap=mipmaps[_j3];var mipmapImage=_mipmap.image[_i132].image;if(useTexStorage){state.texSubImage2D(34069+_i132,_j3+1,0,0,mipmapImage.width,mipmapImage.height,glFormat,glType,mipmapImage.data);}else {state.texImage2D(34069+_i132,_j3+1,glInternalFormat,mipmapImage.width,mipmapImage.height,0,glFormat,glType,mipmapImage.data);}}}else {if(useTexStorage){state.texSubImage2D(34069+_i132,0,0,0,glFormat,glType,cubeImage[_i132]);}else {state.texImage2D(34069+_i132,0,glInternalFormat,glFormat,glType,cubeImage[_i132]);}for(var _j4=0;_j4<mipmaps.length;_j4++){var _mipmap2=mipmaps[_j4];if(useTexStorage){state.texSubImage2D(34069+_i132,_j4+1,0,0,glFormat,glType,_mipmap2.image[_i132]);}else {state.texImage2D(34069+_i132,_j4+1,glInternalFormat,glFormat,glType,_mipmap2.image[_i132]);}}}}}if(textureNeedsGenerateMipmaps(texture,supportsMips)){// We assume images for cube map have the same size.
generateMipmap(34067);}textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture);}// Render targets
// Setup storage for target texture and bind it to correct framebuffer
function setupFrameBufferTexture(framebuffer,renderTarget,texture,attachment,textureTarget){var glFormat=utils.convert(texture.format,texture.encoding);var glType=utils.convert(texture.type);var glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);var renderTargetProperties=properties.get(renderTarget);if(!renderTargetProperties.__hasExternalTextures){if(textureTarget===32879||textureTarget===35866){state.texImage3D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,renderTarget.depth,0,glFormat,glType,null);}else {state.texImage2D(textureTarget,0,glInternalFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);}}state.bindFramebuffer(36160,framebuffer);if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0,getRenderTargetSamples(renderTarget));}else {_gl.framebufferTexture2D(36160,attachment,textureTarget,properties.get(texture).__webglTexture,0);}state.bindFramebuffer(36160,null);}// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
function setupRenderBufferStorage(renderbuffer,renderTarget,isMultisample){_gl.bindRenderbuffer(36161,renderbuffer);if(renderTarget.depthBuffer&&!renderTarget.stencilBuffer){var glInternalFormat=33189;if(isMultisample||renderTarget.useRenderToTexture){var depthTexture=renderTarget.depthTexture;if(depthTexture&&depthTexture.isDepthTexture){if(depthTexture.type===FloatType){glInternalFormat=36012;}else if(depthTexture.type===UnsignedIntType){glInternalFormat=33190;}}var samples=getRenderTargetSamples(renderTarget);if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);}}else {_gl.renderbufferStorage(36161,glInternalFormat,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,36096,36161,renderbuffer);}else if(renderTarget.depthBuffer&&renderTarget.stencilBuffer){var _samples=getRenderTargetSamples(renderTarget);if(isMultisample&&renderTarget.useRenderbuffer){_gl.renderbufferStorageMultisample(36161,_samples,35056,renderTarget.width,renderTarget.height);}else if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161,_samples,35056,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorage(36161,34041,renderTarget.width,renderTarget.height);}_gl.framebufferRenderbuffer(36160,33306,36161,renderbuffer);}else {// Use the first texture for MRT so far
var texture=renderTarget.isWebGLMultipleRenderTargets===true?renderTarget.texture[0]:renderTarget.texture;var glFormat=utils.convert(texture.format,texture.encoding);var glType=utils.convert(texture.type);var _glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);var _samples2=getRenderTargetSamples(renderTarget);if(isMultisample&&renderTarget.useRenderbuffer){_gl.renderbufferStorageMultisample(36161,_samples2,_glInternalFormat,renderTarget.width,renderTarget.height);}else if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161,_samples2,_glInternalFormat,renderTarget.width,renderTarget.height);}else {_gl.renderbufferStorage(36161,_glInternalFormat,renderTarget.width,renderTarget.height);}}_gl.bindRenderbuffer(36161,null);}// Setup resources for a Depth Texture for a FBO (needs an extension)
function setupDepthTexture(framebuffer,renderTarget){var isCube=renderTarget&&renderTarget.isWebGLCubeRenderTarget;if(isCube)throw new Error('Depth Texture with cube render targets is not supported');state.bindFramebuffer(36160,framebuffer);if(!(renderTarget.depthTexture&&renderTarget.depthTexture.isDepthTexture)){throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');}// upload an empty depth texture with framebuffer size
if(!properties.get(renderTarget.depthTexture).__webglTexture||renderTarget.depthTexture.image.width!==renderTarget.width||renderTarget.depthTexture.image.height!==renderTarget.height){renderTarget.depthTexture.image.width=renderTarget.width;renderTarget.depthTexture.image.height=renderTarget.height;renderTarget.depthTexture.needsUpdate=true;}setTexture2D(renderTarget.depthTexture,0);var webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;var samples=getRenderTargetSamples(renderTarget);if(renderTarget.depthTexture.format===DepthFormat){if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160,36096,3553,webglDepthTexture,0,samples);}else {_gl.framebufferTexture2D(36160,36096,3553,webglDepthTexture,0);}}else if(renderTarget.depthTexture.format===DepthStencilFormat){if(renderTarget.useRenderToTexture){MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160,33306,3553,webglDepthTexture,0,samples);}else {_gl.framebufferTexture2D(36160,33306,3553,webglDepthTexture,0);}}else {throw new Error('Unknown depthTexture format');}}// Setup GL resources for a non-texture depth buffer
function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget);var isCube=renderTarget.isWebGLCubeRenderTarget===true;if(renderTarget.depthTexture&&!renderTargetProperties.__autoAllocateDepthBuffer){if(isCube)throw new Error('target.depthTexture not supported in Cube render targets');setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget);}else {if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(var _i133=0;_i133<6;_i133++){state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer[_i133]);renderTargetProperties.__webglDepthbuffer[_i133]=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[_i133],renderTarget,false);}}else {state.bindFramebuffer(36160,renderTargetProperties.__webglFramebuffer);renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget,false);}}state.bindFramebuffer(36160,null);}// rebind framebuffer with external textures
function rebindTextures(renderTarget,colorTexture,depthTexture){var renderTargetProperties=properties.get(renderTarget);if(colorTexture!==undefined){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,renderTarget.texture,36064,3553);}if(depthTexture!==undefined){setupDepthRenderbuffer(renderTarget);}}// Set up GL resources for the render target
function setupRenderTarget(renderTarget){var texture=renderTarget.texture;var renderTargetProperties=properties.get(renderTarget);var textureProperties=properties.get(texture);renderTarget.addEventListener('dispose',onRenderTargetDispose);if(renderTarget.isWebGLMultipleRenderTargets!==true){if(textureProperties.__webglTexture===undefined){textureProperties.__webglTexture=_gl.createTexture();}textureProperties.__version=texture.version;info.memory.textures++;}var isCube=renderTarget.isWebGLCubeRenderTarget===true;var isMultipleRenderTargets=renderTarget.isWebGLMultipleRenderTargets===true;var isRenderTarget3D=texture.isDataTexture3D||texture.isDataTexture2DArray;var supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2;// Setup framebuffer
if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var _i134=0;_i134<6;_i134++){renderTargetProperties.__webglFramebuffer[_i134]=_gl.createFramebuffer();}}else {renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isMultipleRenderTargets){if(capabilities.drawBuffers){var textures=renderTarget.texture;for(var _i135=0,il=textures.length;_i135<il;_i135++){var attachmentProperties=properties.get(textures[_i135]);if(attachmentProperties.__webglTexture===undefined){attachmentProperties.__webglTexture=_gl.createTexture();info.memory.textures++;}}}else {console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');}}else if(renderTarget.useRenderbuffer){if(isWebGL2){renderTargetProperties.__webglMultisampledFramebuffer=_gl.createFramebuffer();renderTargetProperties.__webglColorRenderbuffer=_gl.createRenderbuffer();_gl.bindRenderbuffer(36161,renderTargetProperties.__webglColorRenderbuffer);var glFormat=utils.convert(texture.format,texture.encoding);var glType=utils.convert(texture.type);var glInternalFormat=getInternalFormat(texture.internalFormat,glFormat,glType,texture.encoding);var samples=getRenderTargetSamples(renderTarget);_gl.renderbufferStorageMultisample(36161,samples,glInternalFormat,renderTarget.width,renderTarget.height);state.bindFramebuffer(36160,renderTargetProperties.__webglMultisampledFramebuffer);_gl.framebufferRenderbuffer(36160,36064,36161,renderTargetProperties.__webglColorRenderbuffer);_gl.bindRenderbuffer(36161,null);if(renderTarget.depthBuffer){renderTargetProperties.__webglDepthRenderbuffer=_gl.createRenderbuffer();setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer,renderTarget,true);}state.bindFramebuffer(36160,null);}else {console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}}// Setup color buffer
if(isCube){state.bindTexture(34067,textureProperties.__webglTexture);setTextureParameters(34067,texture,supportsMips);for(var _i136=0;_i136<6;_i136++){setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i136],renderTarget,texture,36064,34069+_i136);}if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(34067);}state.unbindTexture();}else if(isMultipleRenderTargets){var _textures=renderTarget.texture;for(var _i137=0,_il11=_textures.length;_i137<_il11;_i137++){var attachment=_textures[_i137];var _attachmentProperties=properties.get(attachment);state.bindTexture(3553,_attachmentProperties.__webglTexture);setTextureParameters(3553,attachment,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,attachment,36064+_i137,3553);if(textureNeedsGenerateMipmaps(attachment,supportsMips)){generateMipmap(3553);}}state.unbindTexture();}else {var glTextureType=3553;if(isRenderTarget3D){// Render targets containing layers, i.e: Texture 3D and 2d arrays
if(isWebGL2){var isTexture3D=texture.isDataTexture3D;glTextureType=isTexture3D?32879:35866;}else {console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');}}state.bindTexture(glTextureType,textureProperties.__webglTexture);setTextureParameters(glTextureType,texture,supportsMips);setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,texture,36064,glTextureType);if(textureNeedsGenerateMipmaps(texture,supportsMips)){generateMipmap(glTextureType);}state.unbindTexture();}// Setup depth and stencil buffers
if(renderTarget.depthBuffer){setupDepthRenderbuffer(renderTarget);}}function updateRenderTargetMipmap(renderTarget){var supportsMips=isPowerOfTwo$1(renderTarget)||isWebGL2;var textures=renderTarget.isWebGLMultipleRenderTargets===true?renderTarget.texture:[renderTarget.texture];for(var _i138=0,il=textures.length;_i138<il;_i138++){var texture=textures[_i138];if(textureNeedsGenerateMipmaps(texture,supportsMips)){var target=renderTarget.isWebGLCubeRenderTarget?34067:3553;var webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture);generateMipmap(target);state.unbindTexture();}}}function updateMultisampleRenderTarget(renderTarget){if(renderTarget.useRenderbuffer){if(isWebGL2){var width=renderTarget.width;var height=renderTarget.height;var mask=16384;var invalidationArray=[36064];var depthStyle=renderTarget.stencilBuffer?33306:36096;if(renderTarget.depthBuffer){invalidationArray.push(depthStyle);}if(!renderTarget.ignoreDepthForMultisampleCopy){if(renderTarget.depthBuffer)mask|=256;if(renderTarget.stencilBuffer)mask|=1024;}var renderTargetProperties=properties.get(renderTarget);state.bindFramebuffer(36008,renderTargetProperties.__webglMultisampledFramebuffer);state.bindFramebuffer(36009,renderTargetProperties.__webglFramebuffer);if(renderTarget.ignoreDepthForMultisampleCopy){_gl.invalidateFramebuffer(36008,[depthStyle]);_gl.invalidateFramebuffer(36009,[depthStyle]);}_gl.blitFramebuffer(0,0,width,height,0,0,width,height,mask,9728);_gl.invalidateFramebuffer(36008,invalidationArray);state.bindFramebuffer(36008,null);state.bindFramebuffer(36009,renderTargetProperties.__webglMultisampledFramebuffer);}else {console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');}}}function getRenderTargetSamples(renderTarget){return isWebGL2&&(renderTarget.useRenderbuffer||renderTarget.useRenderToTexture)?Math.min(maxSamples,renderTarget.samples):0;}function updateVideoTexture(texture){var frame=info.render.frame;// Check the last frame we updated the VideoTexture
if(_videoTextures.get(texture)!==frame){_videoTextures.set(texture,frame);texture.update();}}function verifyColorSpace(texture,image){var encoding=texture.encoding;var format=texture.format;var type=texture.type;if(texture.isCompressedTexture===true||texture.isVideoTexture===true||texture.format===_SRGBAFormat)return image;if(encoding!==LinearEncoding){// sRGB
if(encoding===sRGBEncoding){if(isWebGL2===false){// in WebGL 1, try to use EXT_sRGB extension and unsized formats
if(extensions.has('EXT_sRGB')===true&&format===RGBAFormat){texture.format=_SRGBAFormat;// it's not possible to generate mips in WebGL 1 with this extension
texture.minFilter=LinearFilter;texture.generateMipmaps=false;}else {// slow fallback (CPU decode)
image=ImageUtils.sRGBToLinear(image);}}else {// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
if(format!==RGBAFormat||type!==UnsignedByteType){console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');}}}else {console.error('THREE.WebGLTextures: Unsupported texture encoding:',encoding);}}return image;}// backwards compatibility
var warnedTexture2D=false;var warnedTextureCube=false;function safeSetTexture2D(texture,slot){if(texture&&texture.isWebGLRenderTarget){if(warnedTexture2D===false){console.warn('THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.');warnedTexture2D=true;}texture=texture.texture;}setTexture2D(texture,slot);}function safeSetTextureCube(texture,slot){if(texture&&texture.isWebGLCubeRenderTarget){if(warnedTextureCube===false){console.warn('THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.');warnedTextureCube=true;}texture=texture.texture;}setTextureCube(texture,slot);}//
this.allocateTextureUnit=allocateTextureUnit;this.resetTextureUnits=resetTextureUnits;this.setTexture2D=setTexture2D;this.setTexture2DArray=setTexture2DArray;this.setTexture3D=setTexture3D;this.setTextureCube=setTextureCube;this.rebindTextures=rebindTextures;this.setupRenderTarget=setupRenderTarget;this.updateRenderTargetMipmap=updateRenderTargetMipmap;this.updateMultisampleRenderTarget=updateMultisampleRenderTarget;this.setupDepthRenderbuffer=setupDepthRenderbuffer;this.setupFrameBufferTexture=setupFrameBufferTexture;this.safeSetTexture2D=safeSetTexture2D;this.safeSetTextureCube=safeSetTextureCube;}function WebGLUtils(gl,extensions,capabilities){var isWebGL2=capabilities.isWebGL2;function convert(p){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var extension;if(p===UnsignedByteType)return 5121;if(p===UnsignedShort4444Type)return 32819;if(p===UnsignedShort5551Type)return 32820;if(p===ByteType)return 5120;if(p===ShortType)return 5122;if(p===UnsignedShortType)return 5123;if(p===IntType)return 5124;if(p===UnsignedIntType)return 5125;if(p===FloatType)return 5126;if(p===HalfFloatType){if(isWebGL2)return 5131;extension=extensions.get('OES_texture_half_float');if(extension!==null){return extension.HALF_FLOAT_OES;}else {return null;}}if(p===AlphaFormat)return 6406;if(p===RGBAFormat)return 6408;if(p===LuminanceFormat)return 6409;if(p===LuminanceAlphaFormat)return 6410;if(p===DepthFormat)return 6402;if(p===DepthStencilFormat)return 34041;if(p===RedFormat)return 6403;if(p===RGBFormat){console.warn('THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228');return 6408;}// WebGL 1 sRGB fallback
if(p===_SRGBAFormat){extension=extensions.get('EXT_sRGB');if(extension!==null){return extension.SRGB_ALPHA_EXT;}else {return null;}}// WebGL2 formats.
if(p===RedIntegerFormat)return 36244;if(p===RGFormat)return 33319;if(p===RGIntegerFormat)return 33320;if(p===RGBAIntegerFormat)return 36249;// S3TC
if(p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format){if(encoding===sRGBEncoding){extension=extensions.get('WEBGL_compressed_texture_s3tc_srgb');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;}else {return null;}}else {extension=extensions.get('WEBGL_compressed_texture_s3tc');if(extension!==null){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;}else {return null;}}}// PVRTC
if(p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format){extension=extensions.get('WEBGL_compressed_texture_pvrtc');if(extension!==null){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;}else {return null;}}// ETC1
if(p===RGB_ETC1_Format){extension=extensions.get('WEBGL_compressed_texture_etc1');if(extension!==null){return extension.COMPRESSED_RGB_ETC1_WEBGL;}else {return null;}}// ETC2
if(p===RGB_ETC2_Format||p===RGBA_ETC2_EAC_Format){extension=extensions.get('WEBGL_compressed_texture_etc');if(extension!==null){if(p===RGB_ETC2_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ETC2:extension.COMPRESSED_RGB8_ETC2;if(p===RGBA_ETC2_EAC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:extension.COMPRESSED_RGBA8_ETC2_EAC;}else {return null;}}// ASTC
if(p===RGBA_ASTC_4x4_Format||p===RGBA_ASTC_5x4_Format||p===RGBA_ASTC_5x5_Format||p===RGBA_ASTC_6x5_Format||p===RGBA_ASTC_6x6_Format||p===RGBA_ASTC_8x5_Format||p===RGBA_ASTC_8x6_Format||p===RGBA_ASTC_8x8_Format||p===RGBA_ASTC_10x5_Format||p===RGBA_ASTC_10x6_Format||p===RGBA_ASTC_10x8_Format||p===RGBA_ASTC_10x10_Format||p===RGBA_ASTC_12x10_Format||p===RGBA_ASTC_12x12_Format){extension=extensions.get('WEBGL_compressed_texture_astc');if(extension!==null){if(p===RGBA_ASTC_4x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:extension.COMPRESSED_RGBA_ASTC_4x4_KHR;if(p===RGBA_ASTC_5x4_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:extension.COMPRESSED_RGBA_ASTC_5x4_KHR;if(p===RGBA_ASTC_5x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:extension.COMPRESSED_RGBA_ASTC_5x5_KHR;if(p===RGBA_ASTC_6x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:extension.COMPRESSED_RGBA_ASTC_6x5_KHR;if(p===RGBA_ASTC_6x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:extension.COMPRESSED_RGBA_ASTC_6x6_KHR;if(p===RGBA_ASTC_8x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:extension.COMPRESSED_RGBA_ASTC_8x5_KHR;if(p===RGBA_ASTC_8x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:extension.COMPRESSED_RGBA_ASTC_8x6_KHR;if(p===RGBA_ASTC_8x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:extension.COMPRESSED_RGBA_ASTC_8x8_KHR;if(p===RGBA_ASTC_10x5_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:extension.COMPRESSED_RGBA_ASTC_10x5_KHR;if(p===RGBA_ASTC_10x6_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:extension.COMPRESSED_RGBA_ASTC_10x6_KHR;if(p===RGBA_ASTC_10x8_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:extension.COMPRESSED_RGBA_ASTC_10x8_KHR;if(p===RGBA_ASTC_10x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:extension.COMPRESSED_RGBA_ASTC_10x10_KHR;if(p===RGBA_ASTC_12x10_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:extension.COMPRESSED_RGBA_ASTC_12x10_KHR;if(p===RGBA_ASTC_12x12_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:extension.COMPRESSED_RGBA_ASTC_12x12_KHR;}else {return null;}}// BPTC
if(p===RGBA_BPTC_Format){extension=extensions.get('EXT_texture_compression_bptc');if(extension!==null){if(p===RGBA_BPTC_Format)return encoding===sRGBEncoding?extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;}else {return null;}}//
if(p===UnsignedInt248Type){if(isWebGL2)return 34042;extension=extensions.get('WEBGL_depth_texture');if(extension!==null){return extension.UNSIGNED_INT_24_8_WEBGL;}else {return null;}}}return {convert:convert};}var ArrayCamera=/*#__PURE__*/function(_PerspectiveCamera){_inherits(ArrayCamera,_PerspectiveCamera);var _super34=_createSuper(ArrayCamera);function ArrayCamera(){var _this25;var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];_classCallCheck(this,ArrayCamera);_this25=_super34.call(this);_this25.cameras=array;return _this25;}return _createClass(ArrayCamera);}(PerspectiveCamera);ArrayCamera.prototype.isArrayCamera=true;var Group=/*#__PURE__*/function(_Object3D4){_inherits(Group,_Object3D4);var _super35=_createSuper(Group);function Group(){var _this26;_classCallCheck(this,Group);_this26=_super35.call(this);_this26.type='Group';return _this26;}return _createClass(Group);}(Object3D);Group.prototype.isGroup=true;var _moveEvent={type:'move'};var WebXRController=/*#__PURE__*/function(){function WebXRController(){_classCallCheck(this,WebXRController);this._targetRay=null;this._grip=null;this._hand=null;}_createClass(WebXRController,[{key:"getHandSpace",value:function getHandSpace(){if(this._hand===null){this._hand=new Group();this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false};}return this._hand;}},{key:"getTargetRaySpace",value:function getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group();this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new Vector3();this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new Vector3();}return this._targetRay;}},{key:"getGripSpace",value:function getGripSpace(){if(this._grip===null){this._grip=new Group();this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new Vector3();this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new Vector3();}return this._grip;}},{key:"dispatchEvent",value:function dispatchEvent(event){if(this._targetRay!==null){this._targetRay.dispatchEvent(event);}if(this._grip!==null){this._grip.dispatchEvent(event);}if(this._hand!==null){this._hand.dispatchEvent(event);}return this;}},{key:"disconnect",value:function disconnect(inputSource){this.dispatchEvent({type:'disconnected',data:inputSource});if(this._targetRay!==null){this._targetRay.visible=false;}if(this._grip!==null){this._grip.visible=false;}if(this._hand!==null){this._hand.visible=false;}return this;}},{key:"update",value:function update(inputSource,frame,referenceSpace){var inputPose=null;var gripPose=null;var handPose=null;var targetRay=this._targetRay;var grip=this._grip;var hand=this._hand;if(inputSource&&frame.session.visibilityState!=='visible-blurred'){if(targetRay!==null){inputPose=frame.getPose(inputSource.targetRaySpace,referenceSpace);if(inputPose!==null){targetRay.matrix.fromArray(inputPose.transform.matrix);targetRay.matrix.decompose(targetRay.position,targetRay.rotation,targetRay.scale);if(inputPose.linearVelocity){targetRay.hasLinearVelocity=true;targetRay.linearVelocity.copy(inputPose.linearVelocity);}else {targetRay.hasLinearVelocity=false;}if(inputPose.angularVelocity){targetRay.hasAngularVelocity=true;targetRay.angularVelocity.copy(inputPose.angularVelocity);}else {targetRay.hasAngularVelocity=false;}this.dispatchEvent(_moveEvent);}}if(hand&&inputSource.hand){handPose=true;var _iterator2=_createForOfIteratorHelper(inputSource.hand.values()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var inputjoint=_step2.value;// Update the joints groups with the XRJoint poses
var jointPose=frame.getJointPose(inputjoint,referenceSpace);if(hand.joints[inputjoint.jointName]===undefined){// The transform of this joint will be updated with the joint pose on each frame
var _joint=new Group();_joint.matrixAutoUpdate=false;_joint.visible=false;hand.joints[inputjoint.jointName]=_joint;// ??
hand.add(_joint);}var joint=hand.joints[inputjoint.jointName];if(jointPose!==null){joint.matrix.fromArray(jointPose.transform.matrix);joint.matrix.decompose(joint.position,joint.rotation,joint.scale);joint.jointRadius=jointPose.radius;}joint.visible=jointPose!==null;}// Custom events
// Check pinchz
}catch(err){_iterator2.e(err);}finally{_iterator2.f();}var indexTip=hand.joints['index-finger-tip'];var thumbTip=hand.joints['thumb-tip'];var distance=indexTip.position.distanceTo(thumbTip.position);var distanceToPinch=0.02;var threshold=0.005;if(hand.inputState.pinching&&distance>distanceToPinch+threshold){hand.inputState.pinching=false;this.dispatchEvent({type:'pinchend',handedness:inputSource.handedness,target:this});}else if(!hand.inputState.pinching&&distance<=distanceToPinch-threshold){hand.inputState.pinching=true;this.dispatchEvent({type:'pinchstart',handedness:inputSource.handedness,target:this});}}else {if(grip!==null&&inputSource.gripSpace){gripPose=frame.getPose(inputSource.gripSpace,referenceSpace);if(gripPose!==null){grip.matrix.fromArray(gripPose.transform.matrix);grip.matrix.decompose(grip.position,grip.rotation,grip.scale);if(gripPose.linearVelocity){grip.hasLinearVelocity=true;grip.linearVelocity.copy(gripPose.linearVelocity);}else {grip.hasLinearVelocity=false;}if(gripPose.angularVelocity){grip.hasAngularVelocity=true;grip.angularVelocity.copy(gripPose.angularVelocity);}else {grip.hasAngularVelocity=false;}}}}}if(targetRay!==null){targetRay.visible=inputPose!==null;}if(grip!==null){grip.visible=gripPose!==null;}if(hand!==null){hand.visible=handPose!==null;}return this;}}]);return WebXRController;}();var DepthTexture=/*#__PURE__*/function(_Texture4){_inherits(DepthTexture,_Texture4);var _super36=_createSuper(DepthTexture);function DepthTexture(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){var _this27;_classCallCheck(this,DepthTexture);format=format!==undefined?format:DepthFormat;if(format!==DepthFormat&&format!==DepthStencilFormat){throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');}if(type===undefined&&format===DepthFormat)type=UnsignedShortType;if(type===undefined&&format===DepthStencilFormat)type=UnsignedInt248Type;_this27=_super36.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);_this27.image={width:width,height:height};_this27.magFilter=magFilter!==undefined?magFilter:NearestFilter;_this27.minFilter=minFilter!==undefined?minFilter:NearestFilter;_this27.flipY=false;_this27.generateMipmaps=false;return _this27;}return _createClass(DepthTexture);}(Texture);DepthTexture.prototype.isDepthTexture=true;var WebXRManager=/*#__PURE__*/function(_EventDispatcher6){_inherits(WebXRManager,_EventDispatcher6);var _super37=_createSuper(WebXRManager);function WebXRManager(renderer,gl){var _this28;_classCallCheck(this,WebXRManager);_this28=_super37.call(this);var scope=_assertThisInitialized(_this28);var session=null;var framebufferScaleFactor=1.0;var referenceSpace=null;var referenceSpaceType='local-floor';var hasMultisampledRenderToTexture=renderer.extensions.has('WEBGL_multisampled_render_to_texture');var pose=null;var glBinding=null;var glProjLayer=null;var glBaseLayer=null;var isMultisample=false;var xrFrame=null;var attributes=gl.getContextAttributes();var initialRenderTarget=null;var newRenderTarget=null;var controllers=[];var inputSourcesMap=new Map();//
var cameraL=new PerspectiveCamera();cameraL.layers.enable(1);cameraL.viewport=new Vector4();var cameraR=new PerspectiveCamera();cameraR.layers.enable(2);cameraR.viewport=new Vector4();var cameras=[cameraL,cameraR];var cameraVR=new ArrayCamera();cameraVR.layers.enable(1);cameraVR.layers.enable(2);var _currentDepthNear=null;var _currentDepthFar=null;//
_this28.cameraAutoUpdate=true;_this28.enabled=false;_this28.isPresenting=false;_this28.getController=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getTargetRaySpace();};_this28.getControllerGrip=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getGripSpace();};_this28.getHand=function(index){var controller=controllers[index];if(controller===undefined){controller=new WebXRController();controllers[index]=controller;}return controller.getHandSpace();};//
function onSessionEvent(event){var controller=inputSourcesMap.get(event.inputSource);if(controller){controller.dispatchEvent({type:event.type,data:event.inputSource});}}function onSessionEnd(){inputSourcesMap.forEach(function(controller,inputSource){controller.disconnect(inputSource);});inputSourcesMap.clear();_currentDepthNear=null;_currentDepthFar=null;// restore framebuffer/rendering state
renderer.setRenderTarget(initialRenderTarget);glBaseLayer=null;glProjLayer=null;glBinding=null;session=null;newRenderTarget=null;//
animation.stop();scope.isPresenting=false;scope.dispatchEvent({type:'sessionend'});}_this28.setFramebufferScaleFactor=function(value){framebufferScaleFactor=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');}};_this28.setReferenceSpaceType=function(value){referenceSpaceType=value;if(scope.isPresenting===true){console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');}};_this28.getReferenceSpace=function(){return referenceSpace;};_this28.getBaseLayer=function(){return glProjLayer!==null?glProjLayer:glBaseLayer;};_this28.getBinding=function(){return glBinding;};_this28.getFrame=function(){return xrFrame;};_this28.getSession=function(){return session;};_this28.setSession=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(value){var layerInit,depthFormat,depthType,glDepthFormat,projectionlayerInit;return _regeneratorRuntime().wrap(function _callee$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:session=value;if(!(session!==null)){_context5.next=24;break;}initialRenderTarget=renderer.getRenderTarget();session.addEventListener('select',onSessionEvent);session.addEventListener('selectstart',onSessionEvent);session.addEventListener('selectend',onSessionEvent);session.addEventListener('squeeze',onSessionEvent);session.addEventListener('squeezestart',onSessionEvent);session.addEventListener('squeezeend',onSessionEvent);session.addEventListener('end',onSessionEnd);session.addEventListener('inputsourceschange',onInputSourcesChange);if(!(attributes.xrCompatible!==true)){_context5.next=14;break;}_context5.next=14;return gl.makeXRCompatible();case 14:if(session.renderState.layers===undefined||renderer.capabilities.isWebGL2===false){layerInit={antialias:session.renderState.layers===undefined?attributes.antialias:true,alpha:attributes.alpha,depth:attributes.depth,stencil:attributes.stencil,framebufferScaleFactor:framebufferScaleFactor};glBaseLayer=new XRWebGLLayer(session,gl,layerInit);session.updateRenderState({baseLayer:glBaseLayer});newRenderTarget=new WebGLRenderTarget(glBaseLayer.framebufferWidth,glBaseLayer.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,encoding:renderer.outputEncoding});}else {isMultisample=attributes.antialias;depthFormat=null;depthType=null;glDepthFormat=null;if(attributes.depth){glDepthFormat=attributes.stencil?35056:33190;depthFormat=attributes.stencil?DepthStencilFormat:DepthFormat;depthType=attributes.stencil?UnsignedInt248Type:UnsignedShortType;}projectionlayerInit={colorFormat:renderer.outputEncoding===sRGBEncoding?35907:32856,depthFormat:glDepthFormat,scaleFactor:framebufferScaleFactor};glBinding=new XRWebGLBinding(session,gl);glProjLayer=glBinding.createProjectionLayer(projectionlayerInit);session.updateRenderState({layers:[glProjLayer]});if(isMultisample){newRenderTarget=new WebGLMultisampleRenderTarget(glProjLayer.textureWidth,glProjLayer.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(glProjLayer.textureWidth,glProjLayer.textureHeight,depthType,undefined,undefined,undefined,undefined,undefined,undefined,depthFormat),stencilBuffer:attributes.stencil,ignoreDepth:glProjLayer.ignoreDepthValues,useRenderToTexture:hasMultisampledRenderToTexture,encoding:renderer.outputEncoding});}else {newRenderTarget=new WebGLRenderTarget(glProjLayer.textureWidth,glProjLayer.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(glProjLayer.textureWidth,glProjLayer.textureHeight,depthType,undefined,undefined,undefined,undefined,undefined,undefined,depthFormat),stencilBuffer:attributes.stencil,ignoreDepth:glProjLayer.ignoreDepthValues,encoding:renderer.outputEncoding});}}newRenderTarget.isXRRenderTarget=true;// TODO Remove this when possible, see #23278
// Set foveation to maximum.
this.setFoveation(1.0);_context5.next=19;return session.requestReferenceSpace(referenceSpaceType);case 19:referenceSpace=_context5.sent;animation.setContext(session);animation.start();scope.isPresenting=true;scope.dispatchEvent({type:'sessionstart'});case 24:case"end":return _context5.stop();}},_callee,this);}));return function(_x3){return _ref.apply(this,arguments);};}();function onInputSourcesChange(event){var inputSources=session.inputSources;// Assign inputSources to available controllers
for(var _i139=0;_i139<controllers.length;_i139++){inputSourcesMap.set(inputSources[_i139],controllers[_i139]);}// Notify disconnected
for(var _i140=0;_i140<event.removed.length;_i140++){var inputSource=event.removed[_i140];var controller=inputSourcesMap.get(inputSource);if(controller){controller.dispatchEvent({type:'disconnected',data:inputSource});inputSourcesMap["delete"](inputSource);}}// Notify connected
for(var _i141=0;_i141<event.added.length;_i141++){var _inputSource=event.added[_i141];var _controller=inputSourcesMap.get(_inputSource);if(_controller){_controller.dispatchEvent({type:'connected',data:_inputSource});}}}//
var cameraLPos=new Vector3();var cameraRPos=new Vector3();/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */function setProjectionFromUnion(camera,cameraL,cameraR){cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);var ipd=cameraLPos.distanceTo(cameraRPos);var projL=cameraL.projectionMatrix.elements;var projR=cameraR.projectionMatrix.elements;// VR systems will have identical far and near planes, and
// most likely identical top and bottom frustum extents.
// Use the left camera for these values.
var near=projL[14]/(projL[10]-1);var far=projL[14]/(projL[10]+1);var topFov=(projL[9]+1)/projL[5];var bottomFov=(projL[9]-1)/projL[5];var leftFov=(projL[8]-1)/projL[0];var rightFov=(projR[8]+1)/projR[0];var left=near*leftFov;var right=near*rightFov;// Calculate the new camera's position offset from the
// left camera. xOffset should be roughly half `ipd`.
var zOffset=ipd/(-leftFov+rightFov);var xOffset=zOffset*-leftFov;// TODO: Better way to apply this offset?
cameraL.matrixWorld.decompose(camera.position,camera.quaternion,camera.scale);camera.translateX(xOffset);camera.translateZ(zOffset);camera.matrixWorld.compose(camera.position,camera.quaternion,camera.scale);camera.matrixWorldInverse.copy(camera.matrixWorld).invert();// Find the union of the frustum values of the cameras and scale
// the values so that the near plane's position does not change in world space,
// although must now be relative to the new union camera.
var near2=near+zOffset;var far2=far+zOffset;var left2=left-xOffset;var right2=right+(ipd-xOffset);var top2=topFov*far/far2*near2;var bottom2=bottomFov*far/far2*near2;camera.projectionMatrix.makePerspective(left2,right2,top2,bottom2,near2,far2);}function updateCamera(camera,parent){if(parent===null){camera.matrixWorld.copy(camera.matrix);}else {camera.matrixWorld.multiplyMatrices(parent.matrixWorld,camera.matrix);}camera.matrixWorldInverse.copy(camera.matrixWorld).invert();}_this28.updateCamera=function(camera){if(session===null)return;cameraVR.near=cameraR.near=cameraL.near=camera.near;cameraVR.far=cameraR.far=cameraL.far=camera.far;if(_currentDepthNear!==cameraVR.near||_currentDepthFar!==cameraVR.far){// Note that the new renderState won't apply until the next frame. See #18320
session.updateRenderState({depthNear:cameraVR.near,depthFar:cameraVR.far});_currentDepthNear=cameraVR.near;_currentDepthFar=cameraVR.far;}var parent=camera.parent;var cameras=cameraVR.cameras;updateCamera(cameraVR,parent);for(var _i142=0;_i142<cameras.length;_i142++){updateCamera(cameras[_i142],parent);}cameraVR.matrixWorld.decompose(cameraVR.position,cameraVR.quaternion,cameraVR.scale);// update user camera and its children
camera.position.copy(cameraVR.position);camera.quaternion.copy(cameraVR.quaternion);camera.scale.copy(cameraVR.scale);camera.matrix.copy(cameraVR.matrix);camera.matrixWorld.copy(cameraVR.matrixWorld);var children=camera.children;for(var _i143=0,l=children.length;_i143<l;_i143++){children[_i143].updateMatrixWorld(true);}// update projection matrix for proper view frustum culling
if(cameras.length===2){setProjectionFromUnion(cameraVR,cameraL,cameraR);}else {// assume single camera setup (AR)
cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);}};_this28.getCamera=function(){return cameraVR;};_this28.getFoveation=function(){if(glProjLayer!==null){return glProjLayer.fixedFoveation;}if(glBaseLayer!==null){return glBaseLayer.fixedFoveation;}return undefined;};_this28.setFoveation=function(foveation){// 0 = no foveation = full resolution
// 1 = maximum foveation = the edges render at lower resolution
if(glProjLayer!==null){glProjLayer.fixedFoveation=foveation;}if(glBaseLayer!==null&&glBaseLayer.fixedFoveation!==undefined){glBaseLayer.fixedFoveation=foveation;}};// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time,frame){pose=frame.getViewerPose(referenceSpace);xrFrame=frame;if(pose!==null){var views=pose.views;if(glBaseLayer!==null){renderer.setRenderTargetFramebuffer(newRenderTarget,glBaseLayer.framebuffer);renderer.setRenderTarget(newRenderTarget);}var cameraVRNeedsUpdate=false;// check if it's necessary to rebuild cameraVR's camera list
if(views.length!==cameraVR.cameras.length){cameraVR.cameras.length=0;cameraVRNeedsUpdate=true;}for(var _i144=0;_i144<views.length;_i144++){var view=views[_i144];var viewport=null;if(glBaseLayer!==null){viewport=glBaseLayer.getViewport(view);}else {var glSubImage=glBinding.getViewSubImage(glProjLayer,view);viewport=glSubImage.viewport;// For side-by-side projection, we only produce a single texture for both eyes.
if(_i144===0){renderer.setRenderTargetTextures(newRenderTarget,glSubImage.colorTexture,glProjLayer.ignoreDepthValues?undefined:glSubImage.depthStencilTexture);renderer.setRenderTarget(newRenderTarget);}}var camera=cameras[_i144];camera.matrix.fromArray(view.transform.matrix);camera.projectionMatrix.fromArray(view.projectionMatrix);camera.viewport.set(viewport.x,viewport.y,viewport.width,viewport.height);if(_i144===0){cameraVR.matrix.copy(camera.matrix);}if(cameraVRNeedsUpdate===true){cameraVR.cameras.push(camera);}}}//
var inputSources=session.inputSources;for(var _i145=0;_i145<controllers.length;_i145++){var controller=controllers[_i145];var inputSource=inputSources[_i145];controller.update(inputSource,frame,referenceSpace);}if(onAnimationFrameCallback)onAnimationFrameCallback(time,frame);xrFrame=null;}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);_this28.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;};_this28.dispose=function(){};return _this28;}return _createClass(WebXRManager);}(EventDispatcher);function WebGLMaterials(properties){function refreshFogUniforms(uniforms,fog){uniforms.fogColor.value.copy(fog.color);if(fog.isFog){uniforms.fogNear.value=fog.near;uniforms.fogFar.value=fog.far;}else if(fog.isFogExp2){uniforms.fogDensity.value=fog.density;}}function refreshMaterialUniforms(uniforms,material,pixelRatio,height,transmissionRenderTarget){if(material.isMeshBasicMaterial){refreshUniformsCommon(uniforms,material);}else if(material.isMeshLambertMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsLambert(uniforms,material);}else if(material.isMeshToonMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsToon(uniforms,material);}else if(material.isMeshPhongMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsPhong(uniforms,material);}else if(material.isMeshStandardMaterial){refreshUniformsCommon(uniforms,material);if(material.isMeshPhysicalMaterial){refreshUniformsPhysical(uniforms,material,transmissionRenderTarget);}else {refreshUniformsStandard(uniforms,material);}}else if(material.isMeshMatcapMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsMatcap(uniforms,material);}else if(material.isMeshDepthMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDepth(uniforms,material);}else if(material.isMeshDistanceMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsDistance(uniforms,material);}else if(material.isMeshNormalMaterial){refreshUniformsCommon(uniforms,material);refreshUniformsNormal(uniforms,material);}else if(material.isLineBasicMaterial){refreshUniformsLine(uniforms,material);if(material.isLineDashedMaterial){refreshUniformsDash(uniforms,material);}}else if(material.isPointsMaterial){refreshUniformsPoints(uniforms,material,pixelRatio,height);}else if(material.isSpriteMaterial){refreshUniformsSprites(uniforms,material);}else if(material.isShadowMaterial){uniforms.color.value.copy(material.color);uniforms.opacity.value=material.opacity;}else if(material.isShaderMaterial){material.uniformsNeedUpdate=false;// #15581
}}function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity;if(material.color){uniforms.diffuse.value.copy(material.color);}if(material.emissive){uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);}if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.specularMap){uniforms.specularMap.value=material.specularMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}var envMap=properties.get(material).envMap;if(envMap){uniforms.envMap.value=envMap;uniforms.flipEnvMap.value=envMap.isCubeTexture&&envMap.isRenderTargetTexture===false?-1:1;uniforms.reflectivity.value=material.reflectivity;uniforms.ior.value=material.ior;uniforms.refractionRatio.value=material.refractionRatio;}if(material.lightMap){uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;}if(material.aoMap){uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;}// uv repeat and offset setting priorities
// 1. color map
// 2. specular map
// 3. displacementMap map
// 4. normal map
// 5. bump map
// 6. roughnessMap map
// 7. metalnessMap map
// 8. alphaMap map
// 9. emissiveMap map
// 10. clearcoat map
// 11. clearcoat normal map
// 12. clearcoat roughnessMap map
// 13. specular intensity map
// 14. specular tint map
// 15. transmission map
// 16. thickness map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.roughnessMap){uvScaleMap=material.roughnessMap;}else if(material.metalnessMap){uvScaleMap=material.metalnessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}else if(material.clearcoatMap){uvScaleMap=material.clearcoatMap;}else if(material.clearcoatNormalMap){uvScaleMap=material.clearcoatNormalMap;}else if(material.clearcoatRoughnessMap){uvScaleMap=material.clearcoatRoughnessMap;}else if(material.specularIntensityMap){uvScaleMap=material.specularIntensityMap;}else if(material.specularColorMap){uvScaleMap=material.specularColorMap;}else if(material.transmissionMap){uvScaleMap=material.transmissionMap;}else if(material.thicknessMap){uvScaleMap=material.thicknessMap;}else if(material.sheenColorMap){uvScaleMap=material.sheenColorMap;}else if(material.sheenRoughnessMap){uvScaleMap=material.sheenRoughnessMap;}if(uvScaleMap!==undefined){// backwards compatibility
if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}// uv repeat and offset setting priorities for uv2
// 1. ao map
// 2. light map
var uv2ScaleMap;if(material.aoMap){uv2ScaleMap=material.aoMap;}else if(material.lightMap){uv2ScaleMap=material.lightMap;}if(uv2ScaleMap!==undefined){// backwards compatibility
if(uv2ScaleMap.isWebGLRenderTarget){uv2ScaleMap=uv2ScaleMap.texture;}if(uv2ScaleMap.matrixAutoUpdate===true){uv2ScaleMap.updateMatrix();}uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);}}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize;uniforms.totalSize.value=material.dashSize+material.gapSize;uniforms.scale.value=material.scale;}function refreshUniformsPoints(uniforms,material,pixelRatio,height){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.size.value=material.size*pixelRatio;uniforms.scale.value=height*0.5;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsSprites(uniforms,material){uniforms.diffuse.value.copy(material.color);uniforms.opacity.value=material.opacity;uniforms.rotation.value=material.rotation;if(material.map){uniforms.map.value=material.map;}if(material.alphaMap){uniforms.alphaMap.value=material.alphaMap;}if(material.alphaTest>0){uniforms.alphaTest.value=material.alphaTest;}// uv repeat and offset setting priorities
// 1. color map
// 2. alpha map
var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}if(uvScaleMap!==undefined){if(uvScaleMap.matrixAutoUpdate===true){uvScaleMap.updateMatrix();}uniforms.uvTransform.value.copy(uvScaleMap.matrix);}}function refreshUniformsLambert(uniforms,material){if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}}function refreshUniformsPhong(uniforms,material){uniforms.specular.value.copy(material.specular);uniforms.shininess.value=Math.max(material.shininess,1e-4);// to prevent pow( 0.0, 0.0 )
if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsToon(uniforms,material){if(material.gradientMap){uniforms.gradientMap.value=material.gradientMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness;uniforms.metalness.value=material.metalness;if(material.roughnessMap){uniforms.roughnessMap.value=material.roughnessMap;}if(material.metalnessMap){uniforms.metalnessMap.value=material.metalnessMap;}if(material.emissiveMap){uniforms.emissiveMap.value=material.emissiveMap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}var envMap=properties.get(material).envMap;if(envMap){//uniforms.envMap.value = material.envMap; // part of uniforms common
uniforms.envMapIntensity.value=material.envMapIntensity;}}function refreshUniformsPhysical(uniforms,material,transmissionRenderTarget){refreshUniformsStandard(uniforms,material);uniforms.ior.value=material.ior;// also part of uniforms common
if(material.sheen>0){uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);uniforms.sheenRoughness.value=material.sheenRoughness;if(material.sheenColorMap){uniforms.sheenColorMap.value=material.sheenColorMap;}if(material.sheenRoughnessMap){uniforms.sheenRoughnessMap.value=material.sheenRoughnessMap;}}if(material.clearcoat>0){uniforms.clearcoat.value=material.clearcoat;uniforms.clearcoatRoughness.value=material.clearcoatRoughness;if(material.clearcoatMap){uniforms.clearcoatMap.value=material.clearcoatMap;}if(material.clearcoatRoughnessMap){uniforms.clearcoatRoughnessMap.value=material.clearcoatRoughnessMap;}if(material.clearcoatNormalMap){uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);uniforms.clearcoatNormalMap.value=material.clearcoatNormalMap;if(material.side===BackSide){uniforms.clearcoatNormalScale.value.negate();}}}if(material.transmission>0){uniforms.transmission.value=material.transmission;uniforms.transmissionSamplerMap.value=transmissionRenderTarget.texture;uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width,transmissionRenderTarget.height);if(material.transmissionMap){uniforms.transmissionMap.value=material.transmissionMap;}uniforms.thickness.value=material.thickness;if(material.thicknessMap){uniforms.thicknessMap.value=material.thicknessMap;}uniforms.attenuationDistance.value=material.attenuationDistance;uniforms.attenuationColor.value.copy(material.attenuationColor);}uniforms.specularIntensity.value=material.specularIntensity;uniforms.specularColor.value.copy(material.specularColor);if(material.specularIntensityMap){uniforms.specularIntensityMap.value=material.specularIntensityMap;}if(material.specularColorMap){uniforms.specularColorMap.value=material.specularColorMap;}}function refreshUniformsMatcap(uniforms,material){if(material.matcap){uniforms.matcap.value=material.matcap;}if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDepth(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}function refreshUniformsDistance(uniforms,material){if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}uniforms.referencePosition.value.copy(material.referencePosition);uniforms.nearDistance.value=material.nearDistance;uniforms.farDistance.value=material.farDistance;}function refreshUniformsNormal(uniforms,material){if(material.bumpMap){uniforms.bumpMap.value=material.bumpMap;uniforms.bumpScale.value=material.bumpScale;if(material.side===BackSide)uniforms.bumpScale.value*=-1;}if(material.normalMap){uniforms.normalMap.value=material.normalMap;uniforms.normalScale.value.copy(material.normalScale);if(material.side===BackSide)uniforms.normalScale.value.negate();}if(material.displacementMap){uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;}}return {refreshFogUniforms:refreshFogUniforms,refreshMaterialUniforms:refreshMaterialUniforms};}function createCanvasElement(){var canvas=createElementNS('canvas');canvas.style.display='block';return canvas;}function WebGLRenderer(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _canvas=parameters.canvas!==undefined?parameters.canvas:createCanvasElement(),_context=parameters.context!==undefined?parameters.context:null,_alpha=parameters.alpha!==undefined?parameters.alpha:false,_depth=parameters.depth!==undefined?parameters.depth:true,_stencil=parameters.stencil!==undefined?parameters.stencil:true,_antialias=parameters.antialias!==undefined?parameters.antialias:false,_premultipliedAlpha=parameters.premultipliedAlpha!==undefined?parameters.premultipliedAlpha:true,_preserveDrawingBuffer=parameters.preserveDrawingBuffer!==undefined?parameters.preserveDrawingBuffer:false,_powerPreference=parameters.powerPreference!==undefined?parameters.powerPreference:'default',_failIfMajorPerformanceCaveat=parameters.failIfMajorPerformanceCaveat!==undefined?parameters.failIfMajorPerformanceCaveat:false;var currentRenderList=null;var currentRenderState=null;// render() can be called from within a callback triggered by another render.
// We track this so that the nested render call gets its list and state isolated from the parent render call.
var renderListStack=[];var renderStateStack=[];// public properties
this.domElement=_canvas;// Debug configuration container
this.debug={/**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */checkShaderErrors:true};// clearing
this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;// scene graph
this.sortObjects=true;// user-defined clipping
this.clippingPlanes=[];this.localClippingEnabled=false;// physically based shading
this.outputEncoding=LinearEncoding;// physical lights
this.physicallyCorrectLights=false;// tone mapping
this.toneMapping=NoToneMapping;this.toneMappingExposure=1.0;// internal properties
var _this=this;var _isContextLost=false;// internal state cache
var _currentActiveCubeFace=0;var _currentActiveMipmapLevel=0;var _currentRenderTarget=null;var _currentMaterialId=-1;var _currentCamera=null;var _currentViewport=new Vector4();var _currentScissor=new Vector4();var _currentScissorTest=null;//
var _width=_canvas.width;var _height=_canvas.height;var _pixelRatio=1;var _opaqueSort=null;var _transparentSort=null;var _viewport=new Vector4(0,0,_width,_height);var _scissor=new Vector4(0,0,_width,_height);var _scissorTest=false;// frustum
var _frustum=new Frustum();// clipping
var _clippingEnabled=false;var _localClippingEnabled=false;// transmission
var _transmissionRenderTarget=null;// camera matrices cache
var _projScreenMatrix=new Matrix4();var _vector3=new Vector3();var _emptyScene={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function getTargetPixelRatio(){return _currentRenderTarget===null?_pixelRatio:1;}// initialize
var _gl=_context;function getContext(contextNames,contextAttributes){for(var _i146=0;_i146<contextNames.length;_i146++){var contextName=contextNames[_i146];var context=_canvas.getContext(contextName,contextAttributes);if(context!==null)return context;}return null;}try{var contextAttributes={alpha:true,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer,powerPreference:_powerPreference,failIfMajorPerformanceCaveat:_failIfMajorPerformanceCaveat};// OffscreenCanvas does not have setAttribute, see #22811
if('setAttribute'in _canvas)_canvas.setAttribute('data-engine',"three.js r".concat(REVISION));// event listeners must be registered before WebGL context is created, see #12753
_canvas.addEventListener('webglcontextlost',onContextLost,false);_canvas.addEventListener('webglcontextrestored',onContextRestore,false);if(_gl===null){var contextNames=['webgl2','webgl','experimental-webgl'];if(_this.isWebGL1Renderer===true){contextNames.shift();}_gl=getContext(contextNames,contextAttributes);if(_gl===null){if(getContext(contextNames)){throw new Error('Error creating WebGL context with your selected attributes.');}else {throw new Error('Error creating WebGL context.');}}}// Some experimental-webgl implementations do not have getShaderPrecisionFormat
if(_gl.getShaderPrecisionFormat===undefined){_gl.getShaderPrecisionFormat=function(){return {'rangeMin':1,'rangeMax':1,'precision':1};};}}catch(error){console.error('THREE.WebGLRenderer: '+error.message);throw error;}var extensions,capabilities,state,info;var properties,textures,cubemaps,cubeuvmaps,attributes,geometries,objects;var programCache,materials,renderLists,renderStates,clipping,shadowMap;var background,morphtargets,bufferRenderer,indexedBufferRenderer;var utils,bindingStates;function initGLContext(){extensions=new WebGLExtensions(_gl);capabilities=new WebGLCapabilities(_gl,extensions,parameters);extensions.init(capabilities);utils=new WebGLUtils(_gl,extensions,capabilities);state=new WebGLState(_gl,extensions,capabilities);info=new WebGLInfo();properties=new WebGLProperties();textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,utils,info);cubemaps=new WebGLCubeMaps(_this);cubeuvmaps=new WebGLCubeUVMaps(_this);attributes=new WebGLAttributes(_gl,capabilities);bindingStates=new WebGLBindingStates(_gl,extensions,attributes,capabilities);geometries=new WebGLGeometries(_gl,attributes,info,bindingStates);objects=new WebGLObjects(_gl,geometries,attributes,info);morphtargets=new WebGLMorphtargets(_gl,capabilities,textures);clipping=new WebGLClipping(properties);programCache=new WebGLPrograms(_this,cubemaps,cubeuvmaps,extensions,capabilities,bindingStates,clipping);materials=new WebGLMaterials(properties);renderLists=new WebGLRenderLists();renderStates=new WebGLRenderStates(extensions,capabilities);background=new WebGLBackground(_this,cubemaps,state,objects,_alpha,_premultipliedAlpha);shadowMap=new WebGLShadowMap(_this,objects,capabilities);bufferRenderer=new WebGLBufferRenderer(_gl,extensions,info,capabilities);indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,info,capabilities);info.programs=programCache.programs;_this.capabilities=capabilities;_this.extensions=extensions;_this.properties=properties;_this.renderLists=renderLists;_this.shadowMap=shadowMap;_this.state=state;_this.info=info;}initGLContext();// xr
var xr=new WebXRManager(_this,_gl);this.xr=xr;// API
this.getContext=function(){return _gl;};this.getContextAttributes=function(){return _gl.getContextAttributes();};this.forceContextLoss=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.loseContext();};this.forceContextRestore=function(){var extension=extensions.get('WEBGL_lose_context');if(extension)extension.restoreContext();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value===undefined)return;_pixelRatio=value;this.setSize(_width,_height,false);};this.getSize=function(target){return target.set(_width,_height);};this.setSize=function(width,height,updateStyle){if(xr.isPresenting){console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');return;}_width=width;_height=height;_canvas.width=Math.floor(width*_pixelRatio);_canvas.height=Math.floor(height*_pixelRatio);if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}this.setViewport(0,0,width,height);};this.getDrawingBufferSize=function(target){return target.set(_width*_pixelRatio,_height*_pixelRatio).floor();};this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width;_height=height;_pixelRatio=pixelRatio;_canvas.width=Math.floor(width*pixelRatio);_canvas.height=Math.floor(height*pixelRatio);this.setViewport(0,0,width,height);};this.getCurrentViewport=function(target){return target.copy(_currentViewport);};this.getViewport=function(target){return target.copy(_viewport);};this.setViewport=function(x,y,width,height){if(x.isVector4){_viewport.set(x.x,x.y,x.z,x.w);}else {_viewport.set(x,y,width,height);}state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());};this.getScissor=function(target){return target.copy(_scissor);};this.setScissor=function(x,y,width,height){if(x.isVector4){_scissor.set(x.x,x.y,x.z,x.w);}else {_scissor.set(x,y,width,height);}state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());};this.getScissorTest=function(){return _scissorTest;};this.setScissorTest=function(_boolean){state.setScissorTest(_scissorTest=_boolean);};this.setOpaqueSort=function(method){_opaqueSort=method;};this.setTransparentSort=function(method){_transparentSort=method;};// Clearing
this.getClearColor=function(target){return target.copy(background.getClearColor());};this.setClearColor=function(){background.setClearColor.apply(background,arguments);};this.getClearAlpha=function(){return background.getClearAlpha();};this.setClearAlpha=function(){background.setClearAlpha.apply(background,arguments);};this.clear=function(color,depth,stencil){var bits=0;if(color===undefined||color)bits|=16384;if(depth===undefined||depth)bits|=256;if(stencil===undefined||stencil)bits|=1024;_gl.clear(bits);};this.clearColor=function(){this.clear(true,false,false);};this.clearDepth=function(){this.clear(false,true,false);};this.clearStencil=function(){this.clear(false,false,true);};//
this.dispose=function(){_canvas.removeEventListener('webglcontextlost',onContextLost,false);_canvas.removeEventListener('webglcontextrestored',onContextRestore,false);renderLists.dispose();renderStates.dispose();properties.dispose();cubemaps.dispose();cubeuvmaps.dispose();objects.dispose();bindingStates.dispose();programCache.dispose();xr.dispose();xr.removeEventListener('sessionstart',onXRSessionStart);xr.removeEventListener('sessionend',onXRSessionEnd);if(_transmissionRenderTarget){_transmissionRenderTarget.dispose();_transmissionRenderTarget=null;}animation.stop();};// Events
function onContextLost(event){event.preventDefault();console.log('THREE.WebGLRenderer: Context Lost.');_isContextLost=true;}function onContextRestore(/* event */){console.log('THREE.WebGLRenderer: Context Restored.');_isContextLost=false;var infoAutoReset=info.autoReset;var shadowMapEnabled=shadowMap.enabled;var shadowMapAutoUpdate=shadowMap.autoUpdate;var shadowMapNeedsUpdate=shadowMap.needsUpdate;var shadowMapType=shadowMap.type;initGLContext();info.autoReset=infoAutoReset;shadowMap.enabled=shadowMapEnabled;shadowMap.autoUpdate=shadowMapAutoUpdate;shadowMap.needsUpdate=shadowMapNeedsUpdate;shadowMap.type=shadowMapType;}function onMaterialDispose(event){var material=event.target;material.removeEventListener('dispose',onMaterialDispose);deallocateMaterial(material);}// Buffer deallocation
function deallocateMaterial(material){releaseMaterialProgramReferences(material);properties.remove(material);}function releaseMaterialProgramReferences(material){var programs=properties.get(material).programs;if(programs!==undefined){programs.forEach(function(program){programCache.releaseProgram(program);});if(material.isShaderMaterial){programCache.releaseShaderCache(material);}}}// Buffer rendering
this.renderBufferDirect=function(camera,scene,geometry,material,object,group){if(scene===null)scene=_emptyScene;// renderBufferDirect second parameter used to be fog (could be null)
var frontFaceCW=object.isMesh&&object.matrixWorld.determinant()<0;var program=setProgram(camera,scene,geometry,material,object);state.setMaterial(material,frontFaceCW);//
var index=geometry.index;var position=geometry.attributes.position;//
if(index===null){if(position===undefined||position.count===0)return;}else if(index.count===0){return;}//
var rangeFactor=1;if(material.wireframe===true){index=geometries.getWireframeAttribute(geometry);rangeFactor=2;}bindingStates.setup(object,material,program,geometry,index);var attribute;var renderer=bufferRenderer;if(index!==null){attribute=attributes.get(index);renderer=indexedBufferRenderer;renderer.setIndex(attribute);}//
var dataCount=index!==null?index.count:position.count;var rangeStart=geometry.drawRange.start*rangeFactor;var rangeCount=geometry.drawRange.count*rangeFactor;var groupStart=group!==null?group.start*rangeFactor:0;var groupCount=group!==null?group.count*rangeFactor:Infinity;var drawStart=Math.max(rangeStart,groupStart);var drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1;var drawCount=Math.max(0,drawEnd-drawStart+1);if(drawCount===0)return;//
if(object.isMesh){if(material.wireframe===true){state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio());renderer.setMode(1);}else {renderer.setMode(4);}}else if(object.isLine){var lineWidth=material.linewidth;if(lineWidth===undefined)lineWidth=1;// Not using Line*Material
state.setLineWidth(lineWidth*getTargetPixelRatio());if(object.isLineSegments){renderer.setMode(1);}else if(object.isLineLoop){renderer.setMode(2);}else {renderer.setMode(3);}}else if(object.isPoints){renderer.setMode(0);}else if(object.isSprite){renderer.setMode(4);}if(object.isInstancedMesh){renderer.renderInstances(drawStart,drawCount,object.count);}else if(geometry.isInstancedBufferGeometry){var instanceCount=Math.min(geometry.instanceCount,geometry._maxInstanceCount);renderer.renderInstances(drawStart,drawCount,instanceCount);}else {renderer.render(drawStart,drawCount);}};// Compile
this.compile=function(scene,camera){currentRenderState=renderStates.get(scene);currentRenderState.init();renderStateStack.push(currentRenderState);scene.traverseVisible(function(object){if(object.isLight&&object.layers.test(camera.layers)){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}});currentRenderState.setupLights(_this.physicallyCorrectLights);scene.traverse(function(object){var material=object.material;if(material){if(Array.isArray(material)){for(var _i147=0;_i147<material.length;_i147++){var material2=material[_i147];getProgram(material2,scene,object);}}else {getProgram(material,scene,object);}}});renderStateStack.pop();currentRenderState=null;};// Animation Loop
var onAnimationFrameCallback=null;function onAnimationFrame(time){if(onAnimationFrameCallback)onAnimationFrameCallback(time);}function onXRSessionStart(){animation.stop();}function onXRSessionEnd(){animation.start();}var animation=new WebGLAnimation();animation.setAnimationLoop(onAnimationFrame);if(typeof window!=='undefined')animation.setContext(window);this.setAnimationLoop=function(callback){onAnimationFrameCallback=callback;xr.setAnimationLoop(callback);callback===null?animation.stop():animation.start();};xr.addEventListener('sessionstart',onXRSessionStart);xr.addEventListener('sessionend',onXRSessionEnd);// Rendering
this.render=function(scene,camera){if(camera!==undefined&&camera.isCamera!==true){console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');return;}if(_isContextLost===true)return;// update scene graph
if(scene.autoUpdate===true)scene.updateMatrixWorld();// update camera matrices and frustum
if(camera.parent===null)camera.updateMatrixWorld();if(xr.enabled===true&&xr.isPresenting===true){if(xr.cameraAutoUpdate===true)xr.updateCamera(camera);camera=xr.getCamera();// use XR camera for rendering
}//
if(scene.isScene===true)scene.onBeforeRender(_this,scene,camera,_currentRenderTarget);currentRenderState=renderStates.get(scene,renderStateStack.length);currentRenderState.init();renderStateStack.push(currentRenderState);_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromProjectionMatrix(_projScreenMatrix);_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=clipping.init(this.clippingPlanes,_localClippingEnabled,camera);currentRenderList=renderLists.get(scene,renderListStack.length);currentRenderList.init();renderListStack.push(currentRenderList);projectObject(scene,camera,0,_this.sortObjects);currentRenderList.finish();if(_this.sortObjects===true){currentRenderList.sort(_opaqueSort,_transparentSort);}//
if(_clippingEnabled===true)clipping.beginShadows();var shadowsArray=currentRenderState.state.shadowsArray;shadowMap.render(shadowsArray,scene,camera);if(_clippingEnabled===true)clipping.endShadows();//
if(this.info.autoReset===true)this.info.reset();//
background.render(currentRenderList,scene);// render scene
currentRenderState.setupLights(_this.physicallyCorrectLights);if(camera.isArrayCamera){var cameras=camera.cameras;for(var _i148=0,l=cameras.length;_i148<l;_i148++){var camera2=cameras[_i148];renderScene(currentRenderList,scene,camera2,camera2.viewport);}}else {renderScene(currentRenderList,scene,camera);}//
if(_currentRenderTarget!==null){// resolve multisample renderbuffers to a single-sample texture if necessary
textures.updateMultisampleRenderTarget(_currentRenderTarget);// Generate mipmap if we're using any kind of mipmap filtering
textures.updateRenderTargetMipmap(_currentRenderTarget);}//
if(scene.isScene===true)scene.onAfterRender(_this,scene,camera);// Ensure depth buffer writing is enabled so it can be cleared on next render
state.buffers.depth.setTest(true);state.buffers.depth.setMask(true);state.buffers.color.setMask(true);state.setPolygonOffset(false);// _gl.finish();
bindingStates.resetDefaultState();_currentMaterialId=-1;_currentCamera=null;renderStateStack.pop();if(renderStateStack.length>0){currentRenderState=renderStateStack[renderStateStack.length-1];}else {currentRenderState=null;}renderListStack.pop();if(renderListStack.length>0){currentRenderList=renderListStack[renderListStack.length-1];}else {currentRenderList=null;}};function projectObject(object,camera,groupOrder,sortObjects){if(object.visible===false)return;var visible=object.layers.test(camera.layers);if(visible){if(object.isGroup){groupOrder=object.renderOrder;}else if(object.isLOD){if(object.autoUpdate===true)object.update(camera);}else if(object.isLight){currentRenderState.pushLight(object);if(object.castShadow){currentRenderState.pushShadow(object);}}else if(object.isSprite){if(!object.frustumCulled||_frustum.intersectsSprite(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var geometry=objects.update(object);var material=object.material;if(material.visible){currentRenderList.push(object,geometry,material,groupOrder,_vector3.z,null);}}}else if(object.isMesh||object.isLine||object.isPoints){if(object.isSkinnedMesh){// update skeleton only once in a frame
if(object.skeleton.frame!==info.render.frame){object.skeleton.update();object.skeleton.frame=info.render.frame;}}if(!object.frustumCulled||_frustum.intersectsObject(object)){if(sortObjects){_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);}var _geometry2=objects.update(object);var _material=object.material;if(Array.isArray(_material)){var groups=_geometry2.groups;for(var _i149=0,l=groups.length;_i149<l;_i149++){var group=groups[_i149];var groupMaterial=_material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){currentRenderList.push(object,_geometry2,groupMaterial,groupOrder,_vector3.z,group);}}}else if(_material.visible){currentRenderList.push(object,_geometry2,_material,groupOrder,_vector3.z,null);}}}}var children=object.children;for(var _i150=0,_l6=children.length;_i150<_l6;_i150++){projectObject(children[_i150],camera,groupOrder,sortObjects);}}function renderScene(currentRenderList,scene,camera,viewport){var opaqueObjects=currentRenderList.opaque;var transmissiveObjects=currentRenderList.transmissive;var transparentObjects=currentRenderList.transparent;currentRenderState.setupLightsView(camera);if(transmissiveObjects.length>0)renderTransmissionPass(opaqueObjects,scene,camera);if(viewport)state.viewport(_currentViewport.copy(viewport));if(opaqueObjects.length>0)renderObjects(opaqueObjects,scene,camera);if(transmissiveObjects.length>0)renderObjects(transmissiveObjects,scene,camera);if(transparentObjects.length>0)renderObjects(transparentObjects,scene,camera);}function renderTransmissionPass(opaqueObjects,scene,camera){if(_transmissionRenderTarget===null){var needsAntialias=_antialias===true&&capabilities.isWebGL2===true;var renderTargetType=needsAntialias?WebGLMultisampleRenderTarget:WebGLRenderTarget;_transmissionRenderTarget=new renderTargetType(1024,1024,{generateMipmaps:true,type:utils.convert(HalfFloatType)!==null?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,magFilter:NearestFilter,wrapS:ClampToEdgeWrapping,wrapT:ClampToEdgeWrapping,useRenderToTexture:extensions.has('WEBGL_multisampled_render_to_texture')});}var currentRenderTarget=_this.getRenderTarget();_this.setRenderTarget(_transmissionRenderTarget);_this.clear();// Turn off the features which can affect the frag color for opaque objects pass.
// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
var currentToneMapping=_this.toneMapping;_this.toneMapping=NoToneMapping;renderObjects(opaqueObjects,scene,camera);_this.toneMapping=currentToneMapping;textures.updateMultisampleRenderTarget(_transmissionRenderTarget);textures.updateRenderTargetMipmap(_transmissionRenderTarget);_this.setRenderTarget(currentRenderTarget);}function renderObjects(renderList,scene,camera){var overrideMaterial=scene.isScene===true?scene.overrideMaterial:null;for(var _i151=0,l=renderList.length;_i151<l;_i151++){var renderItem=renderList[_i151];var object=renderItem.object;var geometry=renderItem.geometry;var material=overrideMaterial===null?renderItem.material:overrideMaterial;var group=renderItem.group;if(object.layers.test(camera.layers)){renderObject(object,scene,camera,geometry,material,group);}}}function renderObject(object,scene,camera,geometry,material,group){object.onBeforeRender(_this,scene,camera,geometry,material,group);object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld);object.normalMatrix.getNormalMatrix(object.modelViewMatrix);material.onBeforeRender(_this,scene,camera,geometry,object,group);if(material.transparent===true&&material.side===DoubleSide){material.side=BackSide;material.needsUpdate=true;_this.renderBufferDirect(camera,scene,geometry,material,object,group);material.side=FrontSide;material.needsUpdate=true;_this.renderBufferDirect(camera,scene,geometry,material,object,group);material.side=DoubleSide;}else {_this.renderBufferDirect(camera,scene,geometry,material,object,group);}object.onAfterRender(_this,scene,camera,geometry,material,group);}function getProgram(material,scene,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;var shadowsArray=currentRenderState.state.shadowsArray;var lightsStateVersion=lights.state.version;var parameters=programCache.getParameters(material,lights.state,shadowsArray,scene,object);var programCacheKey=programCache.getProgramCacheKey(parameters);var programs=materialProperties.programs;// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
materialProperties.environment=material.isMeshStandardMaterial?scene.environment:null;materialProperties.fog=scene.fog;materialProperties.envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||materialProperties.environment);if(programs===undefined){// new material
material.addEventListener('dispose',onMaterialDispose);programs=new Map();materialProperties.programs=programs;}var program=programs.get(programCacheKey);if(program!==undefined){// early out if program and light state is identical
if(materialProperties.currentProgram===program&&materialProperties.lightsStateVersion===lightsStateVersion){updateCommonMaterialProperties(material,parameters);return program;}}else {parameters.uniforms=programCache.getUniforms(material);material.onBuild(object,parameters,_this);material.onBeforeCompile(parameters,_this);program=programCache.acquireProgram(parameters,programCacheKey);programs.set(programCacheKey,program);materialProperties.uniforms=parameters.uniforms;}var uniforms=materialProperties.uniforms;if(!material.isShaderMaterial&&!material.isRawShaderMaterial||material.clipping===true){uniforms.clippingPlanes=clipping.uniform;}updateCommonMaterialProperties(material,parameters);// store the light setup it was created for
materialProperties.needsLights=materialNeedsLights(material);materialProperties.lightsStateVersion=lightsStateVersion;if(materialProperties.needsLights){// wire up the material to this renderer's lighting state
uniforms.ambientLightColor.value=lights.state.ambient;uniforms.lightProbe.value=lights.state.probe;uniforms.directionalLights.value=lights.state.directional;uniforms.directionalLightShadows.value=lights.state.directionalShadow;uniforms.spotLights.value=lights.state.spot;uniforms.spotLightShadows.value=lights.state.spotShadow;uniforms.rectAreaLights.value=lights.state.rectArea;uniforms.ltc_1.value=lights.state.rectAreaLTC1;uniforms.ltc_2.value=lights.state.rectAreaLTC2;uniforms.pointLights.value=lights.state.point;uniforms.pointLightShadows.value=lights.state.pointShadow;uniforms.hemisphereLights.value=lights.state.hemi;uniforms.directionalShadowMap.value=lights.state.directionalShadowMap;uniforms.directionalShadowMatrix.value=lights.state.directionalShadowMatrix;uniforms.spotShadowMap.value=lights.state.spotShadowMap;uniforms.spotShadowMatrix.value=lights.state.spotShadowMatrix;uniforms.pointShadowMap.value=lights.state.pointShadowMap;uniforms.pointShadowMatrix.value=lights.state.pointShadowMatrix;// TODO (abelnation): add area lights shadow info to uniforms
}var progUniforms=program.getUniforms();var uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.currentProgram=program;materialProperties.uniformsList=uniformsList;return program;}function updateCommonMaterialProperties(material,parameters){var materialProperties=properties.get(material);materialProperties.outputEncoding=parameters.outputEncoding;materialProperties.instancing=parameters.instancing;materialProperties.skinning=parameters.skinning;materialProperties.morphTargets=parameters.morphTargets;materialProperties.morphNormals=parameters.morphNormals;materialProperties.morphTargetsCount=parameters.morphTargetsCount;materialProperties.numClippingPlanes=parameters.numClippingPlanes;materialProperties.numIntersection=parameters.numClipIntersection;materialProperties.vertexAlphas=parameters.vertexAlphas;materialProperties.vertexTangents=parameters.vertexTangents;materialProperties.toneMapping=parameters.toneMapping;}function setProgram(camera,scene,geometry,material,object){if(scene.isScene!==true)scene=_emptyScene;// scene could be a Mesh, Line, Points, ...
textures.resetTextureUnits();var fog=scene.fog;var environment=material.isMeshStandardMaterial?scene.environment:null;var encoding=_currentRenderTarget===null?_this.outputEncoding:_currentRenderTarget.isXRRenderTarget===true?_currentRenderTarget.texture.encoding:LinearEncoding;var envMap=(material.isMeshStandardMaterial?cubeuvmaps:cubemaps).get(material.envMap||environment);var vertexAlphas=material.vertexColors===true&&!!geometry.attributes.color&&geometry.attributes.color.itemSize===4;var vertexTangents=!!material.normalMap&&!!geometry.attributes.tangent;var morphTargets=!!geometry.morphAttributes.position;var morphNormals=!!geometry.morphAttributes.normal;var morphTargetsCount=!!geometry.morphAttributes.position?geometry.morphAttributes.position.length:0;var toneMapping=material.toneMapped?_this.toneMapping:NoToneMapping;var materialProperties=properties.get(material);var lights=currentRenderState.state.lights;if(_clippingEnabled===true){if(_localClippingEnabled===true||camera!==_currentCamera){var useCache=camera===_currentCamera&&material.id===_currentMaterialId;// we might want to call this function with some ClippingGroup
// object instead of the material, once it becomes feasible
// (#8465, #8379)
clipping.setState(material,camera,useCache);}}//
var needsProgramChange=false;if(material.version===materialProperties.__version){if(materialProperties.needsLights&&materialProperties.lightsStateVersion!==lights.state.version){needsProgramChange=true;}else if(materialProperties.outputEncoding!==encoding){needsProgramChange=true;}else if(object.isInstancedMesh&&materialProperties.instancing===false){needsProgramChange=true;}else if(!object.isInstancedMesh&&materialProperties.instancing===true){needsProgramChange=true;}else if(object.isSkinnedMesh&&materialProperties.skinning===false){needsProgramChange=true;}else if(!object.isSkinnedMesh&&materialProperties.skinning===true){needsProgramChange=true;}else if(materialProperties.envMap!==envMap){needsProgramChange=true;}else if(material.fog&&materialProperties.fog!==fog){needsProgramChange=true;}else if(materialProperties.numClippingPlanes!==undefined&&(materialProperties.numClippingPlanes!==clipping.numPlanes||materialProperties.numIntersection!==clipping.numIntersection)){needsProgramChange=true;}else if(materialProperties.vertexAlphas!==vertexAlphas){needsProgramChange=true;}else if(materialProperties.vertexTangents!==vertexTangents){needsProgramChange=true;}else if(materialProperties.morphTargets!==morphTargets){needsProgramChange=true;}else if(materialProperties.morphNormals!==morphNormals){needsProgramChange=true;}else if(materialProperties.toneMapping!==toneMapping){needsProgramChange=true;}else if(capabilities.isWebGL2===true&&materialProperties.morphTargetsCount!==morphTargetsCount){needsProgramChange=true;}}else {needsProgramChange=true;materialProperties.__version=material.version;}//
var program=materialProperties.currentProgram;if(needsProgramChange===true){program=getProgram(material,scene,object);}var refreshProgram=false;var refreshMaterial=false;var refreshLights=false;var p_uniforms=program.getUniforms(),m_uniforms=materialProperties.uniforms;if(state.useProgram(program.program)){refreshProgram=true;refreshMaterial=true;refreshLights=true;}if(material.id!==_currentMaterialId){_currentMaterialId=material.id;refreshMaterial=true;}if(refreshProgram||_currentCamera!==camera){p_uniforms.setValue(_gl,'projectionMatrix',camera.projectionMatrix);if(capabilities.logarithmicDepthBuffer){p_uniforms.setValue(_gl,'logDepthBufFC',2.0/(Math.log(camera.far+1.0)/Math.LN2));}if(_currentCamera!==camera){_currentCamera=camera;// lighting uniforms depend on the camera so enforce an update
// now, in case this material supports lights - or later, when
// the next material that does gets activated:
refreshMaterial=true;// set to true on material change
refreshLights=true;// remains set until update done
}// load material specific uniforms
// (shader material also gets them for the sake of genericity)
if(material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshStandardMaterial||material.envMap){var uCamPos=p_uniforms.map.cameraPosition;if(uCamPos!==undefined){uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));}}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial){p_uniforms.setValue(_gl,'isOrthographic',camera.isOrthographicCamera===true);}if(material.isMeshPhongMaterial||material.isMeshToonMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.isShadowMaterial||object.isSkinnedMesh){p_uniforms.setValue(_gl,'viewMatrix',camera.matrixWorldInverse);}}// skinning and morph target uniforms must be set even if material didn't change
// auto-setting of texture unit for bone and morph texture must go before other textures
// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
if(object.isSkinnedMesh){p_uniforms.setOptional(_gl,object,'bindMatrix');p_uniforms.setOptional(_gl,object,'bindMatrixInverse');var skeleton=object.skeleton;if(skeleton){if(capabilities.floatVertexTextures){if(skeleton.boneTexture===null)skeleton.computeBoneTexture();p_uniforms.setValue(_gl,'boneTexture',skeleton.boneTexture,textures);p_uniforms.setValue(_gl,'boneTextureSize',skeleton.boneTextureSize);}else {p_uniforms.setOptional(_gl,skeleton,'boneMatrices');}}}if(!!geometry&&(geometry.morphAttributes.position!==undefined||geometry.morphAttributes.normal!==undefined)){morphtargets.update(object,geometry,material,program);}if(refreshMaterial||materialProperties.receiveShadow!==object.receiveShadow){materialProperties.receiveShadow=object.receiveShadow;p_uniforms.setValue(_gl,'receiveShadow',object.receiveShadow);}if(refreshMaterial){p_uniforms.setValue(_gl,'toneMappingExposure',_this.toneMappingExposure);if(materialProperties.needsLights){// the current material requires lighting info
// note: all lighting uniforms are always set correctly
// they simply reference the renderer's state for their
// values
//
// use the current material's .needsUpdate flags to set
// the GL state when required
markUniformsLightsNeedsUpdate(m_uniforms,refreshLights);}// refresh uniforms common to several materials
if(fog&&material.fog){materials.refreshFogUniforms(m_uniforms,fog);}materials.refreshMaterialUniforms(m_uniforms,material,_pixelRatio,_height,_transmissionRenderTarget);WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);}if(material.isShaderMaterial&&material.uniformsNeedUpdate===true){WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,textures);material.uniformsNeedUpdate=false;}if(material.isSpriteMaterial){p_uniforms.setValue(_gl,'center',object.center);}// common matrices
p_uniforms.setValue(_gl,'modelViewMatrix',object.modelViewMatrix);p_uniforms.setValue(_gl,'normalMatrix',object.normalMatrix);p_uniforms.setValue(_gl,'modelMatrix',object.matrixWorld);return program;}// If uniforms are marked as clean, they don't need to be loaded to the GPU.
function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value;uniforms.lightProbe.needsUpdate=value;uniforms.directionalLights.needsUpdate=value;uniforms.directionalLightShadows.needsUpdate=value;uniforms.pointLights.needsUpdate=value;uniforms.pointLightShadows.needsUpdate=value;uniforms.spotLights.needsUpdate=value;uniforms.spotLightShadows.needsUpdate=value;uniforms.rectAreaLights.needsUpdate=value;uniforms.hemisphereLights.needsUpdate=value;}function materialNeedsLights(material){return material.isMeshLambertMaterial||material.isMeshToonMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isShadowMaterial||material.isShaderMaterial&&material.lights===true;}this.getActiveCubeFace=function(){return _currentActiveCubeFace;};this.getActiveMipmapLevel=function(){return _currentActiveMipmapLevel;};this.getRenderTarget=function(){return _currentRenderTarget;};this.setRenderTargetTextures=function(renderTarget,colorTexture,depthTexture){properties.get(renderTarget.texture).__webglTexture=colorTexture;properties.get(renderTarget.depthTexture).__webglTexture=depthTexture;var renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__hasExternalTextures=true;if(renderTargetProperties.__hasExternalTextures){renderTargetProperties.__autoAllocateDepthBuffer=depthTexture===undefined;if(!renderTargetProperties.__autoAllocateDepthBuffer){// The multisample_render_to_texture extension doesn't work properly if there
// are midframe flushes and an external depth buffer. Disable use of the extension.
if(renderTarget.useRenderToTexture){console.warn('render-to-texture extension was disabled because an external texture was provided');renderTarget.useRenderToTexture=false;renderTarget.useRenderbuffer=true;}}}};this.setRenderTargetFramebuffer=function(renderTarget,defaultFramebuffer){var renderTargetProperties=properties.get(renderTarget);renderTargetProperties.__webglFramebuffer=defaultFramebuffer;renderTargetProperties.__useDefaultFramebuffer=defaultFramebuffer===undefined;};this.setRenderTarget=function(renderTarget){var activeCubeFace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var activeMipmapLevel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;_currentRenderTarget=renderTarget;_currentActiveCubeFace=activeCubeFace;_currentActiveMipmapLevel=activeMipmapLevel;var useDefaultFramebuffer=true;if(renderTarget){var renderTargetProperties=properties.get(renderTarget);if(renderTargetProperties.__useDefaultFramebuffer!==undefined){// We need to make sure to rebind the framebuffer.
state.bindFramebuffer(36160,null);useDefaultFramebuffer=false;}else if(renderTargetProperties.__webglFramebuffer===undefined){textures.setupRenderTarget(renderTarget);}else if(renderTargetProperties.__hasExternalTextures){// Color and depth texture must be rebound in order for the swapchain to update.
textures.rebindTextures(renderTarget,properties.get(renderTarget.texture).__webglTexture,properties.get(renderTarget.depthTexture).__webglTexture);}}var framebuffer=null;var isCube=false;var isRenderTarget3D=false;if(renderTarget){var texture=renderTarget.texture;if(texture.isDataTexture3D||texture.isDataTexture2DArray){isRenderTarget3D=true;}var __webglFramebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget){framebuffer=__webglFramebuffer[activeCubeFace];isCube=true;}else if(renderTarget.useRenderbuffer){framebuffer=properties.get(renderTarget).__webglMultisampledFramebuffer;}else {framebuffer=__webglFramebuffer;}_currentViewport.copy(renderTarget.viewport);_currentScissor.copy(renderTarget.scissor);_currentScissorTest=renderTarget.scissorTest;}else {_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();_currentScissorTest=_scissorTest;}var framebufferBound=state.bindFramebuffer(36160,framebuffer);if(framebufferBound&&capabilities.drawBuffers&&useDefaultFramebuffer){state.drawBuffers(renderTarget,framebuffer);}state.viewport(_currentViewport);state.scissor(_currentScissor);state.setScissorTest(_currentScissorTest);if(isCube){var textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(36160,36064,34069+activeCubeFace,textureProperties.__webglTexture,activeMipmapLevel);}else if(isRenderTarget3D){var _textureProperties=properties.get(renderTarget.texture);var layer=activeCubeFace||0;_gl.framebufferTextureLayer(36160,36064,_textureProperties.__webglTexture,activeMipmapLevel||0,layer);}_currentMaterialId=-1;// reset current material to ensure correct uniform bindings
};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer,activeCubeFaceIndex){if(!(renderTarget&&renderTarget.isWebGLRenderTarget)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');return;}var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(renderTarget.isWebGLCubeRenderTarget&&activeCubeFaceIndex!==undefined){framebuffer=framebuffer[activeCubeFaceIndex];}if(framebuffer){state.bindFramebuffer(36160,framebuffer);try{var texture=renderTarget.texture;var textureFormat=texture.format;var textureType=texture.type;if(textureFormat!==RGBAFormat&&utils.convert(textureFormat)!==_gl.getParameter(35739)){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');return;}var halfFloatSupportedByExt=textureType===HalfFloatType&&(extensions.has('EXT_color_buffer_half_float')||capabilities.isWebGL2&&extensions.has('EXT_color_buffer_float'));if(textureType!==UnsignedByteType&&utils.convert(textureType)!==_gl.getParameter(35738)&&// Edge and Chrome Mac < 52 (#9513)
!(textureType===FloatType&&(capabilities.isWebGL2||extensions.has('OES_texture_float')||extensions.has('WEBGL_color_buffer_float')))&&// Chrome Mac >= 52 and Firefox
!halfFloatSupportedByExt){console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');return;}if(_gl.checkFramebufferStatus(36160)===36053){// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
if(x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height){_gl.readPixels(x,y,width,height,utils.convert(textureFormat),utils.convert(textureType),buffer);}}else {console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');}}finally{// restore framebuffer of current render target if necessary
var _framebuffer=_currentRenderTarget!==null?properties.get(_currentRenderTarget).__webglFramebuffer:null;state.bindFramebuffer(36160,_framebuffer);}}};this.copyFramebufferToTexture=function(position,texture){var level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;if(texture.isFramebufferTexture!==true){console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');return;}var levelScale=Math.pow(2,-level);var width=Math.floor(texture.image.width*levelScale);var height=Math.floor(texture.image.height*levelScale);textures.setTexture2D(texture,0);_gl.copyTexSubImage2D(3553,level,0,0,position.x,position.y,width,height);state.unbindTexture();};this.copyTextureToTexture=function(position,srcTexture,dstTexture){var level=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var width=srcTexture.image.width;var height=srcTexture.image.height;var glFormat=utils.convert(dstTexture.format);var glType=utils.convert(dstTexture.type);textures.setTexture2D(dstTexture,0);// As another texture upload may have changed pixelStorei
// parameters, make sure they are correct for the dstTexture
_gl.pixelStorei(37440,dstTexture.flipY);_gl.pixelStorei(37441,dstTexture.premultiplyAlpha);_gl.pixelStorei(3317,dstTexture.unpackAlignment);if(srcTexture.isDataTexture){_gl.texSubImage2D(3553,level,position.x,position.y,width,height,glFormat,glType,srcTexture.image.data);}else {if(srcTexture.isCompressedTexture){_gl.compressedTexSubImage2D(3553,level,position.x,position.y,srcTexture.mipmaps[0].width,srcTexture.mipmaps[0].height,glFormat,srcTexture.mipmaps[0].data);}else {_gl.texSubImage2D(3553,level,position.x,position.y,glFormat,glType,srcTexture.image);}}// Generate mipmaps only when copying level 0
if(level===0&&dstTexture.generateMipmaps)_gl.generateMipmap(3553);state.unbindTexture();};this.copyTextureToTexture3D=function(sourceBox,position,srcTexture,dstTexture){var level=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;if(_this.isWebGL1Renderer){console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');return;}var width=sourceBox.max.x-sourceBox.min.x+1;var height=sourceBox.max.y-sourceBox.min.y+1;var depth=sourceBox.max.z-sourceBox.min.z+1;var glFormat=utils.convert(dstTexture.format);var glType=utils.convert(dstTexture.type);var glTarget;if(dstTexture.isDataTexture3D){textures.setTexture3D(dstTexture,0);glTarget=32879;}else if(dstTexture.isDataTexture2DArray){textures.setTexture2DArray(dstTexture,0);glTarget=35866;}else {console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');return;}_gl.pixelStorei(37440,dstTexture.flipY);_gl.pixelStorei(37441,dstTexture.premultiplyAlpha);_gl.pixelStorei(3317,dstTexture.unpackAlignment);var unpackRowLen=_gl.getParameter(3314);var unpackImageHeight=_gl.getParameter(32878);var unpackSkipPixels=_gl.getParameter(3316);var unpackSkipRows=_gl.getParameter(3315);var unpackSkipImages=_gl.getParameter(32877);var image=srcTexture.isCompressedTexture?srcTexture.mipmaps[0]:srcTexture.image;_gl.pixelStorei(3314,image.width);_gl.pixelStorei(32878,image.height);_gl.pixelStorei(3316,sourceBox.min.x);_gl.pixelStorei(3315,sourceBox.min.y);_gl.pixelStorei(32877,sourceBox.min.z);if(srcTexture.isDataTexture||srcTexture.isDataTexture3D){_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image.data);}else {if(srcTexture.isCompressedTexture){console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');_gl.compressedTexSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,image.data);}else {_gl.texSubImage3D(glTarget,level,position.x,position.y,position.z,width,height,depth,glFormat,glType,image);}}_gl.pixelStorei(3314,unpackRowLen);_gl.pixelStorei(32878,unpackImageHeight);_gl.pixelStorei(3316,unpackSkipPixels);_gl.pixelStorei(3315,unpackSkipRows);_gl.pixelStorei(32877,unpackSkipImages);// Generate mipmaps only when copying level 0
if(level===0&&dstTexture.generateMipmaps)_gl.generateMipmap(glTarget);state.unbindTexture();};this.initTexture=function(texture){textures.setTexture2D(texture,0);state.unbindTexture();};this.resetState=function(){_currentActiveCubeFace=0;_currentActiveMipmapLevel=0;_currentRenderTarget=null;state.reset();bindingStates.reset();};if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe',{detail:this}));}}WebGLRenderer.prototype.isWebGLRenderer=true;var WebGL1Renderer=/*#__PURE__*/function(_WebGLRenderer){_inherits(WebGL1Renderer,_WebGLRenderer);var _super38=_createSuper(WebGL1Renderer);function WebGL1Renderer(){_classCallCheck(this,WebGL1Renderer);return _super38.apply(this,arguments);}return _createClass(WebGL1Renderer);}(WebGLRenderer);WebGL1Renderer.prototype.isWebGL1Renderer=true;/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */var SpriteMaterial=/*#__PURE__*/function(_Material5){_inherits(SpriteMaterial,_Material5);var _super40=_createSuper(SpriteMaterial);function SpriteMaterial(parameters){var _this30;_classCallCheck(this,SpriteMaterial);_this30=_super40.call(this);_this30.type='SpriteMaterial';_this30.color=new Color(0xffffff);_this30.map=null;_this30.alphaMap=null;_this30.rotation=0;_this30.sizeAttenuation=true;_this30.transparent=true;_this30.setValues(parameters);return _this30;}_createClass(SpriteMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(SpriteMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.rotation=source.rotation;this.sizeAttenuation=source.sizeAttenuation;return this;}}]);return SpriteMaterial;}(Material);SpriteMaterial.prototype.isSpriteMaterial=true;var Bone=/*#__PURE__*/function(_Object3D8){_inherits(Bone,_Object3D8);var _super44=_createSuper(Bone);function Bone(){var _this34;_classCallCheck(this,Bone);_this34=_super44.call(this);_this34.type='Bone';return _this34;}return _createClass(Bone);}(Object3D);Bone.prototype.isBone=true;var DataTexture=/*#__PURE__*/function(_Texture5){_inherits(DataTexture,_Texture5);var _super45=_createSuper(DataTexture);function DataTexture(){var _this35;var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var width=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var height=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var format=arguments.length>3?arguments[3]:undefined;var type=arguments.length>4?arguments[4]:undefined;var mapping=arguments.length>5?arguments[5]:undefined;var wrapS=arguments.length>6?arguments[6]:undefined;var wrapT=arguments.length>7?arguments[7]:undefined;var magFilter=arguments.length>8&&arguments[8]!==undefined?arguments[8]:NearestFilter;var minFilter=arguments.length>9&&arguments[9]!==undefined?arguments[9]:NearestFilter;var anisotropy=arguments.length>10?arguments[10]:undefined;var encoding=arguments.length>11?arguments[11]:undefined;_classCallCheck(this,DataTexture);_this35=_super45.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);_this35.image={data:data,width:width,height:height};_this35.magFilter=magFilter;_this35.minFilter=minFilter;_this35.generateMipmaps=false;_this35.flipY=false;_this35.unpackAlignment=1;return _this35;}return _createClass(DataTexture);}(Texture);DataTexture.prototype.isDataTexture=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */var LineBasicMaterial=/*#__PURE__*/function(_Material6){_inherits(LineBasicMaterial,_Material6);var _super48=_createSuper(LineBasicMaterial);function LineBasicMaterial(parameters){var _this38;_classCallCheck(this,LineBasicMaterial);_this38=_super48.call(this);_this38.type='LineBasicMaterial';_this38.color=new Color(0xffffff);_this38.linewidth=1;_this38.linecap='round';_this38.linejoin='round';_this38.setValues(parameters);return _this38;}_createClass(LineBasicMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(LineBasicMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;return this;}}]);return LineBasicMaterial;}(Material);LineBasicMaterial.prototype.isLineBasicMaterial=true;var _start$1=/*@__PURE__*/new Vector3();var _end$1=/*@__PURE__*/new Vector3();var _inverseMatrix$1=/*@__PURE__*/new Matrix4();var _ray$1=/*@__PURE__*/new Ray();var _sphere$1=/*@__PURE__*/new Sphere();var Line=/*#__PURE__*/function(_Object3D9){_inherits(Line,_Object3D9);var _super49=_createSuper(Line);function Line(){var _this39;var geometry=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new BufferGeometry();var material=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new LineBasicMaterial();_classCallCheck(this,Line);_this39=_super49.call(this);_this39.type='Line';_this39.geometry=geometry;_this39.material=material;_this39.updateMorphTargets();return _this39;}_createClass(Line,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(Line.prototype),"copy",this).call(this,source);this.material=source.material;this.geometry=source.geometry;return this;}},{key:"computeLineDistances",value:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[0];for(var _i173=1,l=positionAttribute.count;_i173<l;_i173++){_start$1.fromBufferAttribute(positionAttribute,_i173-1);_end$1.fromBufferAttribute(positionAttribute,_i173);lineDistances[_i173]=lineDistances[_i173-1];lineDistances[_i173]+=_start$1.distanceTo(_end$1);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else {console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}return this;}},{key:"raycast",value:function raycast(raycaster,intersects){var geometry=this.geometry;var matrixWorld=this.matrixWorld;var threshold=raycaster.params.Line.threshold;var drawRange=geometry.drawRange;// Checking boundingSphere distance to ray
if(geometry.boundingSphere===null)geometry.computeBoundingSphere();_sphere$1.copy(geometry.boundingSphere);_sphere$1.applyMatrix4(matrixWorld);_sphere$1.radius+=threshold;if(raycaster.ray.intersectsSphere(_sphere$1)===false)return;//
_inverseMatrix$1.copy(matrixWorld).invert();_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3);var localThresholdSq=localThreshold*localThreshold;var vStart=new Vector3();var vEnd=new Vector3();var interSegment=new Vector3();var interRay=new Vector3();var step=this.isLineSegments?2:1;if(geometry.isBufferGeometry){var index=geometry.index;var attributes=geometry.attributes;var positionAttribute=attributes.position;if(index!==null){var start=Math.max(0,drawRange.start);var end=Math.min(index.count,drawRange.start+drawRange.count);for(var _i174=start,l=end-1;_i174<l;_i174+=step){var a=index.getX(_i174);var b=index.getX(_i174+1);vStart.fromBufferAttribute(positionAttribute,a);vEnd.fromBufferAttribute(positionAttribute,b);var distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var distance=raycaster.ray.origin.distanceTo(interRay);if(distance<raycaster.near||distance>raycaster.far)continue;intersects.push({distance:distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:_i174,face:null,faceIndex:null,object:this});}}else {var _start6=Math.max(0,drawRange.start);var _end5=Math.min(positionAttribute.count,drawRange.start+drawRange.count);for(var _i175=_start6,_l7=_end5-1;_i175<_l7;_i175+=step){vStart.fromBufferAttribute(positionAttribute,_i175);vEnd.fromBufferAttribute(positionAttribute,_i175+1);var _distSq=_ray$1.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(_distSq>localThresholdSq)continue;interRay.applyMatrix4(this.matrixWorld);//Move back to world space for distance calculation
var _distance=raycaster.ray.origin.distanceTo(interRay);if(_distance<raycaster.near||_distance>raycaster.far)continue;intersects.push({distance:_distance,// What do we want? intersection point on the ray or on the segment??
// point: raycaster.ray.at( distance ),
point:interSegment.clone().applyMatrix4(this.matrixWorld),index:_i175,face:null,faceIndex:null,object:this});}}}else if(geometry.isGeometry){console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}}},{key:"updateMorphTargets",value:function updateMorphTargets(){var geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes;var keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(morphAttribute!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var m=0,ml=morphAttribute.length;m<ml;m++){var name=morphAttribute[m].name||String(m);this.morphTargetInfluences.push(0);this.morphTargetDictionary[name]=m;}}}}else {var morphTargets=geometry.morphTargets;if(morphTargets!==undefined&&morphTargets.length>0){console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');}}}}]);return Line;}(Object3D);Line.prototype.isLine=true;var _start=/*@__PURE__*/new Vector3();var _end=/*@__PURE__*/new Vector3();var LineSegments=/*#__PURE__*/function(_Line){_inherits(LineSegments,_Line);var _super50=_createSuper(LineSegments);function LineSegments(geometry,material){var _this40;_classCallCheck(this,LineSegments);_this40=_super50.call(this,geometry,material);_this40.type='LineSegments';return _this40;}_createClass(LineSegments,[{key:"computeLineDistances",value:function computeLineDistances(){var geometry=this.geometry;if(geometry.isBufferGeometry){// we assume non-indexed geometry
if(geometry.index===null){var positionAttribute=geometry.attributes.position;var lineDistances=[];for(var _i176=0,l=positionAttribute.count;_i176<l;_i176+=2){_start.fromBufferAttribute(positionAttribute,_i176);_end.fromBufferAttribute(positionAttribute,_i176+1);lineDistances[_i176]=_i176===0?0:lineDistances[_i176-1];lineDistances[_i176+1]=lineDistances[_i176]+_start.distanceTo(_end);}geometry.setAttribute('lineDistance',new Float32BufferAttribute(lineDistances,1));}else {console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');}}else if(geometry.isGeometry){console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');}return this;}}]);return LineSegments;}(Line);LineSegments.prototype.isLineSegments=true;var LineLoop=/*#__PURE__*/function(_Line2){_inherits(LineLoop,_Line2);var _super51=_createSuper(LineLoop);function LineLoop(geometry,material){var _this41;_classCallCheck(this,LineLoop);_this41=_super51.call(this,geometry,material);_this41.type='LineLoop';return _this41;}return _createClass(LineLoop);}(Line);LineLoop.prototype.isLineLoop=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */var PointsMaterial=/*#__PURE__*/function(_Material7){_inherits(PointsMaterial,_Material7);var _super52=_createSuper(PointsMaterial);function PointsMaterial(parameters){var _this42;_classCallCheck(this,PointsMaterial);_this42=_super52.call(this);_this42.type='PointsMaterial';_this42.color=new Color(0xffffff);_this42.map=null;_this42.alphaMap=null;_this42.size=1;_this42.sizeAttenuation=true;_this42.setValues(parameters);return _this42;}_createClass(PointsMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(PointsMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.map=source.map;this.alphaMap=source.alphaMap;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;return this;}}]);return PointsMaterial;}(Material);PointsMaterial.prototype.isPointsMaterial=true;var FramebufferTexture=/*#__PURE__*/function(_Texture7){_inherits(FramebufferTexture,_Texture7);var _super55=_createSuper(FramebufferTexture);function FramebufferTexture(width,height,format){var _this45;_classCallCheck(this,FramebufferTexture);_this45=_super55.call(this,{width:width,height:height});_this45.format=format;_this45.magFilter=NearestFilter;_this45.minFilter=NearestFilter;_this45.generateMipmaps=false;_this45.needsUpdate=true;return _this45;}return _createClass(FramebufferTexture);}(Texture);FramebufferTexture.prototype.isFramebufferTexture=true;var CompressedTexture=/*#__PURE__*/function(_Texture8){_inherits(CompressedTexture,_Texture8);var _super56=_createSuper(CompressedTexture);function CompressedTexture(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){var _this46;_classCallCheck(this,CompressedTexture);_this46=_super56.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);_this46.image={width:width,height:height};_this46.mipmaps=mipmaps;// no flipping for cube textures
// (also flipping doesn't work for compressed textures )
_this46.flipY=false;// can't generate mipmaps for compressed textures
// mips must be embedded in DDS files
_this46.generateMipmaps=false;return _this46;}return _createClass(CompressedTexture);}(Texture);CompressedTexture.prototype.isCompressedTexture=true;var CanvasTexture=/*#__PURE__*/function(_Texture9){_inherits(CanvasTexture,_Texture9);var _super57=_createSuper(CanvasTexture);function CanvasTexture(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){var _this47;_classCallCheck(this,CanvasTexture);_this47=_super57.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);_this47.needsUpdate=true;return _this47;}return _createClass(CanvasTexture);}(Texture);CanvasTexture.prototype.isCanvasTexture=true;new Vector3();new Vector3();new Vector3();new Triangle();/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/var Curve=/*#__PURE__*/function(){function Curve(){_classCallCheck(this,Curve);this.type='Curve';this.arcLengthDivisions=200;}// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]
_createClass(Curve,[{key:"getPoint",value:function getPoint(/* t, optionalTarget */){console.warn('THREE.Curve: .getPoint() not implemented.');return null;}// Get point at relative position in curve according to arc length
// - u [0 .. 1]
},{key:"getPointAt",value:function getPointAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getPoint(t,optionalTarget);}// Get sequence of points using getPoint( t )
},{key:"getPoints",value:function getPoints(){var divisions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPoint(d/divisions));}return points;}// Get sequence of points using getPointAt( u )
},{key:"getSpacedPoints",value:function getSpacedPoints(){var divisions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;var points=[];for(var d=0;d<=divisions;d++){points.push(this.getPointAt(d/divisions));}return points;}// Get total curve arc length
},{key:"getLength",value:function getLength(){var lengths=this.getLengths();return lengths[lengths.length-1];}// Get list of cumulative segment lengths
},{key:"getLengths",value:function getLengths(){var divisions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate){return this.cacheArcLengths;}this.needsUpdate=false;var cache=[];var current,last=this.getPoint(0);var sum=0;cache.push(0);for(var p=1;p<=divisions;p++){current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current;}this.cacheArcLengths=cache;return cache;// { sums: cache, sum: sum }; Sum is in the last element.
}},{key:"updateArcLengths",value:function updateArcLengths(){this.needsUpdate=true;this.getLengths();}// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
},{key:"getUtoTmapping",value:function getUtoTmapping(u,distance){var arcLengths=this.getLengths();var i=0;var il=arcLengths.length;var targetArcLength;// The targeted u distance value to get
if(distance){targetArcLength=distance;}else {targetArcLength=u*arcLengths[il-1];}// binary search for the index with largest value smaller than target u distance
var low=0,high=il-1,comparison;while(low<=high){i=Math.floor(low+(high-low)/2);// less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
comparison=arcLengths[i]-targetArcLength;if(comparison<0){low=i+1;}else if(comparison>0){high=i-1;}else {high=i;break;// DONE
}}i=high;if(arcLengths[i]===targetArcLength){return i/(il-1);}// we could get finer grain at lengths, or use simple interpolation between two points
var lengthBefore=arcLengths[i];var lengthAfter=arcLengths[i+1];var segmentLength=lengthAfter-lengthBefore;// determine where we are between the 'before' and 'after' points
var segmentFraction=(targetArcLength-lengthBefore)/segmentLength;// add that fractional amount to t
var t=(i+segmentFraction)/(il-1);return t;}// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation
},{key:"getTangent",value:function getTangent(t,optionalTarget){var delta=0.0001;var t1=t-delta;var t2=t+delta;// Capping in case of danger
if(t1<0)t1=0;if(t2>1)t2=1;var pt1=this.getPoint(t1);var pt2=this.getPoint(t2);var tangent=optionalTarget||(pt1.isVector2?new Vector2():new Vector3());tangent.copy(pt2).sub(pt1).normalize();return tangent;}},{key:"getTangentAt",value:function getTangentAt(u,optionalTarget){var t=this.getUtoTmapping(u);return this.getTangent(t,optionalTarget);}},{key:"computeFrenetFrames",value:function computeFrenetFrames(segments,closed){// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
var normal=new Vector3();var tangents=[];var normals=[];var binormals=[];var vec=new Vector3();var mat=new Matrix4();// compute the tangent vectors for each segment on the curve
for(var _i190=0;_i190<=segments;_i190++){var u=_i190/segments;tangents[_i190]=this.getTangentAt(u,new Vector3());}// select an initial normal vector perpendicular to the first tangent vector,
// and in the direction of the minimum tangent xyz component
normals[0]=new Vector3();binormals[0]=new Vector3();var min=Number.MAX_VALUE;var tx=Math.abs(tangents[0].x);var ty=Math.abs(tangents[0].y);var tz=Math.abs(tangents[0].z);if(tx<=min){min=tx;normal.set(1,0,0);}if(ty<=min){min=ty;normal.set(0,1,0);}if(tz<=min){normal.set(0,0,1);}vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);// compute the slowly-varying normal and binormal vectors for each segment on the curve
for(var _i191=1;_i191<=segments;_i191++){normals[_i191]=normals[_i191-1].clone();binormals[_i191]=binormals[_i191-1].clone();vec.crossVectors(tangents[_i191-1],tangents[_i191]);if(vec.length()>Number.EPSILON){vec.normalize();var theta=Math.acos(clamp$1(tangents[_i191-1].dot(tangents[_i191]),-1,1));// clamp for floating pt errors
normals[_i191].applyMatrix4(mat.makeRotationAxis(vec,theta));}binormals[_i191].crossVectors(tangents[_i191],normals[_i191]);}// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
if(closed===true){var _theta=Math.acos(clamp$1(normals[0].dot(normals[segments]),-1,1));_theta/=segments;if(tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0){_theta=-_theta;}for(var _i192=1;_i192<=segments;_i192++){// twist a little...
normals[_i192].applyMatrix4(mat.makeRotationAxis(tangents[_i192],_theta*_i192));binormals[_i192].crossVectors(tangents[_i192],normals[_i192]);}}return {tangents:tangents,normals:normals,binormals:binormals};}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"copy",value:function copy(source){this.arcLengthDivisions=source.arcLengthDivisions;return this;}},{key:"toJSON",value:function toJSON(){var data={metadata:{version:4.5,type:'Curve',generator:'Curve.toJSON'}};data.arcLengthDivisions=this.arcLengthDivisions;data.type=this.type;return data;}},{key:"fromJSON",value:function fromJSON(json){this.arcLengthDivisions=json.arcLengthDivisions;return this;}}]);return Curve;}();var EllipseCurve=/*#__PURE__*/function(_Curve){_inherits(EllipseCurve,_Curve);var _super64=_createSuper(EllipseCurve);function EllipseCurve(){var _this54;var aX=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var aY=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var xRadius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var yRadius=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var aStartAngle=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var aEndAngle=arguments.length>5&&arguments[5]!==undefined?arguments[5]:Math.PI*2;var aClockwise=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;var aRotation=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;_classCallCheck(this,EllipseCurve);_this54=_super64.call(this);_this54.type='EllipseCurve';_this54.aX=aX;_this54.aY=aY;_this54.xRadius=xRadius;_this54.yRadius=yRadius;_this54.aStartAngle=aStartAngle;_this54.aEndAngle=aEndAngle;_this54.aClockwise=aClockwise;_this54.aRotation=aRotation;return _this54;}_createClass(EllipseCurve,[{key:"getPoint",value:function getPoint(t,optionalTarget){var point=optionalTarget||new Vector2();var twoPi=Math.PI*2;var deltaAngle=this.aEndAngle-this.aStartAngle;var samePoints=Math.abs(deltaAngle)<Number.EPSILON;// ensures that deltaAngle is 0 .. 2 PI
while(deltaAngle<0)deltaAngle+=twoPi;while(deltaAngle>twoPi)deltaAngle-=twoPi;if(deltaAngle<Number.EPSILON){if(samePoints){deltaAngle=0;}else {deltaAngle=twoPi;}}if(this.aClockwise===true&&!samePoints){if(deltaAngle===twoPi){deltaAngle=-twoPi;}else {deltaAngle=deltaAngle-twoPi;}}var angle=this.aStartAngle+t*deltaAngle;var x=this.aX+this.xRadius*Math.cos(angle);var y=this.aY+this.yRadius*Math.sin(angle);if(this.aRotation!==0){var cos=Math.cos(this.aRotation);var sin=Math.sin(this.aRotation);var tx=x-this.aX;var ty=y-this.aY;// Rotate the point about the center of the ellipse.
x=tx*cos-ty*sin+this.aX;y=tx*sin+ty*cos+this.aY;}return point.set(x,y);}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(EllipseCurve.prototype),"copy",this).call(this,source);this.aX=source.aX;this.aY=source.aY;this.xRadius=source.xRadius;this.yRadius=source.yRadius;this.aStartAngle=source.aStartAngle;this.aEndAngle=source.aEndAngle;this.aClockwise=source.aClockwise;this.aRotation=source.aRotation;return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(EllipseCurve.prototype),"toJSON",this).call(this);data.aX=this.aX;data.aY=this.aY;data.xRadius=this.xRadius;data.yRadius=this.yRadius;data.aStartAngle=this.aStartAngle;data.aEndAngle=this.aEndAngle;data.aClockwise=this.aClockwise;data.aRotation=this.aRotation;return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(EllipseCurve.prototype),"fromJSON",this).call(this,json);this.aX=json.aX;this.aY=json.aY;this.xRadius=json.xRadius;this.yRadius=json.yRadius;this.aStartAngle=json.aStartAngle;this.aEndAngle=json.aEndAngle;this.aClockwise=json.aClockwise;this.aRotation=json.aRotation;return this;}}]);return EllipseCurve;}(Curve);EllipseCurve.prototype.isEllipseCurve=true;var ArcCurve=/*#__PURE__*/function(_EllipseCurve){_inherits(ArcCurve,_EllipseCurve);var _super65=_createSuper(ArcCurve);function ArcCurve(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var _this55;_classCallCheck(this,ArcCurve);_this55=_super65.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);_this55.type='ArcCurve';return _this55;}return _createClass(ArcCurve);}(EllipseCurve);ArcCurve.prototype.isArcCurve=true;/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/function CubicPoly(){var c0=0,c1=0,c2=0,c3=0;/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */function init(x0,x1,t0,t1){c0=x0;c1=t0;c2=-3*x0+3*x1-2*t0-t1;c3=2*x0-2*x1+t0+t1;}return {initCatmullRom:function initCatmullRom(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1));},initNonuniformCatmullRom:function initNonuniformCatmullRom(x0,x1,x2,x3,dt0,dt1,dt2){// compute tangents when parameterized in [t1,t2]
var t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1;var t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;// rescale tangents for parametrization in [0,1]
t1*=dt1;t2*=dt1;init(x1,x2,t1,t2);},calc:function calc(t){var t2=t*t;var t3=t2*t;return c0+c1*t+c2*t2+c3*t3;}};}//
var tmp=new Vector3();var px=new CubicPoly(),py=new CubicPoly(),pz=new CubicPoly();var CatmullRomCurve3=/*#__PURE__*/function(_Curve2){_inherits(CatmullRomCurve3,_Curve2);var _super66=_createSuper(CatmullRomCurve3);function CatmullRomCurve3(){var _this56;var points=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var closed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var curveType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'centripetal';var tension=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.5;_classCallCheck(this,CatmullRomCurve3);_this56=_super66.call(this);_this56.type='CatmullRomCurve3';_this56.points=points;_this56.closed=closed;_this56.curveType=curveType;_this56.tension=tension;return _this56;}_createClass(CatmullRomCurve3,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var point=optionalTarget;var points=this.points;var l=points.length;var p=(l-(this.closed?0:1))*t;var intPoint=Math.floor(p);var weight=p-intPoint;if(this.closed){intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/l)+1)*l;}else if(weight===0&&intPoint===l-1){intPoint=l-2;weight=1;}var p0,p3;// 4 points (p1 & p2 defined below)
if(this.closed||intPoint>0){p0=points[(intPoint-1)%l];}else {// extrapolate first point
tmp.subVectors(points[0],points[1]).add(points[0]);p0=tmp;}var p1=points[intPoint%l];var p2=points[(intPoint+1)%l];if(this.closed||intPoint+2<l){p3=points[(intPoint+2)%l];}else {// extrapolate last point
tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]);p3=tmp;}if(this.curveType==='centripetal'||this.curveType==='chordal'){// init Centripetal / Chordal Catmull-Rom
var pow=this.curveType==='chordal'?0.5:0.25;var dt0=Math.pow(p0.distanceToSquared(p1),pow);var dt1=Math.pow(p1.distanceToSquared(p2),pow);var dt2=Math.pow(p2.distanceToSquared(p3),pow);// safety check for repeated points
if(dt1<1e-4)dt1=1.0;if(dt0<1e-4)dt0=dt1;if(dt2<1e-4)dt2=dt1;px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2);}else if(this.curveType==='catmullrom'){px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,this.tension);py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,this.tension);pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,this.tension);}point.set(px.calc(weight),py.calc(weight),pz.calc(weight));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(CatmullRomCurve3.prototype),"copy",this).call(this,source);this.points=[];for(var _i193=0,l=source.points.length;_i193<l;_i193++){var point=source.points[_i193];this.points.push(point.clone());}this.closed=source.closed;this.curveType=source.curveType;this.tension=source.tension;return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(CatmullRomCurve3.prototype),"toJSON",this).call(this);data.points=[];for(var _i194=0,l=this.points.length;_i194<l;_i194++){var point=this.points[_i194];data.points.push(point.toArray());}data.closed=this.closed;data.curveType=this.curveType;data.tension=this.tension;return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(CatmullRomCurve3.prototype),"fromJSON",this).call(this,json);this.points=[];for(var _i195=0,l=json.points.length;_i195<l;_i195++){var point=json.points[_i195];this.points.push(new Vector3().fromArray(point));}this.closed=json.closed;this.curveType=json.curveType;this.tension=json.tension;return this;}}]);return CatmullRomCurve3;}(Curve);CatmullRomCurve3.prototype.isCatmullRomCurve3=true;/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */function CatmullRom(t,p0,p1,p2,p3){var v0=(p2-p0)*0.5;var v1=(p3-p1)*0.5;var t2=t*t;var t3=t*t2;return (2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1;}//
function QuadraticBezierP0(t,p){var k=1-t;return k*k*p;}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p;}function QuadraticBezierP2(t,p){return t*t*p;}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2);}//
function CubicBezierP0(t,p){var k=1-t;return k*k*k*p;}function CubicBezierP1(t,p){var k=1-t;return 3*k*k*t*p;}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p;}function CubicBezierP3(t,p){return t*t*t*p;}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3);}var CubicBezierCurve=/*#__PURE__*/function(_Curve3){_inherits(CubicBezierCurve,_Curve3);var _super67=_createSuper(CubicBezierCurve);function CubicBezierCurve(){var _this57;var v0=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector2();var v1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var v2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Vector2();var v3=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new Vector2();_classCallCheck(this,CubicBezierCurve);_this57=_super67.call(this);_this57.type='CubicBezierCurve';_this57.v0=v0;_this57.v1=v1;_this57.v2=v2;_this57.v3=v3;return _this57;}_createClass(CubicBezierCurve,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var point=optionalTarget;var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(CubicBezierCurve.prototype),"copy",this).call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(CubicBezierCurve.prototype),"toJSON",this).call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(CubicBezierCurve.prototype),"fromJSON",this).call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}]);return CubicBezierCurve;}(Curve);CubicBezierCurve.prototype.isCubicBezierCurve=true;var CubicBezierCurve3=/*#__PURE__*/function(_Curve4){_inherits(CubicBezierCurve3,_Curve4);var _super68=_createSuper(CubicBezierCurve3);function CubicBezierCurve3(){var _this58;var v0=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var v1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var v2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Vector3();var v3=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new Vector3();_classCallCheck(this,CubicBezierCurve3);_this58=_super68.call(this);_this58.type='CubicBezierCurve3';_this58.v0=v0;_this58.v1=v1;_this58.v2=v2;_this58.v3=v3;return _this58;}_createClass(CubicBezierCurve3,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var point=optionalTarget;var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;point.set(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(CubicBezierCurve3.prototype),"copy",this).call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);this.v3.copy(source.v3);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(CubicBezierCurve3.prototype),"toJSON",this).call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();data.v3=this.v3.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(CubicBezierCurve3.prototype),"fromJSON",this).call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);this.v3.fromArray(json.v3);return this;}}]);return CubicBezierCurve3;}(Curve);CubicBezierCurve3.prototype.isCubicBezierCurve3=true;var LineCurve=/*#__PURE__*/function(_Curve5){_inherits(LineCurve,_Curve5);var _super69=_createSuper(LineCurve);function LineCurve(){var _this59;var v1=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector2();var v2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();_classCallCheck(this,LineCurve);_this59=_super69.call(this);_this59.type='LineCurve';_this59.v1=v1;_this59.v2=v2;return _this59;}_createClass(LineCurve,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var point=optionalTarget;if(t===1){point.copy(this.v2);}else {point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt
},{key:"getPointAt",value:function getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}},{key:"getTangent",value:function getTangent(t,optionalTarget){var tangent=optionalTarget||new Vector2();tangent.copy(this.v2).sub(this.v1).normalize();return tangent;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(LineCurve.prototype),"copy",this).call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(LineCurve.prototype),"toJSON",this).call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(LineCurve.prototype),"fromJSON",this).call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}]);return LineCurve;}(Curve);LineCurve.prototype.isLineCurve=true;var LineCurve3=/*#__PURE__*/function(_Curve6){_inherits(LineCurve3,_Curve6);var _super70=_createSuper(LineCurve3);function LineCurve3(){var _this60;var v1=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var v2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();_classCallCheck(this,LineCurve3);_this60=_super70.call(this);_this60.type='LineCurve3';_this60.isLineCurve3=true;_this60.v1=v1;_this60.v2=v2;return _this60;}_createClass(LineCurve3,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var point=optionalTarget;if(t===1){point.copy(this.v2);}else {point.copy(this.v2).sub(this.v1);point.multiplyScalar(t).add(this.v1);}return point;}// Line curve is linear, so we can overwrite default getPointAt
},{key:"getPointAt",value:function getPointAt(u,optionalTarget){return this.getPoint(u,optionalTarget);}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(LineCurve3.prototype),"copy",this).call(this,source);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(LineCurve3.prototype),"toJSON",this).call(this);data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(LineCurve3.prototype),"fromJSON",this).call(this,json);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}]);return LineCurve3;}(Curve);var QuadraticBezierCurve=/*#__PURE__*/function(_Curve7){_inherits(QuadraticBezierCurve,_Curve7);var _super71=_createSuper(QuadraticBezierCurve);function QuadraticBezierCurve(){var _this61;var v0=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector2();var v1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var v2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Vector2();_classCallCheck(this,QuadraticBezierCurve);_this61=_super71.call(this);_this61.type='QuadraticBezierCurve';_this61.v0=v0;_this61.v1=v1;_this61.v2=v2;return _this61;}_createClass(QuadraticBezierCurve,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var point=optionalTarget;var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(QuadraticBezierCurve.prototype),"copy",this).call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(QuadraticBezierCurve.prototype),"toJSON",this).call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(QuadraticBezierCurve.prototype),"fromJSON",this).call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}]);return QuadraticBezierCurve;}(Curve);QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;var QuadraticBezierCurve3=/*#__PURE__*/function(_Curve8){_inherits(QuadraticBezierCurve3,_Curve8);var _super72=_createSuper(QuadraticBezierCurve3);function QuadraticBezierCurve3(){var _this62;var v0=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Vector3();var v1=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var v2=arguments.length>2&&arguments[2]!==undefined?arguments[2]:new Vector3();_classCallCheck(this,QuadraticBezierCurve3);_this62=_super72.call(this);_this62.type='QuadraticBezierCurve3';_this62.v0=v0;_this62.v1=v1;_this62.v2=v2;return _this62;}_createClass(QuadraticBezierCurve3,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector3();var point=optionalTarget;var v0=this.v0,v1=this.v1,v2=this.v2;point.set(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(QuadraticBezierCurve3.prototype),"copy",this).call(this,source);this.v0.copy(source.v0);this.v1.copy(source.v1);this.v2.copy(source.v2);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(QuadraticBezierCurve3.prototype),"toJSON",this).call(this);data.v0=this.v0.toArray();data.v1=this.v1.toArray();data.v2=this.v2.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(QuadraticBezierCurve3.prototype),"fromJSON",this).call(this,json);this.v0.fromArray(json.v0);this.v1.fromArray(json.v1);this.v2.fromArray(json.v2);return this;}}]);return QuadraticBezierCurve3;}(Curve);QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;var SplineCurve=/*#__PURE__*/function(_Curve9){_inherits(SplineCurve,_Curve9);var _super73=_createSuper(SplineCurve);function SplineCurve(){var _this63;var points=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];_classCallCheck(this,SplineCurve);_this63=_super73.call(this);_this63.type='SplineCurve';_this63.points=points;return _this63;}_createClass(SplineCurve,[{key:"getPoint",value:function getPoint(t){var optionalTarget=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Vector2();var point=optionalTarget;var points=this.points;var p=(points.length-1)*t;var intPoint=Math.floor(p);var weight=p-intPoint;var p0=points[intPoint===0?intPoint:intPoint-1];var p1=points[intPoint];var p2=points[intPoint>points.length-2?points.length-1:intPoint+1];var p3=points[intPoint>points.length-3?points.length-1:intPoint+2];point.set(CatmullRom(weight,p0.x,p1.x,p2.x,p3.x),CatmullRom(weight,p0.y,p1.y,p2.y,p3.y));return point;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(SplineCurve.prototype),"copy",this).call(this,source);this.points=[];for(var _i196=0,l=source.points.length;_i196<l;_i196++){var point=source.points[_i196];this.points.push(point.clone());}return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(SplineCurve.prototype),"toJSON",this).call(this);data.points=[];for(var _i197=0,l=this.points.length;_i197<l;_i197++){var point=this.points[_i197];data.points.push(point.toArray());}return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(SplineCurve.prototype),"fromJSON",this).call(this,json);this.points=[];for(var _i198=0,l=json.points.length;_i198<l;_i198++){var point=json.points[_i198];this.points.push(new Vector2().fromArray(point));}return this;}}]);return SplineCurve;}(Curve);SplineCurve.prototype.isSplineCurve=true;var Curves=/*#__PURE__*/Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/var CurvePath=/*#__PURE__*/function(_Curve10){_inherits(CurvePath,_Curve10);var _super74=_createSuper(CurvePath);function CurvePath(){var _this64;_classCallCheck(this,CurvePath);_this64=_super74.call(this);_this64.type='CurvePath';_this64.curves=[];_this64.autoClose=false;// Automatically closes the path
return _this64;}_createClass(CurvePath,[{key:"add",value:function add(curve){this.curves.push(curve);}},{key:"closePath",value:function closePath(){// Add a line curve if start and end of lines are not connected
var startPoint=this.curves[0].getPoint(0);var endPoint=this.curves[this.curves.length-1].getPoint(1);if(!startPoint.equals(endPoint)){this.curves.push(new LineCurve(endPoint,startPoint));}}// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:
// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')
},{key:"getPoint",value:function getPoint(t,optionalTarget){var d=t*this.getLength();var curveLengths=this.getCurveLengths();var i=0;// To think about boundaries points.
while(i<curveLengths.length){if(curveLengths[i]>=d){var diff=curveLengths[i]-d;var curve=this.curves[i];var segmentLength=curve.getLength();var u=segmentLength===0?0:1-diff/segmentLength;return curve.getPointAt(u,optionalTarget);}i++;}return null;// loop where sum != 0, sum > d , sum+1 <d
}// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength
},{key:"getLength",value:function getLength(){var lens=this.getCurveLengths();return lens[lens.length-1];}// cacheLengths must be recalculated.
},{key:"updateArcLengths",value:function updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths();}// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.
},{key:"getCurveLengths",value:function getCurveLengths(){// We use cache values if curves and cache array are same length
if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths;}// Get length of sub-curve
// Push sums into cached array
var lengths=[];var sums=0;for(var _i199=0,l=this.curves.length;_i199<l;_i199++){sums+=this.curves[_i199].getLength();lengths.push(sums);}this.cacheLengths=lengths;return lengths;}},{key:"getSpacedPoints",value:function getSpacedPoints(){var divisions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:40;var points=[];for(var _i200=0;_i200<=divisions;_i200++){points.push(this.getPoint(_i200/divisions));}if(this.autoClose){points.push(points[0]);}return points;}},{key:"getPoints",value:function getPoints(){var divisions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:12;var points=[];var last;for(var _i201=0,curves=this.curves;_i201<curves.length;_i201++){var curve=curves[_i201];var resolution=curve&&curve.isEllipseCurve?divisions*2:curve&&(curve.isLineCurve||curve.isLineCurve3)?1:curve&&curve.isSplineCurve?divisions*curve.points.length:divisions;var pts=curve.getPoints(resolution);for(var j=0;j<pts.length;j++){var point=pts[j];if(last&&last.equals(point))continue;// ensures no consecutive points are duplicates
points.push(point);last=point;}}if(this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])){points.push(points[0]);}return points;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(CurvePath.prototype),"copy",this).call(this,source);this.curves=[];for(var _i202=0,l=source.curves.length;_i202<l;_i202++){var curve=source.curves[_i202];this.curves.push(curve.clone());}this.autoClose=source.autoClose;return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(CurvePath.prototype),"toJSON",this).call(this);data.autoClose=this.autoClose;data.curves=[];for(var _i203=0,l=this.curves.length;_i203<l;_i203++){var curve=this.curves[_i203];data.curves.push(curve.toJSON());}return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(CurvePath.prototype),"fromJSON",this).call(this,json);this.autoClose=json.autoClose;this.curves=[];for(var _i204=0,l=json.curves.length;_i204<l;_i204++){var curve=json.curves[_i204];this.curves.push(new Curves[curve.type]().fromJSON(curve));}return this;}}]);return CurvePath;}(Curve);var Path=/*#__PURE__*/function(_CurvePath){_inherits(Path,_CurvePath);var _super75=_createSuper(Path);function Path(points){var _this65;_classCallCheck(this,Path);_this65=_super75.call(this);_this65.type='Path';_this65.currentPoint=new Vector2();if(points){_this65.setFromPoints(points);}return _this65;}_createClass(Path,[{key:"setFromPoints",value:function setFromPoints(points){this.moveTo(points[0].x,points[0].y);for(var _i205=1,l=points.length;_i205<l;_i205++){this.lineTo(points[_i205].x,points[_i205].y);}return this;}},{key:"moveTo",value:function moveTo(x,y){this.currentPoint.set(x,y);// TODO consider referencing vectors instead of copying?
return this;}},{key:"lineTo",value:function lineTo(x,y){var curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve);this.currentPoint.set(x,y);return this;}},{key:"quadraticCurveTo",value:function quadraticCurveTo(aCPx,aCPy,aX,aY){var curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}},{key:"bezierCurveTo",value:function bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve);this.currentPoint.set(aX,aY);return this;}},{key:"splineThru",value:function splineThru(pts/*Array of Vector*/){var npts=[this.currentPoint.clone()].concat(pts);var curve=new SplineCurve(npts);this.curves.push(curve);this.currentPoint.copy(pts[pts.length-1]);return this;}},{key:"arc",value:function arc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}},{key:"absarc",value:function absarc(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise);return this;}},{key:"ellipse",value:function ellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var x0=this.currentPoint.x;var y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);return this;}},{key:"absellipse",value:function absellipse(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){// if a previous curve is present, attempt to join
var firstPoint=curve.getPoint(0);if(!firstPoint.equals(this.currentPoint)){this.lineTo(firstPoint.x,firstPoint.y);}}this.curves.push(curve);var lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint);return this;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(Path.prototype),"copy",this).call(this,source);this.currentPoint.copy(source.currentPoint);return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(Path.prototype),"toJSON",this).call(this);data.currentPoint=this.currentPoint.toArray();return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(Path.prototype),"fromJSON",this).call(this,json);this.currentPoint.fromArray(json.currentPoint);return this;}}]);return Path;}(CurvePath);var Shape=/*#__PURE__*/function(_Path){_inherits(Shape,_Path);var _super76=_createSuper(Shape);function Shape(points){var _this66;_classCallCheck(this,Shape);_this66=_super76.call(this,points);_this66.uuid=generateUUID();_this66.type='Shape';_this66.holes=[];return _this66;}_createClass(Shape,[{key:"getPointsHoles",value:function getPointsHoles(divisions){var holesPts=[];for(var _i206=0,l=this.holes.length;_i206<l;_i206++){holesPts[_i206]=this.holes[_i206].getPoints(divisions);}return holesPts;}// get points of shape and holes (keypoints based on segments parameter)
},{key:"extractPoints",value:function extractPoints(divisions){return {shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)};}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(Shape.prototype),"copy",this).call(this,source);this.holes=[];for(var _i207=0,l=source.holes.length;_i207<l;_i207++){var hole=source.holes[_i207];this.holes.push(hole.clone());}return this;}},{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(Shape.prototype),"toJSON",this).call(this);data.uuid=this.uuid;data.holes=[];for(var _i208=0,l=this.holes.length;_i208<l;_i208++){var hole=this.holes[_i208];data.holes.push(hole.toJSON());}return data;}},{key:"fromJSON",value:function fromJSON(json){_get(_getPrototypeOf(Shape.prototype),"fromJSON",this).call(this,json);this.uuid=json.uuid;this.holes=[];for(var _i209=0,l=json.holes.length;_i209<l;_i209++){var hole=json.holes[_i209];this.holes.push(new Path().fromJSON(hole));}return this;}}]);return Shape;}(Path);/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */var Earcut={triangulate:function triangulate(data,holeIndices){var dim=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;var hasHoles=holeIndices&&holeIndices.length;var outerLen=hasHoles?holeIndices[0]*dim:data.length;var outerNode=linkedList(data,0,outerLen,dim,true);var triangles=[];if(!outerNode||outerNode.next===outerNode.prev)return triangles;var minX,minY,maxX,maxY,x,y,invSize;if(hasHoles)outerNode=eliminateHoles(data,holeIndices,outerNode,dim);// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
if(data.length>80*dim){minX=maxX=data[0];minY=maxY=data[1];for(var _i210=dim;_i210<outerLen;_i210+=dim){x=data[_i210];y=data[_i210+1];if(x<minX)minX=x;if(y<minY)minY=y;if(x>maxX)maxX=x;if(y>maxY)maxY=y;}// minX, minY and invSize are later used to transform coords into integers for z-order calculation
invSize=Math.max(maxX-minX,maxY-minY);invSize=invSize!==0?1/invSize:0;}earcutLinked(outerNode,triangles,dim,minX,minY,invSize);return triangles;}};// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data,start,end,dim,clockwise){var i,last;if(clockwise===signedArea(data,start,end,dim)>0){for(i=start;i<end;i+=dim)last=insertNode(i,data[i],data[i+1],last);}else {for(i=end-dim;i>=start;i-=dim)last=insertNode(i,data[i],data[i+1],last);}if(last&&equals(last,last.next)){removeNode(last);last=last.next;}return last;}// eliminate colinear or duplicate points
function filterPoints(start,end){if(!start)return start;if(!end)end=start;var p=start,again;do{again=false;if(!p.steiner&&(equals(p,p.next)||area(p.prev,p,p.next)===0)){removeNode(p);p=end=p.prev;if(p===p.next)break;again=true;}else {p=p.next;}}while(again||p!==end);return end;}// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear,triangles,dim,minX,minY,invSize,pass){if(!ear)return;// interlink polygon nodes in z-order
if(!pass&&invSize)indexCurve(ear,minX,minY,invSize);var stop=ear,prev,next;// iterate through ears, slicing them one by one
while(ear.prev!==ear.next){prev=ear.prev;next=ear.next;if(invSize?isEarHashed(ear,minX,minY,invSize):isEar(ear)){// cut off the triangle
triangles.push(prev.i/dim);triangles.push(ear.i/dim);triangles.push(next.i/dim);removeNode(ear);// skipping the next vertex leads to less sliver triangles
ear=next.next;stop=next.next;continue;}ear=next;// if we looped through the whole remaining polygon and can't find any more ears
if(ear===stop){// try filtering points and slicing again
if(!pass){earcutLinked(filterPoints(ear),triangles,dim,minX,minY,invSize,1);// if this didn't work, try curing all small self-intersections locally
}else if(pass===1){ear=cureLocalIntersections(filterPoints(ear),triangles,dim);earcutLinked(ear,triangles,dim,minX,minY,invSize,2);// as a last resort, try splitting the remaining polygon into two
}else if(pass===2){splitEarcut(ear,triangles,dim,minX,minY,invSize);}break;}}}// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// now make sure we don't have other points inside the potential ear
var p=ear.next.next;while(p!==ear.prev){if(pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.next;}return true;}function isEarHashed(ear,minX,minY,invSize){var a=ear.prev,b=ear,c=ear.next;if(area(a,b,c)>=0)return false;// reflex, can't be an ear
// triangle bbox; min & max are calculated like this for speed
var minTX=a.x<b.x?a.x<c.x?a.x:c.x:b.x<c.x?b.x:c.x,minTY=a.y<b.y?a.y<c.y?a.y:c.y:b.y<c.y?b.y:c.y,maxTX=a.x>b.x?a.x>c.x?a.x:c.x:b.x>c.x?b.x:c.x,maxTY=a.y>b.y?a.y>c.y?a.y:c.y:b.y>c.y?b.y:c.y;// z-order range for the current triangle bbox;
var minZ=zOrder(minTX,minTY,minX,minY,invSize),maxZ=zOrder(maxTX,maxTY,minX,minY,invSize);var p=ear.prevZ,n=ear.nextZ;// look for points inside the triangle in both directions
while(p&&p.z>=minZ&&n&&n.z<=maxZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}// look for remaining points in decreasing z-order
while(p&&p.z>=minZ){if(p!==ear.prev&&p!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.prevZ;}// look for remaining points in increasing z-order
while(n&&n.z<=maxZ){if(n!==ear.prev&&n!==ear.next&&pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,n.x,n.y)&&area(n.prev,n,n.next)>=0)return false;n=n.nextZ;}return true;}// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start,triangles,dim){var p=start;do{var a=p.prev,b=p.next.next;if(!equals(a,b)&&intersects(a,p,p.next,b)&&locallyInside(a,b)&&locallyInside(b,a)){triangles.push(a.i/dim);triangles.push(p.i/dim);triangles.push(b.i/dim);// remove two nodes involved
removeNode(p);removeNode(p.next);p=start=b;}p=p.next;}while(p!==start);return filterPoints(p);}// try splitting polygon into two and triangulate them independently
function splitEarcut(start,triangles,dim,minX,minY,invSize){// look for a valid diagonal that divides the polygon into two
var a=start;do{var b=a.next.next;while(b!==a.prev){if(a.i!==b.i&&isValidDiagonal(a,b)){// split the polygon in two by the diagonal
var c=splitPolygon(a,b);// filter colinear points around the cuts
a=filterPoints(a,a.next);c=filterPoints(c,c.next);// run earcut on each half
earcutLinked(a,triangles,dim,minX,minY,invSize);earcutLinked(c,triangles,dim,minX,minY,invSize);return;}b=b.next;}a=a.next;}while(a!==start);}// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data,holeIndices,outerNode,dim){var queue=[];var i,len,start,end,list;for(i=0,len=holeIndices.length;i<len;i++){start=holeIndices[i]*dim;end=i<len-1?holeIndices[i+1]*dim:data.length;list=linkedList(data,start,end,dim,false);if(list===list.next)list.steiner=true;queue.push(getLeftmost(list));}queue.sort(compareX);// process holes from left to right
for(i=0;i<queue.length;i++){eliminateHole(queue[i],outerNode);outerNode=filterPoints(outerNode,outerNode.next);}return outerNode;}function compareX(a,b){return a.x-b.x;}// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole,outerNode){outerNode=findHoleBridge(hole,outerNode);if(outerNode){var b=splitPolygon(outerNode,hole);// filter collinear points around the cuts
filterPoints(outerNode,outerNode.next);filterPoints(b,b.next);}}// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole,outerNode){var p=outerNode;var hx=hole.x;var hy=hole.y;var qx=-Infinity,m;// find a segment intersected by a ray from the hole's leftmost point to the left;
// segment's endpoint with lesser x will be potential connection point
do{if(hy<=p.y&&hy>=p.next.y&&p.next.y!==p.y){var x=p.x+(hy-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(x<=hx&&x>qx){qx=x;if(x===hx){if(hy===p.y)return p;if(hy===p.next.y)return p.next;}m=p.x<p.next.x?p:p.next;}}p=p.next;}while(p!==outerNode);if(!m)return null;if(hx===qx)return m;// hole touches outer segment; pick leftmost endpoint
// look for points inside the triangle of hole point, segment intersection and endpoint;
// if there are no points found, we have a valid connection;
// otherwise choose the point of the minimum angle with the ray as connection point
var stop=m,mx=m.x,my=m.y;var tanMin=Infinity,tan;p=m;do{if(hx>=p.x&&p.x>=mx&&hx!==p.x&&pointInTriangle(hy<my?hx:qx,hy,mx,my,hy<my?qx:hx,hy,p.x,p.y)){tan=Math.abs(hy-p.y)/(hx-p.x);// tangential
if(locallyInside(p,hole)&&(tan<tanMin||tan===tanMin&&(p.x>m.x||p.x===m.x&&sectorContainsSector(m,p)))){m=p;tanMin=tan;}}p=p.next;}while(p!==stop);return m;}// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector(m,p){return area(m.prev,m,p.prev)<0&&area(p.next,m,m.next)<0;}// interlink polygon nodes in z-order
function indexCurve(start,minX,minY,invSize){var p=start;do{if(p.z===null)p.z=zOrder(p.x,p.y,minX,minY,invSize);p.prevZ=p.prev;p.nextZ=p.next;p=p.next;}while(p!==start);p.prevZ.nextZ=null;p.prevZ=null;sortLinked(p);}// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list){var i,p,q,e,tail,numMerges,pSize,qSize,inSize=1;do{p=list;list=null;tail=null;numMerges=0;while(p){numMerges++;q=p;pSize=0;for(i=0;i<inSize;i++){pSize++;q=q.nextZ;if(!q)break;}qSize=inSize;while(pSize>0||qSize>0&&q){if(pSize!==0&&(qSize===0||!q||p.z<=q.z)){e=p;p=p.nextZ;pSize--;}else {e=q;q=q.nextZ;qSize--;}if(tail)tail.nextZ=e;else list=e;e.prevZ=tail;tail=e;}p=q;}tail.nextZ=null;inSize*=2;}while(numMerges>1);return list;}// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x,y,minX,minY,invSize){// coords are transformed into non-negative 15-bit integer range
x=32767*(x-minX)*invSize;y=32767*(y-minY)*invSize;x=(x|x<<8)&0x00FF00FF;x=(x|x<<4)&0x0F0F0F0F;x=(x|x<<2)&0x33333333;x=(x|x<<1)&0x55555555;y=(y|y<<8)&0x00FF00FF;y=(y|y<<4)&0x0F0F0F0F;y=(y|y<<2)&0x33333333;y=(y|y<<1)&0x55555555;return x|y<<1;}// find the leftmost node of a polygon ring
function getLeftmost(start){var p=start,leftmost=start;do{if(p.x<leftmost.x||p.x===leftmost.x&&p.y<leftmost.y)leftmost=p;p=p.next;}while(p!==start);return leftmost;}// check if a point lies within a convex triangle
function pointInTriangle(ax,ay,bx,by,cx,cy,px,py){return (cx-px)*(ay-py)-(ax-px)*(cy-py)>=0&&(ax-px)*(by-py)-(bx-px)*(ay-py)>=0&&(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;}// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!intersectsPolygon(a,b)&&(// dones't intersect other edges
locallyInside(a,b)&&locallyInside(b,a)&&middleInside(a,b)&&(// locally visible
area(a.prev,a,b.prev)||area(a,b.prev,b))||// does not create opposite-facing sectors
equals(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0);// special zero-length case
}// signed area of a triangle
function area(p,q,r){return (q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);}// check if two points are equal
function equals(p1,p2){return p1.x===p2.x&&p1.y===p2.y;}// check if two segments intersect
function intersects(p1,q1,p2,q2){var o1=sign$3(area(p1,q1,p2));var o2=sign$3(area(p1,q1,q2));var o3=sign$3(area(p2,q2,p1));var o4=sign$3(area(p2,q2,q1));if(o1!==o2&&o3!==o4)return true;// general case
if(o1===0&&onSegment(p1,p2,q1))return true;// p1, q1 and p2 are collinear and p2 lies on p1q1
if(o2===0&&onSegment(p1,q2,q1))return true;// p1, q1 and q2 are collinear and q2 lies on p1q1
if(o3===0&&onSegment(p2,p1,q2))return true;// p2, q2 and p1 are collinear and p1 lies on p2q2
if(o4===0&&onSegment(p2,q1,q2))return true;// p2, q2 and q1 are collinear and q1 lies on p2q2
return false;}// for collinear points p, q, r, check if point q lies on segment pr
function onSegment(p,q,r){return q.x<=Math.max(p.x,r.x)&&q.x>=Math.min(p.x,r.x)&&q.y<=Math.max(p.y,r.y)&&q.y>=Math.min(p.y,r.y);}function sign$3(num){return num>0?1:num<0?-1:0;}// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a,b){var p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&intersects(p,p.next,a,b))return true;p=p.next;}while(p!==a);return false;}// check if a polygon diagonal is locally inside the polygon
function locallyInside(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0;}// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a,b){var p=a,inside=false;var px=(a.x+b.x)/2,py=(a.y+b.y)/2;do{if(p.y>py!==p.next.y>py&&p.next.y!==p.y&&px<(p.next.x-p.x)*(py-p.y)/(p.next.y-p.y)+p.x)inside=!inside;p=p.next;}while(p!==a);return inside;}// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a,b){var a2=new Node$1(a.i,a.x,a.y),b2=new Node$1(b.i,b.x,b.y),an=a.next,bp=b.prev;a.next=b;b.prev=a;a2.next=an;an.prev=a2;b2.next=a2;a2.prev=b2;bp.next=b2;b2.prev=bp;return b2;}// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i,x,y,last){var p=new Node$1(i,x,y);if(!last){p.prev=p;p.next=p;}else {p.next=last.next;p.prev=last;last.next.prev=p;last.next=p;}return p;}function removeNode(p){p.next.prev=p.prev;p.prev.next=p.next;if(p.prevZ)p.prevZ.nextZ=p.nextZ;if(p.nextZ)p.nextZ.prevZ=p.prevZ;}function Node$1(i,x,y){// vertex index in coordinates array
this.i=i;// vertex coordinates
this.x=x;this.y=y;// previous and next vertex nodes in a polygon ring
this.prev=null;this.next=null;// z-order curve value
this.z=null;// previous and next nodes in z-order
this.prevZ=null;this.nextZ=null;// indicates whether this is a steiner point
this.steiner=false;}function signedArea(data,start,end,dim){var sum=0;for(var _i211=start,j=end-dim;_i211<end;_i211+=dim){sum+=(data[j]-data[_i211])*(data[_i211+1]+data[j+1]);j=_i211;}return sum;}var ShapeUtils=/*#__PURE__*/function(){function ShapeUtils(){_classCallCheck(this,ShapeUtils);}_createClass(ShapeUtils,null,[{key:"area",value:// calculate area of the contour polygon
function area(contour){var n=contour.length;var a=0.0;for(var p=n-1,q=0;q<n;p=q++){a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;}return a*0.5;}},{key:"isClockWise",value:function isClockWise(pts){return ShapeUtils.area(pts)<0;}},{key:"triangulateShape",value:function triangulateShape(contour,holes){var vertices=[];// flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
var holeIndices=[];// array of hole indices
var faces=[];// final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
removeDupEndPts(contour);addContour(vertices,contour);//
var holeIndex=contour.length;holes.forEach(removeDupEndPts);for(var _i212=0;_i212<holes.length;_i212++){holeIndices.push(holeIndex);holeIndex+=holes[_i212].length;addContour(vertices,holes[_i212]);}//
var triangles=Earcut.triangulate(vertices,holeIndices);//
for(var _i213=0;_i213<triangles.length;_i213+=3){faces.push(triangles.slice(_i213,_i213+3));}return faces;}}]);return ShapeUtils;}();function removeDupEndPts(points){var l=points.length;if(l>2&&points[l-1].equals(points[0])){points.pop();}}function addContour(vertices,contour){for(var _i214=0;_i214<contour.length;_i214++){vertices.push(contour[_i214].x);vertices.push(contour[_i214].y);}}/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */var ExtrudeGeometry=/*#__PURE__*/function(_BufferGeometry7){_inherits(ExtrudeGeometry,_BufferGeometry7);var _super77=_createSuper(ExtrudeGeometry);function ExtrudeGeometry(){var _this67;var shapes=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Shape([new Vector2(0.5,0.5),new Vector2(-0.5,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]);var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,ExtrudeGeometry);_this67=_super77.call(this);_this67.type='ExtrudeGeometry';_this67.parameters={shapes:shapes,options:options};shapes=Array.isArray(shapes)?shapes:[shapes];var scope=_assertThisInitialized(_this67);var verticesArray=[];var uvArray=[];for(var _i215=0,l=shapes.length;_i215<l;_i215++){var shape=shapes[_i215];addShape(shape);}// build geometry
_this67.setAttribute('position',new Float32BufferAttribute(verticesArray,3));_this67.setAttribute('uv',new Float32BufferAttribute(uvArray,2));_this67.computeVertexNormals();// functions
function addShape(shape){var placeholder=[];// options
var curveSegments=options.curveSegments!==undefined?options.curveSegments:12;var steps=options.steps!==undefined?options.steps:1;var depth=options.depth!==undefined?options.depth:1;var bevelEnabled=options.bevelEnabled!==undefined?options.bevelEnabled:true;var bevelThickness=options.bevelThickness!==undefined?options.bevelThickness:0.2;var bevelSize=options.bevelSize!==undefined?options.bevelSize:bevelThickness-0.1;var bevelOffset=options.bevelOffset!==undefined?options.bevelOffset:0;var bevelSegments=options.bevelSegments!==undefined?options.bevelSegments:3;var extrudePath=options.extrudePath;var uvgen=options.UVGenerator!==undefined?options.UVGenerator:WorldUVGenerator;// deprecated options
if(options.amount!==undefined){console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');depth=options.amount;}//
var extrudePts,extrudeByPath=false;var splineTube,binormal,normal,position2;if(extrudePath){extrudePts=extrudePath.getSpacedPoints(steps);extrudeByPath=true;bevelEnabled=false;// bevels not supported for path extrusion
// SETUP TNB variables
// TODO1 - have a .isClosed in spline?
splineTube=extrudePath.computeFrenetFrames(steps,false);// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
binormal=new Vector3();normal=new Vector3();position2=new Vector3();}// Safeguards if bevels are not enabled
if(!bevelEnabled){bevelSegments=0;bevelThickness=0;bevelSize=0;bevelOffset=0;}// Variables initialization
var shapePoints=shape.extractPoints(curveSegments);var vertices=shapePoints.shape;var holes=shapePoints.holes;var reverse=!ShapeUtils.isClockWise(vertices);if(reverse){vertices=vertices.reverse();// Maybe we should also check if holes are in the opposite direction, just to be safe ...
for(var h=0,hl=holes.length;h<hl;h++){var ahole=holes[h];if(ShapeUtils.isClockWise(ahole)){holes[h]=ahole.reverse();}}}var faces=ShapeUtils.triangulateShape(vertices,holes);/* Vertices */var contour=vertices;// vertices has all points but contour has only points of circumference
for(var _h=0,_hl=holes.length;_h<_hl;_h++){var _ahole=holes[_h];vertices=vertices.concat(_ahole);}function scalePt2(pt,vec,size){if(!vec)console.error('THREE.ExtrudeGeometry: vec does not exist');return vec.clone().multiplyScalar(size).add(pt);}var vlen=vertices.length,flen=faces.length;// Find directions for point movement
function getBevelVec(inPt,inPrev,inNext){// computes for inPt the corresponding point inPt' on a new contour
//   shifted by 1 unit (length of normalized vector) to the left
// if we walk along contour clockwise, this new contour is outside the old one
//
// inPt' is the intersection of the two lines parallel to the two
//  adjacent edges of inPt at a distance of 1 unit on the left side.
var v_trans_x,v_trans_y,shrink_by;// resulting translation vector for inPt
// good reading for geometry algorithms (here: line-line intersection)
// http://geomalgorithms.com/a05-_intersect-1.html
var v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y;var v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y;var v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y;// check for collinear edges
var collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){// not collinear
// length of vectors for normalizing
var v_prev_len=Math.sqrt(v_prev_lensq);var v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y);// shift adjacent points by unit vectors to the left
var ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len;var ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len;var ptNextShift_x=inNext.x-v_next_y/v_next_len;var ptNextShift_y=inNext.y+v_next_x/v_next_len;// scaling factor for v_prev to intersection point
var sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);// vector from inPt to intersection point
v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x;v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;// Don't normalize!, otherwise sharp corners become ugly
//  but prevent crazy spikes
var v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(v_trans_lensq<=2){return new Vector2(v_trans_x,v_trans_y);}else {shrink_by=Math.sqrt(v_trans_lensq/2);}}else {// handle special case of collinear edges
var direction_eq=false;// assumes: opposite
if(v_prev_x>Number.EPSILON){if(v_next_x>Number.EPSILON){direction_eq=true;}}else {if(v_prev_x<-Number.EPSILON){if(v_next_x<-Number.EPSILON){direction_eq=true;}}else {if(Math.sign(v_prev_y)===Math.sign(v_next_y)){direction_eq=true;}}}if(direction_eq){// console.log("Warning: lines are a straight sequence");
v_trans_x=-v_prev_y;v_trans_y=v_prev_x;shrink_by=Math.sqrt(v_prev_lensq);}else {// console.log("Warning: lines are a straight spike");
v_trans_x=v_prev_x;v_trans_y=v_prev_y;shrink_by=Math.sqrt(v_prev_lensq/2);}}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by);}var contourMovements=[];for(var _i216=0,il=contour.length,j=il-1,k=_i216+1;_i216<il;_i216++,j++,k++){if(j===il)j=0;if(k===il)k=0;//  (j)---(i)---(k)
// console.log('i,j,k', i, j , k)
contourMovements[_i216]=getBevelVec(contour[_i216],contour[j],contour[k]);}var holesMovements=[];var oneHoleMovements,verticesMovements=contourMovements.concat();for(var _h2=0,_hl2=holes.length;_h2<_hl2;_h2++){var _ahole2=holes[_h2];oneHoleMovements=[];for(var _i217=0,_il13=_ahole2.length,_j6=_il13-1,_k=_i217+1;_i217<_il13;_i217++,_j6++,_k++){if(_j6===_il13)_j6=0;if(_k===_il13)_k=0;//  (j)---(i)---(k)
oneHoleMovements[_i217]=getBevelVec(_ahole2[_i217],_ahole2[_j6],_ahole2[_k]);}holesMovements.push(oneHoleMovements);verticesMovements=verticesMovements.concat(oneHoleMovements);}// Loop bevelSegments, 1 for the front, 1 for the back
for(var b=0;b<bevelSegments;b++){//for ( b = bevelSegments; b > 0; b -- ) {
var t=b/bevelSegments;var z=bevelThickness*Math.cos(t*Math.PI/2);var _bs=bevelSize*Math.sin(t*Math.PI/2)+bevelOffset;// contract shape
for(var _i218=0,_il14=contour.length;_i218<_il14;_i218++){var vert=scalePt2(contour[_i218],contourMovements[_i218],_bs);v(vert.x,vert.y,-z);}// expand holes
for(var _h3=0,_hl3=holes.length;_h3<_hl3;_h3++){var _ahole3=holes[_h3];oneHoleMovements=holesMovements[_h3];for(var _i219=0,_il15=_ahole3.length;_i219<_il15;_i219++){var _vert=scalePt2(_ahole3[_i219],oneHoleMovements[_i219],_bs);v(_vert.x,_vert.y,-z);}}}var bs=bevelSize+bevelOffset;// Back facing vertices
for(var _i220=0;_i220<vlen;_i220++){var _vert2=bevelEnabled?scalePt2(vertices[_i220],verticesMovements[_i220],bs):vertices[_i220];if(!extrudeByPath){v(_vert2.x,_vert2.y,0);}else {// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
normal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);binormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);position2.copy(extrudePts[0]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}// Add stepped vertices...
// Including front facing vertices
for(var s=1;s<=steps;s++){for(var _i221=0;_i221<vlen;_i221++){var _vert3=bevelEnabled?scalePt2(vertices[_i221],verticesMovements[_i221],bs):vertices[_i221];if(!extrudeByPath){v(_vert3.x,_vert3.y,depth/steps*s);}else {// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
normal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);binormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);position2.copy(extrudePts[s]).add(normal).add(binormal);v(position2.x,position2.y,position2.z);}}}// Add bevel segments planes
//for ( b = 1; b <= bevelSegments; b ++ ) {
for(var _b5=bevelSegments-1;_b5>=0;_b5--){var _t=_b5/bevelSegments;var _z2=bevelThickness*Math.cos(_t*Math.PI/2);var _bs2=bevelSize*Math.sin(_t*Math.PI/2)+bevelOffset;// contract shape
for(var _i222=0,_il16=contour.length;_i222<_il16;_i222++){var _vert4=scalePt2(contour[_i222],contourMovements[_i222],_bs2);v(_vert4.x,_vert4.y,depth+_z2);}// expand holes
for(var _h4=0,_hl4=holes.length;_h4<_hl4;_h4++){var _ahole4=holes[_h4];oneHoleMovements=holesMovements[_h4];for(var _i223=0,_il17=_ahole4.length;_i223<_il17;_i223++){var _vert5=scalePt2(_ahole4[_i223],oneHoleMovements[_i223],_bs2);if(!extrudeByPath){v(_vert5.x,_vert5.y,depth+_z2);}else {v(_vert5.x,_vert5.y+extrudePts[steps-1].y,extrudePts[steps-1].x+_z2);}}}}/* Faces */ // Top and bottom faces
buildLidFaces();// Sides faces
buildSideFaces();/////  Internal functions
function buildLidFaces(){var start=verticesArray.length/3;if(bevelEnabled){var layer=0;// steps + 1
var offset=vlen*layer;// Bottom faces
for(var _i224=0;_i224<flen;_i224++){var face=faces[_i224];f3(face[2]+offset,face[1]+offset,face[0]+offset);}layer=steps+bevelSegments*2;offset=vlen*layer;// Top faces
for(var _i225=0;_i225<flen;_i225++){var _face=faces[_i225];f3(_face[0]+offset,_face[1]+offset,_face[2]+offset);}}else {// Bottom faces
for(var _i226=0;_i226<flen;_i226++){var _face2=faces[_i226];f3(_face2[2],_face2[1],_face2[0]);}// Top faces
for(var _i227=0;_i227<flen;_i227++){var _face3=faces[_i227];f3(_face3[0]+vlen*steps,_face3[1]+vlen*steps,_face3[2]+vlen*steps);}}scope.addGroup(start,verticesArray.length/3-start,0);}// Create faces for the z-sides of the shape
function buildSideFaces(){var start=verticesArray.length/3;var layeroffset=0;sidewalls(contour,layeroffset);layeroffset+=contour.length;for(var _h5=0,_hl5=holes.length;_h5<_hl5;_h5++){var _ahole5=holes[_h5];sidewalls(_ahole5,layeroffset);//, true
layeroffset+=_ahole5.length;}scope.addGroup(start,verticesArray.length/3-start,1);}function sidewalls(contour,layeroffset){var i=contour.length;while(--i>=0){var _j7=i;var _k2=i-1;if(_k2<0)_k2=contour.length-1;//console.log('b', i,j, i-1, k,vertices.length);
for(var _s4=0,sl=steps+bevelSegments*2;_s4<sl;_s4++){var slen1=vlen*_s4;var slen2=vlen*(_s4+1);var a=layeroffset+_j7+slen1,_b6=layeroffset+_k2+slen1,c=layeroffset+_k2+slen2,d=layeroffset+_j7+slen2;f4(a,_b6,c,d);}}}function v(x,y,z){placeholder.push(x);placeholder.push(y);placeholder.push(z);}function f3(a,b,c){addVertex(a);addVertex(b);addVertex(c);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[2]);}function f4(a,b,c,d){addVertex(a);addVertex(b);addVertex(d);addVertex(b);addVertex(c);addVertex(d);var nextIndex=verticesArray.length/3;var uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]);addUV(uvs[1]);addUV(uvs[3]);addUV(uvs[1]);addUV(uvs[2]);addUV(uvs[3]);}function addVertex(index){verticesArray.push(placeholder[index*3+0]);verticesArray.push(placeholder[index*3+1]);verticesArray.push(placeholder[index*3+2]);}function addUV(vector2){uvArray.push(vector2.x);uvArray.push(vector2.y);}}return _this67;}_createClass(ExtrudeGeometry,[{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(ExtrudeGeometry.prototype),"toJSON",this).call(this);var shapes=this.parameters.shapes;var options=this.parameters.options;return toJSON$1(shapes,options,data);}}],[{key:"fromJSON",value:function fromJSON(data,shapes){var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}var extrudePath=data.options.extrudePath;if(extrudePath!==undefined){data.options.extrudePath=new Curves[extrudePath.type]().fromJSON(extrudePath);}return new ExtrudeGeometry(geometryShapes,data.options);}}]);return ExtrudeGeometry;}(BufferGeometry);var WorldUVGenerator={generateTopUV:function generateTopUV(geometry,vertices,indexA,indexB,indexC){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];return [new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)];},generateSideWallUV:function generateSideWallUV(geometry,vertices,indexA,indexB,indexC,indexD){var a_x=vertices[indexA*3];var a_y=vertices[indexA*3+1];var a_z=vertices[indexA*3+2];var b_x=vertices[indexB*3];var b_y=vertices[indexB*3+1];var b_z=vertices[indexB*3+2];var c_x=vertices[indexC*3];var c_y=vertices[indexC*3+1];var c_z=vertices[indexC*3+2];var d_x=vertices[indexD*3];var d_y=vertices[indexD*3+1];var d_z=vertices[indexD*3+2];if(Math.abs(a_y-b_y)<Math.abs(a_x-b_x)){return [new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)];}else {return [new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)];}}};function toJSON$1(shapes,options,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i228=0,l=shapes.length;_i228<l;_i228++){var shape=shapes[_i228];data.shapes.push(shape.uuid);}}else {data.shapes.push(shapes.uuid);}if(options.extrudePath!==undefined)data.options.extrudePath=options.extrudePath.toJSON();return data;}var ShapeGeometry=/*#__PURE__*/function(_BufferGeometry10){_inherits(ShapeGeometry,_BufferGeometry10);var _super82=_createSuper(ShapeGeometry);function ShapeGeometry(){var _this72;var shapes=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Shape([new Vector2(0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)]);var curveSegments=arguments.length>1&&arguments[1]!==undefined?arguments[1]:12;_classCallCheck(this,ShapeGeometry);_this72=_super82.call(this);_this72.type='ShapeGeometry';_this72.parameters={shapes:shapes,curveSegments:curveSegments};// buffers
var indices=[];var vertices=[];var normals=[];var uvs=[];// helper variables
var groupStart=0;var groupCount=0;// allow single and array values for "shapes" parameter
if(Array.isArray(shapes)===false){addShape(shapes);}else {for(var _i233=0;_i233<shapes.length;_i233++){addShape(shapes[_i233]);_this72.addGroup(groupStart,groupCount,_i233);// enables MultiMaterial support
groupStart+=groupCount;groupCount=0;}}// build geometry
_this72.setIndex(indices);_this72.setAttribute('position',new Float32BufferAttribute(vertices,3));_this72.setAttribute('normal',new Float32BufferAttribute(normals,3));_this72.setAttribute('uv',new Float32BufferAttribute(uvs,2));// helper functions
function addShape(shape){var indexOffset=vertices.length/3;var points=shape.extractPoints(curveSegments);var shapeVertices=points.shape;var shapeHoles=points.holes;// check direction of vertices
if(ShapeUtils.isClockWise(shapeVertices)===false){shapeVertices=shapeVertices.reverse();}for(var _i234=0,l=shapeHoles.length;_i234<l;_i234++){var shapeHole=shapeHoles[_i234];if(ShapeUtils.isClockWise(shapeHole)===true){shapeHoles[_i234]=shapeHole.reverse();}}var faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);// join vertices of inner and outer paths to a single array
for(var _i235=0,_l8=shapeHoles.length;_i235<_l8;_i235++){var _shapeHole=shapeHoles[_i235];shapeVertices=shapeVertices.concat(_shapeHole);}// vertices, normals, uvs
for(var _i236=0,_l9=shapeVertices.length;_i236<_l9;_i236++){var _vertex=shapeVertices[_i236];vertices.push(_vertex.x,_vertex.y,0);normals.push(0,0,1);uvs.push(_vertex.x,_vertex.y);// world uvs
}// incides
for(var _i237=0,_l10=faces.length;_i237<_l10;_i237++){var face=faces[_i237];var a=face[0]+indexOffset;var b=face[1]+indexOffset;var c=face[2]+indexOffset;indices.push(a,b,c);groupCount+=3;}}return _this72;}_createClass(ShapeGeometry,[{key:"toJSON",value:function toJSON(){var data=_get(_getPrototypeOf(ShapeGeometry.prototype),"toJSON",this).call(this);var shapes=this.parameters.shapes;return _toJSON(shapes,data);}}],[{key:"fromJSON",value:function fromJSON(data,shapes){var geometryShapes=[];for(var j=0,jl=data.shapes.length;j<jl;j++){var shape=shapes[data.shapes[j]];geometryShapes.push(shape);}return new ShapeGeometry(geometryShapes,data.curveSegments);}}]);return ShapeGeometry;}(BufferGeometry);function _toJSON(shapes,data){data.shapes=[];if(Array.isArray(shapes)){for(var _i238=0,l=shapes.length;_i238<l;_i238++){var shape=shapes[_i238];data.shapes.push(shape.uuid);}}else {data.shapes.push(shapes.uuid);}return data;}/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */var ShadowMaterial=/*#__PURE__*/function(_Material8){_inherits(ShadowMaterial,_Material8);var _super89=_createSuper(ShadowMaterial);function ShadowMaterial(parameters){var _this79;_classCallCheck(this,ShadowMaterial);_this79=_super89.call(this);_this79.type='ShadowMaterial';_this79.color=new Color(0x000000);_this79.transparent=true;_this79.setValues(parameters);return _this79;}_createClass(ShadowMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(ShadowMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);return this;}}]);return ShadowMaterial;}(Material);ShadowMaterial.prototype.isShadowMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */var MeshStandardMaterial=/*#__PURE__*/function(_Material9){_inherits(MeshStandardMaterial,_Material9);var _super90=_createSuper(MeshStandardMaterial);function MeshStandardMaterial(parameters){var _this80;_classCallCheck(this,MeshStandardMaterial);_this80=_super90.call(this);_this80.defines={'STANDARD':''};_this80.type='MeshStandardMaterial';_this80.color=new Color(0xffffff);// diffuse
_this80.roughness=1.0;_this80.metalness=0.0;_this80.map=null;_this80.lightMap=null;_this80.lightMapIntensity=1.0;_this80.aoMap=null;_this80.aoMapIntensity=1.0;_this80.emissive=new Color(0x000000);_this80.emissiveIntensity=1.0;_this80.emissiveMap=null;_this80.bumpMap=null;_this80.bumpScale=1;_this80.normalMap=null;_this80.normalMapType=TangentSpaceNormalMap;_this80.normalScale=new Vector2(1,1);_this80.displacementMap=null;_this80.displacementScale=1;_this80.displacementBias=0;_this80.roughnessMap=null;_this80.metalnessMap=null;_this80.alphaMap=null;_this80.envMap=null;_this80.envMapIntensity=1.0;_this80.refractionRatio=0.98;_this80.wireframe=false;_this80.wireframeLinewidth=1;_this80.wireframeLinecap='round';_this80.wireframeLinejoin='round';_this80.flatShading=false;_this80.setValues(parameters);return _this80;}_createClass(MeshStandardMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshStandardMaterial.prototype),"copy",this).call(this,source);this.defines={'STANDARD':''};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;return this;}}]);return MeshStandardMaterial;}(Material);MeshStandardMaterial.prototype.isMeshStandardMaterial=true;/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */var MeshPhysicalMaterial=/*#__PURE__*/function(_MeshStandardMaterial){_inherits(MeshPhysicalMaterial,_MeshStandardMaterial);var _super91=_createSuper(MeshPhysicalMaterial);function MeshPhysicalMaterial(parameters){var _this81;_classCallCheck(this,MeshPhysicalMaterial);_this81=_super91.call(this);_this81.defines={'STANDARD':'','PHYSICAL':''};_this81.type='MeshPhysicalMaterial';_this81.clearcoatMap=null;_this81.clearcoatRoughness=0.0;_this81.clearcoatRoughnessMap=null;_this81.clearcoatNormalScale=new Vector2(1,1);_this81.clearcoatNormalMap=null;_this81.ior=1.5;Object.defineProperty(_assertThisInitialized(_this81),'reflectivity',{get:function get(){return clamp$1(2.5*(this.ior-1)/(this.ior+1),0,1);},set:function set(reflectivity){this.ior=(1+0.4*reflectivity)/(1-0.4*reflectivity);}});_this81.sheenColor=new Color(0x000000);_this81.sheenColorMap=null;_this81.sheenRoughness=1.0;_this81.sheenRoughnessMap=null;_this81.transmissionMap=null;_this81.thickness=0;_this81.thicknessMap=null;_this81.attenuationDistance=0.0;_this81.attenuationColor=new Color(1,1,1);_this81.specularIntensity=1.0;_this81.specularIntensityMap=null;_this81.specularColor=new Color(1,1,1);_this81.specularColorMap=null;_this81._sheen=0.0;_this81._clearcoat=0;_this81._transmission=0;_this81.setValues(parameters);return _this81;}_createClass(MeshPhysicalMaterial,[{key:"sheen",get:function get(){return this._sheen;},set:function set(value){if(this._sheen>0!==value>0){this.version++;}this._sheen=value;}},{key:"clearcoat",get:function get(){return this._clearcoat;},set:function set(value){if(this._clearcoat>0!==value>0){this.version++;}this._clearcoat=value;}},{key:"transmission",get:function get(){return this._transmission;},set:function set(value){if(this._transmission>0!==value>0){this.version++;}this._transmission=value;}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshPhysicalMaterial.prototype),"copy",this).call(this,source);this.defines={'STANDARD':'','PHYSICAL':''};this.clearcoat=source.clearcoat;this.clearcoatMap=source.clearcoatMap;this.clearcoatRoughness=source.clearcoatRoughness;this.clearcoatRoughnessMap=source.clearcoatRoughnessMap;this.clearcoatNormalMap=source.clearcoatNormalMap;this.clearcoatNormalScale.copy(source.clearcoatNormalScale);this.ior=source.ior;this.sheen=source.sheen;this.sheenColor.copy(source.sheenColor);this.sheenColorMap=source.sheenColorMap;this.sheenRoughness=source.sheenRoughness;this.sheenRoughnessMap=source.sheenRoughnessMap;this.transmission=source.transmission;this.transmissionMap=source.transmissionMap;this.thickness=source.thickness;this.thicknessMap=source.thicknessMap;this.attenuationDistance=source.attenuationDistance;this.attenuationColor.copy(source.attenuationColor);this.specularIntensity=source.specularIntensity;this.specularIntensityMap=source.specularIntensityMap;this.specularColor.copy(source.specularColor);this.specularColorMap=source.specularColorMap;return this;}}]);return MeshPhysicalMaterial;}(MeshStandardMaterial);MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */var MeshPhongMaterial=/*#__PURE__*/function(_Material10){_inherits(MeshPhongMaterial,_Material10);var _super92=_createSuper(MeshPhongMaterial);function MeshPhongMaterial(parameters){var _this82;_classCallCheck(this,MeshPhongMaterial);_this82=_super92.call(this);_this82.type='MeshPhongMaterial';_this82.color=new Color(0xffffff);// diffuse
_this82.specular=new Color(0x111111);_this82.shininess=30;_this82.map=null;_this82.lightMap=null;_this82.lightMapIntensity=1.0;_this82.aoMap=null;_this82.aoMapIntensity=1.0;_this82.emissive=new Color(0x000000);_this82.emissiveIntensity=1.0;_this82.emissiveMap=null;_this82.bumpMap=null;_this82.bumpScale=1;_this82.normalMap=null;_this82.normalMapType=TangentSpaceNormalMap;_this82.normalScale=new Vector2(1,1);_this82.displacementMap=null;_this82.displacementScale=1;_this82.displacementBias=0;_this82.specularMap=null;_this82.alphaMap=null;_this82.envMap=null;_this82.combine=MultiplyOperation;_this82.reflectivity=1;_this82.refractionRatio=0.98;_this82.wireframe=false;_this82.wireframeLinewidth=1;_this82.wireframeLinecap='round';_this82.wireframeLinejoin='round';_this82.flatShading=false;_this82.setValues(parameters);return _this82;}_createClass(MeshPhongMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshPhongMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.flatShading=source.flatShading;return this;}}]);return MeshPhongMaterial;}(Material);MeshPhongMaterial.prototype.isMeshPhongMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */var MeshToonMaterial=/*#__PURE__*/function(_Material11){_inherits(MeshToonMaterial,_Material11);var _super93=_createSuper(MeshToonMaterial);function MeshToonMaterial(parameters){var _this83;_classCallCheck(this,MeshToonMaterial);_this83=_super93.call(this);_this83.defines={'TOON':''};_this83.type='MeshToonMaterial';_this83.color=new Color(0xffffff);_this83.map=null;_this83.gradientMap=null;_this83.lightMap=null;_this83.lightMapIntensity=1.0;_this83.aoMap=null;_this83.aoMapIntensity=1.0;_this83.emissive=new Color(0x000000);_this83.emissiveIntensity=1.0;_this83.emissiveMap=null;_this83.bumpMap=null;_this83.bumpScale=1;_this83.normalMap=null;_this83.normalMapType=TangentSpaceNormalMap;_this83.normalScale=new Vector2(1,1);_this83.displacementMap=null;_this83.displacementScale=1;_this83.displacementBias=0;_this83.alphaMap=null;_this83.wireframe=false;_this83.wireframeLinewidth=1;_this83.wireframeLinecap='round';_this83.wireframeLinejoin='round';_this83.setValues(parameters);return _this83;}_createClass(MeshToonMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshToonMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.map=source.map;this.gradientMap=source.gradientMap;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}]);return MeshToonMaterial;}(Material);MeshToonMaterial.prototype.isMeshToonMaterial=true;/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */var MeshNormalMaterial=/*#__PURE__*/function(_Material12){_inherits(MeshNormalMaterial,_Material12);var _super94=_createSuper(MeshNormalMaterial);function MeshNormalMaterial(parameters){var _this84;_classCallCheck(this,MeshNormalMaterial);_this84=_super94.call(this);_this84.type='MeshNormalMaterial';_this84.bumpMap=null;_this84.bumpScale=1;_this84.normalMap=null;_this84.normalMapType=TangentSpaceNormalMap;_this84.normalScale=new Vector2(1,1);_this84.displacementMap=null;_this84.displacementScale=1;_this84.displacementBias=0;_this84.wireframe=false;_this84.wireframeLinewidth=1;_this84.fog=false;_this84.flatShading=false;_this84.setValues(parameters);return _this84;}_createClass(MeshNormalMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshNormalMaterial.prototype),"copy",this).call(this,source);this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.flatShading=source.flatShading;return this;}}]);return MeshNormalMaterial;}(Material);MeshNormalMaterial.prototype.isMeshNormalMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */var MeshLambertMaterial=/*#__PURE__*/function(_Material13){_inherits(MeshLambertMaterial,_Material13);var _super95=_createSuper(MeshLambertMaterial);function MeshLambertMaterial(parameters){var _this85;_classCallCheck(this,MeshLambertMaterial);_this85=_super95.call(this);_this85.type='MeshLambertMaterial';_this85.color=new Color(0xffffff);// diffuse
_this85.map=null;_this85.lightMap=null;_this85.lightMapIntensity=1.0;_this85.aoMap=null;_this85.aoMapIntensity=1.0;_this85.emissive=new Color(0x000000);_this85.emissiveIntensity=1.0;_this85.emissiveMap=null;_this85.specularMap=null;_this85.alphaMap=null;_this85.envMap=null;_this85.combine=MultiplyOperation;_this85.reflectivity=1;_this85.refractionRatio=0.98;_this85.wireframe=false;_this85.wireframeLinewidth=1;_this85.wireframeLinecap='round';_this85.wireframeLinejoin='round';_this85.setValues(parameters);return _this85;}_createClass(MeshLambertMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshLambertMaterial.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;return this;}}]);return MeshLambertMaterial;}(Material);MeshLambertMaterial.prototype.isMeshLambertMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */var MeshMatcapMaterial=/*#__PURE__*/function(_Material14){_inherits(MeshMatcapMaterial,_Material14);var _super96=_createSuper(MeshMatcapMaterial);function MeshMatcapMaterial(parameters){var _this86;_classCallCheck(this,MeshMatcapMaterial);_this86=_super96.call(this);_this86.defines={'MATCAP':''};_this86.type='MeshMatcapMaterial';_this86.color=new Color(0xffffff);// diffuse
_this86.matcap=null;_this86.map=null;_this86.bumpMap=null;_this86.bumpScale=1;_this86.normalMap=null;_this86.normalMapType=TangentSpaceNormalMap;_this86.normalScale=new Vector2(1,1);_this86.displacementMap=null;_this86.displacementScale=1;_this86.displacementBias=0;_this86.alphaMap=null;_this86.flatShading=false;_this86.setValues(parameters);return _this86;}_createClass(MeshMatcapMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(MeshMatcapMaterial.prototype),"copy",this).call(this,source);this.defines={'MATCAP':''};this.color.copy(source.color);this.matcap=source.matcap;this.map=source.map;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalMapType=source.normalMapType;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.alphaMap=source.alphaMap;this.flatShading=source.flatShading;return this;}}]);return MeshMatcapMaterial;}(Material);MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */var LineDashedMaterial=/*#__PURE__*/function(_LineBasicMaterial){_inherits(LineDashedMaterial,_LineBasicMaterial);var _super97=_createSuper(LineDashedMaterial);function LineDashedMaterial(parameters){var _this87;_classCallCheck(this,LineDashedMaterial);_this87=_super97.call(this);_this87.type='LineDashedMaterial';_this87.scale=1;_this87.dashSize=3;_this87.gapSize=1;_this87.setValues(parameters);return _this87;}_createClass(LineDashedMaterial,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(LineDashedMaterial.prototype),"copy",this).call(this,source);this.scale=source.scale;this.dashSize=source.dashSize;this.gapSize=source.gapSize;return this;}}]);return LineDashedMaterial;}(LineBasicMaterial);LineDashedMaterial.prototype.isLineDashedMaterial=true;var AnimationUtils={// same as Array.prototype.slice, but also works on typed arrays
arraySlice:function arraySlice(array,from,to){if(AnimationUtils.isTypedArray(array)){// in ios9 array.subarray(from, undefined) will return empty array
// but array.subarray(from) or array.subarray(from, len) is correct
return new array.constructor(array.subarray(from,to!==undefined?to:array.length));}return array.slice(from,to);},// converts an array to a specific type
convertArray:function convertArray(array,type,forceClone){if(!array||// let 'undefined' and 'null' pass
!forceClone&&array.constructor===type)return array;if(typeof type.BYTES_PER_ELEMENT==='number'){return new type(array);// create typed array
}return Array.prototype.slice.call(array);// create Array
},isTypedArray:function isTypedArray(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView);},// returns an array by which times and values can be sorted
getKeyframeOrder:function getKeyframeOrder(times){function compareTime(i,j){return times[i]-times[j];}var n=times.length;var result=new Array(n);for(var _i248=0;_i248!==n;++_i248)result[_i248]=_i248;result.sort(compareTime);return result;},// uses the array previously returned by 'getKeyframeOrder' to sort data
sortedArray:function sortedArray(values,stride,order){var nValues=values.length;var result=new values.constructor(nValues);for(var _i249=0,dstOffset=0;dstOffset!==nValues;++_i249){var srcOffset=order[_i249]*stride;for(var j=0;j!==stride;++j){result[dstOffset++]=values[srcOffset+j];}}return result;},// function for parsing AOS keyframe formats
flattenJSON:function flattenJSON(jsonKeys,times,values,valuePropertyName){var i=1,key=jsonKeys[0];while(key!==undefined&&key[valuePropertyName]===undefined){key=jsonKeys[i++];}if(key===undefined)return;// no data
var value=key[valuePropertyName];if(value===undefined)return;// no data
if(Array.isArray(value)){do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push.apply(values,value);// push all elements
}key=jsonKeys[i++];}while(key!==undefined);}else if(value.toArray!==undefined){// ...assume THREE.Math-ish
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);value.toArray(values,values.length);}key=jsonKeys[i++];}while(key!==undefined);}else {// otherwise push as-is
do{value=key[valuePropertyName];if(value!==undefined){times.push(key.time);values.push(value);}key=jsonKeys[i++];}while(key!==undefined);}},subclip:function subclip(sourceClip,name,startFrame,endFrame){var fps=arguments.length>4&&arguments[4]!==undefined?arguments[4]:30;var clip=sourceClip.clone();clip.name=name;var tracks=[];for(var _i250=0;_i250<clip.tracks.length;++_i250){var track=clip.tracks[_i250];var valueSize=track.getValueSize();var times=[];var values=[];for(var j=0;j<track.times.length;++j){var frame=track.times[j]*fps;if(frame<startFrame||frame>=endFrame)continue;times.push(track.times[j]);for(var k=0;k<valueSize;++k){values.push(track.values[j*valueSize+k]);}}if(times.length===0)continue;track.times=AnimationUtils.convertArray(times,track.times.constructor);track.values=AnimationUtils.convertArray(values,track.values.constructor);tracks.push(track);}clip.tracks=tracks;// find minimum .times value across all tracks in the trimmed clip
var minStartTime=Infinity;for(var _i251=0;_i251<clip.tracks.length;++_i251){if(minStartTime>clip.tracks[_i251].times[0]){minStartTime=clip.tracks[_i251].times[0];}}// shift all tracks such that clip begins at t=0
for(var _i252=0;_i252<clip.tracks.length;++_i252){clip.tracks[_i252].shift(-1*minStartTime);}clip.resetDuration();return clip;},makeClipAdditive:function makeClipAdditive(targetClip){var referenceFrame=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var referenceClip=arguments.length>2&&arguments[2]!==undefined?arguments[2]:targetClip;var fps=arguments.length>3&&arguments[3]!==undefined?arguments[3]:30;if(fps<=0)fps=30;var numTracks=referenceClip.tracks.length;var referenceTime=referenceFrame/fps;// Make each track's values relative to the values at the reference frame
var _loop=function _loop(){var referenceTrack=referenceClip.tracks[_i253];var referenceTrackType=referenceTrack.ValueTypeName;// Skip this track if it's non-numeric
if(referenceTrackType==='bool'||referenceTrackType==='string')return 0;// continue
// Find the track in the target clip whose name and type matches the reference track
var targetTrack=targetClip.tracks.find(function(track){return track.name===referenceTrack.name&&track.ValueTypeName===referenceTrackType;});if(targetTrack===undefined)return 0;// continue
var referenceOffset=0;var referenceValueSize=referenceTrack.getValueSize();if(referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){referenceOffset=referenceValueSize/3;}var targetOffset=0;var targetValueSize=targetTrack.getValueSize();if(targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){targetOffset=targetValueSize/3;}var lastIndex=referenceTrack.times.length-1;var referenceValue;// Find the value to subtract out of the track
if(referenceTime<=referenceTrack.times[0]){// Reference frame is earlier than the first keyframe, so just use the first keyframe
var startIndex=referenceOffset;var endIndex=referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,startIndex,endIndex);}else if(referenceTime>=referenceTrack.times[lastIndex]){// Reference frame is after the last keyframe, so just use the last keyframe
var _startIndex=lastIndex*referenceValueSize+referenceOffset;var _endIndex=_startIndex+referenceValueSize-referenceOffset;referenceValue=AnimationUtils.arraySlice(referenceTrack.values,_startIndex,_endIndex);}else {// Interpolate to the reference value
var interpolant=referenceTrack.createInterpolant();var _startIndex2=referenceOffset;var _endIndex2=referenceValueSize-referenceOffset;interpolant.evaluate(referenceTime);referenceValue=AnimationUtils.arraySlice(interpolant.resultBuffer,_startIndex2,_endIndex2);}// Conjugate the quaternion
if(referenceTrackType==='quaternion'){var referenceQuat=new Quaternion().fromArray(referenceValue).normalize().conjugate();referenceQuat.toArray(referenceValue);}// Subtract the reference value from all of the track values
var numTimes=targetTrack.times.length;for(var j=0;j<numTimes;++j){var valueStart=j*targetValueSize+targetOffset;if(referenceTrackType==='quaternion'){// Multiply the conjugate for quaternion track types
Quaternion.multiplyQuaternionsFlat(targetTrack.values,valueStart,referenceValue,0,targetTrack.values,valueStart);}else {var valueEnd=targetValueSize-targetOffset*2;// Subtract each value for all other numeric track types
for(var k=0;k<valueEnd;++k){targetTrack.values[valueStart+k]-=referenceValue[k];}}}},_ret;for(var _i253=0;_i253<numTracks;++_i253){_ret=_loop();if(_ret===0)continue;}targetClip.blendMode=AdditiveAnimationBlendMode;return targetClip;}};/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */var Interpolant=/*#__PURE__*/function(){function Interpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){_classCallCheck(this,Interpolant);this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=resultBuffer!==undefined?resultBuffer:new sampleValues.constructor(sampleSize);this.sampleValues=sampleValues;this.valueSize=sampleSize;this.settings=null;this.DefaultSettings_={};}_createClass(Interpolant,[{key:"evaluate",value:function evaluate(t){var pp=this.parameterPositions;var i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{var right;linear_scan:{//- See http://jsperf.com/comparison-to-undefined/3
//- slower code:
//-
//- 				if ( t >= t1 || t1 === undefined ) {
forward_scan:if(!(t<t1)){for(var giveUpAt=i1+2;;){if(t1===undefined){if(t<t0)break forward_scan;// after end
i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t,t0);}if(i1===giveUpAt)break;// this loop
t0=t1;t1=pp[++i1];if(t<t1){// we have arrived at the sought interval
break seek;}}// prepare binary search on the right side of the index
right=pp.length;break linear_scan;}//- slower code:
//-					if ( t < t0 || t0 === undefined ) {
if(!(t>=t0)){// looping?
var t1global=pp[1];if(t<t1global){i1=2;// + 1, using the scan for the details
t0=t1global;}// linear reverse scan
for(var _giveUpAt=i1-2;;){if(t0===undefined){// before start
this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(i1===_giveUpAt)break;// this loop
t1=t0;t0=pp[--i1-1];if(t>=t0){// we have arrived at the sought interval
break seek;}}// prepare binary search on the left side of the index
right=i1;i1=0;break linear_scan;}// the interval is valid
break validate_interval;}// linear scan
// binary search
while(i1<right){var mid=i1+right>>>1;if(t<pp[mid]){right=mid;}else {i1=mid+1;}}t1=pp[i1];t0=pp[i1-1];// check boundary cases, again
if(t0===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,t1);}if(t1===undefined){i1=pp.length;this._cachedIndex=i1;return this.afterEnd_(i1-1,t0,t);}}// seek
this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1);}// validate_interval
return this.interpolate_(i1,t0,t,t1);}},{key:"getSettings_",value:function getSettings_(){return this.settings||this.DefaultSettings_;}},{key:"copySampleValue_",value:function copySampleValue_(index){// copies a sample value to the result buffer
var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride;for(var _i254=0;_i254!==stride;++_i254){result[_i254]=values[offset+_i254];}return result;}// Template methods for derived classes:
},{key:"interpolate_",value:function interpolate_(/* i1, t0, t, t1 */){throw new Error('call to abstract method');// implementations shall return this.resultBuffer
}},{key:"intervalChanged_",value:function intervalChanged_(/* i1, t0, t1 */){// empty
}}]);return Interpolant;}();// ALIAS DEFINITIONS
Interpolant.prototype.beforeStart_=Interpolant.prototype.copySampleValue_;Interpolant.prototype.afterEnd_=Interpolant.prototype.copySampleValue_;/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */var CubicInterpolant=/*#__PURE__*/function(_Interpolant){_inherits(CubicInterpolant,_Interpolant);var _super98=_createSuper(CubicInterpolant);function CubicInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){var _this88;_classCallCheck(this,CubicInterpolant);_this88=_super98.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);_this88._weightPrev=-0;_this88._offsetPrev=-0;_this88._weightNext=-0;_this88._offsetNext=-0;_this88.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};return _this88;}_createClass(CubicInterpolant,[{key:"intervalChanged_",value:function intervalChanged_(i1,t0,t1){var pp=this.parameterPositions;var iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(tPrev===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:// f'(t0) = 0
iPrev=i1;tPrev=2*t0-t1;break;case WrapAroundEnding:// use the other end of the curve
iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:// ZeroCurvatureEnding
// f''(t0) = 0 a.k.a. Natural Spline
iPrev=i1;tPrev=t1;}}if(tNext===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:// f'(tN) = 0
iNext=i1;tNext=2*t1-t0;break;case WrapAroundEnding:// use the other end of the curve
iNext=1;tNext=t1+pp[1]-pp[0];break;default:// ZeroCurvatureEnding
// f''(tN) = 0, a.k.a. Natural Spline
iNext=i1-1;tNext=t0;}}var halfDt=(t1-t0)*0.5,stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev);this._weightNext=halfDt/(tNext-t1);this._offsetPrev=iPrev*stride;this._offsetNext=iNext*stride;}},{key:"interpolate_",value:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p;// evaluate polynomials
var sP=-wP*ppp+2*wP*pp-wP*p;var s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-0.5+wP)*p+1;var s1=(-1-wN)*ppp+(1.5+wN)*pp+0.5*p;var sN=wN*ppp-wN*pp;// combine data linearly
for(var _i255=0;_i255!==stride;++_i255){result[_i255]=sP*values[oP+_i255]+s0*values[o0+_i255]+s1*values[o1+_i255]+sN*values[oN+_i255];}return result;}}]);return CubicInterpolant;}(Interpolant);var LinearInterpolant=/*#__PURE__*/function(_Interpolant2){_inherits(LinearInterpolant,_Interpolant2);var _super99=_createSuper(LinearInterpolant);function LinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){_classCallCheck(this,LinearInterpolant);return _super99.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}_createClass(LinearInterpolant,[{key:"interpolate_",value:function interpolate_(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1;for(var _i256=0;_i256!==stride;++_i256){result[_i256]=values[offset0+_i256]*weight0+values[offset1+_i256]*weight1;}return result;}}]);return LinearInterpolant;}(Interpolant);/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */var DiscreteInterpolant=/*#__PURE__*/function(_Interpolant3){_inherits(DiscreteInterpolant,_Interpolant3);var _super100=_createSuper(DiscreteInterpolant);function DiscreteInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){_classCallCheck(this,DiscreteInterpolant);return _super100.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);}_createClass(DiscreteInterpolant,[{key:"interpolate_",value:function interpolate_(i1/*, t0, t, t1 */){return this.copySampleValue_(i1-1);}}]);return DiscreteInterpolant;}(Interpolant);var KeyframeTrack=/*#__PURE__*/function(){function KeyframeTrack(name,times,values,interpolation){_classCallCheck(this,KeyframeTrack);if(name===undefined)throw new Error('THREE.KeyframeTrack: track name is undefined');if(times===undefined||times.length===0)throw new Error('THREE.KeyframeTrack: no keyframes in track named '+name);this.name=name;this.times=AnimationUtils.convertArray(times,this.TimeBufferType);this.values=AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);}// Serialization (in static context, because of constructor invocation
// and automatic invocation of .toJSON):
_createClass(KeyframeTrack,[{key:"InterpolantFactoryMethodDiscrete",value:function InterpolantFactoryMethodDiscrete(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result);}},{key:"InterpolantFactoryMethodLinear",value:function InterpolantFactoryMethodLinear(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result);}},{key:"InterpolantFactoryMethodSmooth",value:function InterpolantFactoryMethodSmooth(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result);}},{key:"setInterpolation",value:function setInterpolation(interpolation){var factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth;break;}if(factoryMethod===undefined){var message='unsupported interpolation for '+this.ValueTypeName+' keyframe track named '+this.name;if(this.createInterpolant===undefined){// fall back to default, unless the default itself is messed up
if(interpolation!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation);}else {throw new Error(message);// fatal, in this case
}}console.warn('THREE.KeyframeTrack:',message);return this;}this.createInterpolant=factoryMethod;return this;}},{key:"getInterpolation",value:function getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth;}}},{key:"getValueSize",value:function getValueSize(){return this.values.length/this.times.length;}// move all keyframes either forwards or backwards in time
},{key:"shift",value:function shift(timeOffset){if(timeOffset!==0.0){var times=this.times;for(var _i257=0,n=times.length;_i257!==n;++_i257){times[_i257]+=timeOffset;}}return this;}// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
},{key:"scale",value:function scale(timeScale){if(timeScale!==1.0){var times=this.times;for(var _i258=0,n=times.length;_i258!==n;++_i258){times[_i258]*=timeScale;}}return this;}// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
},{key:"trim",value:function trim(startTime,endTime){var times=this.times,nKeys=times.length;var from=0,to=nKeys-1;while(from!==nKeys&&times[from]<startTime){++from;}while(to!==-1&&times[to]>endTime){--to;}++to;// inclusive -> exclusive bound
if(from!==0||to!==nKeys){// empty tracks are forbidden, so keep at least one keyframe
if(from>=to){to=Math.max(to,1);from=to-1;}var stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to);this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride);}return this;}// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
},{key:"validate",value:function validate(){var valid=true;var valueSize=this.getValueSize();if(valueSize-Math.floor(valueSize)!==0){console.error('THREE.KeyframeTrack: Invalid value size in track.',this);valid=false;}var times=this.times,values=this.values,nKeys=times.length;if(nKeys===0){console.error('THREE.KeyframeTrack: Track is empty.',this);valid=false;}var prevTime=null;for(var _i259=0;_i259!==nKeys;_i259++){var currTime=times[_i259];if(typeof currTime==='number'&&isNaN(currTime)){console.error('THREE.KeyframeTrack: Time is not a valid number.',this,_i259,currTime);valid=false;break;}if(prevTime!==null&&prevTime>currTime){console.error('THREE.KeyframeTrack: Out of order keys.',this,_i259,currTime,prevTime);valid=false;break;}prevTime=currTime;}if(values!==undefined){if(AnimationUtils.isTypedArray(values)){for(var _i260=0,n=values.length;_i260!==n;++_i260){var _value5=values[_i260];if(isNaN(_value5)){console.error('THREE.KeyframeTrack: Value is not a valid number.',this,_i260,_value5);valid=false;break;}}}}return valid;}// removes equivalent sequential keys as common in morph target sequences
// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
},{key:"optimize",value:function optimize(){// times or values may be shared with other tracks, so overwriting is unsafe
var times=AnimationUtils.arraySlice(this.times),values=AnimationUtils.arraySlice(this.values),stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,lastIndex=times.length-1;var writeIndex=1;for(var _i261=1;_i261<lastIndex;++_i261){var keep=false;var time=times[_i261];var timeNext=times[_i261+1];// remove adjacent keyframes scheduled at the same time
if(time!==timeNext&&(_i261!==1||time!==times[0])){if(!smoothInterpolation){// remove unnecessary keyframes same as their neighbors
var offset=_i261*stride,offsetP=offset-stride,offsetN=offset+stride;for(var j=0;j!==stride;++j){var _value6=values[offset+j];if(_value6!==values[offsetP+j]||_value6!==values[offsetN+j]){keep=true;break;}}}else {keep=true;}}// in-place compaction
if(keep){if(_i261!==writeIndex){times[writeIndex]=times[_i261];var readOffset=_i261*stride,writeOffset=writeIndex*stride;for(var _j14=0;_j14!==stride;++_j14){values[writeOffset+_j14]=values[readOffset+_j14];}}++writeIndex;}}// flush last keyframe (compaction looks ahead)
if(lastIndex>0){times[writeIndex]=times[lastIndex];for(var _readOffset=lastIndex*stride,_writeOffset=writeIndex*stride,_j15=0;_j15!==stride;++_j15){values[_writeOffset+_j15]=values[_readOffset+_j15];}++writeIndex;}if(writeIndex!==times.length){this.times=AnimationUtils.arraySlice(times,0,writeIndex);this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride);}else {this.times=times;this.values=values;}return this;}},{key:"clone",value:function clone(){var times=AnimationUtils.arraySlice(this.times,0);var values=AnimationUtils.arraySlice(this.values,0);var TypedKeyframeTrack=this.constructor;var track=new TypedKeyframeTrack(this.name,times,values);// Interpolant argument to constructor is not saved, so copy the factory method directly.
track.createInterpolant=this.createInterpolant;return track;}}],[{key:"toJSON",value:function toJSON(track){var trackType=track.constructor;var json;// derived classes can define a static toJSON method
if(trackType.toJSON!==this.toJSON){json=trackType.toJSON(track);}else {// by default, we assume the data can be serialized as-is
json={'name':track.name,'times':AnimationUtils.convertArray(track.times,Array),'values':AnimationUtils.convertArray(track.values,Array)};var interpolation=track.getInterpolation();if(interpolation!==track.DefaultInterpolation){json.interpolation=interpolation;}}json.type=track.ValueTypeName;// mandatory
return json;}}]);return KeyframeTrack;}();KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;/**
 * A Track of Boolean keyframe values.
 */var BooleanKeyframeTrack=/*#__PURE__*/function(_KeyframeTrack){_inherits(BooleanKeyframeTrack,_KeyframeTrack);var _super101=_createSuper(BooleanKeyframeTrack);function BooleanKeyframeTrack(){_classCallCheck(this,BooleanKeyframeTrack);return _super101.apply(this,arguments);}return _createClass(BooleanKeyframeTrack);}(KeyframeTrack);BooleanKeyframeTrack.prototype.ValueTypeName='bool';BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**
 * A Track of keyframe values that represent color.
 */var ColorKeyframeTrack=/*#__PURE__*/function(_KeyframeTrack2){_inherits(ColorKeyframeTrack,_KeyframeTrack2);var _super102=_createSuper(ColorKeyframeTrack);function ColorKeyframeTrack(){_classCallCheck(this,ColorKeyframeTrack);return _super102.apply(this,arguments);}return _createClass(ColorKeyframeTrack);}(KeyframeTrack);ColorKeyframeTrack.prototype.ValueTypeName='color';/**
 * A Track of numeric keyframe values.
 */var NumberKeyframeTrack=/*#__PURE__*/function(_KeyframeTrack3){_inherits(NumberKeyframeTrack,_KeyframeTrack3);var _super103=_createSuper(NumberKeyframeTrack);function NumberKeyframeTrack(){_classCallCheck(this,NumberKeyframeTrack);return _super103.apply(this,arguments);}return _createClass(NumberKeyframeTrack);}(KeyframeTrack);NumberKeyframeTrack.prototype.ValueTypeName='number';/**
 * A Track that interpolates Strings
 */var StringKeyframeTrack=/*#__PURE__*/function(_KeyframeTrack5){_inherits(StringKeyframeTrack,_KeyframeTrack5);var _super106=_createSuper(StringKeyframeTrack);function StringKeyframeTrack(){_classCallCheck(this,StringKeyframeTrack);return _super106.apply(this,arguments);}return _createClass(StringKeyframeTrack);}(KeyframeTrack);StringKeyframeTrack.prototype.ValueTypeName='string';StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;/**
 * A Track of vectored keyframe values.
 */var VectorKeyframeTrack=/*#__PURE__*/function(_KeyframeTrack6){_inherits(VectorKeyframeTrack,_KeyframeTrack6);var _super107=_createSuper(VectorKeyframeTrack);function VectorKeyframeTrack(){_classCallCheck(this,VectorKeyframeTrack);return _super107.apply(this,arguments);}return _createClass(VectorKeyframeTrack);}(KeyframeTrack);VectorKeyframeTrack.prototype.ValueTypeName='vector';var Cache={enabled:false,files:{},add:function add(key,file){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Adding key:', key );
this.files[key]=file;},get:function get(key){if(this.enabled===false)return;// console.log( 'THREE.Cache', 'Checking key:', key );
return this.files[key];},remove:function remove(key){delete this.files[key];},clear:function clear(){this.files={};}};var LoadingManager=/*#__PURE__*/_createClass(function LoadingManager(onLoad,onProgress,onError){_classCallCheck(this,LoadingManager);var scope=this;var isLoading=false;var itemsLoaded=0;var itemsTotal=0;var urlModifier=undefined;var handlers=[];// Refer to #5689 for the reason why we don't set .onStart
// in the constructor
this.onStart=undefined;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(isLoading===false){if(scope.onStart!==undefined){scope.onStart(url,itemsLoaded,itemsTotal);}}isLoading=true;};this.itemEnd=function(url){itemsLoaded++;if(scope.onProgress!==undefined){scope.onProgress(url,itemsLoaded,itemsTotal);}if(itemsLoaded===itemsTotal){isLoading=false;if(scope.onLoad!==undefined){scope.onLoad();}}};this.itemError=function(url){if(scope.onError!==undefined){scope.onError(url);}};this.resolveURL=function(url){if(urlModifier){return urlModifier(url);}return url;};this.setURLModifier=function(transform){urlModifier=transform;return this;};this.addHandler=function(regex,loader){handlers.push(regex,loader);return this;};this.removeHandler=function(regex){var index=handlers.indexOf(regex);if(index!==-1){handlers.splice(index,2);}return this;};this.getHandler=function(file){for(var _i272=0,l=handlers.length;_i272<l;_i272+=2){var regex=handlers[_i272];var loader=handlers[_i272+1];if(regex.global)regex.lastIndex=0;// see #17920
if(regex.test(file)){return loader;}}return null;};});var DefaultLoadingManager=new LoadingManager();var Loader=/*#__PURE__*/function(){function Loader(manager){_classCallCheck(this,Loader);this.manager=manager!==undefined?manager:DefaultLoadingManager;this.crossOrigin='anonymous';this.withCredentials=false;this.path='';this.resourcePath='';this.requestHeader={};}_createClass(Loader,[{key:"load",value:function load(/* url, onLoad, onProgress, onError */){}},{key:"loadAsync",value:function loadAsync(url,onProgress){var scope=this;return new Promise(function(resolve,reject){scope.load(url,resolve,onProgress,reject);});}},{key:"parse",value:function parse(/* data */){}},{key:"setCrossOrigin",value:function setCrossOrigin(crossOrigin){this.crossOrigin=crossOrigin;return this;}},{key:"setWithCredentials",value:function setWithCredentials(value){this.withCredentials=value;return this;}},{key:"setPath",value:function setPath(path){this.path=path;return this;}},{key:"setResourcePath",value:function setResourcePath(resourcePath){this.resourcePath=resourcePath;return this;}},{key:"setRequestHeader",value:function setRequestHeader(requestHeader){this.requestHeader=requestHeader;return this;}}]);return Loader;}();var loading={};var FileLoader=/*#__PURE__*/function(_Loader){_inherits(FileLoader,_Loader);var _super108=_createSuper(FileLoader);function FileLoader(manager){_classCallCheck(this,FileLoader);return _super108.call(this,manager);}_createClass(FileLoader,[{key:"load",value:function load(url,onLoad,onProgress,onError){var _this89=this;if(url===undefined)url='';if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var cached=Cache.get(url);if(cached!==undefined){this.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);_this89.manager.itemEnd(url);},0);return cached;}// Check if request is duplicate
if(loading[url]!==undefined){loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});return;}// Initialise array for duplicate requests
loading[url]=[];loading[url].push({onLoad:onLoad,onProgress:onProgress,onError:onError});// create request
var req=new Request(url,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?'include':'same-origin'// An abort controller could be added within a future PR
});// record states ( avoid data race )
var mimeType=this.mimeType;var responseType=this.responseType;// start the fetch
fetch(req).then(function(response){if(response.status===200||response.status===0){// Some browsers return HTTP Status 0 when using non-http protocol
// e.g. 'file://' or 'data://'. Handle as success.
if(response.status===0){console.warn('THREE.FileLoader: HTTP Status 0 received.');}if(typeof ReadableStream==='undefined'||response.body.getReader===undefined){return response;}var callbacks=loading[url];var reader=response.body.getReader();var contentLength=response.headers.get('Content-Length');var total=contentLength?parseInt(contentLength):0;var lengthComputable=total!==0;var loaded=0;// periodically read data into the new stream tracking while download progress
var stream=new ReadableStream({start:function start(controller){readData();function readData(){reader.read().then(function(_ref2){var done=_ref2.done,value=_ref2.value;if(done){controller.close();}else {loaded+=value.byteLength;var event=new ProgressEvent('progress',{lengthComputable:lengthComputable,loaded:loaded,total:total});for(var _i273=0,il=callbacks.length;_i273<il;_i273++){var callback=callbacks[_i273];if(callback.onProgress)callback.onProgress(event);}controller.enqueue(value);readData();}});}}});return new Response(stream);}else {throw Error("fetch for \"".concat(response.url,"\" responded with ").concat(response.status,": ").concat(response.statusText));}}).then(function(response){switch(responseType){case'arraybuffer':return response.arrayBuffer();case'blob':return response.blob();case'document':return response.text().then(function(text){var parser=new DOMParser();return parser.parseFromString(text,mimeType);});case'json':return response.json();default:if(mimeType===undefined){return response.text();}else {// sniff encoding
var re=/charset="?([^;"\s]*)"?/i;var exec=re.exec(mimeType);var label=exec&&exec[1]?exec[1].toLowerCase():undefined;var decoder=new TextDecoder(label);return response.arrayBuffer().then(function(ab){return decoder.decode(ab);});}}}).then(function(data){// Add to cache only on HTTP success, so that we do not cache
// error response bodies as proper responses to requests.
Cache.add(url,data);var callbacks=loading[url];delete loading[url];for(var _i274=0,il=callbacks.length;_i274<il;_i274++){var callback=callbacks[_i274];if(callback.onLoad)callback.onLoad(data);}})["catch"](function(err){// Abort errors and other errors are handled the same
var callbacks=loading[url];if(callbacks===undefined){// When onLoad was called and url was deleted in `loading`
_this89.manager.itemError(url);throw err;}delete loading[url];for(var _i275=0,il=callbacks.length;_i275<il;_i275++){var callback=callbacks[_i275];if(callback.onError)callback.onError(err);}_this89.manager.itemError(url);})["finally"](function(){_this89.manager.itemEnd(url);});this.manager.itemStart(url);}},{key:"setResponseType",value:function setResponseType(value){this.responseType=value;return this;}},{key:"setMimeType",value:function setMimeType(value){this.mimeType=value;return this;}}]);return FileLoader;}(Loader);var ImageLoader=/*#__PURE__*/function(_Loader4){_inherits(ImageLoader,_Loader4);var _super111=_createSuper(ImageLoader);function ImageLoader(manager){_classCallCheck(this,ImageLoader);return _super111.call(this,manager);}_createClass(ImageLoader,[{key:"load",value:function load(url,onLoad,onProgress,onError){if(this.path!==undefined)url=this.path+url;url=this.manager.resolveURL(url);var scope=this;var cached=Cache.get(url);if(cached!==undefined){scope.manager.itemStart(url);setTimeout(function(){if(onLoad)onLoad(cached);scope.manager.itemEnd(url);},0);return cached;}var image=createElementNS('img');function onImageLoad(){removeEventListeners();Cache.add(url,this);if(onLoad)onLoad(this);scope.manager.itemEnd(url);}function onImageError(event){removeEventListeners();if(onError)onError(event);scope.manager.itemError(url);scope.manager.itemEnd(url);}function removeEventListeners(){image.removeEventListener('load',onImageLoad,false);image.removeEventListener('error',onImageError,false);}image.addEventListener('load',onImageLoad,false);image.addEventListener('error',onImageError,false);if(url.substr(0,5)!=='data:'){if(this.crossOrigin!==undefined)image.crossOrigin=this.crossOrigin;}scope.manager.itemStart(url);image.src=url;return image;}}]);return ImageLoader;}(Loader);var CubeTextureLoader=/*#__PURE__*/function(_Loader5){_inherits(CubeTextureLoader,_Loader5);var _super112=_createSuper(CubeTextureLoader);function CubeTextureLoader(manager){_classCallCheck(this,CubeTextureLoader);return _super112.call(this,manager);}_createClass(CubeTextureLoader,[{key:"load",value:function load(urls,onLoad,onProgress,onError){var texture=new CubeTexture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);var loaded=0;function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;if(loaded===6){texture.needsUpdate=true;if(onLoad)onLoad(texture);}},undefined,onError);}for(var _i279=0;_i279<urls.length;++_i279){loadTexture(_i279);}return texture;}}]);return CubeTextureLoader;}(Loader);var TextureLoader=/*#__PURE__*/function(_Loader7){_inherits(TextureLoader,_Loader7);var _super114=_createSuper(TextureLoader);function TextureLoader(manager){_classCallCheck(this,TextureLoader);return _super114.call(this,manager);}_createClass(TextureLoader,[{key:"load",value:function load(url,onLoad,onProgress,onError){var texture=new Texture();var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;}}]);return TextureLoader;}(Loader);var Light=/*#__PURE__*/function(_Object3D11){_inherits(Light,_Object3D11);var _super115=_createSuper(Light);function Light(color){var _this90;var intensity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;_classCallCheck(this,Light);_this90=_super115.call(this);_this90.type='Light';_this90.color=new Color(color);_this90.intensity=intensity;return _this90;}_createClass(Light,[{key:"dispose",value:function dispose(){// Empty here in base class; some subclasses override.
}},{key:"copy",value:function copy(source){_get(_getPrototypeOf(Light.prototype),"copy",this).call(this,source);this.color.copy(source.color);this.intensity=source.intensity;return this;}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(Light.prototype),"toJSON",this).call(this,meta);data.object.color=this.color.getHex();data.object.intensity=this.intensity;if(this.groundColor!==undefined)data.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)data.object.distance=this.distance;if(this.angle!==undefined)data.object.angle=this.angle;if(this.decay!==undefined)data.object.decay=this.decay;if(this.penumbra!==undefined)data.object.penumbra=this.penumbra;if(this.shadow!==undefined)data.object.shadow=this.shadow.toJSON();return data;}}]);return Light;}(Object3D);Light.prototype.isLight=true;var _projScreenMatrix$1=/*@__PURE__*/new Matrix4();var _lightPositionWorld$1=/*@__PURE__*/new Vector3();var _lookTarget$1=/*@__PURE__*/new Vector3();var LightShadow=/*#__PURE__*/function(){function LightShadow(camera){_classCallCheck(this,LightShadow);this.camera=camera;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4();this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum();this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)];}_createClass(LightShadow,[{key:"getViewportCount",value:function getViewportCount(){return this._viewportCount;}},{key:"getFrustum",value:function getFrustum(){return this._frustum;}},{key:"updateMatrices",value:function updateMatrices(light){var shadowCamera=this.camera;var shadowMatrix=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);shadowCamera.position.copy(_lightPositionWorld$1);_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);shadowCamera.lookAt(_lookTarget$1);shadowCamera.updateMatrixWorld();_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);shadowMatrix.set(0.5,0.0,0.0,0.5,0.0,0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);shadowMatrix.multiply(shadowCamera.projectionMatrix);shadowMatrix.multiply(shadowCamera.matrixWorldInverse);}},{key:"getViewport",value:function getViewport(viewportIndex){return this._viewports[viewportIndex];}},{key:"getFrameExtents",value:function getFrameExtents(){return this._frameExtents;}},{key:"dispose",value:function dispose(){if(this.map){this.map.dispose();}if(this.mapPass){this.mapPass.dispose();}}},{key:"copy",value:function copy(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this;}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"toJSON",value:function toJSON(){var object={};if(this.bias!==0)object.bias=this.bias;if(this.normalBias!==0)object.normalBias=this.normalBias;if(this.radius!==1)object.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)object.mapSize=this.mapSize.toArray();object.camera=this.camera.toJSON(false).object;delete object.camera.matrix;return object;}}]);return LightShadow;}();var DirectionalLightShadow=/*#__PURE__*/function(_LightShadow3){_inherits(DirectionalLightShadow,_LightShadow3);var _super121=_createSuper(DirectionalLightShadow);function DirectionalLightShadow(){_classCallCheck(this,DirectionalLightShadow);return _super121.call(this,new OrthographicCamera(-5,5,5,-5,0.5,500));}return _createClass(DirectionalLightShadow);}(LightShadow);DirectionalLightShadow.prototype.isDirectionalLightShadow=true;var AmbientLight=/*#__PURE__*/function(_Light5){_inherits(AmbientLight,_Light5);var _super123=_createSuper(AmbientLight);function AmbientLight(color,intensity){var _this97;_classCallCheck(this,AmbientLight);_this97=_super123.call(this,color,intensity);_this97.type='AmbientLight';return _this97;}return _createClass(AmbientLight);}(Light);AmbientLight.prototype.isAmbientLight=true;var SphericalHarmonics3=/*#__PURE__*/function(){function SphericalHarmonics3(){_classCallCheck(this,SphericalHarmonics3);this.coefficients=[];for(var _i280=0;_i280<9;_i280++){this.coefficients.push(new Vector3());}}_createClass(SphericalHarmonics3,[{key:"set",value:function set(coefficients){for(var _i281=0;_i281<9;_i281++){this.coefficients[_i281].copy(coefficients[_i281]);}return this;}},{key:"zero",value:function zero(){for(var _i282=0;_i282<9;_i282++){this.coefficients[_i282].set(0,0,0);}return this;}// get the radiance in the direction of the normal
// target is a Vector3
},{key:"getAt",value:function getAt(normal,target){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.282095);// band 1
target.addScaledVector(coeff[1],0.488603*y);target.addScaledVector(coeff[2],0.488603*z);target.addScaledVector(coeff[3],0.488603*x);// band 2
target.addScaledVector(coeff[4],1.092548*(x*y));target.addScaledVector(coeff[5],1.092548*(y*z));target.addScaledVector(coeff[6],0.315392*(3.0*z*z-1.0));target.addScaledVector(coeff[7],1.092548*(x*z));target.addScaledVector(coeff[8],0.546274*(x*x-y*y));return target;}// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
// target is a Vector3
// https://graphics.stanford.edu/papers/envmap/envmap.pdf
},{key:"getIrradianceAt",value:function getIrradianceAt(normal,target){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;var coeff=this.coefficients;// band 0
target.copy(coeff[0]).multiplyScalar(0.886227);// π * 0.282095
// band 1
target.addScaledVector(coeff[1],2.0*0.511664*y);// ( 2 * π / 3 ) * 0.488603
target.addScaledVector(coeff[2],2.0*0.511664*z);target.addScaledVector(coeff[3],2.0*0.511664*x);// band 2
target.addScaledVector(coeff[4],2.0*0.429043*x*y);// ( π / 4 ) * 1.092548
target.addScaledVector(coeff[5],2.0*0.429043*y*z);target.addScaledVector(coeff[6],0.743125*z*z-0.247708);// ( π / 4 ) * 0.315392 * 3
target.addScaledVector(coeff[7],2.0*0.429043*x*z);target.addScaledVector(coeff[8],0.429043*(x*x-y*y));// ( π / 4 ) * 0.546274
return target;}},{key:"add",value:function add(sh){for(var _i283=0;_i283<9;_i283++){this.coefficients[_i283].add(sh.coefficients[_i283]);}return this;}},{key:"addScaledSH",value:function addScaledSH(sh,s){for(var _i284=0;_i284<9;_i284++){this.coefficients[_i284].addScaledVector(sh.coefficients[_i284],s);}return this;}},{key:"scale",value:function scale(s){for(var _i285=0;_i285<9;_i285++){this.coefficients[_i285].multiplyScalar(s);}return this;}},{key:"lerp",value:function lerp(sh,alpha){for(var _i286=0;_i286<9;_i286++){this.coefficients[_i286].lerp(sh.coefficients[_i286],alpha);}return this;}},{key:"equals",value:function equals(sh){for(var _i287=0;_i287<9;_i287++){if(!this.coefficients[_i287].equals(sh.coefficients[_i287])){return false;}}return true;}},{key:"copy",value:function copy(sh){return this.set(sh.coefficients);}},{key:"clone",value:function clone(){return new this.constructor().copy(this);}},{key:"fromArray",value:function fromArray(array){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var coefficients=this.coefficients;for(var _i288=0;_i288<9;_i288++){coefficients[_i288].fromArray(array,offset+_i288*3);}return this;}},{key:"toArray",value:function toArray(){var array=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var coefficients=this.coefficients;for(var _i289=0;_i289<9;_i289++){coefficients[_i289].toArray(array,offset+_i289*3);}return array;}// evaluate the basis functions
// shBasis is an Array[ 9 ]
}],[{key:"getBasisAt",value:function getBasisAt(normal,shBasis){// normal is assumed to be unit length
var x=normal.x,y=normal.y,z=normal.z;// band 0
shBasis[0]=0.282095;// band 1
shBasis[1]=0.488603*y;shBasis[2]=0.488603*z;shBasis[3]=0.488603*x;// band 2
shBasis[4]=1.092548*x*y;shBasis[5]=1.092548*y*z;shBasis[6]=0.315392*(3*z*z-1);shBasis[7]=1.092548*x*z;shBasis[8]=0.546274*(x*x-y*y);}}]);return SphericalHarmonics3;}();SphericalHarmonics3.prototype.isSphericalHarmonics3=true;var LightProbe=/*#__PURE__*/function(_Light7){_inherits(LightProbe,_Light7);var _super125=_createSuper(LightProbe);function LightProbe(){var _this99;var sh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new SphericalHarmonics3();var intensity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;_classCallCheck(this,LightProbe);_this99=_super125.call(this,undefined,intensity);_this99.sh=sh;return _this99;}_createClass(LightProbe,[{key:"copy",value:function copy(source){_get(_getPrototypeOf(LightProbe.prototype),"copy",this).call(this,source);this.sh.copy(source.sh);return this;}},{key:"fromJSON",value:function fromJSON(json){this.intensity=json.intensity;// TODO: Move this bit to Light.fromJSON();
this.sh.fromArray(json.sh);return this;}},{key:"toJSON",value:function toJSON(meta){var data=_get(_getPrototypeOf(LightProbe.prototype),"toJSON",this).call(this,meta);data.object.sh=this.sh.toArray();return data;}}]);return LightProbe;}(Light);LightProbe.prototype.isLightProbe=true;var LoaderUtils=/*#__PURE__*/function(){function LoaderUtils(){_classCallCheck(this,LoaderUtils);}_createClass(LoaderUtils,null,[{key:"decodeText",value:function decodeText(array){if(typeof TextDecoder!=='undefined'){return new TextDecoder().decode(array);}// Avoid the String.fromCharCode.apply(null, array) shortcut, which
// throws a "maximum call stack size exceeded" error for large arrays.
var s='';for(var _i290=0,il=array.length;_i290<il;_i290++){// Implicitly assumes little-endian.
s+=String.fromCharCode(array[_i290]);}try{// merges multi-byte utf-8 characters.
return decodeURIComponent(escape(s));}catch(e){// see #16358
return s;}}},{key:"extractUrlBase",value:function extractUrlBase(url){var index=url.lastIndexOf('/');if(index===-1)return './';return url.substr(0,index+1);}},{key:"resolveURL",value:function resolveURL(url,path){// Invalid URL
if(typeof url!=='string'||url==='')return '';// Host Relative URL
if(/^https?:\/\//i.test(path)&&/^\//.test(url)){path=path.replace(/(^https?:\/\/[^\/]+).*/i,'$1');}// Absolute URL http://,https://,//
if(/^(https?:)?\/\//i.test(url))return url;// Data URI
if(/^data:.*,.*$/i.test(url))return url;// Blob URL
if(/^blob:.*$/i.test(url))return url;// Relative URL
return path+url;}}]);return LoaderUtils;}();var HemisphereLightProbe=/*#__PURE__*/function(_LightProbe){_inherits(HemisphereLightProbe,_LightProbe);var _super132=_createSuper(HemisphereLightProbe);function HemisphereLightProbe(skyColor,groundColor){var _this103;var intensity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;_classCallCheck(this,HemisphereLightProbe);_this103=_super132.call(this,undefined,intensity);var color1=new Color().set(skyColor);var color2=new Color().set(groundColor);var sky=new Vector3(color1.r,color1.g,color1.b);var ground=new Vector3(color2.r,color2.g,color2.b);// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
var c0=Math.sqrt(Math.PI);var c1=c0*Math.sqrt(0.75);_this103.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);_this103.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);return _this103;}return _createClass(HemisphereLightProbe);}(LightProbe);HemisphereLightProbe.prototype.isHemisphereLightProbe=true;var AmbientLightProbe=/*#__PURE__*/function(_LightProbe2){_inherits(AmbientLightProbe,_LightProbe2);var _super133=_createSuper(AmbientLightProbe);function AmbientLightProbe(color){var _this104;var intensity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;_classCallCheck(this,AmbientLightProbe);_this104=_super133.call(this,undefined,intensity);var color1=new Color().set(color);// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
_this104.sh.coefficients[0].set(color1.r,color1.g,color1.b).multiplyScalar(2*Math.sqrt(Math.PI));return _this104;}return _createClass(AmbientLightProbe);}(LightProbe);AmbientLightProbe.prototype.isAmbientLightProbe=true;var _RESERVED_CHARS_RE='\\[\\]\\.:\\/';// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
var _wordChar='[^'+_RESERVED_CHARS_RE+']';var _wordCharOrDot='[^'+_RESERVED_CHARS_RE.replace('\\.','')+']';// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
/((?:WC+[\/:])*)/.source.replace('WC',_wordChar);// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
/(WCOD+)?/.source.replace('WCOD',_wordCharOrDot);// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC',_wordChar);// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
/\.(WC+)(?:\[(.+)\])?/.source.replace('WC',_wordChar);var GridHelper=/*#__PURE__*/function(_LineSegments2){_inherits(GridHelper,_LineSegments2);var _super143=_createSuper(GridHelper);function GridHelper(){var _this114;var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;var divisions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;var color1=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0x444444;var color2=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0x888888;_classCallCheck(this,GridHelper);color1=new Color(color1);color2=new Color(color2);var center=divisions/2;var step=size/divisions;var halfSize=size/2;var vertices=[],colors=[];for(var _i347=0,j=0,k=-halfSize;_i347<=divisions;_i347++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k);vertices.push(k,0,-halfSize,k,0,halfSize);var color=_i347===center?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;}var geometry=new BufferGeometry();geometry.setAttribute('position',new Float32BufferAttribute(vertices,3));geometry.setAttribute('color',new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:true,toneMapped:false});_this114=_super143.call(this,geometry,material);_this114.type='GridHelper';return _this114;}return _createClass(GridHelper);}(LineSegments);var _floatView=new Float32Array(1);new Int32Array(_floatView.buffer);Curve.create=function(construct,getPoint){console.log('THREE.Curve.create() has been deprecated');construct.prototype=Object.create(Curve.prototype);construct.prototype.constructor=construct;construct.prototype.getPoint=getPoint;return construct;};//
Path.prototype.fromPoints=function(points){console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');return this.setFromPoints(points);};//
GridHelper.prototype.setColors=function(){console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');};Loader.prototype.extractUrlBase=function(url){console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');return LoaderUtils.extractUrlBase(url);};Loader.Handlers={add:function add(/* regex, loader */){console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');},get:function get(/* file */){console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');}};Box3.prototype.center=function(optionalTarget){console.warn('THREE.Box3: .center() has been renamed to .getCenter().');return this.getCenter(optionalTarget);};Box3.prototype.empty=function(){console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');return this.isEmpty();};Box3.prototype.isIntersectionBox=function(box){console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);};Box3.prototype.isIntersectionSphere=function(sphere){console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);};Box3.prototype.size=function(optionalTarget){console.warn('THREE.Box3: .size() has been renamed to .getSize().');return this.getSize(optionalTarget);};//
Sphere.prototype.empty=function(){console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');return this.isEmpty();};//
Frustum.prototype.setFromMatrix=function(m){console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');return this.setFromProjectionMatrix(m);};//
Matrix3.prototype.flattenToArrayOffset=function(array,offset){console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');return this.toArray(array,offset);};Matrix3.prototype.multiplyVector3=function(vector){console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');return vector.applyMatrix3(this);};Matrix3.prototype.multiplyVector3Array=function/* a */(){console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');};Matrix3.prototype.applyToBufferAttribute=function(attribute){console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');return attribute.applyMatrix3(this);};Matrix3.prototype.applyToVector3Array=function/* array, offset, length */(){console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');};Matrix3.prototype.getInverse=function(matrix){console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');return this.copy(matrix).invert();};//
Matrix4.prototype.extractPosition=function(m){console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');return this.copyPosition(m);};Matrix4.prototype.flattenToArrayOffset=function(array,offset){console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');return this.toArray(array,offset);};Matrix4.prototype.getPosition=function(){console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');return new Vector3().setFromMatrixColumn(this,3);};Matrix4.prototype.setRotationFromQuaternion=function(q){console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');return this.makeRotationFromQuaternion(q);};Matrix4.prototype.multiplyToArray=function(){console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');};Matrix4.prototype.multiplyVector3=function(vector){console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.multiplyVector4=function(vector){console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.multiplyVector3Array=function/* a */(){console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');};Matrix4.prototype.rotateAxis=function(v){console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');v.transformDirection(this);};Matrix4.prototype.crossVector=function(vector){console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');return vector.applyMatrix4(this);};Matrix4.prototype.translate=function(){console.error('THREE.Matrix4: .translate() has been removed.');};Matrix4.prototype.rotateX=function(){console.error('THREE.Matrix4: .rotateX() has been removed.');};Matrix4.prototype.rotateY=function(){console.error('THREE.Matrix4: .rotateY() has been removed.');};Matrix4.prototype.rotateZ=function(){console.error('THREE.Matrix4: .rotateZ() has been removed.');};Matrix4.prototype.rotateByAxis=function(){console.error('THREE.Matrix4: .rotateByAxis() has been removed.');};Matrix4.prototype.applyToBufferAttribute=function(attribute){console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');return attribute.applyMatrix4(this);};Matrix4.prototype.applyToVector3Array=function/* array, offset, length */(){console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');};Matrix4.prototype.makeFrustum=function(left,right,bottom,top,near,far){console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');return this.makePerspective(left,right,top,bottom,near,far);};Matrix4.prototype.getInverse=function(matrix){console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');return this.copy(matrix).invert();};//
Plane.prototype.isIntersectionLine=function(line){console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');return this.intersectsLine(line);};//
Quaternion.prototype.multiplyVector3=function(vector){console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');return vector.applyQuaternion(this);};Quaternion.prototype.inverse=function(){console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');return this.invert();};//
Ray.prototype.isIntersectionBox=function(box){console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');return this.intersectsBox(box);};Ray.prototype.isIntersectionPlane=function(plane){console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');return this.intersectsPlane(plane);};Ray.prototype.isIntersectionSphere=function(sphere){console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');return this.intersectsSphere(sphere);};//
Triangle.prototype.area=function(){console.warn('THREE.Triangle: .area() has been renamed to .getArea().');return this.getArea();};Triangle.prototype.barycoordFromPoint=function(point,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return this.getBarycoord(point,target);};Triangle.prototype.midpoint=function(target){console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');return this.getMidpoint(target);};Triangle.prototypenormal=function(target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return this.getNormal(target);};Triangle.prototype.plane=function(target){console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');return this.getPlane(target);};Triangle.barycoordFromPoint=function(point,a,b,c,target){console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');return Triangle.getBarycoord(point,a,b,c,target);};Triangle.normal=function(a,b,c,target){console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');return Triangle.getNormal(a,b,c,target);};//
Shape.prototype.extractAllPoints=function(divisions){console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');return this.extractPoints(divisions);};Shape.prototype.extrude=function(options){console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');return new ExtrudeGeometry(this,options);};Shape.prototype.makeGeometry=function(options){console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');return new ShapeGeometry(this,options);};//
Vector2.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector2.prototype.distanceToManhattan=function(v){console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);};Vector2.prototype.lengthManhattan=function(){console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Vector3.prototype.setEulerFromRotationMatrix=function(){console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');};Vector3.prototype.setEulerFromQuaternion=function(){console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');};Vector3.prototype.getPositionFromMatrix=function(m){console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');return this.setFromMatrixPosition(m);};Vector3.prototype.getScaleFromMatrix=function(m){console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');return this.setFromMatrixScale(m);};Vector3.prototype.getColumnFromMatrix=function(index,matrix){console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');return this.setFromMatrixColumn(matrix,index);};Vector3.prototype.applyProjection=function(m){console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');return this.applyMatrix4(m);};Vector3.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector3.prototype.distanceToManhattan=function(v){console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');return this.manhattanDistanceTo(v);};Vector3.prototype.lengthManhattan=function(){console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Vector4.prototype.fromAttribute=function(attribute,index,offset){console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');return this.fromBufferAttribute(attribute,index,offset);};Vector4.prototype.lengthManhattan=function(){console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');return this.manhattanLength();};//
Object3D.prototype.getChildByName=function(name){console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');return this.getObjectByName(name);};Object3D.prototype.renderDepth=function(){console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');};Object3D.prototype.translate=function(distance,axis){console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');return this.translateOnAxis(axis,distance);};Object3D.prototype.getWorldRotation=function(){console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');};Object3D.prototype.applyMatrix=function(matrix){console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);};Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function get(){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');return this.rotation.order;},set:function set(value){console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');this.rotation.order=value;}},useQuaternion:{get:function get(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');},set:function set(){console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');}}});Mesh.prototype.setDrawMode=function(){console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');};Object.defineProperties(Mesh.prototype,{drawMode:{get:function get(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');return TrianglesDrawMode;},set:function set(){console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');}}});PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn('THREE.PerspectiveCamera.setLens is deprecated. '+'Use .setFocalLength and .filmGauge for a photographic setup.');if(filmGauge!==undefined)this.filmGauge=filmGauge;this.setFocalLength(focalLength);};//
Object.defineProperties(Light.prototype,{onlyShadow:{set:function set(){console.warn('THREE.Light: .onlyShadow has been removed.');}},shadowCameraFov:{set:function set(value){console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');this.shadow.camera.fov=value;}},shadowCameraLeft:{set:function set(value){console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');this.shadow.camera.left=value;}},shadowCameraRight:{set:function set(value){console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');this.shadow.camera.right=value;}},shadowCameraTop:{set:function set(value){console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');this.shadow.camera.top=value;}},shadowCameraBottom:{set:function set(value){console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');this.shadow.camera.bottom=value;}},shadowCameraNear:{set:function set(value){console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');this.shadow.camera.near=value;}},shadowCameraFar:{set:function set(value){console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');this.shadow.camera.far=value;}},shadowCameraVisible:{set:function set(){console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');}},shadowBias:{set:function set(value){console.warn('THREE.Light: .shadowBias is now .shadow.bias.');this.shadow.bias=value;}},shadowDarkness:{set:function set(){console.warn('THREE.Light: .shadowDarkness has been removed.');}},shadowMapWidth:{set:function set(value){console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');this.shadow.mapSize.width=value;}},shadowMapHeight:{set:function set(value){console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');this.shadow.mapSize.height=value;}}});//
Object.defineProperties(BufferAttribute.prototype,{length:{get:function get(){console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');return this.array.length;}},dynamic:{get:function get(){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');return this.usage===DynamicDrawUsage;},set:function set(/* value */){console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');this.setUsage(DynamicDrawUsage);}}});BufferAttribute.prototype.setDynamic=function(value){console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');this.setUsage(value===true?DynamicDrawUsage:StaticDrawUsage);return this;};BufferAttribute.prototype.copyIndicesArray=function/* indices */(){console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');},BufferAttribute.prototype.setArray=function/* array */(){console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');};//
BufferGeometry.prototype.addIndex=function(index){console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');this.setIndex(index);};BufferGeometry.prototype.addAttribute=function(name,attribute){console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');if(!(attribute&&attribute.isBufferAttribute)&&!(attribute&&attribute.isInterleavedBufferAttribute)){console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');return this.setAttribute(name,new BufferAttribute(arguments[1],arguments[2]));}if(name==='index'){console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');this.setIndex(attribute);return this;}return this.setAttribute(name,attribute);};BufferGeometry.prototype.addDrawCall=function(start,count,indexOffset){if(indexOffset!==undefined){console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');}console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');this.addGroup(start,count);};BufferGeometry.prototype.clearDrawCalls=function(){console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');this.clearGroups();};BufferGeometry.prototype.computeOffsets=function(){console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');};BufferGeometry.prototype.removeAttribute=function(name){console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');return this.deleteAttribute(name);};BufferGeometry.prototype.applyMatrix=function(matrix){console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');return this.applyMatrix4(matrix);};Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function get(){console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');return this.groups;}},offsets:{get:function get(){console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');return this.groups;}}});ExtrudeGeometry.prototype.getArrays=function(){console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');};ExtrudeGeometry.prototype.addShapeList=function(){console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');};ExtrudeGeometry.prototype.addShape=function(){console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');};//
Object.defineProperties(Material.prototype,{wrapAround:{get:function get(){console.warn('THREE.Material: .wrapAround has been removed.');},set:function set(){console.warn('THREE.Material: .wrapAround has been removed.');}},overdraw:{get:function get(){console.warn('THREE.Material: .overdraw has been removed.');},set:function set(){console.warn('THREE.Material: .overdraw has been removed.');}},wrapRGB:{get:function get(){console.warn('THREE.Material: .wrapRGB has been removed.');return new Color();}},shading:{get:function get(){console.error('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');},set:function set(value){console.warn('THREE.'+this.type+': .shading has been removed. Use the boolean .flatShading instead.');this.flatShading=value===FlatShading;}},stencilMask:{get:function get(){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');return this.stencilFuncMask;},set:function set(value){console.warn('THREE.'+this.type+': .stencilMask has been removed. Use .stencilFuncMask instead.');this.stencilFuncMask=value;}},vertexTangents:{get:function get(){console.warn('THREE.'+this.type+': .vertexTangents has been removed.');},set:function set(){console.warn('THREE.'+this.type+': .vertexTangents has been removed.');}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function get(){console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');return this.extensions.derivatives;},set:function set(value){console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');this.extensions.derivatives=value;}}});//
WebGLRenderer.prototype.clearTarget=function(renderTarget,color,depth,stencil){console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');this.setRenderTarget(renderTarget);this.clear(color,depth,stencil);};WebGLRenderer.prototype.animate=function(callback){console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');this.setAnimationLoop(callback);};WebGLRenderer.prototype.getCurrentRenderTarget=function(){console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');return this.getRenderTarget();};WebGLRenderer.prototype.getMaxAnisotropy=function(){console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');return this.capabilities.getMaxAnisotropy();};WebGLRenderer.prototype.getPrecision=function(){console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');return this.capabilities.precision;};WebGLRenderer.prototype.resetGLState=function(){console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');return this.state.reset();};WebGLRenderer.prototype.supportsFloatTextures=function(){console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');return this.extensions.get('OES_texture_float');};WebGLRenderer.prototype.supportsHalfFloatTextures=function(){console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');return this.extensions.get('OES_texture_half_float');};WebGLRenderer.prototype.supportsStandardDerivatives=function(){console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');return this.extensions.get('OES_standard_derivatives');};WebGLRenderer.prototype.supportsCompressedTextureS3TC=function(){console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');return this.extensions.get('WEBGL_compressed_texture_s3tc');};WebGLRenderer.prototype.supportsCompressedTexturePVRTC=function(){console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');return this.extensions.get('WEBGL_compressed_texture_pvrtc');};WebGLRenderer.prototype.supportsBlendMinMax=function(){console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');return this.extensions.get('EXT_blend_minmax');};WebGLRenderer.prototype.supportsVertexTextures=function(){console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');return this.capabilities.vertexTextures;};WebGLRenderer.prototype.supportsInstancedArrays=function(){console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');return this.extensions.get('ANGLE_instanced_arrays');};WebGLRenderer.prototype.enableScissorTest=function(_boolean2){console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');this.setScissorTest(_boolean2);};WebGLRenderer.prototype.initMaterial=function(){console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');};WebGLRenderer.prototype.addPrePlugin=function(){console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');};WebGLRenderer.prototype.addPostPlugin=function(){console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');};WebGLRenderer.prototype.updateShadowMap=function(){console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');};WebGLRenderer.prototype.setFaceCulling=function(){console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');};WebGLRenderer.prototype.allocTextureUnit=function(){console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');};WebGLRenderer.prototype.setTexture=function(){console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');};WebGLRenderer.prototype.setTexture2D=function(){console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');};WebGLRenderer.prototype.setTextureCube=function(){console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');};WebGLRenderer.prototype.getActiveMipMapLevel=function(){console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');return this.getActiveMipmapLevel();};Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function get(){return this.shadowMap.enabled;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');this.shadowMap.enabled=value;}},shadowMapType:{get:function get(){return this.shadowMap.type;},set:function set(value){console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');this.shadowMap.type=value;}},shadowMapCullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(/* value */){console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');}},context:{get:function get(){console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');return this.getContext();}},vr:{get:function get(){console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');return this.xr;}},gammaInput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');return false;},set:function set(){console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');}},gammaOutput:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');return false;},set:function set(value){console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');this.outputEncoding=value===true?sRGBEncoding:LinearEncoding;}},toneMappingWhitePoint:{get:function get(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');return 1.0;},set:function set(){console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');}},gammaFactor:{get:function get(){console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');return 2;},set:function set(){console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(/* cullFace */){console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');}},renderReverseSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');}},renderSingleSided:{get:function get(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');return undefined;},set:function set(){console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');}}});Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');return this.texture.wrapS;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');this.texture.wrapS=value;}},wrapT:{get:function get(){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');return this.texture.wrapT;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');this.texture.wrapT=value;}},magFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');return this.texture.magFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');this.texture.magFilter=value;}},minFilter:{get:function get(){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');return this.texture.minFilter;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');this.texture.minFilter=value;}},anisotropy:{get:function get(){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');return this.texture.anisotropy;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');this.texture.anisotropy=value;}},offset:{get:function get(){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');return this.texture.offset;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');this.texture.offset=value;}},repeat:{get:function get(){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');return this.texture.repeat;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');this.texture.repeat=value;}},format:{get:function get(){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');return this.texture.format;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');this.texture.format=value;}},type:{get:function get(){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');return this.texture.type;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');this.texture.type=value;}},generateMipmaps:{get:function get(){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');return this.texture.generateMipmaps;},set:function set(value){console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');this.texture.generateMipmaps=value;}}});//
CubeCamera.prototype.updateCubeMap=function(renderer,scene){console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');return this.update(renderer,scene);};CubeCamera.prototype.clear=function(renderer,color,depth,stencil){console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');return this.renderTarget.clear(renderer,color,depth,stencil);};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(url,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');var loader=new TextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(url,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadTextureCube=function(urls,mapping,onLoad,onError){console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');var loader=new CubeTextureLoader();loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(urls,onLoad,undefined,onError);if(mapping)texture.mapping=mapping;return texture;};ImageUtils.loadCompressedTexture=function(){console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');};ImageUtils.loadCompressedTextureCube=function(){console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');};//
if(typeof __THREE_DEVTOOLS__!=='undefined'){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register',{detail:{revision:REVISION}}));}if(typeof window!=='undefined'){if(window.__THREE__){console.warn('WARNING: Multiple instances of Three.js being imported.');}else {window.__THREE__=REVISION;}}

/**
 * @author JensKrumsieck / http://jenskrumsieck.de
 */

var CIFLoader = function CIFLoader(manager) {
  Loader.call(this, manager);
};

/**
 * This basically is a port of the existing C# CIF Loader i wrote
 * for PorphyStruct which you can find here: https://github.com/JensKrumsieck/PorphyStruct/
 */

CIFLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: CIFLoader,
  load: function load(url, onLoad, onProgress, onError) {
    var scope = this;
    var loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.load(url, function (text) {
      onLoad(scope.parse(text));
    }, onProgress, onError);
  },
  parse: function parse(text) {
    var atoms = [];
    var bonds = [];

    //needed parameters for conversion of factorial to cartesian
    var lengths = cellParameters('cell_length');
    var angles = cellParameters('cell_angle');
    var loops = text.split('loop_');
    var molLoop = loops.find(function (s) {
      return s.includes('_atom_site_label');
    });
    var bondLoop = loops.find(function (s) {
      return s.includes('_geom_bond_atom_site_label_1');
    });

    //CPK Array "stolen" from PDBLoader https://github.com/mrdoob/three.js/blob/dev/examples/jsm/loaders/PDBLoader.js
    var CPK = {
      h: [255, 255, 255],
      he: [217, 255, 255],
      li: [204, 128, 255],
      be: [194, 255, 0],
      b: [255, 181, 181],
      c: [144, 144, 144],
      n: [48, 80, 248],
      o: [255, 13, 13],
      f: [144, 224, 80],
      ne: [179, 227, 245],
      na: [171, 92, 242],
      mg: [138, 255, 0],
      al: [191, 166, 166],
      si: [240, 200, 160],
      p: [255, 128, 0],
      s: [255, 255, 48],
      cl: [31, 240, 31],
      ar: [128, 209, 227],
      k: [143, 64, 212],
      ca: [61, 255, 0],
      sc: [230, 230, 230],
      ti: [191, 194, 199],
      v: [166, 166, 171],
      cr: [138, 153, 199],
      mn: [156, 122, 199],
      fe: [224, 102, 51],
      co: [240, 144, 160],
      ni: [80, 208, 80],
      cu: [200, 128, 51],
      zn: [125, 128, 176],
      ga: [194, 143, 143],
      ge: [102, 143, 143],
      as: [189, 128, 227],
      se: [255, 161, 0],
      br: [166, 41, 41],
      kr: [92, 184, 209],
      rb: [112, 46, 176],
      sr: [0, 255, 0],
      y: [148, 255, 255],
      zr: [148, 224, 224],
      nb: [115, 194, 201],
      mo: [84, 181, 181],
      tc: [59, 158, 158],
      ru: [36, 143, 143],
      rh: [10, 125, 140],
      pd: [0, 105, 133],
      ag: [192, 192, 192],
      cd: [255, 217, 143],
      "in": [166, 117, 115],
      sn: [102, 128, 128],
      sb: [158, 99, 181],
      te: [212, 122, 0],
      i: [148, 0, 148],
      xe: [66, 158, 176],
      cs: [87, 23, 143],
      ba: [0, 201, 0],
      la: [112, 212, 255],
      ce: [255, 255, 199],
      pr: [217, 255, 199],
      nd: [199, 255, 199],
      pm: [163, 255, 199],
      sm: [143, 255, 199],
      eu: [97, 255, 199],
      gd: [69, 255, 199],
      tb: [48, 255, 199],
      dy: [31, 255, 199],
      ho: [0, 255, 156],
      er: [0, 230, 117],
      tm: [0, 212, 82],
      yb: [0, 191, 56],
      lu: [0, 171, 36],
      hf: [77, 194, 255],
      ta: [77, 166, 255],
      w: [33, 148, 214],
      re: [38, 125, 171],
      os: [38, 102, 150],
      ir: [23, 84, 135],
      pt: [208, 208, 224],
      au: [255, 209, 35],
      hg: [184, 184, 208],
      tl: [166, 84, 77],
      pb: [87, 89, 97],
      bi: [158, 79, 181],
      po: [171, 92, 0],
      at: [117, 79, 69],
      rn: [66, 130, 150],
      fr: [66, 0, 102],
      ra: [0, 125, 0],
      ac: [112, 171, 250],
      th: [0, 186, 255],
      pa: [0, 161, 255],
      u: [0, 143, 255],
      np: [0, 128, 255],
      pu: [0, 107, 255],
      am: [84, 92, 242],
      cm: [120, 92, 227],
      bk: [138, 79, 227],
      cf: [161, 54, 212],
      es: [179, 31, 212],
      fm: [179, 31, 186],
      md: [179, 13, 166],
      no: [189, 13, 135],
      lr: [199, 0, 102],
      rf: [204, 0, 89],
      db: [209, 0, 79],
      sg: [217, 0, 69],
      bh: [224, 0, 56],
      hs: [230, 0, 46],
      mt: [235, 0, 38],
      ds: [235, 0, 38],
      rg: [235, 0, 38],
      cn: [235, 0, 38],
      uut: [235, 0, 38],
      uuq: [235, 0, 38],
      uup: [235, 0, 38],
      uuh: [235, 0, 38],
      uus: [235, 0, 38],
      uuo: [235, 0, 38]
    };
    atoms = extractAtoms();
    bonds = extractBonds();
    return build();
    function cellParameters(type) {
      var parameters = [];
      var lines = text.split('\n');
      for (var i = 0; i < lines.length; i++) {
        if (lines[i].startsWith("_" + type)) {
          //parameter value contains uncertainity in brackets, so strip that
          var tmp = lines[i].split(" ");
          var value = tmp[tmp.length - 1]; //last item
          parameters.push(value.split('(')[0]);
        }
      }
      return parameters;
    }
    function extractAtoms() {
      var lines = molLoop.split('\n');
      var headers = lines.filter(function (s) {
        return s.trim().startsWith('_');
      });
      var body = lines.filter(function (s) {
        return !s.trim().startsWith('_');
      });
      var disorderIndex = headers.indexOf('_atom_site_disorder_group');
      var data = [];
      for (var i = 0; i < body.length; i++) {
        var raw_data = body[i].split(' ');
        if (disorderIndex >= 0 && disorderIndex < raw_data.length && raw_data[disorderIndex] == "2" || raw_data.length != headers.length) continue;
        data.push(raw_data);
      }
      return calculateCartesian(data);
    }
    function calculateCartesian(data) {
      //variables introduced to deconfuse
      var atoms = [];
      var a = lengths[0];
      var b = lengths[1];
      var c = lengths[2];
      var alpha = angles[0];
      var beta = angles[1];
      var gamma = angles[2];
      for (var i = 0; i < data.length; i++) {
        //get xyz in fractional coordinates
        //1 is label, 2 is x, 3 is y, 4 is z
        var xFrac = data[i][2].split('(')[0];
        var yFrac = data[i][3].split('(')[0];
        var zFrac = data[i][4].split('(')[0];
        var angle = Math.PI / 180;

        //transformation matrix: see https://en.wikipedia.org/wiki/Fractional_coordinates#Conversion_to_Cartesian_coordinates
        //a21, a31, a32 = 0
        //a11 = a
        //other matrix entries as below:
        var a12 = b * Math.cos(gamma * angle);
        var a13 = c * Math.cos(beta * angle);
        var a22 = b * Math.sin(gamma * angle);
        var a23 = c * (Math.cos(alpha * angle) - Math.cos(beta * angle) * Math.cos(gamma * angle)) / Math.sin(gamma * angle);
        var a33 = c * Math.sqrt(1 - Math.pow(Math.cos(alpha * angle), 2) - Math.pow(Math.cos(beta * angle), 2) - Math.pow(Math.cos(gamma * angle), 2) + 2 * Math.cos(alpha * angle) * Math.cos(beta * angle) * Math.cos(gamma * angle)) / Math.sin(gamma * angle);

        //xyz = [A]*(xyz)_frac
        var x = a * xFrac + a12 * yFrac + a13 * zFrac;
        var y = a22 * yFrac + a23 * zFrac;
        var z = a33 * zFrac;
        var element = data[i][0].match(/([A-Z][a-z]*)/)[0];
        atoms.push({
          id: data[i][0],
          element: element,
          x: x,
          y: y,
          z: z
        });
      }
      return atoms;
    }
    function extractBonds() {
      if (!bondLoop) return [];
      var lines = bondLoop.split('\n');
      var body = lines.filter(function (s) {
        return !s.trim().startsWith('_');
      });
      var bonds = [];
      var _loop = function _loop() {
          raw_data = body[i].split(" ");
          var atom1 = raw_data[0];
          var atom2 = raw_data[1];

          //check if atoms existing
          if (atoms.filter(function (s) {
            return s.id == atom1;
          }).length == 1 && atoms.filter(function (s) {
            return s.id == atom2;
          }).length == 1) bonds.push({
            atom1: atom1,
            atom2: atom2
          });
        },
        raw_data;
      for (var i = 0; i < body.length; i++) {
        _loop();
      }
      return bonds;
    }
    function build() {
      var build = {
        geometryAtoms: new BufferGeometry(),
        geometryBonds: new BufferGeometry(),
        json: {
          atoms: atoms
        }
      };
      var geometryAtoms = build.geometryAtoms;
      var geometryBonds = build.geometryBonds;
      var vertices = [];
      var verticesBonds = [];
      var colors = [];
      for (var i = 0; i < atoms.length; i++) {
        var atom = atoms[i];
        vertices.push(atom.x, atom.y, atom.z);
        var color = CPK[atoms[i].element.toLowerCase()];
        colors.push(color[0] / 255, color[1] / 255, color[2] / 255);
      }
      geometryAtoms.setAttribute('position', new Float32BufferAttribute(vertices, 3));
      geometryAtoms.setAttribute('color', new Float32BufferAttribute(colors, 3));
      for (var i = 0; i < bonds.length; i++) {
        var bond = bonds[i];
        var atom1 = atoms.filter(function (s) {
          return s.id == bond.atom1;
        })[0];
        var atom2 = atoms.filter(function (s) {
          return s.id == bond.atom2;
        })[0];
        verticesBonds.push(atom1.x, atom1.y, atom1.z);
        verticesBonds.push(atom2.x, atom2.y, atom2.z);
      }
      geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3));
      return build;
    }
  }
});
var parse$2 = function parse(text) {
  var atoms = [];
  var bonds = [];

  //needed parameters for conversion of factorial to cartesian
  var lengths = cellParameters('cell_length');
  var angles = cellParameters('cell_angle');
  var loops = text.split('loop_');
  var molLoop = loops.find(function (s) {
    return s.includes('_atom_site_label');
  });
  var bondLoop = loops.find(function (s) {
    return s.includes('_geom_bond_atom_site_label_1');
  });

  //CPK Array "stolen" from PDBLoader https://github.com/mrdoob/three.js/blob/dev/examples/jsm/loaders/PDBLoader.js
  var CPK = {
    h: [255, 255, 255],
    he: [217, 255, 255],
    li: [204, 128, 255],
    be: [194, 255, 0],
    b: [255, 181, 181],
    c: [144, 144, 144],
    n: [48, 80, 248],
    o: [255, 13, 13],
    f: [144, 224, 80],
    ne: [179, 227, 245],
    na: [171, 92, 242],
    mg: [138, 255, 0],
    al: [191, 166, 166],
    si: [240, 200, 160],
    p: [255, 128, 0],
    s: [255, 255, 48],
    cl: [31, 240, 31],
    ar: [128, 209, 227],
    k: [143, 64, 212],
    ca: [61, 255, 0],
    sc: [230, 230, 230],
    ti: [191, 194, 199],
    v: [166, 166, 171],
    cr: [138, 153, 199],
    mn: [156, 122, 199],
    fe: [224, 102, 51],
    co: [240, 144, 160],
    ni: [80, 208, 80],
    cu: [200, 128, 51],
    zn: [125, 128, 176],
    ga: [194, 143, 143],
    ge: [102, 143, 143],
    as: [189, 128, 227],
    se: [255, 161, 0],
    br: [166, 41, 41],
    kr: [92, 184, 209],
    rb: [112, 46, 176],
    sr: [0, 255, 0],
    y: [148, 255, 255],
    zr: [148, 224, 224],
    nb: [115, 194, 201],
    mo: [84, 181, 181],
    tc: [59, 158, 158],
    ru: [36, 143, 143],
    rh: [10, 125, 140],
    pd: [0, 105, 133],
    ag: [192, 192, 192],
    cd: [255, 217, 143],
    "in": [166, 117, 115],
    sn: [102, 128, 128],
    sb: [158, 99, 181],
    te: [212, 122, 0],
    i: [148, 0, 148],
    xe: [66, 158, 176],
    cs: [87, 23, 143],
    ba: [0, 201, 0],
    la: [112, 212, 255],
    ce: [255, 255, 199],
    pr: [217, 255, 199],
    nd: [199, 255, 199],
    pm: [163, 255, 199],
    sm: [143, 255, 199],
    eu: [97, 255, 199],
    gd: [69, 255, 199],
    tb: [48, 255, 199],
    dy: [31, 255, 199],
    ho: [0, 255, 156],
    er: [0, 230, 117],
    tm: [0, 212, 82],
    yb: [0, 191, 56],
    lu: [0, 171, 36],
    hf: [77, 194, 255],
    ta: [77, 166, 255],
    w: [33, 148, 214],
    re: [38, 125, 171],
    os: [38, 102, 150],
    ir: [23, 84, 135],
    pt: [208, 208, 224],
    au: [255, 209, 35],
    hg: [184, 184, 208],
    tl: [166, 84, 77],
    pb: [87, 89, 97],
    bi: [158, 79, 181],
    po: [171, 92, 0],
    at: [117, 79, 69],
    rn: [66, 130, 150],
    fr: [66, 0, 102],
    ra: [0, 125, 0],
    ac: [112, 171, 250],
    th: [0, 186, 255],
    pa: [0, 161, 255],
    u: [0, 143, 255],
    np: [0, 128, 255],
    pu: [0, 107, 255],
    am: [84, 92, 242],
    cm: [120, 92, 227],
    bk: [138, 79, 227],
    cf: [161, 54, 212],
    es: [179, 31, 212],
    fm: [179, 31, 186],
    md: [179, 13, 166],
    no: [189, 13, 135],
    lr: [199, 0, 102],
    rf: [204, 0, 89],
    db: [209, 0, 79],
    sg: [217, 0, 69],
    bh: [224, 0, 56],
    hs: [230, 0, 46],
    mt: [235, 0, 38],
    ds: [235, 0, 38],
    rg: [235, 0, 38],
    cn: [235, 0, 38],
    uut: [235, 0, 38],
    uuq: [235, 0, 38],
    uup: [235, 0, 38],
    uuh: [235, 0, 38],
    uus: [235, 0, 38],
    uuo: [235, 0, 38]
  };
  atoms = extractAtoms();
  bonds = extractBonds();
  return build();
  function cellParameters(type) {
    var parameters = [];
    var lines = text.split('\n');
    for (var i = 0; i < lines.length; i++) {
      if (lines[i].startsWith("_" + type)) {
        //parameter value contains uncertainity in brackets, so strip that
        var tmp = lines[i].split(" ");
        var value = tmp[tmp.length - 1]; //last item
        parameters.push(value.split('(')[0]);
      }
    }
    return parameters;
  }
  function extractAtoms() {
    var lines = molLoop.split('\n');
    var headers = lines.filter(function (s) {
      return s.trim().startsWith('_');
    });
    var body = lines.filter(function (s) {
      return !s.trim().startsWith('_');
    });
    var disorderIndex = headers.indexOf('_atom_site_disorder_group');
    var data = [];
    for (var i = 0; i < body.length; i++) {
      var raw_data = body[i].split(' ');
      if (disorderIndex >= 0 && disorderIndex < raw_data.length && raw_data[disorderIndex] == "2" || raw_data.length != headers.length) continue;
      data.push(raw_data);
    }
    return calculateCartesian(data);
  }
  function calculateCartesian(data) {
    //variables introduced to deconfuse
    var atoms = [];
    var a = lengths[0];
    var b = lengths[1];
    var c = lengths[2];
    var alpha = angles[0];
    var beta = angles[1];
    var gamma = angles[2];
    for (var i = 0; i < data.length; i++) {
      //get xyz in fractional coordinates
      //1 is label, 2 is x, 3 is y, 4 is z
      var xFrac = data[i][2].split('(')[0];
      var yFrac = data[i][3].split('(')[0];
      var zFrac = data[i][4].split('(')[0];
      var angle = Math.PI / 180;

      //transformation matrix: see https://en.wikipedia.org/wiki/Fractional_coordinates#Conversion_to_Cartesian_coordinates
      //a21, a31, a32 = 0
      //a11 = a
      //other matrix entries as below:
      var a12 = b * Math.cos(gamma * angle);
      var a13 = c * Math.cos(beta * angle);
      var a22 = b * Math.sin(gamma * angle);
      var a23 = c * (Math.cos(alpha * angle) - Math.cos(beta * angle) * Math.cos(gamma * angle)) / Math.sin(gamma * angle);
      var a33 = c * Math.sqrt(1 - Math.pow(Math.cos(alpha * angle), 2) - Math.pow(Math.cos(beta * angle), 2) - Math.pow(Math.cos(gamma * angle), 2) + 2 * Math.cos(alpha * angle) * Math.cos(beta * angle) * Math.cos(gamma * angle)) / Math.sin(gamma * angle);

      //xyz = [A]*(xyz)_frac
      var x = a * xFrac + a12 * yFrac + a13 * zFrac;
      var y = a22 * yFrac + a23 * zFrac;
      var z = a33 * zFrac;
      var element = data[i][0].match(/([A-Z][a-z]*)/)[0];
      atoms.push({
        id: data[i][0],
        element: element,
        x: x,
        y: y,
        z: z
      });
    }
    return atoms;
  }
  function extractBonds() {
    var lines = bondLoop.split('\n');
    var body = lines.filter(function (s) {
      return !s.trim().startsWith('_');
    });
    var bonds = [];
    var _loop2 = function _loop2() {
        raw_data = body[i].split(" ");
        var atom1 = raw_data[0];
        var atom2 = raw_data[1];

        //check if atoms existing
        if (atoms.filter(function (s) {
          return s.id == atom1;
        }).length == 1 && atoms.filter(function (s) {
          return s.id == atom2;
        }).length == 1) bonds.push({
          atom1: atom1,
          atom2: atom2
        });
      },
      raw_data;
    for (var i = 0; i < body.length; i++) {
      _loop2();
    }
    return bonds;
  }
  function build() {
    var build = {
      geometryAtoms: new BufferGeometry(),
      geometryBonds: new BufferGeometry(),
      json: {
        atoms: atoms
      }
    };
    var geometryAtoms = build.geometryAtoms;
    var geometryBonds = build.geometryBonds;
    var vertices = [];
    var verticesBonds = [];
    var colors = [];
    for (var i = 0; i < atoms.length; i++) {
      var atom = atoms[i];
      vertices.push(atom.x, atom.y, atom.z);
      var color = CPK[atoms[i].element.toLowerCase()];
      colors.push(color[0] / 255, color[1] / 255, color[2] / 255);
    }
    geometryAtoms.setAttribute('position', new Float32BufferAttribute(vertices, 3));
    geometryAtoms.setAttribute('color', new Float32BufferAttribute(colors, 3));
    for (var i = 0; i < bonds.length; i++) {
      var bond = bonds[i];
      var atom1 = atoms.filter(function (s) {
        return s.id == bond.atom1;
      })[0];
      var atom2 = atoms.filter(function (s) {
        return s.id == bond.atom2;
      })[0];
      verticesBonds.push(atom1.x, atom1.y, atom1.z);
      verticesBonds.push(atom2.x, atom2.y, atom2.z);
    }
    geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3));
    return build;
  }
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var crystcifParse = {};

var parse$1 = {};

var tokens$1 = {exports: {}};

tokens$1.exports;
(function (module) {

  /* Rules taken from the technical specification for CIF 1.1 as seen at:
  	    https://www.iucr.org/resources/cif/spec/version1.1/cifsyntax
  */

  /* CIF format standard tokens in RegExp form
  	These Regular Expressions are meant to embody the standard syntax of CIF
  files as found at the URL above. However, they will not all be used in
  practice, as some needed features (especially the look-behind assertions) are
  relatively new and may not be supported for all users.
  	*/
  var sp = ' ';
  var ht = '\\t';
  var eol = '\\r*\\n';
  module.exports.end_of_line = eol;

  /*
  	<OrdinaryChar>:
  	{ '!' | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' 
  | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | '<' | '=' | '>' | '?' 
  | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
  | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' 
  | 'Z' | '\' | '^' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' 
  | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' 
  | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' }
   */
  var ordinary_char = "a-zA-Z0-9!%&\(\)*+,\-.\\/:<=>\?@\\^`\{\¦\}~";
  module.exports.ordinary_char = "[" + ordinary_char + "]";
  /*
  	<NonBlankChar>:
  	<OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' |';' | '[' 
  | ']' 
   */
  var nonblank_char = ordinary_char + "\"#$'_;\\[\\]";
  module.exports.nonblank_char = "[" + nonblank_char + "]";
  // These variations are useful for strings with quotes
  var nonblank_char_nosingle = ordinary_char + "\"#$_;\\[\\]";
  var nonblank_char_nodouble = ordinary_char + "#$'_;\\[\\]";
  /*
  	<TextLeadChar>:
  	<OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' | <SP> | 
  <HT> |'[' | ']' 
   */
  var textlead_char = ordinary_char + "\"#$'_\\[\\]" + sp + ht;
  module.exports.textlead_char = "[" + textlead_char + "]";
  /*
  	<AnyPrintChar>:
  	<OrdinaryChar> | <double_quote> | '#' | '$' | <single_quote> | '_' | <SP> |
  <HT> | ';' | '[' | ']'  
   */
  var anyprint_char = nonblank_char + sp + ht;
  module.exports.anyprint_char = "[" + anyprint_char + "]";
  /*
  	<Digit>
  	{ '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' }
   */
  var digit = '0-9';
  module.exports.digit = "[" + digit + "]";
  /*
  	<Comments>
  	{ '#' {<AnyPrintChar>}* <eol>}+ 
   */
  var comments = "(?:#[" + anyprint_char + "]*" + eol + ")+";
  module.exports.comments = comments;
  /*
  	<TokenizedComments>
  	{ <SP> | <HT> | <eol> |}+ <Comments>    
   */
  var tok_comments = "[" + sp + ht + eol + "]+" + comments;
  module.exports.tok_comments = tok_comments;
  /*
  	<WhiteSpace>
  	{ <SP> | <HT> | <eol> | <TokenizedComments>}+   
   */
  var whitespace = "(?:" + tok_comments + "|" + sp + "|" + ht + "|" + eol + ")+";
  module.exports.whitespace = whitespace;
  /*
  	<SemiColonTextField>
  	';' { {<AnyPrintChar>}* <eol>
  {{<TextLeadChar> {<AnyPrintChar>}*}? <eol>}*
  } ';'
   */
  var semicolontext = ";[" + anyprint_char + "]*" + eol + "(?:(?:[" + textlead_char + "][" + anyprint_char + "]*)?" + eol + ")*;";
  module.exports.semicolontext = semicolontext;
  /*
  	<SingleQuotedString>
  	<single_quote>{<AnyPrintChar>}* <single_quote>
   */
  var squotestring = "'[" + nonblank_char_nosingle + sp + ht + "]*'";
  module.exports.squotestring = squotestring;
  /*
  	<DoubleQuotedString>
  	<double_quote>{<AnyPrintChar>}* <double_quote>
   */
  var dquotestring = '"[' + nonblank_char_nodouble + sp + ht + ']*"';
  module.exports.dquotestring = dquotestring;
  /* 
  	<UnquotedString>
  	<eol><OrdinaryChar> {<NonBlankChar>}*   
  or 
  <eol><OrdinaryChar> {<NonBlankChar>}*   
  <noteol>{<OrdinaryChar>|';'} {<NonBlankChar>}
  	NOTE: this is troublesome because in theory it requires lookbehinds.
  We will try not to use it in practice. This is an approximation
  **/
  var uquotestring = "[" + eol + sp + ht + "][" + ordinary_char + "][" + nonblank_char + "]*";
  module.exports.uquotestring = uquotestring;
  /*
  	<QuotedString> 
  	<SingleQuotedString> | <DoubleQuotedString>
  */
  var quotestring = "(?:" + squotestring + "|" + dquotestring + ")";
  module.exports.quotestring = quotestring;
  /*
  	<CharString>
  	<UnquotedString> | <SingleQuotedString> | <DoubleQuotedString>  
   */
  var chrstring = "(?:" + squotestring + "|" + dquotestring + "|" + uquotestring + ")";
  module.exports.chrstring = chrstring;
  /*
  	<UnsignedInteger>
  	{ <Digit> }+
   */
  var unsigned_int = "[" + digit + "]+";
  module.exports.unsigned_int = unsigned_int;
  /*
  	<Integer>
  	{ '+' | '-' }? <UnsignedInteger>
   */
  var integer = "[+\-]?" + unsigned_int;
  module.exports.integer = integer;
  /*
  	<Exponent>
  	{ {'e' | 'E' } | {'e' | 'E' } { '+' | '- ' } } <UnsignedInteger>
   */
  var exponent = "[eE]" + integer;
  module.exports.exponent = exponent;
  /*
  	<Float>
  	{ <Integer><Exponent> | { {'+'|'-'} ? { {<Digit>} * '.' <UnsignedInteger> } |
  { <Digit>} + '.' } } {<Exponent>} ? } }
   */
  var _float = "(?:(?:[+\-]?(?:[" + digit + "]*\\." + unsigned_int + "|[" + digit + "]+\\.)(?:" + exponent + ")?)|(?:" + integer + exponent + "))";
  module.exports["float"] = _float;
  /*
  	<Number>
  	{<Integer> | <Float> }
   */
  var number = "(?:" + _float + "|" + integer + ")";
  module.exports.number = number;
  /*
  	<Numeric>
  	{ <Number> | <Number> '(' <UnsignedInteger> ')' }
   */
  var numeric = "(?:(" + number + ")\\((" + unsigned_int + ")\\)|(" + number + "))";
  module.exports.numeric = numeric;
  /*
  	<Tag>
  	'_'{ <NonBlankChar>}+
   */
  var tag = "_[" + nonblank_char + "]+";
  module.exports.tag = tag;
  /*
  	<Value> 
  	{ '.' | '?' | <Numeric> | <CharString> | <TextField> }
   */
  var value = "(\\.|\\?|" + numeric + "|" + chrstring + "|" + semicolontext + ")";
  module.exports.value = value;
  /*
  	<LOOP_>
  	*/
  var loop_kw = "[Ll][Oo][Oo][Pp]_";
  module.exports.loop_kw = loop_kw;
  /*
  	<LoopHeader>
  	<LOOP_> {<WhiteSpace> <Tag>}+
   */
  var loop_header = loop_kw + "(" + whitespace + tag + ")+";
  module.exports.loop_header = loop_header;
  /*
  	<LoopBody>
  	<Value> { <WhiteSpace> <Value> }*   
   */
  var loop_body = value + "(" + whitespace + value + ")*";
  module.exports.loop_body = loop_body;
  /*
  	<DataHeader>
  	<DATA_> { <NonBlankChar> }+
  */
  var data_header = "[Dd][Aa][Tt][Aa]_[" + nonblank_char + "]+";
  module.exports.data_header = data_header;
  /*
  	<DataItem>
  	<Tag> <WhiteSpace> <Value> | <LoopHeader> <LoopBody>
   */
  var data_item = "(?:(" + tag + ")" + whitespace + value + "|" + loop_header + loop_body + ")";
  module.exports.data_item = data_item;
  // Reserved keywords
  module.exports.reserved = "(data|loop|global|save|stop)";

  // Utility function to get ready regular expressions
  module.exports.tokenRegex = function (tname, start, end, flags) {
    var flags = flags || 'g';
    if (tname == 'reserved') {
      flags = 'gi';
    }
    var restr = module.exports[tname];
    if (start) {
      restr = '^' + restr;
    }
    if (end) {
      restr = restr + '$';
    }
    return RegExp(restr, flags);
  };
})(tokens$1);
var tokensExports = tokens$1.exports;

var tokens = tokensExports;

/** Represents a single value (string or numerical) in a CIF file.
 *  @class
 *  @param  {string}    type      Type of the value (int, float, string, mstring,
 *                                N/A or ?)
 *  @param  {*}         pvalue]   Parsed value itself (should be appropriate to
 *                                type, unnecessary for N/A and ?)
 *  @param  {int}       [prec]    Precision number (only for numerals)
 */
var CifValue = function CifValue(type, value, prec) {
  /** @member {string} */
  this.type = type;
  /** @member {int} */
  this.prec = prec;
  switch (type) {
    case 'int':
    case 'float':
      /** @member {number} */
      this.num = value;
      break;
    case 'string':
    case 'mstring':
      /** @member {string} */
      this.text = value;
      break;
  }
};
CifValue.prototype = {
  get_value: function get_value() {
    return this.num !== undefined ? this.num : this.text; // Universal function
  }
};

/** Formats an error message including line number 
 *  @param {string} msg    Error message
 *  @param {int}    line   Line number
 */
function errormsg(msg, line) {
  return new Error("ERROR @ line " + line + ": " + msg);
}

/**
 *  Split a text CIF file into elementary tokens for further processing.
 *  @param  {string} cif    CIF file in text string format
 *  @return {Array}         Array of parsed tokens
 */
function tokenize(cif) {
  /* Split into tokens (separated by non-blank characters except for the
     quoted strings and semicolon text )
  */

  // Grab a bunch of regular expressions
  var eol_re = tokens.tokenRegex('end_of_line', false, false);
  var all_re = [tokens.tokenRegex('whitespace', false, false), tokens.tokenRegex('quotestring', true), tokens.tokenRegex('semicolontext', true), tokens.tokenRegex('tag', true), tokens.tokenRegex('data_header', true), tokens.tokenRegex('loop_kw', true)];
  var tokenized = [];
  var line_index = 1;
  var cifsl = cif.slice();
  while (cifsl.length > 0) {
    var slice_i = 0;

    // First, try to see if it's any of the various non-whitespace types
    var m_type = 1;
    var m = null;
    for (; m_type < all_re.length; ++m_type) {
      m = cifsl.match(all_re[m_type]);
      if (m) break;
    }
    if (m) {
      tokenized.push({
        'val': m[0],
        'type': ['quotestring', 'semicolontext', 'tag', 'data_headers', 'loop_kw'][m_type - 1],
        'line': line_index
      });
      slice_i = m[0].length;
      // cifsl = cifsl.slice(m[0].length);
    } else {
      // Now check for whitespace
      all_re[0].lastIndex = 0;
      var w = all_re[0].exec(cifsl);
      if (w) {
        if (w.index == 0) {
          // Trim
          slice_i = w[0].length;
          // cifsl = cifsl.slice(w[0].length);
        } else {
          // Capture an unknown
          // A regular value/string
          tokenized.push({
            'val': cifsl.slice(0, w.index),
            'type': 'unknown',
            'line': line_index
          });
          slice_i = w.index + w[0].length;
          // cifsl = cifsl.slice(w.index + w[0].length);
        }
      } else {
        // Ran out of string to parse
        if (cifsl.length > 0) {
          tokenized.push({
            'val': cifsl,
            'type': 'unknown',
            'line': line_index
          });
          slice_i = cifsl.length;
        }
      }
    }

    // Slice out the next part
    var parsed = cifsl.slice(0, slice_i);
    cifsl = cifsl.slice(slice_i);
    var newlines = parsed.match(eol_re);
    if (newlines) {
      line_index += newlines.length;
    }
  }
  return tokenized;
}
parse$1.tokenize = tokenize;

/**
 *  Parse a single token as a value.
 *  @param  {Object} tok    Token to parse (must not be a reserved keyword
 *                          like a data_ or loop_ token)
 *  @return {CifValue}      Parsed value
 */
function parseValue(tok) {
  // If it's a string, easy one
  if (tok.type == 'quotestring') {
    return new CifValue('string', tok.val.slice(1, tok.val.length - 1));
  }
  if (tok.type == 'semicolontext') {
    return new CifValue('mstring', tok.val.slice(1, tok.val.length - 1));
  }
  if (tok.type != 'unknown') {
    // Something's wrong
    return null;
  }

  // We now know it's unknown, so...
  var strval = tok.val;

  // First, check for special types
  if (strval.trim() == '.') {
    return new CifValue('N/A');
  } else if (strval.trim() == '?') {
    return new CifValue('?');
  }
  var type;
  // It can be a numeric value
  var m = tokens.tokenRegex('numeric', true, true).exec(strval.trim());
  if (m) {
    // Does it have a precision?
    var prec = null;
    var strnum = m[3]; // Will be undefined if there's a precision
    if (strnum === undefined) {
      prec = parseInt(m[2]);
      strnum = m[1];
    }
    // Integer or float?
    var num;
    if (strnum.match(tokens.tokenRegex('float', true, true))) {
      num = parseFloat(strnum);
      type = 'float';
    } else {
      num = parseInt(strnum);
      type = 'int';
    }
    return new CifValue(type, num, prec);
  }

  // Or it's just an unquoted string
  return new CifValue('string', strval);
}
parse$1.parseValue = parseValue;

/**
 * Finds and splits the data blocks from a tokenized CIF file.
 * @param  {Array}   ciftokens   Array of tokens contained in the file
 * @return {Array}               Array of data blocks in the form 
 *                               [name, [tokens]]
 */
function parseDataBlocks(ciftokens) {
  // Identify all data blocks

  var tagre = tokens.tokenRegex('tag');
  var data_headers = [];
  for (var i = 0; i < ciftokens.length; ++i) {
    var tok = ciftokens[i];
    if (tok.type == 'data_headers') {
      var name = tok.val.match(tagre);
      if (name.length != 1) {
        throw errormsg('Invalid data header ' + tok.val, tok.line);
      }
      data_headers.push([i, name[0].slice(1)]);
    }
  }

  // Now gather the blocks
  var data_blocks = [];
  for (var i = 0; i < data_headers.length; ++i) {
    var dh = data_headers[i];
    var end = i < data_headers.length - 1 ? data_headers[i + 1][0] : ciftokens.length;
    var db = [dh[1], ciftokens.slice(dh[0] + 1, end)];
    data_blocks.push(db);
  }
  return data_blocks;
}
parse$1.parseDataBlocks = parseDataBlocks;

/**
 * Parses a series of tokens defining a data block into data items.
 * @param  {Array}  blocktokens  Array of tokens defining the block
 * @return {Array}               Array of parsed tata items
 */
function parseDataItems(blocktokens) {
  // Parse the data items inside a data block

  var data_items = [];

  /* There are two possible structures here:
  1) alternating series of tag - value
  2) loop with series of tags, then corresponding series of values  
  */

  // Acceptable value token types
  var vtypes = ['quotestring', 'semicolontext', 'unknown'];
  data_items = [];
  var btokens = blocktokens.slice();
  while (btokens.length > 0) {
    var btok = btokens.shift();
    // What type is it?
    if (btok === undefined) {
      break;
    }
    switch (btok.type) {
      case 'tag':
        var valtok = btokens.shift();
        if (valtok == null || !vtypes.includes(valtok.type)) {
          throw errormsg('Invalid or missing value for tag ' + btok.val, btok.line);
        }
        data_items.push({
          'tag': btok.val,
          'type': 'single',
          'value': parseValue(valtok)
        });
        break;
      case 'loop_kw':
        // Start by parsing the header
        var header = [];
        var ltok = btokens.shift();
        var loop_end = btok.line; // Keep track of line
        while (ltok !== undefined && ltok.type == 'tag') {
          header.push(ltok.val);
          loop_end = ltok.line;
          ltok = btokens.shift();
        }
        var body = [];
        while (ltok !== undefined && vtypes.includes(ltok.type)) {
          body.push(parseValue(ltok));
          loop_end = ltok.line;
          ltok = btokens.shift();
        }
        // Put back that last one...
        btokens.unshift(ltok);

        // Check if the loop is correct
        if (body.length % header.length != 0) {
          throw errormsg('Invalid loop - values must be a multiple of tags', loop_end);
        }
        var tagn = header.length;
        var loopn = body.length / header.length;
        for (var i = 0; i < header.length; ++i) {
          var di = {
            'tag': header[i],
            'type': 'loop',
            'value': []
          };
          for (var j = 0; j < loopn; ++j) {
            di.value.push(body[j * tagn + i]);
          }
          data_items.push(di);
        }
        break;
    }
  }
  return data_items;
}
parse$1.parseDataItems = parseDataItems;

/**
 * Parses a cif file returning the data blocks and items (not interpreted).
 * @param  {string} ciftext CIF file as a string
 * @return {Object}         Parsed CIF file as data structure
 */
parse$1.parseCif = function parseCif(ciftext) {
  // First, extract the tokens
  var tk = tokenize(ciftext);
  // Then the blocks
  var db = parseDataBlocks(tk);
  // Now on to the items for each block
  var cifdict = {};
  for (var i = 0; i < db.length; ++i) {
    var block = db[i];
    cifdict[block[0]] = {};
    // SAVE frames are not supported for now, so we only look 
    // for data items
    var items = parseDataItems(block[1]);
    for (var j = 0; j < items.length; ++j) {
      cifdict[block[0]][items[j].tag] = items[j];
    }
  }
  return cifdict;
};

var cryst = {};

var DEFAULT_CONFIG = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: 'Matrix',
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: 'number',
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: false,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};

function _typeof$d(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$d = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$d = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$d(obj);
}

// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
function isNumber(x) {
  return typeof x === 'number';
}
function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber === true || false;
}
function isComplex(x) {
  return x && _typeof$d(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}
function isFraction(x) {
  return x && _typeof$d(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}
function isUnit(x) {
  return x && x.constructor.prototype.isUnit === true || false;
}
function isString(x) {
  return typeof x === 'string';
}
var isArray = Array.isArray;
function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix === true || false;
}
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */

function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
}
function isDenseMatrix(x) {
  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isSparseMatrix(x) {
  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}
function isRange(x) {
  return x && x.constructor.prototype.isRange === true || false;
}
function isIndex(x) {
  return x && x.constructor.prototype.isIndex === true || false;
}
function isBoolean(x) {
  return typeof x === 'boolean';
}
function isResultSet(x) {
  return x && x.constructor.prototype.isResultSet === true || false;
}
function isHelp(x) {
  return x && x.constructor.prototype.isHelp === true || false;
}
function isFunction(x) {
  return typeof x === 'function';
}
function isDate(x) {
  return x instanceof Date;
}
function isRegExp(x) {
  return x instanceof RegExp;
}
function isObject(x) {
  return !!(x && _typeof$d(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}
function isNull(x) {
  return x === null;
}
function isUndefined(x) {
  return x === undefined;
}
function isAccessorNode(x) {
  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}
function isArrayNode(x) {
  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}
function isAssignmentNode(x) {
  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isBlockNode(x) {
  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}
function isConditionalNode(x) {
  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}
function isConstantNode(x) {
  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionAssignmentNode(x) {
  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}
function isFunctionNode(x) {
  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}
function isIndexNode(x) {
  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}
function isNode(x) {
  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}
function isObjectNode(x) {
  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}
function isOperatorNode(x) {
  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}
function isParenthesisNode(x) {
  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}
function isRangeNode(x) {
  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}
function isSymbolNode(x) {
  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}
function isChain(x) {
  return x && x.constructor.prototype.isChain === true || false;
}
function typeOf$1(x) {
  var t = _typeof$d(x);
  if (t === 'object') {
    // JavaScript types
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp'; // math.js types

    if (isBigNumber(x)) return 'BigNumber';
    if (isComplex(x)) return 'Complex';
    if (isFraction(x)) return 'Fraction';
    if (isMatrix(x)) return 'Matrix';
    if (isUnit(x)) return 'Unit';
    if (isIndex(x)) return 'Index';
    if (isRange(x)) return 'Range';
    if (isResultSet(x)) return 'ResultSet';
    if (isNode(x)) return x.type;
    if (isChain(x)) return 'Chain';
    if (isHelp(x)) return 'Help';
    return 'Object';
  }
  if (t === 'function') return 'Function';
  return t; // can be 'string', 'number', 'boolean', ...
}

function _typeof$c(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$c = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$c = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$c(obj);
}
/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */

function clone$2(x) {
  var type = _typeof$c(x); // immutable primitive types

  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available

  if (typeof x.clone === 'function') {
    return x.clone();
  } // array

  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone$2(value);
    });
  }
  if (x instanceof Date) return new Date(x.valueOf());
  if (isBigNumber(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return mapObject(x, clone$2);
}
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */

function mapObject(object, callback) {
  var clone = {};
  for (var key in object) {
    if (hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }
  return clone;
}
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */

function extend(a, b) {
  for (var prop in b) {
    if (hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }
  return a;
}
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */

function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }
  for (var prop in b) {
    // We check against prop not being in Object.prototype or Function.prototype
    // to prevent polluting for example Object.__proto__.
    if (hasOwnProperty(b, prop) && !(prop in Object.prototype) && !(prop in Function.prototype)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }
        if (a[prop] && a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }
  return a;
}
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */

function deepStrictEqual(a, b) {
  var prop, i, len;
  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (i = 0, len = a.length; i < len; i++) {
      if (!deepStrictEqual(a[i], b[i])) {
        return false;
      }
    }
    return true;
  } else if (typeof a === 'function') {
    return a === b;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }
    for (prop in a) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }
    for (prop in b) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }
    return true;
  } else {
    return a === b;
  }
}
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */

function deepFlatten(nestedObject) {
  var flattenedObject = {};
  _deepFlatten(nestedObject, flattenedObject);
  return flattenedObject;
} // helper function used by deepFlatten

function _deepFlatten(nestedObject, flattenedObject) {
  for (var prop in nestedObject) {
    if (hasOwnProperty(nestedObject, prop)) {
      var value = nestedObject[prop];
      if (_typeof$c(value) === 'object' && value !== null) {
        _deepFlatten(value, flattenedObject);
      } else {
        flattenedObject[prop] = value;
      }
    }
  }
}
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */

function lazy(object, prop, valueResolver) {
  var _uninitialized = true;
  var _value;
  Object.defineProperty(object, prop, {
    get: function get() {
      if (_uninitialized) {
        _value = valueResolver();
        _uninitialized = false;
      }
      return _value;
    },
    set: function set(value) {
      _value = value;
      _uninitialized = false;
    },
    configurable: true,
    enumerable: true
  });
}
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */

function hasOwnProperty(object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */

function isLegacyFactory(object) {
  return object && typeof object.factory === 'function';
}
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */

function pickShallow(object, properties) {
  var copy = {};
  for (var i = 0; i < properties.length; i++) {
    var key = properties[i];
    var value = object[key];
    if (value !== undefined) {
      copy[key] = value;
    }
  }
  return copy;
}
function values(object) {
  return Object.keys(object).map(function (key) {
    return object[key];
  });
} // helper function to test whether a string contains a path like 'user.name'

var MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

var NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

function configFactory(config, emit) {
  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      var prev = mapObject(config, clone$2); // validate some of the options

      validateOption(options, 'matrix', MATRIX_OPTIONS);
      validateOption(options, 'number', NUMBER_OPTIONS); // merge options

      deepExtend(config, options);
      var curr = mapObject(config, clone$2);
      var changes = mapObject(options, clone$2); // emit 'config' event

      emit('config', curr, prev, changes);
      return curr;
    } else {
      return mapObject(config, clone$2);
    }
  } // attach the valid options to the function so they can be extended

  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function

  Object.keys(DEFAULT_CONFIG).forEach(function (key) {
    Object.defineProperty(_config, key, {
      get: function get() {
        return config[key];
      },
      enumerable: true,
      configurable: true
    });
  });
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */

function contains$1(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */

function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains$1(values, options[name])) {
    // unknown value
    console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". ' + 'Available options: ' + values.map(function (value) {
      return JSON.stringify(value);
    }).join(', ') + '.');
  }
}

function _extends$7() {
  _extends$7 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$7.apply(this, arguments);
}

var config$1 = function config(options) {
  if (options) {
    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
  }
  return Object.freeze(DEFAULT_CONFIG);
};
_extends$7(config$1, DEFAULT_CONFIG, {
  MATRIX_OPTIONS: MATRIX_OPTIONS,
  NUMBER_OPTIONS: NUMBER_OPTIONS
});

var typedFunction$1 = {exports: {}};

(function (module, exports) {

  (function (root, factory) {
    {
      // OldNode. Does not work with strict CommonJS, but
      // only CommonJS-like environments that support module.exports,
      // like OldNode.
      module.exports = factory();
    }
  })(commonjsGlobal, function () {
    function ok() {
      return true;
    }
    function notOk() {
      return false;
    }
    function undef() {
      return undefined;
    }

    /**
     * @typedef {{
     *   params: Param[],
     *   fn: function
     * }} Signature
     *
     * @typedef {{
     *   types: Type[],
     *   restParam: boolean
     * }} Param
     *
     * @typedef {{
     *   name: string,
     *   typeIndex: number,
     *   test: function,
     *   conversion?: ConversionDef,
     *   conversionIndex: number,
     * }} Type
     *
     * @typedef {{
     *   from: string,
     *   to: string,
     *   convert: function (*) : *
     * }} ConversionDef
     *
     * @typedef {{
     *   name: string,
     *   test: function(*) : boolean
     * }} TypeDef
     */

    // create a new instance of typed-function
    function create() {
      // data type tests
      var _types = [{
        name: 'number',
        test: function test(x) {
          return typeof x === 'number';
        }
      }, {
        name: 'string',
        test: function test(x) {
          return typeof x === 'string';
        }
      }, {
        name: 'boolean',
        test: function test(x) {
          return typeof x === 'boolean';
        }
      }, {
        name: 'Function',
        test: function test(x) {
          return typeof x === 'function';
        }
      }, {
        name: 'Array',
        test: Array.isArray
      }, {
        name: 'Date',
        test: function test(x) {
          return x instanceof Date;
        }
      }, {
        name: 'RegExp',
        test: function test(x) {
          return x instanceof RegExp;
        }
      }, {
        name: 'Object',
        test: function test(x) {
          return _typeof$e(x) === 'object' && x !== null && x.constructor === Object;
        }
      }, {
        name: 'null',
        test: function test(x) {
          return x === null;
        }
      }, {
        name: 'undefined',
        test: function test(x) {
          return x === undefined;
        }
      }];
      var anyType = {
        name: 'any',
        test: ok
      };

      // types which need to be ignored
      var _ignore = [];

      // type conversions
      var _conversions = [];

      // This is a temporary object, will be replaced with a typed function at the end
      var typed = {
        types: _types,
        conversions: _conversions,
        ignore: _ignore
      };

      /**
       * Find the test function for a type
       * @param {String} typeName
       * @return {TypeDef} Returns the type definition when found,
       *                    Throws a TypeError otherwise
       */
      function findTypeByName(typeName) {
        var entry = findInArray(typed.types, function (entry) {
          return entry.name === typeName;
        });
        if (entry) {
          return entry;
        }
        if (typeName === 'any') {
          // special baked-in case 'any'
          return anyType;
        }
        var hint = findInArray(typed.types, function (entry) {
          return entry.name.toLowerCase() === typeName.toLowerCase();
        });
        throw new TypeError('Unknown type "' + typeName + '"' + (hint ? '. Did you mean "' + hint.name + '"?' : ''));
      }

      /**
       * Find the index of a type definition. Handles special case 'any'
       * @param {TypeDef} type
       * @return {number}
       */
      function findTypeIndex(type) {
        if (type === anyType) {
          return 999;
        }
        return typed.types.indexOf(type);
      }

      /**
       * Find a type that matches a value.
       * @param {*} value
       * @return {string} Returns the name of the first type for which
       *                  the type test matches the value.
       */
      function findTypeName(value) {
        var entry = findInArray(typed.types, function (entry) {
          return entry.test(value);
        });
        if (entry) {
          return entry.name;
        }
        throw new TypeError('Value has unknown type. Value: ' + value);
      }

      /**
       * Find a specific signature from a (composed) typed function, for example:
       *
       *   typed.find(fn, ['number', 'string'])
       *   typed.find(fn, 'number, string')
       *
       * Function find only only works for exact matches.
       *
       * @param {Function} fn                   A typed-function
       * @param {string | string[]} signature   Signature to be found, can be
       *                                        an array or a comma separated string.
       * @return {Function}                     Returns the matching signature, or
       *                                        throws an error when no signature
       *                                        is found.
       */
      function find(fn, signature) {
        if (!fn.signatures) {
          throw new TypeError('Function is no typed-function');
        }

        // normalize input
        var arr;
        if (typeof signature === 'string') {
          arr = signature.split(',');
          for (var i = 0; i < arr.length; i++) {
            arr[i] = arr[i].trim();
          }
        } else if (Array.isArray(signature)) {
          arr = signature;
        } else {
          throw new TypeError('String array or a comma separated string expected');
        }
        var str = arr.join(',');

        // find an exact match
        var match = fn.signatures[str];
        if (match) {
          return match;
        }

        // TODO: extend find to match non-exact signatures

        throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
      }

      /**
       * Convert a given value to another data type.
       * @param {*} value
       * @param {string} type
       */
      function convert(value, type) {
        var from = findTypeName(value);

        // check conversion is needed
        if (type === from) {
          return value;
        }
        for (var i = 0; i < typed.conversions.length; i++) {
          var conversion = typed.conversions[i];
          if (conversion.from === from && conversion.to === type) {
            return conversion.convert(value);
          }
        }
        throw new Error('Cannot convert from ' + from + ' to ' + type);
      }

      /**
       * Stringify parameters in a normalized way
       * @param {Param[]} params
       * @return {string}
       */
      function stringifyParams(params) {
        return params.map(function (param) {
          var typeNames = param.types.map(getTypeName);
          return (param.restParam ? '...' : '') + typeNames.join('|');
        }).join(',');
      }

      /**
       * Parse a parameter, like "...number | boolean"
       * @param {string} param
       * @param {ConversionDef[]} conversions
       * @return {Param} param
       */
      function parseParam(param, conversions) {
        var restParam = param.indexOf('...') === 0;
        var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
        var typeNames = types.split('|').map(trim).filter(notEmpty).filter(notIgnore);
        var matchingConversions = filterConversions(conversions, typeNames);
        var exactTypes = typeNames.map(function (typeName) {
          var type = findTypeByName(typeName);
          return {
            name: typeName,
            typeIndex: findTypeIndex(type),
            test: type.test,
            conversion: null,
            conversionIndex: -1
          };
        });
        var convertibleTypes = matchingConversions.map(function (conversion) {
          var type = findTypeByName(conversion.from);
          return {
            name: conversion.from,
            typeIndex: findTypeIndex(type),
            test: type.test,
            conversion: conversion,
            conversionIndex: conversions.indexOf(conversion)
          };
        });
        return {
          types: exactTypes.concat(convertibleTypes),
          restParam: restParam
        };
      }

      /**
       * Parse a signature with comma separated parameters,
       * like "number | boolean, ...string"
       * @param {string} signature
       * @param {function} fn
       * @param {ConversionDef[]} conversions
       * @return {Signature | null} signature
       */
      function parseSignature(signature, fn, conversions) {
        var params = [];
        if (signature.trim() !== '') {
          params = signature.split(',').map(trim).map(function (param, index, array) {
            var parsedParam = parseParam(param, conversions);
            if (parsedParam.restParam && index !== array.length - 1) {
              throw new SyntaxError('Unexpected rest parameter "' + param + '": ' + 'only allowed for the last parameter');
            }
            return parsedParam;
          });
        }
        if (params.some(isInvalidParam)) {
          // invalid signature: at least one parameter has no types
          // (they may have been filtered)
          return null;
        }
        return {
          params: params,
          fn: fn
        };
      }

      /**
       * Test whether a set of params contains a restParam
       * @param {Param[]} params
       * @return {boolean} Returns true when the last parameter is a restParam
       */
      function hasRestParam(params) {
        var param = last(params);
        return param ? param.restParam : false;
      }

      /**
       * Test whether a parameter contains conversions
       * @param {Param} param
       * @return {boolean} Returns true when at least one of the parameters
       *                   contains a conversion.
       */
      function hasConversions(param) {
        return param.types.some(function (type) {
          return type.conversion != null;
        });
      }

      /**
       * Create a type test for a single parameter, which can have one or multiple
       * types.
       * @param {Param} param
       * @return {function(x: *) : boolean} Returns a test function
       */
      function compileTest(param) {
        if (!param || param.types.length === 0) {
          // nothing to do
          return ok;
        } else if (param.types.length === 1) {
          return findTypeByName(param.types[0].name).test;
        } else if (param.types.length === 2) {
          var test0 = findTypeByName(param.types[0].name).test;
          var test1 = findTypeByName(param.types[1].name).test;
          return function or(x) {
            return test0(x) || test1(x);
          };
        } else {
          // param.types.length > 2
          var tests = param.types.map(function (type) {
            return findTypeByName(type.name).test;
          });
          return function or(x) {
            for (var i = 0; i < tests.length; i++) {
              if (tests[i](x)) {
                return true;
              }
            }
            return false;
          };
        }
      }

      /**
       * Create a test for all parameters of a signature
       * @param {Param[]} params
       * @return {function(args: Array<*>) : boolean}
       */
      function compileTests(params) {
        var tests, test0, test1;
        if (hasRestParam(params)) {
          // variable arguments like '...number'
          tests = initial(params).map(compileTest);
          var varIndex = tests.length;
          var lastTest = compileTest(last(params));
          var testRestParam = function testRestParam(args) {
            for (var i = varIndex; i < args.length; i++) {
              if (!lastTest(args[i])) {
                return false;
              }
            }
            return true;
          };
          return function testArgs(args) {
            for (var i = 0; i < tests.length; i++) {
              if (!tests[i](args[i])) {
                return false;
              }
            }
            return testRestParam(args) && args.length >= varIndex + 1;
          };
        } else {
          // no variable arguments
          if (params.length === 0) {
            return function testArgs(args) {
              return args.length === 0;
            };
          } else if (params.length === 1) {
            test0 = compileTest(params[0]);
            return function testArgs(args) {
              return test0(args[0]) && args.length === 1;
            };
          } else if (params.length === 2) {
            test0 = compileTest(params[0]);
            test1 = compileTest(params[1]);
            return function testArgs(args) {
              return test0(args[0]) && test1(args[1]) && args.length === 2;
            };
          } else {
            // arguments.length > 2
            tests = params.map(compileTest);
            return function testArgs(args) {
              for (var i = 0; i < tests.length; i++) {
                if (!tests[i](args[i])) {
                  return false;
                }
              }
              return args.length === tests.length;
            };
          }
        }
      }

      /**
       * Find the parameter at a specific index of a signature.
       * Handles rest parameters.
       * @param {Signature} signature
       * @param {number} index
       * @return {Param | null} Returns the matching parameter when found,
       *                        null otherwise.
       */
      function getParamAtIndex(signature, index) {
        return index < signature.params.length ? signature.params[index] : hasRestParam(signature.params) ? last(signature.params) : null;
      }

      /**
       * Get all type names of a parameter
       * @param {Signature} signature
       * @param {number} index
       * @param {boolean} excludeConversions
       * @return {string[]} Returns an array with type names
       */
      function getExpectedTypeNames(signature, index, excludeConversions) {
        var param = getParamAtIndex(signature, index);
        var types = param ? excludeConversions ? param.types.filter(isExactType) : param.types : [];
        return types.map(getTypeName);
      }

      /**
       * Returns the name of a type
       * @param {Type} type
       * @return {string} Returns the type name
       */
      function getTypeName(type) {
        return type.name;
      }

      /**
       * Test whether a type is an exact type or conversion
       * @param {Type} type
       * @return {boolean} Returns true when
       */
      function isExactType(type) {
        return type.conversion === null || type.conversion === undefined;
      }

      /**
       * Helper function for creating error messages: create an array with
       * all available types on a specific argument index.
       * @param {Signature[]} signatures
       * @param {number} index
       * @return {string[]} Returns an array with available types
       */
      function mergeExpectedParams(signatures, index) {
        var typeNames = uniq(flatMap(signatures, function (signature) {
          return getExpectedTypeNames(signature, index, false);
        }));
        return typeNames.indexOf('any') !== -1 ? ['any'] : typeNames;
      }

      /**
       * Create
       * @param {string} name             The name of the function
       * @param {array.<*>} args          The actual arguments passed to the function
       * @param {Signature[]} signatures  A list with available signatures
       * @return {TypeError} Returns a type error with additional data
       *                     attached to it in the property `data`
       */
      function createError(name, args, signatures) {
        var err, expected;
        var _name = name || 'unnamed';

        // test for wrong type at some index
        var matchingSignatures = signatures;
        var index;
        for (index = 0; index < args.length; index++) {
          var nextMatchingDefs = matchingSignatures.filter(function (signature) {
            var test = compileTest(getParamAtIndex(signature, index));
            return (index < signature.params.length || hasRestParam(signature.params)) && test(args[index]);
          });
          if (nextMatchingDefs.length === 0) {
            // no matching signatures anymore, throw error "wrong type"
            expected = mergeExpectedParams(matchingSignatures, index);
            if (expected.length > 0) {
              var actualType = findTypeName(args[index]);
              err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')');
              err.data = {
                category: 'wrongType',
                fn: _name,
                index: index,
                actual: actualType,
                expected: expected
              };
              return err;
            }
          } else {
            matchingSignatures = nextMatchingDefs;
          }
        }

        // test for too few arguments
        var lengths = matchingSignatures.map(function (signature) {
          return hasRestParam(signature.params) ? Infinity : signature.params.length;
        });
        if (args.length < Math.min.apply(null, lengths)) {
          expected = mergeExpectedParams(matchingSignatures, index);
          err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
          err.data = {
            category: 'tooFewArgs',
            fn: _name,
            index: args.length,
            expected: expected
          };
          return err;
        }

        // test for too many arguments
        var maxLength = Math.max.apply(null, lengths);
        if (args.length > maxLength) {
          err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
          err.data = {
            category: 'tooManyArgs',
            fn: _name,
            index: args.length,
            expectedLength: maxLength
          };
          return err;
        }
        err = new TypeError('Arguments of type "' + args.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
        err.data = {
          category: 'mismatch',
          actual: args.map(findTypeName)
        };
        return err;
      }

      /**
       * Find the lowest index of all exact types of a parameter (no conversions)
       * @param {Param} param
       * @return {number} Returns the index of the lowest type in typed.types
       */
      function getLowestTypeIndex(param) {
        var min = 999;
        for (var i = 0; i < param.types.length; i++) {
          if (isExactType(param.types[i])) {
            min = Math.min(min, param.types[i].typeIndex);
          }
        }
        return min;
      }

      /**
       * Find the lowest index of the conversion of all types of the parameter
       * having a conversion
       * @param {Param} param
       * @return {number} Returns the lowest index of the conversions of this type
       */
      function getLowestConversionIndex(param) {
        var min = 999;
        for (var i = 0; i < param.types.length; i++) {
          if (!isExactType(param.types[i])) {
            min = Math.min(min, param.types[i].conversionIndex);
          }
        }
        return min;
      }

      /**
       * Compare two params
       * @param {Param} param1
       * @param {Param} param2
       * @return {number} returns a negative number when param1 must get a lower
       *                  index than param2, a positive number when the opposite,
       *                  or zero when both are equal
       */
      function compareParams(param1, param2) {
        var c;

        // compare having a rest parameter or not
        c = param1.restParam - param2.restParam;
        if (c !== 0) {
          return c;
        }

        // compare having conversions or not
        c = hasConversions(param1) - hasConversions(param2);
        if (c !== 0) {
          return c;
        }

        // compare the index of the types
        c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
        if (c !== 0) {
          return c;
        }

        // compare the index of any conversion
        return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
      }

      /**
       * Compare two signatures
       * @param {Signature} signature1
       * @param {Signature} signature2
       * @return {number} returns a negative number when param1 must get a lower
       *                  index than param2, a positive number when the opposite,
       *                  or zero when both are equal
       */
      function compareSignatures(signature1, signature2) {
        var len = Math.min(signature1.params.length, signature2.params.length);
        var i;
        var c;

        // compare whether the params have conversions at all or not
        c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
        if (c !== 0) {
          return c;
        }

        // next compare whether the params have conversions one by one
        for (i = 0; i < len; i++) {
          c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
          if (c !== 0) {
            return c;
          }
        }

        // compare the types of the params one by one
        for (i = 0; i < len; i++) {
          c = compareParams(signature1.params[i], signature2.params[i]);
          if (c !== 0) {
            return c;
          }
        }

        // compare the number of params
        return signature1.params.length - signature2.params.length;
      }

      /**
       * Get params containing all types that can be converted to the defined types.
       *
       * @param {ConversionDef[]} conversions
       * @param {string[]} typeNames
       * @return {ConversionDef[]} Returns the conversions that are available
       *                        for every type (if any)
       */
      function filterConversions(conversions, typeNames) {
        var matches = {};
        conversions.forEach(function (conversion) {
          if (typeNames.indexOf(conversion.from) === -1 && typeNames.indexOf(conversion.to) !== -1 && !matches[conversion.from]) {
            matches[conversion.from] = conversion;
          }
        });
        return Object.keys(matches).map(function (from) {
          return matches[from];
        });
      }

      /**
       * Preprocess arguments before calling the original function:
       * - if needed convert the parameters
       * - in case of rest parameters, move the rest parameters into an Array
       * @param {Param[]} params
       * @param {function} fn
       * @return {function} Returns a wrapped function
       */
      function compileArgsPreprocessing(params, fn) {
        var fnConvert = fn;

        // TODO: can we make this wrapper function smarter/simpler?

        if (params.some(hasConversions)) {
          var restParam = hasRestParam(params);
          var compiledConversions = params.map(compileArgConversion);
          fnConvert = function convertArgs() {
            var args = [];
            var last = restParam ? arguments.length - 1 : arguments.length;
            for (var i = 0; i < last; i++) {
              args[i] = compiledConversions[i](arguments[i]);
            }
            if (restParam) {
              args[last] = arguments[last].map(compiledConversions[last]);
            }
            return fn.apply(this, args);
          };
        }
        var fnPreprocess = fnConvert;
        if (hasRestParam(params)) {
          var offset = params.length - 1;
          fnPreprocess = function preprocessRestParams() {
            return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));
          };
        }
        return fnPreprocess;
      }

      /**
       * Compile conversion for a parameter to the right type
       * @param {Param} param
       * @return {function} Returns the wrapped function that will convert arguments
       *
       */
      function compileArgConversion(param) {
        var test0, test1, conversion0, conversion1;
        var tests = [];
        var conversions = [];
        param.types.forEach(function (type) {
          if (type.conversion) {
            tests.push(findTypeByName(type.conversion.from).test);
            conversions.push(type.conversion.convert);
          }
        });

        // create optimized conversion functions depending on the number of conversions
        switch (conversions.length) {
          case 0:
            return function convertArg(arg) {
              return arg;
            };
          case 1:
            test0 = tests[0];
            conversion0 = conversions[0];
            return function convertArg(arg) {
              if (test0(arg)) {
                return conversion0(arg);
              }
              return arg;
            };
          case 2:
            test0 = tests[0];
            test1 = tests[1];
            conversion0 = conversions[0];
            conversion1 = conversions[1];
            return function convertArg(arg) {
              if (test0(arg)) {
                return conversion0(arg);
              }
              if (test1(arg)) {
                return conversion1(arg);
              }
              return arg;
            };
          default:
            return function convertArg(arg) {
              for (var i = 0; i < conversions.length; i++) {
                if (tests[i](arg)) {
                  return conversions[i](arg);
                }
              }
              return arg;
            };
        }
      }

      /**
       * Convert an array with signatures into a map with signatures,
       * where signatures with union types are split into separate signatures
       *
       * Throws an error when there are conflicting types
       *
       * @param {Signature[]} signatures
       * @return {Object.<string, function>}  Returns a map with signatures
       *                                      as key and the original function
       *                                      of this signature as value.
       */
      function createSignaturesMap(signatures) {
        var signaturesMap = {};
        signatures.forEach(function (signature) {
          if (!signature.params.some(hasConversions)) {
            splitParams(signature.params, true).forEach(function (params) {
              signaturesMap[stringifyParams(params)] = signature.fn;
            });
          }
        });
        return signaturesMap;
      }

      /**
       * Split params with union types in to separate params.
       *
       * For example:
       *
       *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
       *     // returns:
       *     // [
       *     //   ['Array', 'string'],
       *     //   ['Array', 'RegExp'],
       *     //   ['Object', 'string'],
       *     //   ['Object', 'RegExp']
       *     // ]
       *
       * @param {Param[]} params
       * @param {boolean} ignoreConversionTypes
       * @return {Param[]}
       */
      function splitParams(params, ignoreConversionTypes) {
        function _splitParams(params, index, types) {
          if (index < params.length) {
            var param = params[index];
            var filteredTypes = ignoreConversionTypes ? param.types.filter(isExactType) : param.types;
            var typeGroups;
            if (param.restParam) {
              // split the types of a rest parameter in two:
              // one with only exact types, and one with exact types and conversions
              var exactTypes = filteredTypes.filter(isExactType);
              typeGroups = exactTypes.length < filteredTypes.length ? [exactTypes, filteredTypes] : [filteredTypes];
            } else {
              // split all the types of a regular parameter into one type per group
              typeGroups = filteredTypes.map(function (type) {
                return [type];
              });
            }

            // recurse over the groups with types
            return flatMap(typeGroups, function (typeGroup) {
              return _splitParams(params, index + 1, types.concat([typeGroup]));
            });
          } else {
            // we've reached the end of the parameters. Now build a new Param
            var splittedParams = types.map(function (type, typeIndex) {
              return {
                types: type,
                restParam: typeIndex === params.length - 1 && hasRestParam(params)
              };
            });
            return [splittedParams];
          }
        }
        return _splitParams(params, 0, []);
      }

      /**
       * Test whether two signatures have a conflicting signature
       * @param {Signature} signature1
       * @param {Signature} signature2
       * @return {boolean} Returns true when the signatures conflict, false otherwise.
       */
      function hasConflictingParams(signature1, signature2) {
        var ii = Math.max(signature1.params.length, signature2.params.length);
        for (var i = 0; i < ii; i++) {
          var typesNames1 = getExpectedTypeNames(signature1, i, true);
          var typesNames2 = getExpectedTypeNames(signature2, i, true);
          if (!hasOverlap(typesNames1, typesNames2)) {
            return false;
          }
        }
        var len1 = signature1.params.length;
        var len2 = signature2.params.length;
        var restParam1 = hasRestParam(signature1.params);
        var restParam2 = hasRestParam(signature2.params);
        return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
      }

      /**
       * Create a typed function
       * @param {String} name               The name for the typed function
       * @param {Object.<string, function>} signaturesMap
       *                                    An object with one or
       *                                    multiple signatures as key, and the
       *                                    function corresponding to the
       *                                    signature as value.
       * @return {function}  Returns the created typed function.
       */
      function createTypedFunction(name, signaturesMap) {
        if (Object.keys(signaturesMap).length === 0) {
          throw new SyntaxError('No signatures provided');
        }

        // parse the signatures, and check for conflicts
        var parsedSignatures = [];
        Object.keys(signaturesMap).map(function (signature) {
          return parseSignature(signature, signaturesMap[signature], typed.conversions);
        }).filter(notNull).forEach(function (parsedSignature) {
          // check whether this parameter conflicts with already parsed signatures
          var conflictingSignature = findInArray(parsedSignatures, function (s) {
            return hasConflictingParams(s, parsedSignature);
          });
          if (conflictingSignature) {
            throw new TypeError('Conflicting signatures "' + stringifyParams(conflictingSignature.params) + '" and "' + stringifyParams(parsedSignature.params) + '".');
          }
          parsedSignatures.push(parsedSignature);
        });

        // split and filter the types of the signatures, and then order them
        var signatures = flatMap(parsedSignatures, function (parsedSignature) {
          var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];
          return params.map(function (params) {
            return {
              params: params,
              fn: parsedSignature.fn
            };
          });
        }).filter(notNull);
        signatures.sort(compareSignatures);

        // we create a highly optimized checks for the first couple of signatures with max 2 arguments
        var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
        var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
        var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
        var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
        var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
        var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
        var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

        // compile the tests
        var tests = signatures.map(function (signature) {
          return compileTests(signature.params);
        });
        var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
        var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
        var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
        var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
        var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
        var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
        var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
        var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
        var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
        var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
        var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
        var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

        // compile the functions
        var fns = signatures.map(function (signature) {
          return compileArgsPreprocessing(signature.params, signature.fn);
        });
        var fn0 = ok0 ? fns[0] : undef;
        var fn1 = ok1 ? fns[1] : undef;
        var fn2 = ok2 ? fns[2] : undef;
        var fn3 = ok3 ? fns[3] : undef;
        var fn4 = ok4 ? fns[4] : undef;
        var fn5 = ok5 ? fns[5] : undef;
        var len0 = ok0 ? signatures[0].params.length : -1;
        var len1 = ok1 ? signatures[1].params.length : -1;
        var len2 = ok2 ? signatures[2].params.length : -1;
        var len3 = ok3 ? signatures[3].params.length : -1;
        var len4 = ok4 ? signatures[4].params.length : -1;
        var len5 = ok5 ? signatures[5].params.length : -1;

        // simple and generic, but also slow
        var iStart = allOk ? 6 : 0;
        var iEnd = signatures.length;
        var generic = function generic() {

          for (var i = iStart; i < iEnd; i++) {
            if (tests[i](arguments)) {
              return fns[i].apply(this, arguments);
            }
          }
          return typed.onMismatch(name, arguments, signatures);
        };

        // create the typed function
        // fast, specialized version. Falls back to the slower, generic one if needed
        var fn = function fn(arg0, arg1) {

          if (arguments.length === len0 && test00(arg0) && test01(arg1)) {
            return fn0.apply(fn, arguments);
          }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) {
            return fn1.apply(fn, arguments);
          }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) {
            return fn2.apply(fn, arguments);
          }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) {
            return fn3.apply(fn, arguments);
          }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) {
            return fn4.apply(fn, arguments);
          }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) {
            return fn5.apply(fn, arguments);
          }
          return generic.apply(fn, arguments);
        };

        // attach name the typed function
        try {
          Object.defineProperty(fn, 'name', {
            value: name
          });
        } catch (err) {
          // old browsers do not support Object.defineProperty and some don't support setting the name property
          // the function name is not essential for the functioning, it's mostly useful for debugging,
          // so it's fine to have unnamed functions.
        }

        // attach signatures to the function
        fn.signatures = createSignaturesMap(signatures);
        return fn;
      }

      /**
       * Action to take on mismatch
       * @param {string} name      Name of function that was attempted to be called
       * @param {Array} args       Actual arguments to the call
       * @param {Array} signatures Known signatures of the named typed-function
       */
      function _onMismatch(name, args, signatures) {
        throw createError(name, args, signatures);
      }

      /**
       * Test whether a type should be NOT be ignored
       * @param {string} typeName
       * @return {boolean}
       */
      function notIgnore(typeName) {
        return typed.ignore.indexOf(typeName) === -1;
      }

      /**
       * trim a string
       * @param {string} str
       * @return {string}
       */
      function trim(str) {
        return str.trim();
      }

      /**
       * Test whether a string is not empty
       * @param {string} str
       * @return {boolean}
       */
      function notEmpty(str) {
        return !!str;
      }

      /**
       * test whether a value is not strict equal to null
       * @param {*} value
       * @return {boolean}
       */
      function notNull(value) {
        return value !== null;
      }

      /**
       * Test whether a parameter has no types defined
       * @param {Param} param
       * @return {boolean}
       */
      function isInvalidParam(param) {
        return param.types.length === 0;
      }

      /**
       * Return all but the last items of an array
       * @param {Array} arr
       * @return {Array}
       */
      function initial(arr) {
        return arr.slice(0, arr.length - 1);
      }

      /**
       * return the last item of an array
       * @param {Array} arr
       * @return {*}
       */
      function last(arr) {
        return arr[arr.length - 1];
      }

      /**
       * Slice an array or function Arguments
       * @param {Array | Arguments | IArguments} arr
       * @param {number} start
       * @param {number} [end]
       * @return {Array}
       */
      function slice(arr, start, end) {
        return Array.prototype.slice.call(arr, start, end);
      }

      /**
       * Test whether an array contains some item
       * @param {Array} array
       * @param {*} item
       * @return {boolean} Returns true if array contains item, false if not.
       */
      function contains(array, item) {
        return array.indexOf(item) !== -1;
      }

      /**
       * Test whether two arrays have overlapping items
       * @param {Array} array1
       * @param {Array} array2
       * @return {boolean} Returns true when at least one item exists in both arrays
       */
      function hasOverlap(array1, array2) {
        for (var i = 0; i < array1.length; i++) {
          if (contains(array2, array1[i])) {
            return true;
          }
        }
        return false;
      }

      /**
       * Return the first item from an array for which test(arr[i]) returns true
       * @param {Array} arr
       * @param {function} test
       * @return {* | undefined} Returns the first matching item
       *                         or undefined when there is no match
       */
      function findInArray(arr, test) {
        for (var i = 0; i < arr.length; i++) {
          if (test(arr[i])) {
            return arr[i];
          }
        }
        return undefined;
      }

      /**
       * Filter unique items of an array with strings
       * @param {string[]} arr
       * @return {string[]}
       */
      function uniq(arr) {
        var entries = {};
        for (var i = 0; i < arr.length; i++) {
          entries[arr[i]] = true;
        }
        return Object.keys(entries);
      }

      /**
       * Flat map the result invoking a callback for every item in an array.
       * https://gist.github.com/samgiles/762ee337dff48623e729
       * @param {Array} arr
       * @param {function} callback
       * @return {Array}
       */
      function flatMap(arr, callback) {
        return Array.prototype.concat.apply([], arr.map(callback));
      }

      /**
       * Retrieve the function name from a set of typed functions,
       * and check whether the name of all functions match (if given)
       * @param {function[]} fns
       */
      function getName(fns) {
        var name = '';
        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];

          // check whether the names are the same when defined
          if ((_typeof$e(fn.signatures) === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
            if (name === '') {
              name = fn.name;
            } else if (name !== fn.name) {
              var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
              err.data = {
                actual: fn.name,
                expected: name
              };
              throw err;
            }
          }
        }
        return name;
      }

      // extract and merge all signatures of a list with typed functions
      function extractSignatures(fns) {
        var err;
        var signaturesMap = {};
        function validateUnique(_signature, _fn) {
          if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
            err = new Error('Signature "' + _signature + '" is defined twice');
            err.data = {
              signature: _signature
            };
            throw err;
            // else: both signatures point to the same function, that's fine
          }
        }

        for (var i = 0; i < fns.length; i++) {
          var fn = fns[i];

          // test whether this is a typed-function
          if (_typeof$e(fn.signatures) === 'object') {
            // merge the signatures
            for (var signature in fn.signatures) {
              if (fn.signatures.hasOwnProperty(signature)) {
                validateUnique(signature, fn.signatures[signature]);
                signaturesMap[signature] = fn.signatures[signature];
              }
            }
          } else if (typeof fn.signature === 'string') {
            validateUnique(fn.signature, fn);
            signaturesMap[fn.signature] = fn;
          } else {
            err = new TypeError('Function is no typed-function (index: ' + i + ')');
            err.data = {
              index: i
            };
            throw err;
          }
        }
        return signaturesMap;
      }
      typed = createTypedFunction('typed', {
        'string, Object': createTypedFunction,
        'Object': function Object(signaturesMap) {
          // find existing name
          var fns = [];
          for (var signature in signaturesMap) {
            if (signaturesMap.hasOwnProperty(signature)) {
              fns.push(signaturesMap[signature]);
            }
          }
          var name = getName(fns);
          return createTypedFunction(name, signaturesMap);
        },
        '...Function': function Function(fns) {
          return createTypedFunction(getName(fns), extractSignatures(fns));
        },
        'string, ...Function': function stringFunction(name, fns) {
          return createTypedFunction(name, extractSignatures(fns));
        }
      });
      typed.create = create;
      typed.types = _types;
      typed.conversions = _conversions;
      typed.ignore = _ignore;
      typed.onMismatch = _onMismatch;
      typed.throwMismatchError = _onMismatch;
      typed.createError = createError;
      typed.convert = convert;
      typed.find = find;

      /**
       * add a type
       * @param {{name: string, test: function}} type
       * @param {boolean} [beforeObjectTest=true]
       *                          If true, the new test will be inserted before
       *                          the test with name 'Object' (if any), since
       *                          tests for Object match Array and classes too.
       */
      typed.addType = function (type, beforeObjectTest) {
        if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
          throw new TypeError('Object with properties {name: string, test: function} expected');
        }
        if (beforeObjectTest !== false) {
          for (var i = 0; i < typed.types.length; i++) {
            if (typed.types[i].name === 'Object') {
              typed.types.splice(i, 0, type);
              return;
            }
          }
        }
        typed.types.push(type);
      };

      // add a conversion
      typed.addConversion = function (conversion) {
        if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
          throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
        }
        typed.conversions.push(conversion);
      };
      return typed;
    }
    return create();
  });
})(typedFunction$1);
var typedFunctionExports = typedFunction$1.exports;
var typedFunction = /*@__PURE__*/getDefaultExportFromCjs(typedFunctionExports);

/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */

function isInteger$1(value) {
  if (typeof value === 'boolean') {
    return true;
  }
  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
}
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {number}
 */

var sign$2 = Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Calculate the base-2 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log2$2 = Math.log2 || function log2(x) {
  return Math.log(x) / Math.LN2;
};
/**
 * Calculate the base-10 logarithm of a number
 * @param {number} x
 * @returns {number}
 */

var log10$2 = Math.log10 || function log10(x) {
  return Math.log(x) / Math.LN10;
};
/**
 * Calculate the natural logarithm of a number + 1
 * @param {number} x
 * @returns {number}
 */

var log1p$1 = Math.log1p || function (x) {
  return Math.log(x + 1);
};
/**
 * Calculate cubic root for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number} Returns the cubic root of x
 */

var cbrt$2 = Math.cbrt || function cbrt(x) {
  if (x === 0) {
    return x;
  }
  var negate = x < 0;
  var result;
  if (negate) {
    x = -x;
  }
  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }
  return negate ? -result : result;
};
/**
 * Calculates exponentiation minus 1
 * @param {number} x
 * @return {number} res
 */

var expm1$1 = Math.expm1 || function expm1(x) {
  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */

function format$3(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases

  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options

  var notation = 'auto';
  var precision;
  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options

    if (isNumber(options)) {
      precision = options;
    } else if (isNumber(options.precision)) {
      precision = options.precision;
    }
  } // handle the various notations

  switch (notation) {
    case 'fixed':
      return toFixed$1(value, precision);
    case 'exponential':
      return toExponential$1(value, precision);
    case 'engineering':
      return toEngineering$1(value, precision);
    case 'auto':
      // remove trailing zeros after the decimal point
      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
        var digits = arguments[2];
        var e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });
    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */

function splitNumber(value) {
  // parse the input value
  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }
  var sign = match[1];
  var digits = match[2];
  var exponent = parseFloat(match[4] || '0');
  var dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });
  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }
  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
}
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering$1(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }
  var split = splitNumber(value);
  var rounded = roundDigits(split, precision);
  var e = rounded.exponent;
  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;
  if (isNumber(precision)) {
    // add zeroes to give correct sig figs
    while (precision > c.length || e - newExp + 1 > c.length) {
      c.push(0);
    }
  } else {
    // concatenate coefficients with necessary zeros
    // add zeros if necessary (for example: 1e+8 -> 100e+6)
    var missingZeros = Math.abs(e - newExp) - (c.length - 1);
    for (var i = 0; i < missingZeros; i++) {
      c.push(0);
    }
  } // find difference in exponents

  var expDiff = Math.abs(e - newExp);
  var decimalIdx = 1; // push decimal index over by expDiff times

  while (expDiff > 0) {
    decimalIdx++;
    expDiff--;
  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
  // otherwise concat with the rest of the coefficients

  var decimals = c.slice(decimalIdx).join('');
  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
}
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */

function toFixed$1(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }
  var splitValue = splitNumber(value);
  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
  var c = rounded.coefficients;
  var p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  var pp = p + (precision || 0);
  if (c.length < pp) {
    c = c.concat(zeros$1(pp - c.length));
  } // prepend zeros if needed

  if (p < 0) {
    c = zeros$1(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed

  if (p < c.length) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }
  return rounded.sign + c.join('');
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */

function toExponential$1(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone

  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;
  var c = rounded.coefficients;
  var e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros$1(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`

  var first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */

function toPrecision(value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.

  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
  var split = splitNumber(value);
  var rounded = precision ? roundDigits(split, precision) : split;
  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
    // exponential notation
    return toExponential$1(value, precision);
  } else {
    var c = rounded.coefficients;
    var e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros$1(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement

    c = c.concat(zeros$1(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros$1(-e).concat(c);
    var dot = e > 0 ? e : 0;
    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }
    return rounded.sign + c.join('');
  }
}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */

function roundDigits(split, precision) {
  // create a clone
  var rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  var c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }
  if (c.length > precision) {
    var removed = c.splice(precision, c.length - precision);
    if (removed[0] >= 5) {
      var i = precision - 1;
      c[i]++;
      while (c[i] === 10) {
        c.pop();
        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }
        i--;
        c[i]++;
      }
    }
  }
  return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */

function zeros$1(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(0);
  }
  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */

function digits(value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
}
/**
 * Minimum number added to one that makes the result different than one
 */

var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

function nearlyEqual$1(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x === y;
  }
  if (x === y) {
    return true;
  } // NaN

  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite

  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = Math.abs(x - y);
    if (diff < DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases

  return false;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 */

var acosh$2 = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};
var asinh$2 = Math.asinh || function (x) {
  return Math.log(Math.sqrt(x * x + 1) + x);
};
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 */

var atanh$2 = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 */

var cosh$2 = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 */

var sinh$2 = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 */

var tanh$2 = Math.tanh || function (x) {
  var e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
function format$2(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases

  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options

  var notation = 'auto';
  var precision;
  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options

    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }
  } // handle the various notations

  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);
    case 'exponential':
      return toExponential(value, precision);
    case 'engineering':
      return toEngineering(value, precision);
    case 'auto':
      {
        // determine lower and upper bound for exponential notation.
        // TODO: implement support for upper and lower to be BigNumbers themselves
        var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
        var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

        if (value.isZero()) return '0'; // determine whether or not to output exponential notation

        var str;
        var rounded = value.toSignificantDigits(precision);
        var exp = rounded.e;
        if (exp >= lowerExp && exp < upperExp) {
          // normal number notation
          str = rounded.toFixed();
        } else {
          // exponential notation
          str = toExponential(value, precision);
        } // remove trailing zeros after the decimal point

        return str.replace(/((\.\d*?)(0+))($|e)/, function () {
          var digits = arguments[2];
          var e = arguments[4];
          return digits !== '.' ? digits + e : e;
        });
      }
    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */

function toEngineering(value, precision) {
  // find nearest lower multiple of 3 for exponent
  var e = value.e;
  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

  var valueWithoutExp = value.mul(Math.pow(10, -newExp));
  var valueStr = valueWithoutExp.toPrecision(precision);
  if (valueStr.indexOf('e') !== -1) {
    valueStr = valueWithoutExp.toString();
  }
  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */

function toExponential(value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
}
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */

function toFixed(value, precision) {
  return value.toFixed(precision);
}

function _typeof$b(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$b = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$b = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$b(obj);
}
/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */

function endsWith(text, search) {
  var start = text.length - search.length;
  var end = text.length;
  return text.substring(start, end) === search;
}
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */

function format$1(value, options) {
  if (typeof value === 'number') {
    return format$3(value, options);
  }
  if (isBigNumber(value)) {
    return format$2(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values

  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }
  if (Array.isArray(value)) {
    return formatArray(value, options);
  }
  if (isString(value)) {
    return '"' + value + '"';
  }
  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }
  if (value && _typeof$b(value) === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString(options) !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString(options);
    } else {
      var entries = Object.keys(value).map(function (key) {
        return '"' + key + '": ' + format$1(value[key], options);
      });
      return '{' + entries.join(', ') + '}';
    }
  }
  return String(value);
}
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */

function stringify(value) {
  var text = String(value);
  var escaped = '';
  var i = 0;
  while (i < text.length) {
    var c = text.charAt(i);
    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);
      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }
    i++;
  }
  return '"' + escaped + '"';
}
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */

function escape$1(value) {
  var text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */

function formatArray(array, options) {
  if (Array.isArray(array)) {
    var str = '[';
    var len = array.length;
    for (var i = 0; i < len; i++) {
      if (i !== 0) {
        str += ', ';
      }
      str += formatArray(array[i], options);
    }
    str += ']';
    return str;
  } else {
    return format$1(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */

function looksLikeFraction(value) {
  return value && _typeof$b(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */

function compareText$1(x, y) {
  // we don't want to convert numbers to string, only accept string input
  if (!isString(x)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf$1(x) + ', index: 0)');
  }
  if (!isString(y)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf$1(y) + ', index: 1)');
  }
  return x === y ? 0 : x > y ? 1 : -1;
}

/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }
  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}
DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;

/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }
  this.index = index;
  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }
  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }
  this.stack = new Error().stack;
}
IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;

/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */

function arraySize(x) {
  var s = [];
  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }
  return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */

function _validate(array, size, dim) {
  var i;
  var len = array.length;
  if (len !== size[dim]) {
    throw new DimensionError(len, size[dim]);
  }
  if (dim < size.length - 1) {
    // recursively validate each child array
    var dimNext = dim + 1;
    for (i = 0; i < len; i++) {
      var child = array[i];
      if (!Array.isArray(child)) {
        throw new DimensionError(size.length - 1, size.length, '<');
      }
      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */

function validate(array, size) {
  var isScalar = size.length === 0;
  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new DimensionError(array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
}
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */

function validateIndex(index, length) {
  if (!isNumber(index) || !isInteger$1(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }
  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new IndexError(index, length);
  }
}
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */

function resize$1(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }
  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers

  size.forEach(function (value) {
    if (!isNumber(value) || !isInteger$1(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(size) + ')');
    }
  }); // recursively resize the array

  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;
  _resize(array, size, 0, _defaultValue);
  return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */

function _resize(array, size, dim, defaultValue) {
  var i;
  var elem;
  var oldLen = array.length;
  var newLen = size[dim];
  var minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;
  if (dim < size.length - 1) {
    // non-last dimension
    var dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];
      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }
      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays

    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    } // fill new elements with the default value

    for (i = minLen; i < newLen; i++) {
      array[i] = defaultValue;
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */

function reshape$1(array, sizes) {
  var flatArray = flatten$1(array);
  var newArray;
  function product(arr) {
    return arr.reduce(function (prev, curr) {
      return prev * curr;
    });
  }
  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }
  if (sizes.length === 0) {
    throw new DimensionError(0, product(arraySize(array)), '!=');
  }
  var totalSize = 1;
  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
    totalSize *= sizes[sizeIndex];
  }
  if (flatArray.length !== totalSize) {
    throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
  }
  try {
    newArray = _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof DimensionError) {
      throw new DimensionError(product(sizes), product(arraySize(array)), '!=');
    }
    throw e;
  }
  return newArray;
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */

function _reshape(array, sizes) {
  // testing if there are enough elements for the requested shape
  var tmpArray = array;
  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
    var size = sizes[sizeIndex];
    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

    var length = tmpArray.length / size;
    for (var i = 0; i < length; i++) {
      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
    } // set it as the new tmpArray for the next loop turn or for return

    tmpArray = tmpArray2;
  }
  return tmpArray;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */

function squeeze$1(array, size) {
  var s = size || arraySize(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed

  var dims = s.length;
  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions

  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }
  return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _squeeze(array, dims, dim) {
  var i, ii;
  if (dim < dims) {
    var next = dim + 1;
    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }
  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */

function unsqueeze(array, dims, outer, size) {
  var s = size || arraySize(array); // unsqueeze outer dimensions

  if (outer) {
    for (var i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions

  array = _unsqueeze(array, dims, 0);
  while (s.length < dims) {
    s.push(1);
  }
  return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */

function _unsqueeze(array, dims, dim) {
  var i, ii;
  if (Array.isArray(array)) {
    var next = dim + 1;
    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (var d = dim; d < dims; d++) {
      array = [array];
    }
  }
  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */

function flatten$1(array) {
  if (!Array.isArray(array)) {
    // if not an array, return as is
    return array;
  }
  var flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); // traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
}
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */

function map$1(array, callback) {
  return Array.prototype.map.call(array, callback);
}
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */

function forEach$1(array, callback) {
  Array.prototype.forEach.call(array, callback);
}
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */

function filter$1(array, callback) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }
  return Array.prototype.filter.call(array, callback);
}
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */

function filterRegExp(array, regexp) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }
  return Array.prototype.filter.call(array, function (entry) {
    return regexp.test(entry);
  });
}
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */

function join(array, separator) {
  return Array.prototype.join.call(array, separator);
}
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */

function identify(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }
  if (a.length === 0) {
    return a;
  }
  var b = [];
  var count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };
  for (var i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }
    b.push({
      value: a[i],
      identifier: count
    });
  }
  return b;
}
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */

function generalize(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }
  if (a.length === 0) {
    return a;
  }
  var b = [];
  for (var i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }
  return b;
}
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return string
 */

function getArrayDataType(array, typeOf) {
  var type; // to hold type info

  var length = 0; // to hold length value to ensure it has consistent sizes

  for (var i = 0; i < array.length; i++) {
    var item = array[i];
    var isArray = Array.isArray(item); // Saving the target matrix row size

    if (i === 0 && isArray) {
      length = item.length;
    } // If the current item is an array but the length does not equal the targetVectorSize

    if (isArray && item.length !== length) {
      return undefined;
    }
    var itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
    : typeOf(item);
    if (type === undefined) {
      type = itemType; // first item
    } else if (type !== itemType) {
      return 'mixed';
    } else ;
  }
  return type;
}
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */

function contains(array, item) {
  return array.indexOf(item) !== -1;
}

/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */

function factory(name, dependencies, create, meta) {
  function assertAndCreate(scope) {
    // we only pass the requested dependencies to the factory function
    // to prevent functions to rely on dependencies that are not explicitly
    // requested.
    var deps = pickShallow(scope, dependencies.map(stripOptionalNotation));
    assertDependencies(name, dependencies, scope);
    return create(deps);
  }
  assertAndCreate.isFactory = true;
  assertAndCreate.fn = name;
  assertAndCreate.dependencies = dependencies.slice().sort();
  if (meta) {
    assertAndCreate.meta = meta;
  }
  return assertAndCreate;
}
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */

function isFactory(obj) {
  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */

function assertDependencies(name, dependencies, scope) {
  var allDefined = dependencies.filter(function (dependency) {
    return !isOptionalDependency(dependency);
  }) // filter optionals
  .every(function (dependency) {
    return scope[dependency] !== undefined;
  });
  if (!allDefined) {
    var missingDependencies = dependencies.filter(function (dependency) {
      return scope[dependency] === undefined;
    }); // TODO: create a custom error class for this, a MathjsError or something like that

    throw new Error("Cannot create function \"".concat(name, "\", ") + "some dependencies are missing: ".concat(missingDependencies.map(function (d) {
      return "\"".concat(d, "\"");
    }).join(', '), "."));
  }
}
function isOptionalDependency(dependency) {
  return dependency && dependency[0] === '?';
}
function stripOptionalNotation(dependency) {
  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}

/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */

var _createTyped2 = function _createTyped() {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped2 = typedFunction.create;
  return typedFunction;
};
var dependencies$4o = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
/**
 * Factory function for creating a new typed instance
 * @param {Object} dependencies   Object with data types like Complex and BigNumber
 * @returns {Function}
 */

var createTyped = /* #__PURE__ */factory('typed', dependencies$4o, function createTyped(_ref) {
  var BigNumber = _ref.BigNumber,
    Complex = _ref.Complex,
    DenseMatrix = _ref.DenseMatrix,
    Fraction = _ref.Fraction;

  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // get a new instance of typed-function
  var typed = _createTyped2(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).

  typed.types = [{
    name: 'number',
    test: isNumber
  }, {
    name: 'Complex',
    test: isComplex
  }, {
    name: 'BigNumber',
    test: isBigNumber
  }, {
    name: 'Fraction',
    test: isFraction
  }, {
    name: 'Unit',
    test: isUnit
  }, {
    name: 'string',
    test: isString
  }, {
    name: 'Chain',
    test: isChain
  }, {
    name: 'Array',
    test: isArray
  }, {
    name: 'Matrix',
    test: isMatrix
  }, {
    name: 'DenseMatrix',
    test: isDenseMatrix
  }, {
    name: 'SparseMatrix',
    test: isSparseMatrix
  }, {
    name: 'Range',
    test: isRange
  }, {
    name: 'Index',
    test: isIndex
  }, {
    name: 'boolean',
    test: isBoolean
  }, {
    name: 'ResultSet',
    test: isResultSet
  }, {
    name: 'Help',
    test: isHelp
  }, {
    name: 'function',
    test: isFunction
  }, {
    name: 'Date',
    test: isDate
  }, {
    name: 'RegExp',
    test: isRegExp
  }, {
    name: 'null',
    test: isNull
  }, {
    name: 'undefined',
    test: isUndefined
  }, {
    name: 'AccessorNode',
    test: isAccessorNode
  }, {
    name: 'ArrayNode',
    test: isArrayNode
  }, {
    name: 'AssignmentNode',
    test: isAssignmentNode
  }, {
    name: 'BlockNode',
    test: isBlockNode
  }, {
    name: 'ConditionalNode',
    test: isConditionalNode
  }, {
    name: 'ConstantNode',
    test: isConstantNode
  }, {
    name: 'FunctionNode',
    test: isFunctionNode
  }, {
    name: 'FunctionAssignmentNode',
    test: isFunctionAssignmentNode
  }, {
    name: 'IndexNode',
    test: isIndexNode
  }, {
    name: 'Node',
    test: isNode
  }, {
    name: 'ObjectNode',
    test: isObjectNode
  }, {
    name: 'OperatorNode',
    test: isOperatorNode
  }, {
    name: 'ParenthesisNode',
    test: isParenthesisNode
  }, {
    name: 'RangeNode',
    test: isRangeNode
  }, {
    name: 'SymbolNode',
    test: isSymbolNode
  }, {
    name: 'Object',
    test: isObject
  } // order 'Object' last, it matches on other classes too
  ];

  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      } // note: conversion from number to BigNumber can fail if x has >15 digits

      if (digits(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }
      return new BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }
      return new Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function convert(x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }
      return new Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function convert(x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }
      return new Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }
      var f = new Fraction(x);
      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }
      return f;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: 'string',
    to: 'number',
    convert: function convert(x) {
      var n = Number(x);
      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }
      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }
      try {
        return new BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }
      try {
        return new Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function convert(x) {
      if (!Complex) {
        throwNoComplex(x);
      }
      try {
        return new Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function convert(x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function convert(x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }
      return new BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function convert(x) {
      if (!Fraction) {
        throwNoFraction(x);
      }
      return new Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function convert(x) {
      return String(x);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function convert(array) {
      if (!DenseMatrix) {
        throwNoMatrix();
      }
      return new DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function convert(matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
});
function throwNoBignumber(x) {
  throw new Error("Cannot convert value ".concat(x, " into a BigNumber: no class 'BigNumber' provided"));
}
function throwNoComplex(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Complex number: no class 'Complex' provided"));
}
function throwNoMatrix() {
  throw new Error('Cannot convert array into a Matrix: no class \'DenseMatrix\' provided');
}
function throwNoFraction(x) {
  throw new Error("Cannot convert value ".concat(x, " into a Fraction, no class 'Fraction' provided."));
}

var name$4m = 'ResultSet';
var dependencies$4n = [];
var createResultSet = /* #__PURE__ */factory(name$4m, dependencies$4n, function () {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.entries = entries || [];
  }
  /**
   * Attach type information
   */

  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;
  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */

  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };
  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */

  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */

  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };
  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */

  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };
  return ResultSet;
}, {
  isClass: true
});

/*!
 *  decimal.js v10.4.3
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */

// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //

// The maximum exponent magnitude.
// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
var EXP_LIMIT = 9e15,
  // 0 to 9e15

  // The limit on the value of `precision`, and on the value of the first argument to
  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
  MAX_DIGITS = 1e9,
  // 0 to 1e9

  // Base conversion alphabet.
  NUMERALS = '0123456789abcdef',
  // The natural logarithm of 10 (1025 digits).
  LN10$1 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
  // Pi (1025 digits).
  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
  // The initial configuration properties of the Decimal constructor.
  DEFAULTS = {
    // These values must be integers within the stated ranges (inclusive).
    // Most of these values can be changed at run-time using the `Decimal.config` method.

    // The maximum number of significant digits of the result of a calculation or base conversion.
    // E.g. `Decimal.config({ precision: 20 });`
    precision: 20,
    // 1 to MAX_DIGITS

    // The rounding mode used when rounding to `precision`.
    //
    // ROUND_UP         0 Away from zero.
    // ROUND_DOWN       1 Towards zero.
    // ROUND_CEIL       2 Towards +Infinity.
    // ROUND_FLOOR      3 Towards -Infinity.
    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    //
    // E.g.
    // `Decimal.rounding = 4;`
    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
    rounding: 4,
    // 0 to 8

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP         0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN  6 The IEEE 754 remainder function.
    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
    //
    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
    // division (9) are commonly used for the modulus operation. The other rounding modes can also
    // be used, but they may not give useful results.
    modulo: 1,
    // 0 to 9

    // The exponent value at and beneath which `toString` returns exponential notation.
    // JavaScript numbers: -7
    toExpNeg: -7,
    // 0 to -EXP_LIMIT

    // The exponent value at and above which `toString` returns exponential notation.
    // JavaScript numbers: 21
    toExpPos: 21,
    // 0 to EXP_LIMIT

    // The minimum exponent value, beneath which underflow to zero occurs.
    // JavaScript numbers: -324  (5e-324)
    minE: -EXP_LIMIT,
    // -1 to -EXP_LIMIT

    // The maximum exponent value, above which overflow to Infinity occurs.
    // JavaScript numbers: 308  (1.7976931348623157e+308)
    maxE: EXP_LIMIT,
    // 1 to EXP_LIMIT

    // Whether to use cryptographically-secure random number generation, if available.
    crypto: false // true/false
  },
  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //

  inexact,
  quadrant,
  external = true,
  decimalError = '[DecimalError] ',
  invalidArgument = decimalError + 'Invalid argument: ',
  precisionLimitExceeded = decimalError + 'Precision limit exceeded',
  cryptoUnavailable = decimalError + 'crypto unavailable',
  tag = '[object Decimal]',
  mathfloor = Math.floor,
  mathpow = Math.pow,
  isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
  isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
  isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
  BASE = 1e7,
  LOG_BASE = 7,
  MAX_SAFE_INTEGER = 9007199254740991,
  LN10_PRECISION = LN10$1.length - 1,
  PI_PRECISION = PI.length - 1,
  // Decimal.prototype object
  P$2 = {
    toStringTag: tag
  };

// Decimal prototype methods

/*
 *  absoluteValue             abs
 *  ceil
 *  clampedTo                 clamp
 *  comparedTo                cmp
 *  cosine                    cos
 *  cubeRoot                  cbrt
 *  decimalPlaces             dp
 *  dividedBy                 div
 *  dividedToIntegerBy        divToInt
 *  equals                    eq
 *  floor
 *  greaterThan               gt
 *  greaterThanOrEqualTo      gte
 *  hyperbolicCosine          cosh
 *  hyperbolicSine            sinh
 *  hyperbolicTangent         tanh
 *  inverseCosine             acos
 *  inverseHyperbolicCosine   acosh
 *  inverseHyperbolicSine     asinh
 *  inverseHyperbolicTangent  atanh
 *  inverseSine               asin
 *  inverseTangent            atan
 *  isFinite
 *  isInteger                 isInt
 *  isNaN
 *  isNegative                isNeg
 *  isPositive                isPos
 *  isZero
 *  lessThan                  lt
 *  lessThanOrEqualTo         lte
 *  logarithm                 log
 *  [maximum]                 [max]
 *  [minimum]                 [min]
 *  minus                     sub
 *  modulo                    mod
 *  naturalExponential        exp
 *  naturalLogarithm          ln
 *  negated                   neg
 *  plus                      add
 *  precision                 sd
 *  round
 *  sine                      sin
 *  squareRoot                sqrt
 *  tangent                   tan
 *  times                     mul
 *  toBinary
 *  toDecimalPlaces           toDP
 *  toExponential
 *  toFixed
 *  toFraction
 *  toHexadecimal             toHex
 *  toNearest
 *  toNumber
 *  toOctal
 *  toPower                   pow
 *  toPrecision
 *  toSignificantDigits       toSD
 *  toString
 *  truncated                 trunc
 *  valueOf                   toJSON
 */

/*
 * Return a new Decimal whose value is the absolute value of this Decimal.
 *
 */
P$2.absoluteValue = P$2.abs = function () {
  var x = new this.constructor(this);
  if (x.s < 0) x.s = 1;
  return finalise(x);
};

/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
 * direction of positive Infinity.
 *
 */
P$2.ceil = function () {
  return finalise(new this.constructor(this), this.e + 1, 2);
};

/*
 * Return a new Decimal whose value is the value of this Decimal clamped to the range
 * delineated by `min` and `max`.
 *
 * min {number|string|Decimal}
 * max {number|string|Decimal}
 *
 */
P$2.clampedTo = P$2.clamp = function (min, max) {
  var k,
    x = this,
    Ctor = x.constructor;
  min = new Ctor(min);
  max = new Ctor(max);
  if (!min.s || !max.s) return new Ctor(NaN);
  if (min.gt(max)) throw Error(invalidArgument + max);
  k = x.cmp(min);
  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
};

/*
 * Return
 *   1    if the value of this Decimal is greater than the value of `y`,
 *  -1    if the value of this Decimal is less than the value of `y`,
 *   0    if they have the same value,
 *   NaN  if the value of either Decimal is NaN.
 *
 */
P$2.comparedTo = P$2.cmp = function (y) {
  var i,
    j,
    xdL,
    ydL,
    x = this,
    xd = x.d,
    yd = (y = new x.constructor(y)).d,
    xs = x.s,
    ys = y.s;

  // Either NaN or ±Infinity?
  if (!xd || !yd) {
    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
  }

  // Either zero?
  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

  // Signs differ?
  if (xs !== ys) return xs;

  // Compare exponents.
  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
  xdL = xd.length;
  ydL = yd.length;

  // Compare digit by digit.
  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
  }

  // Compare lengths.
  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
};

/*
 * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * cos(0)         = 1
 * cos(-0)        = 1
 * cos(Infinity)  = NaN
 * cos(-Infinity) = NaN
 * cos(NaN)       = NaN
 *
 */
P$2.cosine = P$2.cos = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (!x.d) return new Ctor(NaN);

  // cos(0) = cos(-0) = 1
  if (!x.d[0]) return new Ctor(1);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
};

/*
 *
 * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 *  cbrt(0)  =  0
 *  cbrt(-0) = -0
 *  cbrt(1)  =  1
 *  cbrt(-1) = -1
 *  cbrt(N)  =  N
 *  cbrt(-I) = -I
 *  cbrt(I)  =  I
 *
 * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
 *
 */
P$2.cubeRoot = P$2.cbrt = function () {
  var e,
    m,
    n,
    r,
    rep,
    s,
    sd,
    t,
    t3,
    t3plusx,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite() || x.isZero()) return new Ctor(x);
  external = false;

  // Initial estimate.
  s = x.s * mathpow(x.s * x, 1 / 3);

  // Math.cbrt underflow/overflow?
  // Pass x to Math.pow as integer, then adjust the exponent of the result.
  if (!s || Math.abs(s) == 1 / 0) {
    n = digitsToString(x.d);
    e = x.e;

    // Adjust n exponent so it is a multiple of 3 away from x exponent.
    if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';
    s = mathpow(n, 1 / 3);

    // Rarely, e may be one less than the result exponent value.
    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
    if (s == 1 / 0) {
      n = '5e' + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf('e') + 1) + e;
    }
    r = new Ctor(n);
    r.s = x.s;
  } else {
    r = new Ctor(s.toString());
  }
  sd = (e = Ctor.precision) + 3;

  // Halley's method.
  // TODO? Compare Newton's method.
  for (;;) {
    t = r;
    t3 = t.times(t).times(t);
    t3plusx = t3.plus(x);
    r = divide$1(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

    // TODO? Replace with for-loop and checkRoundingDigits.
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);

      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
      // , i.e. approaching a rounding boundary, continue the iteration.
      if (n == '9999' || !rep && n == '4999') {
        // On the first iteration only, check to see if rounding up gives the exact result as the
        // nines may infinitely repeat.
        if (!rep) {
          finalise(t, e + 1, 0);
          if (t.times(t).times(t).eq(x)) {
            r = t;
            break;
          }
        }
        sd += 4;
        rep = 1;
      } else {
        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
        // If not, then there are further digits and m will be truthy.
        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
          // Truncate to the first rounding digit.
          finalise(r, e + 1, 1);
          m = !r.times(r).times(r).eq(x);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r, e, Ctor.rounding, m);
};

/*
 * Return the number of decimal places of the value of this Decimal.
 *
 */
P$2.decimalPlaces = P$2.dp = function () {
  var w,
    d = this.d,
    n = NaN;
  if (d) {
    w = d.length - 1;
    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last word.
    w = d[w];
    if (w) for (; w % 10 == 0; w /= 10) n--;
    if (n < 0) n = 0;
  }
  return n;
};

/*
 *  n / 0 = I
 *  n / N = N
 *  n / I = 0
 *  0 / n = 0
 *  0 / 0 = N
 *  0 / N = N
 *  0 / I = 0
 *  N / n = N
 *  N / 0 = N
 *  N / N = N
 *  N / I = N
 *  I / n = I
 *  I / 0 = I
 *  I / N = N
 *  I / I = N
 *
 * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 */
P$2.dividedBy = P$2.div = function (y) {
  return divide$1(this, new this.constructor(y));
};

/*
 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
 * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
 *
 */
P$2.dividedToIntegerBy = P$2.divToInt = function (y) {
  var x = this,
    Ctor = x.constructor;
  return finalise(divide$1(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
};

/*
 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
 *
 */
P$2.equals = P$2.eq = function (y) {
  return this.cmp(y) === 0;
};

/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
 * direction of negative Infinity.
 *
 */
P$2.floor = function () {
  return finalise(new this.constructor(this), this.e + 1, 3);
};

/*
 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
 * false.
 *
 */
P$2.greaterThan = P$2.gt = function (y) {
  return this.cmp(y) > 0;
};

/*
 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
 * otherwise return false.
 *
 */
P$2.greaterThanOrEqualTo = P$2.gte = function (y) {
  var k = this.cmp(y);
  return k == 1 || k === 0;
};

/*
 * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [1, Infinity]
 *
 * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
 *
 * cosh(0)         = 1
 * cosh(-0)        = 1
 * cosh(Infinity)  = Infinity
 * cosh(-Infinity) = Infinity
 * cosh(NaN)       = NaN
 *
 *  x        time taken (ms)   result
 * 1000      9                 9.8503555700852349694e+433
 * 10000     25                4.4034091128314607936e+4342
 * 100000    171               1.4033316802130615897e+43429
 * 1000000   3817              1.5166076984010437725e+434294
 * 10000000  abandoned after 2 minute wait
 *
 * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
 *
 */
P$2.hyperbolicCosine = P$2.cosh = function () {
  var k,
    n,
    pr,
    rm,
    len,
    x = this,
    Ctor = x.constructor,
    one = new Ctor(1);
  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
  if (x.isZero()) return one;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;

  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

  // Estimate the optimum number of times to use the argument reduction.
  // TODO? Estimation reused from cosine() and may not be optimal here.
  if (len < 32) {
    k = Math.ceil(len / 3);
    n = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    n = '2.3283064365386962890625e-10';
  }
  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

  // Reverse argument reduction
  var cosh2_x,
    i = k,
    d8 = new Ctor(8);
  for (; i--;) {
    cosh2_x = x.times(x);
    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
  }
  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
};

/*
 * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
 *
 * sinh(0)         = 0
 * sinh(-0)        = -0
 * sinh(Infinity)  = Infinity
 * sinh(-Infinity) = -Infinity
 * sinh(NaN)       = NaN
 *
 * x        time taken (ms)
 * 10       2 ms
 * 100      5 ms
 * 1000     14 ms
 * 10000    82 ms
 * 100000   886 ms            1.4033316802130615897e+43429
 * 200000   2613 ms
 * 300000   5407 ms
 * 400000   8824 ms
 * 500000   13026 ms          8.7080643612718084129e+217146
 * 1000000  48543 ms
 *
 * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
 *
 */
P$2.hyperbolicSine = P$2.sinh = function () {
  var k,
    pr,
    rm,
    len,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite() || x.isZero()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;
  if (len < 3) {
    x = taylorSeries(Ctor, 2, x, x, true);
  } else {
    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
    // 3 multiplications and 1 addition

    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
    // 4 multiplications and 2 additions

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;
    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x, true);

    // Reverse argument reduction
    var sinh2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sinh2_x = x.times(x);
      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
    }
  }
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(x, pr, rm, true);
};

/*
 * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * tanh(x) = sinh(x) / cosh(x)
 *
 * tanh(0)         = 0
 * tanh(-0)        = -0
 * tanh(Infinity)  = 1
 * tanh(-Infinity) = -1
 * tanh(NaN)       = NaN
 *
 */
P$2.hyperbolicTangent = P$2.tanh = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite()) return new Ctor(x.s);
  if (x.isZero()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 7;
  Ctor.rounding = 1;
  return divide$1(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
};

/*
 * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
 * this Decimal.
 *
 * Domain: [-1, 1]
 * Range: [0, pi]
 *
 * acos(x) = pi/2 - asin(x)
 *
 * acos(0)       = pi/2
 * acos(-0)      = pi/2
 * acos(1)       = 0
 * acos(-1)      = pi
 * acos(1/2)     = pi/3
 * acos(-1/2)    = 2*pi/3
 * acos(|x| > 1) = NaN
 * acos(NaN)     = NaN
 *
 */
P$2.inverseCosine = P$2.acos = function () {
  var halfPi,
    x = this,
    Ctor = x.constructor,
    k = x.abs().cmp(1),
    pr = Ctor.precision,
    rm = Ctor.rounding;
  if (k !== -1) {
    return k === 0
    // |x| is 1
    ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
    // |x| > 1 or x is NaN
    : new Ctor(NaN);
  }
  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

  Ctor.precision = pr + 6;
  Ctor.rounding = 1;
  x = x.asin();
  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return halfPi.minus(x);
};

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
 * value of this Decimal.
 *
 * Domain: [1, Infinity]
 * Range: [0, Infinity]
 *
 * acosh(x) = ln(x + sqrt(x^2 - 1))
 *
 * acosh(x < 1)     = NaN
 * acosh(NaN)       = NaN
 * acosh(Infinity)  = Infinity
 * acosh(-Infinity) = NaN
 * acosh(0)         = NaN
 * acosh(-0)        = NaN
 * acosh(1)         = 0
 * acosh(-1)        = NaN
 *
 */
P$2.inverseHyperbolicCosine = P$2.acosh = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
  if (!x.isFinite()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
  Ctor.rounding = 1;
  external = false;
  x = x.times(x).minus(1).sqrt().plus(x);
  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.ln();
};

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
 * of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * asinh(x) = ln(x + sqrt(x^2 + 1))
 *
 * asinh(NaN)       = NaN
 * asinh(Infinity)  = Infinity
 * asinh(-Infinity) = -Infinity
 * asinh(0)         = 0
 * asinh(-0)        = -0
 *
 */
P$2.inverseHyperbolicSine = P$2.asinh = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite() || x.isZero()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
  Ctor.rounding = 1;
  external = false;
  x = x.times(x).plus(1).sqrt().plus(x);
  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.ln();
};

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
 * value of this Decimal.
 *
 * Domain: [-1, 1]
 * Range: [-Infinity, Infinity]
 *
 * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
 *
 * atanh(|x| > 1)   = NaN
 * atanh(NaN)       = NaN
 * atanh(Infinity)  = NaN
 * atanh(-Infinity) = NaN
 * atanh(0)         = 0
 * atanh(-0)        = -0
 * atanh(1)         = Infinity
 * atanh(-1)        = -Infinity
 *
 */
P$2.inverseHyperbolicTangent = P$2.atanh = function () {
  var pr,
    rm,
    wpr,
    xsd,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite()) return new Ctor(NaN);
  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  xsd = x.sd();
  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
  Ctor.precision = wpr = xsd - x.e;
  x = divide$1(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
  Ctor.precision = pr + 4;
  Ctor.rounding = 1;
  x = x.ln();
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.times(0.5);
};

/*
 * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi/2, pi/2]
 *
 * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
 *
 * asin(0)       = 0
 * asin(-0)      = -0
 * asin(1/2)     = pi/6
 * asin(-1/2)    = -pi/6
 * asin(1)       = pi/2
 * asin(-1)      = -pi/2
 * asin(|x| > 1) = NaN
 * asin(NaN)     = NaN
 *
 * TODO? Compare performance of Taylor series.
 *
 */
P$2.inverseSine = P$2.asin = function () {
  var halfPi,
    k,
    pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (x.isZero()) return new Ctor(x);
  k = x.abs().cmp(1);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (k !== -1) {
    // |x| is 1
    if (k === 0) {
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      halfPi.s = x.s;
      return halfPi;
    }

    // |x| > 1 or x is NaN
    return new Ctor(NaN);
  }

  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

  Ctor.precision = pr + 6;
  Ctor.rounding = 1;
  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return x.times(2);
};

/*
 * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
 * of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi/2, pi/2]
 *
 * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
 *
 * atan(0)         = 0
 * atan(-0)        = -0
 * atan(1)         = pi/4
 * atan(-1)        = -pi/4
 * atan(Infinity)  = pi/2
 * atan(-Infinity) = -pi/2
 * atan(NaN)       = NaN
 *
 */
P$2.inverseTangent = P$2.atan = function () {
  var i,
    j,
    k,
    n,
    px,
    t,
    r,
    wpr,
    x2,
    x = this,
    Ctor = x.constructor,
    pr = Ctor.precision,
    rm = Ctor.rounding;
  if (!x.isFinite()) {
    if (!x.s) return new Ctor(NaN);
    if (pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.5);
      r.s = x.s;
      return r;
    }
  } else if (x.isZero()) {
    return new Ctor(x);
  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
    r = getPi(Ctor, pr + 4, rm).times(0.25);
    r.s = x.s;
    return r;
  }
  Ctor.precision = wpr = pr + 10;
  Ctor.rounding = 1;

  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

  // Argument reduction
  // Ensure |x| < 0.42
  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

  k = Math.min(28, wpr / LOG_BASE + 2 | 0);
  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));
  external = false;
  j = Math.ceil(wpr / LOG_BASE);
  n = 1;
  x2 = x.times(x);
  r = new Ctor(x);
  px = x;

  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
  for (; i !== -1;) {
    px = px.times(x2);
    t = r.minus(px.div(n += 2));
    px = px.times(x2);
    r = t.plus(px.div(n += 2));
    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
  }
  if (k) r = r.times(2 << k - 1);
  external = true;
  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
};

/*
 * Return true if the value of this Decimal is a finite number, otherwise return false.
 *
 */
P$2.isFinite = function () {
  return !!this.d;
};

/*
 * Return true if the value of this Decimal is an integer, otherwise return false.
 *
 */
P$2.isInteger = P$2.isInt = function () {
  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
};

/*
 * Return true if the value of this Decimal is NaN, otherwise return false.
 *
 */
P$2.isNaN = function () {
  return !this.s;
};

/*
 * Return true if the value of this Decimal is negative, otherwise return false.
 *
 */
P$2.isNegative = P$2.isNeg = function () {
  return this.s < 0;
};

/*
 * Return true if the value of this Decimal is positive, otherwise return false.
 *
 */
P$2.isPositive = P$2.isPos = function () {
  return this.s > 0;
};

/*
 * Return true if the value of this Decimal is 0 or -0, otherwise return false.
 *
 */
P$2.isZero = function () {
  return !!this.d && this.d[0] === 0;
};

/*
 * Return true if the value of this Decimal is less than `y`, otherwise return false.
 *
 */
P$2.lessThan = P$2.lt = function (y) {
  return this.cmp(y) < 0;
};

/*
 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
 *
 */
P$2.lessThanOrEqualTo = P$2.lte = function (y) {
  return this.cmp(y) < 1;
};

/*
 * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * If no base is specified, return log[10](arg).
 *
 * log[base](arg) = ln(arg) / ln(base)
 *
 * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
 * otherwise:
 *
 * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
 * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
 * between the result and the correctly rounded result will be one ulp (unit in the last place).
 *
 * log[-b](a)       = NaN
 * log[0](a)        = NaN
 * log[1](a)        = NaN
 * log[NaN](a)      = NaN
 * log[Infinity](a) = NaN
 * log[b](0)        = -Infinity
 * log[b](-0)       = -Infinity
 * log[b](-a)       = NaN
 * log[b](1)        = 0
 * log[b](Infinity) = Infinity
 * log[b](NaN)      = NaN
 *
 * [base] {number|string|Decimal} The base of the logarithm.
 *
 */
P$2.logarithm = P$2.log = function (base) {
  var isBase10,
    d,
    denominator,
    k,
    inf,
    num,
    sd,
    r,
    arg = this,
    Ctor = arg.constructor,
    pr = Ctor.precision,
    rm = Ctor.rounding,
    guard = 5;

  // Default base is 10.
  if (base == null) {
    base = new Ctor(10);
    isBase10 = true;
  } else {
    base = new Ctor(base);
    d = base.d;

    // Return NaN if base is negative, or non-finite, or is 0 or 1.
    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
    isBase10 = base.eq(10);
  }
  d = arg.d;

  // Is arg negative, non-finite, 0 or 1?
  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
  }

  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
  // integer power of 10.
  if (isBase10) {
    if (d.length > 1) {
      inf = true;
    } else {
      for (k = d[0]; k % 10 === 0;) k /= 10;
      inf = k !== 1;
    }
  }
  external = false;
  sd = pr + guard;
  num = naturalLogarithm(arg, sd);
  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

  // The result will have 5 rounding digits.
  r = divide$1(num, denominator, sd, 1);

  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
  // calculate 10 further digits.
  //
  // If the result is known to have an infinite decimal expansion, repeat this until it is clear
  // that the result is above or below the boundary. Otherwise, if after calculating the 10
  // further digits, the last 14 are nines, round up and assume the result is exact.
  // Also assume the result is exact if the last 14 are zero.
  //
  // Example of a result that will be incorrectly rounded:
  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
  // place is still 2.6.
  if (checkRoundingDigits(r.d, k = pr, rm)) {
    do {
      sd += 10;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide$1(num, denominator, sd, 1);
      if (!inf) {
        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
        break;
      }
    } while (checkRoundingDigits(r.d, k += 10, rm));
  }
  external = true;
  return finalise(r, pr, rm);
};

/*
 * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
 *
 * arguments {number|string|Decimal}
 *
P.max = function () {
  Array.prototype.push.call(arguments, this);
  return maxOrMin(this.constructor, arguments, 'lt');
};
 */

/*
 * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
 *
 * arguments {number|string|Decimal}
 *
P.min = function () {
  Array.prototype.push.call(arguments, this);
  return maxOrMin(this.constructor, arguments, 'gt');
};
 */

/*
 *  n - 0 = n
 *  n - N = N
 *  n - I = -I
 *  0 - n = -n
 *  0 - 0 = 0
 *  0 - N = N
 *  0 - I = -I
 *  N - n = N
 *  N - 0 = N
 *  N - N = N
 *  N - I = N
 *  I - n = I
 *  I - 0 = I
 *  I - N = N
 *  I - I = N
 *
 * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P$2.minus = P$2.sub = function (y) {
  var d,
    e,
    i,
    j,
    k,
    len,
    pr,
    rm,
    xd,
    xe,
    xLTy,
    yd,
    x = this,
    Ctor = x.constructor;
  y = new Ctor(y);

  // If either is not finite...
  if (!x.d || !y.d) {
    // Return NaN if either is NaN.
    if (!x.s || !y.s) y = new Ctor(NaN);

    // Return y negated if x is finite and y is ±Infinity.
    else if (x.d) y.s = -y.s;

    // Return x if y is finite and x is ±Infinity.
    // Return x if both are ±Infinity with different signs.
    // Return NaN if both are ±Infinity with the same sign.
    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
    return y;
  }

  // If signs differ...
  if (x.s != y.s) {
    y.s = -y.s;
    return x.plus(y);
  }
  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;

  // If either is zero...
  if (!xd[0] || !yd[0]) {
    // Return y negated if x is zero and y is non-zero.
    if (yd[0]) y.s = -y.s;

    // Return x if y is zero and x is non-zero.
    else if (xd[0]) y = new Ctor(x);

    // Return zero if both are zero.
    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
    else return new Ctor(rm === 3 ? -0 : 0);
    return external ? finalise(y, pr, rm) : y;
  }

  // x and y are finite, non-zero numbers with the same sign.

  // Calculate base 1e7 exponents.
  e = mathfloor(y.e / LOG_BASE);
  xe = mathfloor(x.e / LOG_BASE);
  xd = xd.slice();
  k = xe - e;

  // If base 1e7 exponents differ...
  if (k) {
    xLTy = k < 0;
    if (xLTy) {
      d = xd;
      k = -k;
      len = yd.length;
    } else {
      d = yd;
      e = xe;
      len = xd.length;
    }

    // Numbers with massively different exponents would result in a very high number of
    // zeros needing to be prepended, but this can be avoided while still ensuring correct
    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
    if (k > i) {
      k = i;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents.
    d.reverse();
    for (i = k; i--;) d.push(0);
    d.reverse();

    // Base 1e7 exponents equal.
  } else {
    // Check digits to determine which is the bigger number.

    i = xd.length;
    len = yd.length;
    xLTy = i < len;
    if (xLTy) len = i;
    for (i = 0; i < len; i++) {
      if (xd[i] != yd[i]) {
        xLTy = xd[i] < yd[i];
        break;
      }
    }
    k = 0;
  }
  if (xLTy) {
    d = xd;
    xd = yd;
    yd = d;
    y.s = -y.s;
  }
  len = xd.length;

  // Append zeros to `xd` if shorter.
  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

  // Subtract yd from xd.
  for (i = yd.length; i > k;) {
    if (xd[--i] < yd[i]) {
      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
      --xd[j];
      xd[i] += BASE;
    }
    xd[i] -= yd[i];
  }

  // Remove trailing zeros.
  for (; xd[--len] === 0;) xd.pop();

  // Remove leading zeros and adjust exponent accordingly.
  for (; xd[0] === 0; xd.shift()) --e;

  // Zero?
  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
  y.d = xd;
  y.e = getBase10Exponent(xd, e);
  return external ? finalise(y, pr, rm) : y;
};

/*
 *   n % 0 =  N
 *   n % N =  N
 *   n % I =  n
 *   0 % n =  0
 *  -0 % n = -0
 *   0 % 0 =  N
 *   0 % N =  N
 *   0 % I =  0
 *   N % n =  N
 *   N % 0 =  N
 *   N % N =  N
 *   N % I =  N
 *   I % n =  N
 *   I % 0 =  N
 *   I % N =  N
 *   I % I =  N
 *
 * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * The result depends on the modulo mode.
 *
 */
P$2.modulo = P$2.mod = function (y) {
  var q,
    x = this,
    Ctor = x.constructor;
  y = new Ctor(y);

  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

  // Return x if y is ±Infinity or x is ±0.
  if (!y.d || x.d && !x.d[0]) {
    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
  }

  // Prevent rounding of intermediate calculations.
  external = false;
  if (Ctor.modulo == 9) {
    // Euclidian division: q = sign(y) * floor(x / abs(y))
    // result = x - q * y    where  0 <= result < abs(y)
    q = divide$1(x, y.abs(), 0, 3, 1);
    q.s *= y.s;
  } else {
    q = divide$1(x, y, 0, Ctor.modulo, 1);
  }
  q = q.times(y);
  external = true;
  return x.minus(q);
};

/*
 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
 * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P$2.naturalExponential = P$2.exp = function () {
  return naturalExponential(this);
};

/*
 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
 * rounded to `precision` significant digits using rounding mode `rounding`.
 *
 */
P$2.naturalLogarithm = P$2.ln = function () {
  return naturalLogarithm(this);
};

/*
 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
 * -1.
 *
 */
P$2.negated = P$2.neg = function () {
  var x = new this.constructor(this);
  x.s = -x.s;
  return finalise(x);
};

/*
 *  n + 0 = n
 *  n + N = N
 *  n + I = I
 *  0 + n = n
 *  0 + 0 = 0
 *  0 + N = N
 *  0 + I = I
 *  N + n = N
 *  N + 0 = N
 *  N + N = N
 *  N + I = N
 *  I + n = I
 *  I + 0 = I
 *  I + N = N
 *  I + I = I
 *
 * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P$2.plus = P$2.add = function (y) {
  var carry,
    d,
    e,
    i,
    k,
    len,
    pr,
    rm,
    xd,
    yd,
    x = this,
    Ctor = x.constructor;
  y = new Ctor(y);

  // If either is not finite...
  if (!x.d || !y.d) {
    // Return NaN if either is NaN.
    if (!x.s || !y.s) y = new Ctor(NaN);

    // Return x if y is finite and x is ±Infinity.
    // Return x if both are ±Infinity with the same sign.
    // Return NaN if both are ±Infinity with different signs.
    // Return y if x is finite and y is ±Infinity.
    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
    return y;
  }

  // If signs differ...
  if (x.s != y.s) {
    y.s = -y.s;
    return x.minus(y);
  }
  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;

  // If either is zero...
  if (!xd[0] || !yd[0]) {
    // Return x if y is zero.
    // Return y if y is non-zero.
    if (!yd[0]) y = new Ctor(x);
    return external ? finalise(y, pr, rm) : y;
  }

  // x and y are finite, non-zero numbers with the same sign.

  // Calculate base 1e7 exponents.
  k = mathfloor(x.e / LOG_BASE);
  e = mathfloor(y.e / LOG_BASE);
  xd = xd.slice();
  i = k - e;

  // If base 1e7 exponents differ...
  if (i) {
    if (i < 0) {
      d = xd;
      i = -i;
      len = yd.length;
    } else {
      d = yd;
      e = k;
      len = xd.length;
    }

    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
    k = Math.ceil(pr / LOG_BASE);
    len = k > len ? k + 1 : len + 1;
    if (i > len) {
      i = len;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
    d.reverse();
    for (; i--;) d.push(0);
    d.reverse();
  }
  len = xd.length;
  i = yd.length;

  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
  if (len - i < 0) {
    i = len;
    d = yd;
    yd = xd;
    xd = d;
  }

  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
  for (carry = 0; i;) {
    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
    xd[i] %= BASE;
  }
  if (carry) {
    xd.unshift(carry);
    ++e;
  }

  // Remove trailing zeros.
  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
  for (len = xd.length; xd[--len] == 0;) xd.pop();
  y.d = xd;
  y.e = getBase10Exponent(xd, e);
  return external ? finalise(y, pr, rm) : y;
};

/*
 * Return the number of significant digits of the value of this Decimal.
 *
 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
 *
 */
P$2.precision = P$2.sd = function (z) {
  var k,
    x = this;
  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
  if (x.d) {
    k = getPrecision(x.d);
    if (z && x.e + 1 > k) k = x.e + 1;
  } else {
    k = NaN;
  }
  return k;
};

/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
 * rounding mode `rounding`.
 *
 */
P$2.round = function () {
  var x = this,
    Ctor = x.constructor;
  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
};

/*
 * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * sin(x) = x - x^3/3! + x^5/5! - ...
 *
 * sin(0)         = 0
 * sin(-0)        = -0
 * sin(Infinity)  = NaN
 * sin(-Infinity) = NaN
 * sin(NaN)       = NaN
 *
 */
P$2.sine = P$2.sin = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite()) return new Ctor(NaN);
  if (x.isZero()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;
  x = sine(Ctor, toLessThanHalfPi(Ctor, x));
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
};

/*
 * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 *  sqrt(-n) =  N
 *  sqrt(N)  =  N
 *  sqrt(-I) =  N
 *  sqrt(I)  =  I
 *  sqrt(0)  =  0
 *  sqrt(-0) = -0
 *
 */
P$2.squareRoot = P$2.sqrt = function () {
  var m,
    n,
    sd,
    r,
    rep,
    t,
    x = this,
    d = x.d,
    e = x.e,
    s = x.s,
    Ctor = x.constructor;

  // Negative/NaN/Infinity/zero?
  if (s !== 1 || !d || !d[0]) {
    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
  }
  external = false;

  // Initial estimate.
  s = Math.sqrt(+x);

  // Math.sqrt underflow/overflow?
  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
  if (s == 0 || s == 1 / 0) {
    n = digitsToString(d);
    if ((n.length + e) % 2 == 0) n += '0';
    s = Math.sqrt(n);
    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
    if (s == 1 / 0) {
      n = '5e' + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf('e') + 1) + e;
    }
    r = new Ctor(n);
  } else {
    r = new Ctor(s.toString());
  }
  sd = (e = Ctor.precision) + 3;

  // Newton-Raphson iteration.
  for (;;) {
    t = r;
    r = t.plus(divide$1(x, t, sd + 2, 1)).times(0.5);

    // TODO? Replace with for-loop and checkRoundingDigits.
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);

      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
      // 4999, i.e. approaching a rounding boundary, continue the iteration.
      if (n == '9999' || !rep && n == '4999') {
        // On the first iteration only, check to see if rounding up gives the exact result as the
        // nines may infinitely repeat.
        if (!rep) {
          finalise(t, e + 1, 0);
          if (t.times(t).eq(x)) {
            r = t;
            break;
          }
        }
        sd += 4;
        rep = 1;
      } else {
        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
        // If not, then there are further digits and m will be truthy.
        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
          // Truncate to the first rounding digit.
          finalise(r, e + 1, 1);
          m = !r.times(r).eq(x);
        }
        break;
      }
    }
  }
  external = true;
  return finalise(r, e, Ctor.rounding, m);
};

/*
 * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * tan(0)         = 0
 * tan(-0)        = -0
 * tan(Infinity)  = NaN
 * tan(-Infinity) = NaN
 * tan(NaN)       = NaN
 *
 */
P$2.tangent = P$2.tan = function () {
  var pr,
    rm,
    x = this,
    Ctor = x.constructor;
  if (!x.isFinite()) return new Ctor(NaN);
  if (x.isZero()) return new Ctor(x);
  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 10;
  Ctor.rounding = 1;
  x = x.sin();
  x.s = 1;
  x = divide$1(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
  Ctor.precision = pr;
  Ctor.rounding = rm;
  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
};

/*
 *  n * 0 = 0
 *  n * N = N
 *  n * I = I
 *  0 * n = 0
 *  0 * 0 = 0
 *  0 * N = N
 *  0 * I = N
 *  N * n = N
 *  N * 0 = N
 *  N * N = N
 *  N * I = N
 *  I * n = I
 *  I * 0 = N
 *  I * N = N
 *  I * I = I
 *
 * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 */
P$2.times = P$2.mul = function (y) {
  var carry,
    e,
    i,
    k,
    r,
    rL,
    t,
    xdL,
    ydL,
    x = this,
    Ctor = x.constructor,
    xd = x.d,
    yd = (y = new Ctor(y)).d;
  y.s *= x.s;

  // If either is NaN, ±Infinity or ±0...
  if (!xd || !xd[0] || !yd || !yd[0]) {
    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

    // Return NaN if either is NaN.
    // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
    ? NaN

    // Return ±Infinity if either is ±Infinity.
    // Return ±0 if either is ±0.
    : !xd || !yd ? y.s / 0 : y.s * 0);
  }
  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
  xdL = xd.length;
  ydL = yd.length;

  // Ensure xd points to the longer array.
  if (xdL < ydL) {
    r = xd;
    xd = yd;
    yd = r;
    rL = xdL;
    xdL = ydL;
    ydL = rL;
  }

  // Initialise the result array with zeros.
  r = [];
  rL = xdL + ydL;
  for (i = rL; i--;) r.push(0);

  // Multiply!
  for (i = ydL; --i >= 0;) {
    carry = 0;
    for (k = xdL + i; k > i;) {
      t = r[k] + yd[i] * xd[k - i - 1] + carry;
      r[k--] = t % BASE | 0;
      carry = t / BASE | 0;
    }
    r[k] = (r[k] + carry) % BASE | 0;
  }

  // Remove trailing zeros.
  for (; !r[--rL];) r.pop();
  if (carry) ++e;else r.shift();
  y.d = r;
  y.e = getBase10Exponent(r, e);
  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
};

/*
 * Return a string representing the value of this Decimal in base 2, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toBinary = function (sd, rm) {
  return toStringBinary(this, 2, sd, rm);
};

/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
 *
 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toDecimalPlaces = P$2.toDP = function (dp, rm) {
  var x = this,
    Ctor = x.constructor;
  x = new Ctor(x);
  if (dp === void 0) return x;
  checkInt32(dp, 0, MAX_DIGITS);
  if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
  return finalise(x, dp + x.e + 1, rm);
};

/*
 * Return a string representing the value of this Decimal in exponential notation rounded to
 * `dp` fixed decimal places using rounding mode `rounding`.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toExponential = function (dp, rm) {
  var str,
    x = this,
    Ctor = x.constructor;
  if (dp === void 0) {
    str = finiteToString(x, true);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    x = finalise(new Ctor(x), dp + 1, rm);
    str = finiteToString(x, true, dp + 1);
  }
  return x.isNeg() && !x.isZero() ? '-' + str : str;
};

/*
 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
 * omitted.
 *
 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 * (-0).toFixed(3) is '0.000'.
 * (-0.5).toFixed(0) is '-0'.
 *
 */
P$2.toFixed = function (dp, rm) {
  var str,
    y,
    x = this,
    Ctor = x.constructor;
  if (dp === void 0) {
    str = finiteToString(x);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    y = finalise(new Ctor(x), dp + x.e + 1, rm);
    str = finiteToString(y, false, dp + y.e + 1);
  }

  // To determine whether to add the minus sign look at the value before it was rounded,
  // i.e. look at `x` rather than `y`.
  return x.isNeg() && !x.isZero() ? '-' + str : str;
};

/*
 * Return an array representing the value of this Decimal as a simple fraction with an integer
 * numerator and an integer denominator.
 *
 * The denominator will be a positive non-zero value less than or equal to the specified maximum
 * denominator. If a maximum denominator is not specified, the denominator will be the lowest
 * value necessary to represent the number exactly.
 *
 * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
 *
 */
P$2.toFraction = function (maxD) {
  var d,
    d0,
    d1,
    d2,
    e,
    k,
    n,
    n0,
    n1,
    pr,
    q,
    r,
    x = this,
    xd = x.d,
    Ctor = x.constructor;
  if (!xd) return new Ctor(x);
  n1 = d0 = new Ctor(1);
  d1 = n0 = new Ctor(0);
  d = new Ctor(d1);
  e = d.e = getPrecision(xd) - x.e - 1;
  k = e % LOG_BASE;
  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
  if (maxD == null) {
    // d is 10**e, the minimum max-denominator needed.
    maxD = e > 0 ? d : n1;
  } else {
    n = new Ctor(maxD);
    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
    maxD = n.gt(d) ? e > 0 ? d : n1 : n;
  }
  external = false;
  n = new Ctor(digitsToString(xd));
  pr = Ctor.precision;
  Ctor.precision = e = xd.length * LOG_BASE * 2;
  for (;;) {
    q = divide$1(n, d, 0, 1, 1);
    d2 = d0.plus(q.times(d1));
    if (d2.cmp(maxD) == 1) break;
    d0 = d1;
    d1 = d2;
    d2 = n1;
    n1 = n0.plus(q.times(d2));
    n0 = d2;
    d2 = d;
    d = n.minus(q.times(d2));
    n = d2;
  }
  d2 = divide$1(maxD.minus(d0), d1, 0, 1, 1);
  n0 = n0.plus(d2.times(n1));
  d0 = d0.plus(d2.times(d1));
  n0.s = n1.s = x.s;

  // Determine which fraction is closer to x, n0/d0 or n1/d1?
  r = divide$1(n1, d1, e, 1).minus(x).abs().cmp(divide$1(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
  Ctor.precision = pr;
  external = true;
  return r;
};

/*
 * Return a string representing the value of this Decimal in base 16, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toHexadecimal = P$2.toHex = function (sd, rm) {
  return toStringBinary(this, 16, sd, rm);
};

/*
 * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
 * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
 *
 * The return value will always have the same sign as this Decimal, unless either this Decimal
 * or `y` is NaN, in which case the return value will be also be NaN.
 *
 * The return value is not affected by the value of `precision`.
 *
 * y {number|string|Decimal} The magnitude to round to a multiple of.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * 'toNearest() rounding mode not an integer: {rm}'
 * 'toNearest() rounding mode out of range: {rm}'
 *
 */
P$2.toNearest = function (y, rm) {
  var x = this,
    Ctor = x.constructor;
  x = new Ctor(x);
  if (y == null) {
    // If x is not finite, return x.
    if (!x.d) return x;
    y = new Ctor(1);
    rm = Ctor.rounding;
  } else {
    y = new Ctor(y);
    if (rm === void 0) {
      rm = Ctor.rounding;
    } else {
      checkInt32(rm, 0, 8);
    }

    // If x is not finite, return x if y is not NaN, else NaN.
    if (!x.d) return y.s ? x : y;

    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
    if (!y.d) {
      if (y.s) y.s = x.s;
      return y;
    }
  }

  // If y is not zero, calculate the nearest multiple of y to x.
  if (y.d[0]) {
    external = false;
    x = divide$1(x, y, 0, rm, 1).times(y);
    external = true;
    finalise(x);

    // If y is zero, return zero with the sign of x.
  } else {
    y.s = x.s;
    x = y;
  }
  return x;
};

/*
 * Return the value of this Decimal converted to a number primitive.
 * Zero keeps its sign.
 *
 */
P$2.toNumber = function () {
  return +this;
};

/*
 * Return a string representing the value of this Decimal in base 8, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toOctal = function (sd, rm) {
  return toStringBinary(this, 8, sd, rm);
};

/*
 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
 * to `precision` significant digits using rounding mode `rounding`.
 *
 * ECMAScript compliant.
 *
 *   pow(x, NaN)                           = NaN
 *   pow(x, ±0)                            = 1

 *   pow(NaN, non-zero)                    = NaN
 *   pow(abs(x) > 1, +Infinity)            = +Infinity
 *   pow(abs(x) > 1, -Infinity)            = +0
 *   pow(abs(x) == 1, ±Infinity)           = NaN
 *   pow(abs(x) < 1, +Infinity)            = +0
 *   pow(abs(x) < 1, -Infinity)            = +Infinity
 *   pow(+Infinity, y > 0)                 = +Infinity
 *   pow(+Infinity, y < 0)                 = +0
 *   pow(-Infinity, odd integer > 0)       = -Infinity
 *   pow(-Infinity, even integer > 0)      = +Infinity
 *   pow(-Infinity, odd integer < 0)       = -0
 *   pow(-Infinity, even integer < 0)      = +0
 *   pow(+0, y > 0)                        = +0
 *   pow(+0, y < 0)                        = +Infinity
 *   pow(-0, odd integer > 0)              = -0
 *   pow(-0, even integer > 0)             = +0
 *   pow(-0, odd integer < 0)              = -Infinity
 *   pow(-0, even integer < 0)             = +Infinity
 *   pow(finite x < 0, finite non-integer) = NaN
 *
 * For non-integer or very large exponents pow(x, y) is calculated using
 *
 *   x^y = exp(y*ln(x))
 *
 * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
 * probability of an incorrectly rounded result
 * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
 * i.e. 1 in 250,000,000,000,000
 *
 * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
 *
 * y {number|string|Decimal} The power to which to raise this Decimal.
 *
 */
P$2.toPower = P$2.pow = function (y) {
  var e,
    k,
    pr,
    r,
    rm,
    s,
    x = this,
    Ctor = x.constructor,
    yn = +(y = new Ctor(y));

  // Either ±Infinity, NaN or ±0?
  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));
  x = new Ctor(x);
  if (x.eq(1)) return x;
  pr = Ctor.precision;
  rm = Ctor.rounding;
  if (y.eq(1)) return finalise(x, pr, rm);

  // y exponent
  e = mathfloor(y.e / LOG_BASE);

  // If y is a small integer use the 'exponentiation by squaring' algorithm.
  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
    r = intPow(Ctor, x, k, pr);
    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
  }
  s = x.s;

  // if x is negative
  if (s < 0) {
    // if y is not an integer
    if (e < y.d.length - 1) return new Ctor(NaN);

    // Result is positive if x is negative and the last digit of integer y is even.
    if ((y.d[e] & 1) == 0) s = 1;

    // if x.eq(-1)
    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
      x.s = s;
      return x;
    }
  }

  // Estimate result exponent.
  // x^y = 10^e,  where e = y * log10(x)
  // log10(x) = log10(x_significand) + x_exponent
  // log10(x_significand) = ln(x_significand) / ln(10)
  k = mathpow(+x, yn);
  e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;

  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

  // Overflow/underflow?
  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);
  external = false;
  Ctor.rounding = x.s = 1;

  // Estimate the extra guard digits needed to ensure five correct rounding digits from
  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
  // new Decimal(2.32456).pow('2087987436534566.46411')
  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
  k = Math.min(12, (e + '').length);

  // r = x^y = exp(y*ln(x))
  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
  if (r.d) {
    // Truncate to the required precision plus five rounding digits.
    r = finalise(r, pr + 5, 1);

    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
    // the result.
    if (checkRoundingDigits(r.d, pr, rm)) {
      e = pr + 10;

      // Truncate to the increased precision plus five rounding digits.
      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
        r = finalise(r, pr + 1, 0);
      }
    }
  }
  r.s = s;
  external = true;
  Ctor.rounding = rm;
  return finalise(r, pr, rm);
};

/*
 * Return a string representing the value of this Decimal rounded to `sd` significant digits
 * using rounding mode `rounding`.
 *
 * Return exponential notation if `sd` is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P$2.toPrecision = function (sd, rm) {
  var str,
    x = this,
    Ctor = x.constructor;
  if (sd === void 0) {
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  } else {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
    x = finalise(new Ctor(x), sd, rm);
    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
  }
  return x.isNeg() && !x.isZero() ? '-' + str : str;
};

/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
 * omitted.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * 'toSD() digits out of range: {sd}'
 * 'toSD() digits not an integer: {sd}'
 * 'toSD() rounding mode not an integer: {rm}'
 * 'toSD() rounding mode out of range: {rm}'
 *
 */
P$2.toSignificantDigits = P$2.toSD = function (sd, rm) {
  var x = this,
    Ctor = x.constructor;
  if (sd === void 0) {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  } else {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
  }
  return finalise(new Ctor(x), sd, rm);
};

/*
 * Return a string representing the value of this Decimal.
 *
 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
 *
 */
P$2.toString = function () {
  var x = this,
    Ctor = x.constructor,
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  return x.isNeg() && !x.isZero() ? '-' + str : str;
};

/*
 * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
 *
 */
P$2.truncated = P$2.trunc = function () {
  return finalise(new this.constructor(this), this.e + 1, 1);
};

/*
 * Return a string representing the value of this Decimal.
 * Unlike `toString`, negative zero will include the minus sign.
 *
 */
P$2.valueOf = P$2.toJSON = function () {
  var x = this,
    Ctor = x.constructor,
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  return x.isNeg() ? '-' + str : str;
};

// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

/*
 *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
 *                           finiteToString, naturalExponential, naturalLogarithm
 *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
 *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
 *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
 *  convertBase              toStringBinary, parseOther
 *  cos                      P.cos
 *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
 *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
 *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
 *                           taylorSeries, atan2, parseOther
 *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
 *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
 *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
 *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
 *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
 *                           P.truncated, divide, getLn10, getPi, naturalExponential,
 *                           naturalLogarithm, ceil, floor, round, trunc
 *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
 *                           toStringBinary
 *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
 *  getLn10                  P.logarithm, naturalLogarithm
 *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
 *  getPrecision             P.precision, P.toFraction
 *  getZeroString            digitsToString, finiteToString
 *  intPow                   P.toPower, parseOther
 *  isOdd                    toLessThanHalfPi
 *  maxOrMin                 max, min
 *  naturalExponential       P.naturalExponential, P.toPower
 *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
 *                           P.toPower, naturalExponential
 *  nonFiniteToString        finiteToString, toStringBinary
 *  parseDecimal             Decimal
 *  parseOther               Decimal
 *  sin                      P.sin
 *  taylorSeries             P.cosh, P.sinh, cos, sin
 *  toLessThanHalfPi         P.cos, P.sin
 *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
 *  truncate                 intPow
 *
 *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
 *                           naturalLogarithm, config, parseOther, random, Decimal
 */

function digitsToString(d) {
  var i,
    k,
    ws,
    indexOfLastWord = d.length - 1,
    str = '',
    w = d[0];
  if (indexOfLastWord > 0) {
    str += w;
    for (i = 1; i < indexOfLastWord; i++) {
      ws = d[i] + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
      str += ws;
    }
    w = d[i];
    ws = w + '';
    k = LOG_BASE - ws.length;
    if (k) str += getZeroString(k);
  } else if (w === 0) {
    return '0';
  }

  // Remove trailing zeros of last w.
  for (; w % 10 === 0;) w /= 10;
  return str + w;
}
function checkInt32(i, min, max) {
  if (i !== ~~i || i < min || i > max) {
    throw Error(invalidArgument + i);
  }
}

/*
 * Check 5 rounding digits if `repeating` is null, 4 otherwise.
 * `repeating == null` if caller is `log` or `pow`,
 * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
 */
function checkRoundingDigits(d, i, rm, repeating) {
  var di, k, r, rd;

  // Get the length of the first word of the array d.
  for (k = d[0]; k >= 10; k /= 10) --i;

  // Is the rounding digit in the first word of d?
  if (--i < 0) {
    i += LOG_BASE;
    di = 0;
  } else {
    di = Math.ceil((i + 1) / LOG_BASE);
    i %= LOG_BASE;
  }

  // i is the index (0 - 6) of the rounding digit.
  // E.g. if within the word 3487563 the first rounding digit is 5,
  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
  k = mathpow(10, LOG_BASE - i);
  rd = d[di] % k | 0;
  if (repeating == null) {
    if (i < 3) {
      if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;
      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
    } else {
      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
    }
  } else {
    if (i < 4) {
      if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;
      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
    } else {
      r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
    }
  }
  return r;
}

// Convert string of `baseIn` to an array of numbers of `baseOut`.
// Eg. convertBase('255', 10, 16) returns [15, 15].
// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
function convertBase(str, baseIn, baseOut) {
  var j,
    arr = [0],
    arrL,
    i = 0,
    strL = str.length;
  for (; i < strL;) {
    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
    arr[0] += NUMERALS.indexOf(str.charAt(i++));
    for (j = 0; j < arr.length; j++) {
      if (arr[j] > baseOut - 1) {
        if (arr[j + 1] === void 0) arr[j + 1] = 0;
        arr[j + 1] += arr[j] / baseOut | 0;
        arr[j] %= baseOut;
      }
    }
  }
  return arr.reverse();
}

/*
 * cos(x) = 1 - x^2/2! + x^4/4! - ...
 * |x| < pi/2
 *
 */
function cosine(Ctor, x) {
  var k, len, y;
  if (x.isZero()) return x;

  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

  // Estimate the optimum number of times to use the argument reduction.
  len = x.d.length;
  if (len < 32) {
    k = Math.ceil(len / 3);
    y = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    y = '2.3283064365386962890625e-10';
  }
  Ctor.precision += k;
  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

  // Reverse argument reduction
  for (var i = k; i--;) {
    var cos2x = x.times(x);
    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
  }
  Ctor.precision -= k;
  return x;
}

/*
 * Perform division in the specified base.
 */
var divide$1 = function () {
  // Assumes non-zero x and k, and hence non-zero result.
  function multiplyInteger(x, k, base) {
    var temp,
      carry = 0,
      i = x.length;
    for (x = x.slice(); i--;) {
      temp = x[i] * k + carry;
      x[i] = temp % base | 0;
      carry = temp / base | 0;
    }
    if (carry) x.unshift(carry);
    return x;
  }
  function compare(a, b, aL, bL) {
    var i, r;
    if (aL != bL) {
      r = aL > bL ? 1 : -1;
    } else {
      for (i = r = 0; i < aL; i++) {
        if (a[i] != b[i]) {
          r = a[i] > b[i] ? 1 : -1;
          break;
        }
      }
    }
    return r;
  }
  function subtract(a, b, aL, base) {
    var i = 0;

    // Subtract b from a.
    for (; aL--;) {
      a[aL] -= i;
      i = a[aL] < b[aL] ? 1 : 0;
      a[aL] = i * base + a[aL] - b[aL];
    }

    // Remove leading zeros.
    for (; !a[0] && a.length > 1;) a.shift();
  }
  return function (x, y, pr, rm, dp, base) {
    var cmp,
      e,
      i,
      k,
      logBase,
      more,
      prod,
      prodL,
      q,
      qd,
      rem,
      remL,
      rem0,
      sd,
      t,
      xi,
      xL,
      yd0,
      yL,
      yz,
      Ctor = x.constructor,
      sign = x.s == y.s ? 1 : -1,
      xd = x.d,
      yd = y.d;

    // Either NaN, Infinity or 0?
    if (!xd || !xd[0] || !yd || !yd[0]) {
      return new Ctor(
      // Return NaN if either NaN, or both Infinity or 0.
      !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
      // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
      xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
    }
    if (base) {
      logBase = 1;
      e = x.e - y.e;
    } else {
      base = BASE;
      logBase = LOG_BASE;
      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
    }
    yL = yd.length;
    xL = xd.length;
    q = new Ctor(sign);
    qd = q.d = [];

    // Result exponent may be one less than e.
    // The digit array of a Decimal from toStringBinary may have trailing zeros.
    for (i = 0; yd[i] == (xd[i] || 0); i++);
    if (yd[i] > (xd[i] || 0)) e--;
    if (pr == null) {
      sd = pr = Ctor.precision;
      rm = Ctor.rounding;
    } else if (dp) {
      sd = pr + (x.e - y.e) + 1;
    } else {
      sd = pr;
    }
    if (sd < 0) {
      qd.push(1);
      more = true;
    } else {
      // Convert precision in number of base 10 digits to base 1e7 digits.
      sd = sd / logBase + 2 | 0;
      i = 0;

      // divisor < 1e7
      if (yL == 1) {
        k = 0;
        yd = yd[0];
        sd++;

        // k is the carry.
        for (; (i < xL || k) && sd--; i++) {
          t = k * base + (xd[i] || 0);
          qd[i] = t / yd | 0;
          k = t % yd | 0;
        }
        more = k || i < xL;

        // divisor >= 1e7
      } else {
        // Normalise xd and yd so highest order digit of yd is >= base/2
        k = base / (yd[0] + 1) | 0;
        if (k > 1) {
          yd = multiplyInteger(yd, k, base);
          xd = multiplyInteger(xd, k, base);
          yL = yd.length;
          xL = xd.length;
        }
        xi = yL;
        rem = xd.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL;) rem[remL++] = 0;
        yz = yd.slice();
        yz.unshift(0);
        yd0 = yd[0];
        if (yd[1] >= base / 2) ++yd0;
        do {
          k = 0;

          // Compare divisor and remainder.
          cmp = compare(yd, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {
            // Calculate trial digit, k.
            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // k will be how many times the divisor goes into the current remainder.
            k = rem0 / yd0 | 0;

            //  Algorithm:
            //  1. product = divisor * trial digit (k)
            //  2. if product > remainder: product -= divisor, k--
            //  3. remainder -= product
            //  4. if product was < remainder at 2:
            //    5. compare new remainder and divisor
            //    6. If remainder > divisor: remainder -= divisor, k++

            if (k > 1) {
              if (k >= base) k = base - 1;

              // product = divisor * trial digit.
              prod = multiplyInteger(yd, k, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              cmp = compare(prod, rem, prodL, remL);

              // product > remainder.
              if (cmp == 1) {
                k--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yd, prodL, base);
              }
            } else {
              // cmp is -1.
              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
              // to avoid it. If k is 1 there is a need to compare yd and rem again below.
              if (k == 0) cmp = k = 1;
              prod = yd.slice();
            }
            prodL = prod.length;
            if (prodL < remL) prod.unshift(0);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);

            // If product was < previous remainder.
            if (cmp == -1) {
              remL = rem.length;

              // Compare divisor and new remainder.
              cmp = compare(yd, rem, yL, remL);

              // If divisor < new remainder, subtract divisor from remainder.
              if (cmp < 1) {
                k++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yd, remL, base);
              }
            }
            remL = rem.length;
          } else if (cmp === 0) {
            k++;
            rem = [0];
          } // if cmp === 1, k will be 0

          // Add the next digit, k, to the result array.
          qd[i++] = k;

          // Update the remainder.
          if (cmp && rem[0]) {
            rem[remL++] = xd[xi] || 0;
          } else {
            rem = [xd[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] !== void 0) && sd--);
        more = rem[0] !== void 0;
      }

      // Leading zero?
      if (!qd[0]) qd.shift();
    }

    // logBase is 1 when divide is being used for base conversion.
    if (logBase == 1) {
      q.e = e;
      inexact = more;
    } else {
      // To calculate q.e, first get the number of digits of qd[0].
      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
      q.e = i + e * logBase - 1;
      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
    }
    return q;
  };
}();

/*
 * Round `x` to `sd` significant digits using rounding mode `rm`.
 * Check for over/under-flow.
 */
function finalise(x, sd, rm, isTruncated) {
  var digits,
    i,
    j,
    k,
    rd,
    roundUp,
    w,
    xd,
    xdi,
    Ctor = x.constructor;

  // Don't round if sd is null or undefined.
  out: if (sd != null) {
    xd = x.d;

    // Infinity/NaN.
    if (!xd) return x;

    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
    // w: the word of xd containing rd, a base 1e7 number.
    // xdi: the index of w within xd.
    // digits: the number of digits of w.
    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
    // they had leading zeros)
    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

    // Get the length of the first word of the digits array xd.
    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
    i = sd - digits;

    // Is the rounding digit in the first word of xd?
    if (i < 0) {
      i += LOG_BASE;
      j = sd;
      w = xd[xdi = 0];

      // Get the rounding digit at index j of w.
      rd = w / mathpow(10, digits - j - 1) % 10 | 0;
    } else {
      xdi = Math.ceil((i + 1) / LOG_BASE);
      k = xd.length;
      if (xdi >= k) {
        if (isTruncated) {
          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
          for (; k++ <= xdi;) xd.push(0);
          w = rd = 0;
          digits = 1;
          i %= LOG_BASE;
          j = i - LOG_BASE + 1;
        } else {
          break out;
        }
      } else {
        w = k = xd[xdi];

        // Get the number of digits of w.
        for (digits = 1; k >= 10; k /= 10) digits++;

        // Get the index of rd within w.
        i %= LOG_BASE;

        // Get the index of rd within w, adjusted for leading zeros.
        // The number of leading zeros of w is given by LOG_BASE - digits.
        j = i - LOG_BASE + digits;

        // Get the rounding digit at index j of w.
        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
      }
    }

    // Are there any non-zero digits after the rounding digit?
    isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
    // will give 714.

    roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
    // Check whether the digit to the left of the rounding digit is odd.
    (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
    if (sd < 1 || !xd[0]) {
      xd.length = 0;
      if (roundUp) {
        // Convert sd to decimal places.
        sd -= x.e + 1;

        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
        x.e = -sd || 0;
      } else {
        // Zero.
        xd[0] = x.e = 0;
      }
      return x;
    }

    // Remove excess digits.
    if (i == 0) {
      xd.length = xdi;
      k = 1;
      xdi--;
    } else {
      xd.length = xdi + 1;
      k = mathpow(10, LOG_BASE - i);

      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
      // j > 0 means i > number of leading zeros of w.
      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
    }
    if (roundUp) {
      for (;;) {
        // Is the digit to be rounded up in the first word of xd?
        if (xdi == 0) {
          // i will be the length of xd[0] before k is added.
          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
          j = xd[0] += k;
          for (k = 1; j >= 10; j /= 10) k++;

          // if i != k the length has increased.
          if (i != k) {
            x.e++;
            if (xd[0] == BASE) xd[0] = 1;
          }
          break;
        } else {
          xd[xdi] += k;
          if (xd[xdi] != BASE) break;
          xd[xdi--] = 0;
          k = 1;
        }
      }
    }

    // Remove trailing zeros.
    for (i = xd.length; xd[--i] === 0;) xd.pop();
  }
  if (external) {
    // Overflow?
    if (x.e > Ctor.maxE) {
      // Infinity.
      x.d = null;
      x.e = NaN;

      // Underflow?
    } else if (x.e < Ctor.minE) {
      // Zero.
      x.e = 0;
      x.d = [0];
      // Ctor.underflow = true;
    } // else Ctor.underflow = false;
  }

  return x;
}
function finiteToString(x, isExp, sd) {
  if (!x.isFinite()) return nonFiniteToString(x);
  var k,
    e = x.e,
    str = digitsToString(x.d),
    len = str.length;
  if (isExp) {
    if (sd && (k = sd - len) > 0) {
      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
    } else if (len > 1) {
      str = str.charAt(0) + '.' + str.slice(1);
    }
    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
  } else if (e < 0) {
    str = '0.' + getZeroString(-e - 1) + str;
    if (sd && (k = sd - len) > 0) str += getZeroString(k);
  } else if (e >= len) {
    str += getZeroString(e + 1 - len);
    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
  } else {
    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
    if (sd && (k = sd - len) > 0) {
      if (e + 1 === len) str += '.';
      str += getZeroString(k);
    }
  }
  return str;
}

// Calculate the base 10 exponent from the base 1e7 exponent.
function getBase10Exponent(digits, e) {
  var w = digits[0];

  // Add the number of digits of the first word of the digits array.
  for (e *= LOG_BASE; w >= 10; w /= 10) e++;
  return e;
}
function getLn10(Ctor, sd, pr) {
  if (sd > LN10_PRECISION) {
    // Reset global state in case the exception is caught.
    external = true;
    if (pr) Ctor.precision = pr;
    throw Error(precisionLimitExceeded);
  }
  return finalise(new Ctor(LN10$1), sd, 1, true);
}
function getPi(Ctor, sd, rm) {
  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
  return finalise(new Ctor(PI), sd, rm, true);
}
function getPrecision(digits) {
  var w = digits.length - 1,
    len = w * LOG_BASE + 1;
  w = digits[w];

  // If non-zero...
  if (w) {
    // Subtract the number of trailing zeros of the last word.
    for (; w % 10 == 0; w /= 10) len--;

    // Add the number of digits of the first word.
    for (w = digits[0]; w >= 10; w /= 10) len++;
  }
  return len;
}
function getZeroString(k) {
  var zs = '';
  for (; k--;) zs += '0';
  return zs;
}

/*
 * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
 * integer of type number.
 *
 * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
 *
 */
function intPow(Ctor, x, n, pr) {
  var isTruncated,
    r = new Ctor(1),
    // Max n of 9007199254740991 takes 53 loop iterations.
    // Maximum digits array length; leaves [28, 34] guard digits.
    k = Math.ceil(pr / LOG_BASE + 4);
  external = false;
  for (;;) {
    if (n % 2) {
      r = r.times(x);
      if (truncate(r.d, k)) isTruncated = true;
    }
    n = mathfloor(n / 2);
    if (n === 0) {
      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
      n = r.d.length - 1;
      if (isTruncated && r.d[n] === 0) ++r.d[n];
      break;
    }
    x = x.times(x);
    truncate(x.d, k);
  }
  external = true;
  return r;
}
function isOdd(n) {
  return n.d[n.d.length - 1] & 1;
}

/*
 * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
 */
function maxOrMin(Ctor, args, ltgt) {
  var y,
    x = new Ctor(args[0]),
    i = 0;
  for (; ++i < args.length;) {
    y = new Ctor(args[i]);
    if (!y.s) {
      x = y;
      break;
    } else if (x[ltgt](y)) {
      x = y;
    }
  }
  return x;
}

/*
 * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
 * digits.
 *
 * Taylor/Maclaurin series.
 *
 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
 *
 * Argument reduction:
 *   Repeat x = x / 32, k += 5, until |x| < 0.1
 *   exp(x) = exp(x / 2^k)^(2^k)
 *
 * Previously, the argument was initially reduced by
 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
 * found to be slower than just dividing repeatedly by 32 as above.
 *
 * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
 * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
 *
 *  exp(Infinity)  = Infinity
 *  exp(-Infinity) = 0
 *  exp(NaN)       = NaN
 *  exp(±0)        = 1
 *
 *  exp(x) is non-terminating for any finite, non-zero x.
 *
 *  The result will always be correctly rounded.
 *
 */
function naturalExponential(x, sd) {
  var denominator,
    guard,
    j,
    pow,
    sum,
    t,
    wpr,
    rep = 0,
    i = 0,
    k = 0,
    Ctor = x.constructor,
    rm = Ctor.rounding,
    pr = Ctor.precision;

  // 0/NaN/Infinity?
  if (!x.d || !x.d[0] || x.e > 17) {
    return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
  }
  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }
  t = new Ctor(0.03125);

  // while abs(x) >= 0.1
  while (x.e > -2) {
    // x = x / 2^5
    x = x.times(t);
    k += 5;
  }

  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
  // necessary to ensure the first 4 rounding digits are correct.
  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
  wpr += guard;
  denominator = pow = sum = new Ctor(1);
  Ctor.precision = wpr;
  for (;;) {
    pow = finalise(pow.times(x), wpr, 1);
    denominator = denominator.times(++i);
    t = sum.plus(divide$1(pow, denominator, wpr, 1));
    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      j = k;
      while (j--) sum = finalise(sum.times(sum), wpr, 1);

      // Check to see if the first 4 rounding digits are [49]999.
      // If so, repeat the summation with a higher precision, otherwise
      // e.g. with precision: 18, rounding: 1
      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
      // `wpr - guard` is the index of first rounding digit.
      if (sd == null) {
        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += 10;
          denominator = pow = t = new Ctor(1);
          i = 0;
          rep++;
        } else {
          return finalise(sum, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum;
      }
    }
    sum = t;
  }
}

/*
 * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
 * digits.
 *
 *  ln(-n)        = NaN
 *  ln(0)         = -Infinity
 *  ln(-0)        = -Infinity
 *  ln(1)         = 0
 *  ln(Infinity)  = Infinity
 *  ln(-Infinity) = NaN
 *  ln(NaN)       = NaN
 *
 *  ln(n) (n != 1) is non-terminating.
 *
 */
function naturalLogarithm(y, sd) {
  var c,
    c0,
    denominator,
    e,
    numerator,
    rep,
    sum,
    t,
    wpr,
    x1,
    x2,
    n = 1,
    guard = 10,
    x = y,
    xd = x.d,
    Ctor = x.constructor,
    rm = Ctor.rounding,
    pr = Ctor.precision;

  // Is x negative or Infinity, NaN, 0 or 1?
  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
  }
  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }
  Ctor.precision = wpr += guard;
  c = digitsToString(xd);
  c0 = c.charAt(0);
  if (Math.abs(e = x.e) < 1.5e15) {
    // Argument reduction.
    // The series converges faster the closer the argument is to 1, so using
    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
    // later be divided by this number, then separate out the power of 10 using
    // ln(a*10^b) = ln(a) + b*ln(10).

    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
    // max n is 6 (gives 0.7 - 1.3)
    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
      x = x.times(y);
      c = digitsToString(x.d);
      c0 = c.charAt(0);
      n++;
    }
    e = x.e;
    if (c0 > 1) {
      x = new Ctor('0.' + c);
      e++;
    } else {
      x = new Ctor(c0 + '.' + c.slice(1));
    }
  } else {
    // The argument reduction method above may result in overflow if the argument y is a massive
    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
    // function using ln(x*10^e) = ln(x) + e*ln(10).
    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
    Ctor.precision = pr;
    return sd == null ? finalise(x, pr, rm, external = true) : x;
  }

  // x1 is x reduced to a value near 1.
  x1 = x;

  // Taylor series.
  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
  // where x = (y - 1)/(y + 1)    (|x| < 1)
  sum = numerator = x = divide$1(x.minus(1), x.plus(1), wpr, 1);
  x2 = finalise(x.times(x), wpr, 1);
  denominator = 3;
  for (;;) {
    numerator = finalise(numerator.times(x2), wpr, 1);
    t = sum.plus(divide$1(numerator, new Ctor(denominator), wpr, 1));
    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      sum = sum.times(2);

      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
      sum = divide$1(sum, new Ctor(n), wpr, 1);

      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
      // been repeated previously) and the first 4 rounding digits 9999?
      // If so, restart the summation with a higher precision, otherwise
      // e.g. with precision: 12, rounding: 1
      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
      // `wpr - guard` is the index of first rounding digit.
      if (sd == null) {
        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += guard;
          t = numerator = x = divide$1(x1.minus(1), x1.plus(1), wpr, 1);
          x2 = finalise(x.times(x), wpr, 1);
          denominator = rep = 1;
        } else {
          return finalise(sum, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum;
      }
    }
    sum = t;
    denominator += 2;
  }
}

// ±Infinity, NaN.
function nonFiniteToString(x) {
  // Unsigned.
  return String(x.s * x.s / 0);
}

/*
 * Parse the value of a new Decimal `x` from string `str`.
 */
function parseDecimal(x, str) {
  var e, i, len;

  // Decimal point?
  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

  // Exponential form?
  if ((i = str.search(/e/i)) > 0) {
    // Determine exponent.
    if (e < 0) e = i;
    e += +str.slice(i + 1);
    str = str.substring(0, i);
  } else if (e < 0) {
    // Integer.
    e = str.length;
  }

  // Determine leading zeros.
  for (i = 0; str.charCodeAt(i) === 48; i++);

  // Determine trailing zeros.
  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
  str = str.slice(i, len);
  if (str) {
    len -= i;
    x.e = e = e - i - 1;
    x.d = [];

    // Transform base

    // e is the base 10 exponent.
    // i is where to slice str to get the first word of the digits array.
    i = (e + 1) % LOG_BASE;
    if (e < 0) i += LOG_BASE;
    if (i < len) {
      if (i) x.d.push(+str.slice(0, i));
      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
      str = str.slice(i);
      i = LOG_BASE - str.length;
    } else {
      i -= len;
    }
    for (; i--;) str += '0';
    x.d.push(+str);
    if (external) {
      // Overflow?
      if (x.e > x.constructor.maxE) {
        // Infinity.
        x.d = null;
        x.e = NaN;

        // Underflow?
      } else if (x.e < x.constructor.minE) {
        // Zero.
        x.e = 0;
        x.d = [0];
        // x.constructor.underflow = true;
      } // else x.constructor.underflow = false;
    }
  } else {
    // Zero.
    x.e = 0;
    x.d = [0];
  }
  return x;
}

/*
 * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
 */
function parseOther(x, str) {
  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
  if (str.indexOf('_') > -1) {
    str = str.replace(/(\d)_(?=\d)/g, '$1');
    if (isDecimal.test(str)) return parseDecimal(x, str);
  } else if (str === 'Infinity' || str === 'NaN') {
    if (!+str) x.s = NaN;
    x.e = NaN;
    x.d = null;
    return x;
  }
  if (isHex.test(str)) {
    base = 16;
    str = str.toLowerCase();
  } else if (isBinary.test(str)) {
    base = 2;
  } else if (isOctal.test(str)) {
    base = 8;
  } else {
    throw Error(invalidArgument + str);
  }

  // Is there a binary exponent part?
  i = str.search(/p/i);
  if (i > 0) {
    p = +str.slice(i + 1);
    str = str.substring(2, i);
  } else {
    str = str.slice(2);
  }

  // Convert `str` as an integer then divide the result by `base` raised to a power such that the
  // fraction part will be restored.
  i = str.indexOf('.');
  isFloat = i >= 0;
  Ctor = x.constructor;
  if (isFloat) {
    str = str.replace('.', '');
    len = str.length;
    i = len - i;

    // log[10](16) = 1.2041... , log[10](88) = 1.9444....
    divisor = intPow(Ctor, new Ctor(base), i, i * 2);
  }
  xd = convertBase(str, base, BASE);
  xe = xd.length - 1;

  // Remove trailing zeros.
  for (i = xe; xd[i] === 0; --i) xd.pop();
  if (i < 0) return new Ctor(x.s * 0);
  x.e = getBase10Exponent(xd, xe);
  x.d = xd;
  external = false;

  // At what precision to perform the division to ensure exact conversion?
  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
  // Therefore using 4 * the number of digits of str will always be enough.
  if (isFloat) x = divide$1(x, divisor, len * 4);

  // Multiply by the binary exponent part if present.
  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
  external = true;
  return x;
}

/*
 * sin(x) = x - x^3/3! + x^5/5! - ...
 * |x| < pi/2
 *
 */
function sine(Ctor, x) {
  var k,
    len = x.d.length;
  if (len < 3) {
    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
  }

  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

  // Estimate the optimum number of times to use the argument reduction.
  k = 1.4 * Math.sqrt(len);
  k = k > 16 ? 16 : k | 0;
  x = x.times(1 / tinyPow(5, k));
  x = taylorSeries(Ctor, 2, x, x);

  // Reverse argument reduction
  var sin2_x,
    d5 = new Ctor(5),
    d16 = new Ctor(16),
    d20 = new Ctor(20);
  for (; k--;) {
    sin2_x = x.times(x);
    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
  }
  return x;
}

// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
function taylorSeries(Ctor, n, x, y, isHyperbolic) {
  var j,
    t,
    u,
    x2,
    pr = Ctor.precision,
    k = Math.ceil(pr / LOG_BASE);
  external = false;
  x2 = x.times(x);
  u = new Ctor(y);
  for (;;) {
    t = divide$1(u.times(x2), new Ctor(n++ * n++), pr, 1);
    u = isHyperbolic ? y.plus(t) : y.minus(t);
    y = divide$1(t.times(x2), new Ctor(n++ * n++), pr, 1);
    t = u.plus(y);
    if (t.d[k] !== void 0) {
      for (j = k; t.d[j] === u.d[j] && j--;);
      if (j == -1) break;
    }
    j = u;
    u = y;
    y = t;
    t = j;
  }
  external = true;
  t.d.length = k + 1;
  return t;
}

// Exponent e must be positive and non-zero.
function tinyPow(b, e) {
  var n = b;
  while (--e) n *= b;
  return n;
}

// Return the absolute value of `x` reduced to less than or equal to half pi.
function toLessThanHalfPi(Ctor, x) {
  var t,
    isNeg = x.s < 0,
    pi = getPi(Ctor, Ctor.precision, 1),
    halfPi = pi.times(0.5);
  x = x.abs();
  if (x.lte(halfPi)) {
    quadrant = isNeg ? 4 : 1;
    return x;
  }
  t = x.divToInt(pi);
  if (t.isZero()) {
    quadrant = isNeg ? 3 : 2;
  } else {
    x = x.minus(t.times(pi));

    // 0 <= x < pi
    if (x.lte(halfPi)) {
      quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
      return x;
    }
    quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
  }
  return x.minus(pi).abs();
}

/*
 * Return the value of Decimal `x` as a string in base `baseOut`.
 *
 * If the optional `sd` argument is present include a binary exponent suffix.
 */
function toStringBinary(x, baseOut, sd, rm) {
  var base,
    e,
    i,
    k,
    len,
    roundUp,
    str,
    xd,
    y,
    Ctor = x.constructor,
    isExp = sd !== void 0;
  if (isExp) {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
  } else {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  }
  if (!x.isFinite()) {
    str = nonFiniteToString(x);
  } else {
    str = finiteToString(x);
    i = str.indexOf('.');

    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
    // minBinaryExponent = floor(decimalExponent * log[2](10))
    // log[2](10) = 3.321928094887362347870319429489390175864

    if (isExp) {
      base = 2;
      if (baseOut == 16) {
        sd = sd * 4 - 3;
      } else if (baseOut == 8) {
        sd = sd * 3 - 2;
      }
    } else {
      base = baseOut;
    }

    // Convert the number as an integer then divide the result by its base raised to a power such
    // that the fraction part will be restored.

    // Non-integer.
    if (i >= 0) {
      str = str.replace('.', '');
      y = new Ctor(1);
      y.e = str.length - i;
      y.d = convertBase(finiteToString(y), 10, base);
      y.e = y.d.length;
    }
    xd = convertBase(str, 10, base);
    e = len = xd.length;

    // Remove trailing zeros.
    for (; xd[--len] == 0;) xd.pop();
    if (!xd[0]) {
      str = isExp ? '0p+0' : '0';
    } else {
      if (i < 0) {
        e--;
      } else {
        x = new Ctor(x);
        x.d = xd;
        x.e = e;
        x = divide$1(x, y, sd, rm, 0, base);
        xd = x.d;
        e = x.e;
        roundUp = inexact;
      }

      // The rounding digit, i.e. the digit after the digit that may be rounded up.
      i = xd[sd];
      k = base / 2;
      roundUp = roundUp || xd[sd + 1] !== void 0;
      roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
      xd.length = sd;
      if (roundUp) {
        // Rounding up may mean the previous digit has to be rounded up and so on.
        for (; ++xd[--sd] > base - 1;) {
          xd[sd] = 0;
          if (!sd) {
            ++e;
            xd.unshift(1);
          }
        }
      }

      // Determine trailing zeros.
      for (len = xd.length; !xd[len - 1]; --len);

      // E.g. [4, 11, 15] becomes 4bf.
      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

      // Add binary exponent suffix?
      if (isExp) {
        if (len > 1) {
          if (baseOut == 16 || baseOut == 8) {
            i = baseOut == 16 ? 4 : 3;
            for (--len; len % i; len++) str += '0';
            xd = convertBase(str, base, baseOut);
            for (len = xd.length; !xd[len - 1]; --len);

            // xd[0] will always be be 1
            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
          } else {
            str = str.charAt(0) + '.' + str.slice(1);
          }
        }
        str = str + (e < 0 ? 'p' : 'p+') + e;
      } else if (e < 0) {
        for (; ++e;) str = '0' + str;
        str = '0.' + str;
      } else {
        if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
      }
    }
    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
  }
  return x.s < 0 ? '-' + str : str;
}

// Does not strip trailing zeros.
function truncate(arr, len) {
  if (arr.length > len) {
    arr.length = len;
    return true;
  }
}

// Decimal methods

/*
 *  abs
 *  acos
 *  acosh
 *  add
 *  asin
 *  asinh
 *  atan
 *  atanh
 *  atan2
 *  cbrt
 *  ceil
 *  clamp
 *  clone
 *  config
 *  cos
 *  cosh
 *  div
 *  exp
 *  floor
 *  hypot
 *  ln
 *  log
 *  log2
 *  log10
 *  max
 *  min
 *  mod
 *  mul
 *  pow
 *  random
 *  round
 *  set
 *  sign
 *  sin
 *  sinh
 *  sqrt
 *  sub
 *  sum
 *  tan
 *  tanh
 *  trunc
 */

/*
 * Return a new Decimal whose value is the absolute value of `x`.
 *
 * x {number|string|Decimal}
 *
 */
function abs$1(x) {
  return new this(x).abs();
}

/*
 * Return a new Decimal whose value is the arccosine in radians of `x`.
 *
 * x {number|string|Decimal}
 *
 */
function acos$1(x) {
  return new this(x).acos();
}

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function acosh$1(x) {
  return new this(x).acosh();
}

/*
 * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function add$1(x, y) {
  return new this(x).plus(y);
}

/*
 * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function asin$1(x) {
  return new this(x).asin();
}

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function asinh$1(x) {
  return new this(x).asinh();
}

/*
 * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function atan$1(x) {
  return new this(x).atan();
}

/*
 * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function atanh$1(x) {
  return new this(x).atanh();
}

/*
 * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
 * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi, pi]
 *
 * y {number|string|Decimal} The y-coordinate.
 * x {number|string|Decimal} The x-coordinate.
 *
 * atan2(±0, -0)               = ±pi
 * atan2(±0, +0)               = ±0
 * atan2(±0, -x)               = ±pi for x > 0
 * atan2(±0, x)                = ±0 for x > 0
 * atan2(-y, ±0)               = -pi/2 for y > 0
 * atan2(y, ±0)                = pi/2 for y > 0
 * atan2(±y, -Infinity)        = ±pi for finite y > 0
 * atan2(±y, +Infinity)        = ±0 for finite y > 0
 * atan2(±Infinity, x)         = ±pi/2 for finite x
 * atan2(±Infinity, -Infinity) = ±3*pi/4
 * atan2(±Infinity, +Infinity) = ±pi/4
 * atan2(NaN, x) = NaN
 * atan2(y, NaN) = NaN
 *
 */
function atan2$1(y, x) {
  y = new this(y);
  x = new this(x);
  var r,
    pr = this.precision,
    rm = this.rounding,
    wpr = pr + 4;

  // Either NaN
  if (!y.s || !x.s) {
    r = new this(NaN);

    // Both ±Infinity
  } else if (!y.d && !x.d) {
    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
    r.s = y.s;

    // x is ±Infinity or y is ±0
  } else if (!x.d || y.isZero()) {
    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
    r.s = y.s;

    // y is ±Infinity or x is ±0
  } else if (!y.d || x.isZero()) {
    r = getPi(this, wpr, 1).times(0.5);
    r.s = y.s;

    // Both non-zero and finite
  } else if (x.s < 0) {
    this.precision = wpr;
    this.rounding = 1;
    r = this.atan(divide$1(y, x, wpr, 1));
    x = getPi(this, wpr, 1);
    this.precision = pr;
    this.rounding = rm;
    r = y.s < 0 ? r.minus(x) : r.plus(x);
  } else {
    r = this.atan(divide$1(y, x, wpr, 1));
  }
  return r;
}

/*
 * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function cbrt$1(x) {
  return new this(x).cbrt();
}

/*
 * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
 *
 * x {number|string|Decimal}
 *
 */
function ceil$1(x) {
  return finalise(x = new this(x), x.e + 1, 2);
}

/*
 * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
 *
 * x {number|string|Decimal}
 * min {number|string|Decimal}
 * max {number|string|Decimal}
 *
 */
function clamp(x, min, max) {
  return new this(x).clamp(min, max);
}

/*
 * Configure global settings for a Decimal constructor.
 *
 * `obj` is an object with one or more of the following properties,
 *
 *   precision  {number}
 *   rounding   {number}
 *   toExpNeg   {number}
 *   toExpPos   {number}
 *   maxE       {number}
 *   minE       {number}
 *   modulo     {number}
 *   crypto     {boolean|number}
 *   defaults   {true}
 *
 * E.g. Decimal.config({ precision: 20, rounding: 4 })
 *
 */
function config(obj) {
  if (!obj || _typeof$e(obj) !== 'object') throw Error(decimalError + 'Object expected');
  var i,
    p,
    v,
    useDefaults = obj.defaults === true,
    ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];
  for (i = 0; i < ps.length; i += 3) {
    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
    }
  }
  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
  if ((v = obj[p]) !== void 0) {
    if (v === true || v === false || v === 0 || v === 1) {
      if (v) {
        if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
          this[p] = true;
        } else {
          throw Error(cryptoUnavailable);
        }
      } else {
        this[p] = false;
      }
    } else {
      throw Error(invalidArgument + p + ': ' + v);
    }
  }
  return this;
}

/*
 * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function cos$1(x) {
  return new this(x).cos();
}

/*
 * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function cosh$1(x) {
  return new this(x).cosh();
}

/*
 * Create and return a Decimal constructor with the same configuration properties as this Decimal
 * constructor.
 *
 */
function clone$1(obj) {
  var i, p, ps;

  /*
   * The Decimal constructor and exported function.
   * Return a new Decimal instance.
   *
   * v {number|string|Decimal} A numeric value.
   *
   */
  function Decimal(v) {
    var e,
      i,
      t,
      x = this;

    // Decimal called without new.
    if (!(x instanceof Decimal)) return new Decimal(v);

    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
    // which points to Object.
    x.constructor = Decimal;

    // Duplicate.
    if (isDecimalInstance(v)) {
      x.s = v.s;
      if (external) {
        if (!v.d || v.e > Decimal.maxE) {
          // Infinity.
          x.e = NaN;
          x.d = null;
        } else if (v.e < Decimal.minE) {
          // Zero.
          x.e = 0;
          x.d = [0];
        } else {
          x.e = v.e;
          x.d = v.d.slice();
        }
      } else {
        x.e = v.e;
        x.d = v.d ? v.d.slice() : v.d;
      }
      return;
    }
    t = _typeof$e(v);
    if (t === 'number') {
      if (v === 0) {
        x.s = 1 / v < 0 ? -1 : 1;
        x.e = 0;
        x.d = [0];
        return;
      }
      if (v < 0) {
        v = -v;
        x.s = -1;
      } else {
        x.s = 1;
      }

      // Fast path for small integers.
      if (v === ~~v && v < 1e7) {
        for (e = 0, i = v; i >= 10; i /= 10) e++;
        if (external) {
          if (e > Decimal.maxE) {
            x.e = NaN;
            x.d = null;
          } else if (e < Decimal.minE) {
            x.e = 0;
            x.d = [0];
          } else {
            x.e = e;
            x.d = [v];
          }
        } else {
          x.e = e;
          x.d = [v];
        }
        return;

        // Infinity, NaN.
      } else if (v * 0 !== 0) {
        if (!v) x.s = NaN;
        x.e = NaN;
        x.d = null;
        return;
      }
      return parseDecimal(x, v.toString());
    } else if (t !== 'string') {
      throw Error(invalidArgument + v);
    }

    // Minus sign?
    if ((i = v.charCodeAt(0)) === 45) {
      v = v.slice(1);
      x.s = -1;
    } else {
      // Plus sign?
      if (i === 43) v = v.slice(1);
      x.s = 1;
    }
    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
  }
  Decimal.prototype = P$2;
  Decimal.ROUND_UP = 0;
  Decimal.ROUND_DOWN = 1;
  Decimal.ROUND_CEIL = 2;
  Decimal.ROUND_FLOOR = 3;
  Decimal.ROUND_HALF_UP = 4;
  Decimal.ROUND_HALF_DOWN = 5;
  Decimal.ROUND_HALF_EVEN = 6;
  Decimal.ROUND_HALF_CEIL = 7;
  Decimal.ROUND_HALF_FLOOR = 8;
  Decimal.EUCLID = 9;
  Decimal.config = Decimal.set = config;
  Decimal.clone = clone$1;
  Decimal.isDecimal = isDecimalInstance;
  Decimal.abs = abs$1;
  Decimal.acos = acos$1;
  Decimal.acosh = acosh$1; // ES6
  Decimal.add = add$1;
  Decimal.asin = asin$1;
  Decimal.asinh = asinh$1; // ES6
  Decimal.atan = atan$1;
  Decimal.atanh = atanh$1; // ES6
  Decimal.atan2 = atan2$1;
  Decimal.cbrt = cbrt$1; // ES6
  Decimal.ceil = ceil$1;
  Decimal.clamp = clamp;
  Decimal.cos = cos$1;
  Decimal.cosh = cosh$1; // ES6
  Decimal.div = div;
  Decimal.exp = exp$1;
  Decimal.floor = floor$1;
  Decimal.hypot = hypot$1; // ES6
  Decimal.ln = ln;
  Decimal.log = log$1;
  Decimal.log10 = log10$1; // ES6
  Decimal.log2 = log2$1; // ES6
  Decimal.max = max$1;
  Decimal.min = min$1;
  Decimal.mod = mod$1;
  Decimal.mul = mul;
  Decimal.pow = pow$1;
  Decimal.random = random$1;
  Decimal.round = round$1;
  Decimal.sign = sign$1; // ES6
  Decimal.sin = sin$1;
  Decimal.sinh = sinh$1; // ES6
  Decimal.sqrt = sqrt$1;
  Decimal.sub = sub;
  Decimal.sum = sum$1;
  Decimal.tan = tan$1;
  Decimal.tanh = tanh$1; // ES6
  Decimal.trunc = trunc; // ES6

  if (obj === void 0) obj = {};
  if (obj) {
    if (obj.defaults !== true) {
      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
    }
  }
  Decimal.config(obj);
  return Decimal;
}

/*
 * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function div(x, y) {
  return new this(x).div(y);
}

/*
 * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} The power to which to raise the base of the natural log.
 *
 */
function exp$1(x) {
  return new this(x).exp();
}

/*
 * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
 *
 * x {number|string|Decimal}
 *
 */
function floor$1(x) {
  return finalise(x = new this(x), x.e + 1, 3);
}

/*
 * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
 * rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
 *
 * arguments {number|string|Decimal}
 *
 */
function hypot$1() {
  var i,
    n,
    t = new this(0);
  external = false;
  for (i = 0; i < arguments.length;) {
    n = new this(arguments[i++]);
    if (!n.d) {
      if (n.s) {
        external = true;
        return new this(1 / 0);
      }
      t = n;
    } else if (t.d) {
      t = t.plus(n.times(n));
    }
  }
  external = true;
  return t.sqrt();
}

/*
 * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
 * otherwise return false.
 *
 */
function isDecimalInstance(obj) {
  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
}

/*
 * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function ln(x) {
  return new this(x).ln();
}

/*
 * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
 * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * log[y](x)
 *
 * x {number|string|Decimal} The argument of the logarithm.
 * y {number|string|Decimal} The base of the logarithm.
 *
 */
function log$1(x, y) {
  return new this(x).log(y);
}

/*
 * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function log2$1(x) {
  return new this(x).log(2);
}

/*
 * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function log10$1(x) {
  return new this(x).log(10);
}

/*
 * Return a new Decimal whose value is the maximum of the arguments.
 *
 * arguments {number|string|Decimal}
 *
 */
function max$1() {
  return maxOrMin(this, arguments, 'lt');
}

/*
 * Return a new Decimal whose value is the minimum of the arguments.
 *
 * arguments {number|string|Decimal}
 *
 */
function min$1() {
  return maxOrMin(this, arguments, 'gt');
}

/*
 * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function mod$1(x, y) {
  return new this(x).mod(y);
}

/*
 * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function mul(x, y) {
  return new this(x).mul(y);
}

/*
 * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} The base.
 * y {number|string|Decimal} The exponent.
 *
 */
function pow$1(x, y) {
  return new this(x).pow(y);
}

/*
 * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
 * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
 * are produced).
 *
 * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
 *
 */
function random$1(sd) {
  var d,
    e,
    k,
    n,
    i = 0,
    r = new this(1),
    rd = [];
  if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);
  k = Math.ceil(sd / LOG_BASE);
  if (!this.crypto) {
    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
  } else if (crypto.getRandomValues) {
    d = crypto.getRandomValues(new Uint32Array(k));
    for (; i < k;) {
      n = d[i];

      // 0 <= n < 4294967296
      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
      if (n >= 4.29e9) {
        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
      } else {
        // 0 <= n <= 4289999999
        // 0 <= (n % 1e7) <= 9999999
        rd[i++] = n % 1e7;
      }
    }

    // Node.js supporting crypto.randomBytes.
  } else if (crypto.randomBytes) {
    // buffer
    d = crypto.randomBytes(k *= 4);
    for (; i < k;) {
      // 0 <= n < 2147483648
      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
      if (n >= 2.14e9) {
        crypto.randomBytes(4).copy(d, i);
      } else {
        // 0 <= n <= 2139999999
        // 0 <= (n % 1e7) <= 9999999
        rd.push(n % 1e7);
        i += 4;
      }
    }
    i = k / 4;
  } else {
    throw Error(cryptoUnavailable);
  }
  k = rd[--i];
  sd %= LOG_BASE;

  // Convert trailing digits to zeros according to sd.
  if (k && sd) {
    n = mathpow(10, LOG_BASE - sd);
    rd[i] = (k / n | 0) * n;
  }

  // Remove trailing words which are zero.
  for (; rd[i] === 0; i--) rd.pop();

  // Zero?
  if (i < 0) {
    e = 0;
    rd = [0];
  } else {
    e = -1;

    // Remove leading words which are zero and adjust exponent accordingly.
    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

    // Count the digits of the first word of rd to determine leading zeros.
    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

    // Adjust the exponent for leading zeros of the first word of rd.
    if (k < LOG_BASE) e -= LOG_BASE - k;
  }
  r.e = e;
  r.d = rd;
  return r;
}

/*
 * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
 *
 * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
 *
 * x {number|string|Decimal}
 *
 */
function round$1(x) {
  return finalise(x = new this(x), x.e + 1, this.rounding);
}

/*
 * Return
 *   1    if x > 0,
 *  -1    if x < 0,
 *   0    if x is 0,
 *  -0    if x is -0,
 *   NaN  otherwise
 *
 * x {number|string|Decimal}
 *
 */
function sign$1(x) {
  x = new this(x);
  return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
}

/*
 * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function sin$1(x) {
  return new this(x).sin();
}

/*
 * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function sinh$1(x) {
  return new this(x).sinh();
}

/*
 * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function sqrt$1(x) {
  return new this(x).sqrt();
}

/*
 * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function sub(x, y) {
  return new this(x).sub(y);
}

/*
 * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * Only the result is rounded, not the intermediate calculations.
 *
 * arguments {number|string|Decimal}
 *
 */
function sum$1() {
  var i = 0,
    args = arguments,
    x = new this(args[i]);
  external = false;
  for (; x.s && ++i < args.length;) x = x.plus(args[i]);
  external = true;
  return finalise(x, this.precision, this.rounding);
}

/*
 * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function tan$1(x) {
  return new this(x).tan();
}

/*
 * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function tanh$1(x) {
  return new this(x).tanh();
}

/*
 * Return a new Decimal whose value is `x` truncated to an integer.
 *
 * x {number|string|Decimal}
 *
 */
function trunc(x) {
  return finalise(x = new this(x), x.e + 1, 1);
}
P$2[Symbol["for"]('nodejs.util.inspect.custom')] = P$2.toString;
P$2[Symbol.toStringTag] = 'Decimal';

// Create and configure initial Decimal constructor.
var Decimal = P$2.constructor = clone$1(DEFAULTS);

// Create the internal constants from their string values.
LN10$1 = new Decimal(LN10$1);
PI = new Decimal(PI);

var name$4l = 'BigNumber';
var dependencies$4m = ['?on', 'config'];
var createBigNumberClass = /* #__PURE__ */factory(name$4l, dependencies$4m, function (_ref) {
  var on = _ref.on,
    config = _ref.config;
  var EUCLID = 9; // Use euclidian division for mod calculation

  var BigNumber = Decimal.clone({
    precision: config.precision,
    modulo: EUCLID
  });
  /**
   * Attach type information
   */

  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */

  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };
  if (on) {
    // listen for changed in the configuration, automatically apply changed precision
    on('config', function (curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({
          precision: curr.precision
        });
      }
    });
  }
  return BigNumber;
}, {
  isClass: true
});

var complex$1 = {exports: {}};

(function (module, exports) {
  /**
   *
   * This class allows the manipulation of complex numbers.
   * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
   *
   * Object form
   * { re: <real>, im: <imaginary> }
   * { arg: <angle>, abs: <radius> }
   * { phi: <angle>, r: <radius> }
   *
   * Array / Vector form
   * [ real, imaginary ]
   *
   * Double form
   * 99.3 - Single double value
   *
   * String form
   * '23.1337' - Simple real number
   * '15+3i' - a simple complex number
   * '3-i' - a simple complex number
   *
   * Example:
   *
   * var c = new Complex('99.3+8i');
   * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
   *
   */

  (function (root) {

    var _cosh = Math.cosh || function (x) {
      return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
    };
    var _sinh = Math.sinh || function (x) {
      return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
    };

    /**
     * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).
     *
     * @param {number} x
     * @returns {number} cos(x) - 1
     */
    var cosm1 = function cosm1(x) {
      var b = Math.PI / 4;
      if (-b > x || x > b) {
        return Math.cos(x) - 1.0;
      }

      /* Calculate horner form of polynomial of taylor series in Q
      var fac = 1, alt = 1, pol = {};
      for (var i = 0; i <= 16; i++) {
        fac*= i || 1;
        if (i % 2 == 0) {
          pol[i] = new Fraction(1, alt * fac);
          alt = -alt;
        }
      }
      console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
      */

      var xx = x * x;
      return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
    };
    var hypot = function hypot(x, y) {
      var a = Math.abs(x);
      var b = Math.abs(y);
      if (a < 3000 && b < 3000) {
        return Math.sqrt(a * a + b * b);
      }
      if (a < b) {
        a = b;
        b = x / y;
      } else {
        b = y / x;
      }
      return a * Math.sqrt(1 + b * b);
    };
    var parser_exit = function parser_exit() {
      throw SyntaxError('Invalid Param');
    };

    /**
     * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
     *
     * @param {number} a
     * @param {number} b
     * @returns {number}
     */
    function logHypot(a, b) {
      var _a = Math.abs(a);
      var _b = Math.abs(b);
      if (a === 0) {
        return Math.log(_b);
      }
      if (b === 0) {
        return Math.log(_a);
      }
      if (_a < 3000 && _b < 3000) {
        return Math.log(a * a + b * b) * 0.5;
      }

      /* I got 4 ideas to compute this property without overflow:
       *
       * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
       *
       * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
        Math.log(a * a + b * b) / 2
        *
       *
       * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
        var fn = function(a, b) {
       a = Math.abs(a);
       b = Math.abs(b);
       var t = Math.min(a, b);
       a = Math.max(a, b);
       t = t / a;
        return Math.log(a) + Math.log(1 + t * t) / 2;
       };
        * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
        Math.log(a / Math.cos(Math.atan2(b, a)))
        * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
        Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
        */

      a = a / 2;
      b = b / 2;
      return 0.5 * Math.log(a * a + b * b) + Math.LN2;
    }
    var parse = function parse(a, b) {
      var z = {
        're': 0,
        'im': 0
      };
      if (a === undefined || a === null) {
        z['re'] = z['im'] = 0;
      } else if (b !== undefined) {
        z['re'] = a;
        z['im'] = b;
      } else switch (_typeof$e(a)) {
        case 'object':
          if ('im' in a && 're' in a) {
            z['re'] = a['re'];
            z['im'] = a['im'];
          } else if ('abs' in a && 'arg' in a) {
            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['abs'] * Math.cos(a['arg']);
            z['im'] = a['abs'] * Math.sin(a['arg']);
          } else if ('r' in a && 'phi' in a) {
            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['r'] * Math.cos(a['phi']);
            z['im'] = a['r'] * Math.sin(a['phi']);
          } else if (a.length === 2) {
            // Quick array check
            z['re'] = a[0];
            z['im'] = a[1];
          } else {
            parser_exit();
          }
          break;
        case 'string':
          z['im'] = /* void */
          z['re'] = 0;
          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
          var plus = 1;
          var minus = 0;
          if (tokens === null) {
            parser_exit();
          }
          for (var i = 0; i < tokens.length; i++) {
            var c = tokens[i];
            if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
              plus++;
            } else if (c === '-') {
              minus++;
            } else if (c === 'i' || c === 'I') {
              if (plus + minus === 0) {
                parser_exit();
              }
              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                i++;
              } else {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
              }
              plus = minus = 0;
            } else {
              if (plus + minus === 0 || isNaN(c)) {
                parser_exit();
              }
              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                i++;
              } else {
                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
              }
              plus = minus = 0;
            }
          }

          // Still something on the stack
          if (plus + minus > 0) {
            parser_exit();
          }
          break;
        case 'number':
          z['im'] = 0;
          z['re'] = a;
          break;
        default:
          parser_exit();
      }
      if (isNaN(z['re']) || isNaN(z['im'])) ;
      return z;
    };

    /**
     * @constructor
     * @returns {Complex}
     */
    function Complex(a, b) {
      if (!(this instanceof Complex)) {
        return new Complex(a, b);
      }
      var z = parse(a, b);
      this['re'] = z['re'];
      this['im'] = z['im'];
    }
    Complex.prototype = {
      're': 0,
      'im': 0,
      /**
       * Calculates the sign of a complex number, which is a normalized complex
       *
       * @returns {Complex}
       */
      'sign': function sign() {
        var abs = this['abs']();
        return new Complex(this['re'] / abs, this['im'] / abs);
      },
      /**
       * Adds two complex numbers
       *
       * @returns {Complex}
       */
      'add': function add(a, b) {
        var z = new Complex(a, b);

        // Infinity + Infinity = NaN
        if (this['isInfinite']() && z['isInfinite']()) {
          return Complex['NAN'];
        }

        // Infinity + z = Infinity { where z != Infinity }
        if (this['isInfinite']() || z['isInfinite']()) {
          return Complex['INFINITY'];
        }
        return new Complex(this['re'] + z['re'], this['im'] + z['im']);
      },
      /**
       * Subtracts two complex numbers
       *
       * @returns {Complex}
       */
      'sub': function sub(a, b) {
        var z = new Complex(a, b);

        // Infinity - Infinity = NaN
        if (this['isInfinite']() && z['isInfinite']()) {
          return Complex['NAN'];
        }

        // Infinity - z = Infinity { where z != Infinity }
        if (this['isInfinite']() || z['isInfinite']()) {
          return Complex['INFINITY'];
        }
        return new Complex(this['re'] - z['re'], this['im'] - z['im']);
      },
      /**
       * Multiplies two complex numbers
       *
       * @returns {Complex}
       */
      'mul': function mul(a, b) {
        var z = new Complex(a, b);

        // Infinity * 0 = NaN
        if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {
          return Complex['NAN'];
        }

        // Infinity * z = Infinity { where z != 0 }
        if (this['isInfinite']() || z['isInfinite']()) {
          return Complex['INFINITY'];
        }

        // Short circuit for real values
        if (z['im'] === 0 && this['im'] === 0) {
          return new Complex(this['re'] * z['re'], 0);
        }
        return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
      },
      /**
       * Divides two complex numbers
       *
       * @returns {Complex}
       */
      'div': function div(a, b) {
        var z = new Complex(a, b);

        // 0 / 0 = NaN and Infinity / Infinity = NaN
        if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {
          return Complex['NAN'];
        }

        // Infinity / 0 = Infinity
        if (this['isInfinite']() || z['isZero']()) {
          return Complex['INFINITY'];
        }

        // 0 / Infinity = 0
        if (this['isZero']() || z['isInfinite']()) {
          return Complex['ZERO'];
        }
        a = this['re'];
        b = this['im'];
        var c = z['re'];
        var d = z['im'];
        var t, x;
        if (0 === d) {
          // Divisor is real
          return new Complex(a / c, b / c);
        }
        if (Math.abs(c) < Math.abs(d)) {
          x = c / d;
          t = c * x + d;
          return new Complex((a * x + b) / t, (b * x - a) / t);
        } else {
          x = d / c;
          t = d * x + c;
          return new Complex((a + b * x) / t, (b - a * x) / t);
        }
      },
      /**
       * Calculate the power of two complex numbers
       *
       * @returns {Complex}
       */
      'pow': function pow(a, b) {
        var z = new Complex(a, b);
        a = this['re'];
        b = this['im'];
        if (z['isZero']()) {
          return Complex['ONE'];
        }

        // If the exponent is real
        if (z['im'] === 0) {
          if (b === 0 && a > 0) {
            return new Complex(Math.pow(a, z['re']), 0);
          } else if (a === 0) {
            // If base is fully imaginary

            switch ((z['re'] % 4 + 4) % 4) {
              case 0:
                return new Complex(Math.pow(b, z['re']), 0);
              case 1:
                return new Complex(0, Math.pow(b, z['re']));
              case 2:
                return new Complex(-Math.pow(b, z['re']), 0);
              case 3:
                return new Complex(0, -Math.pow(b, z['re']));
            }
          }
        }

        /* I couldn't find a good formula, so here is a derivation and optimization
         *
         * z_1^z_2 = (a + bi)^(c + di)
         *         = exp((c + di) * log(a + bi)
         *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
         * =>...
         * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
         * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
         *
         * =>...
         * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
         * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
         *
         * =>
         * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
         * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
         *
         */

        if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
          return Complex['ZERO'];
        }
        var arg = Math.atan2(b, a);
        var loh = logHypot(a, b);
        a = Math.exp(z['re'] * loh - z['im'] * arg);
        b = z['im'] * loh + z['re'] * arg;
        return new Complex(a * Math.cos(b), a * Math.sin(b));
      },
      /**
       * Calculate the complex square root
       *
       * @returns {Complex}
       */
      'sqrt': function sqrt() {
        var a = this['re'];
        var b = this['im'];
        var r = this['abs']();
        var re, im;
        if (a >= 0) {
          if (b === 0) {
            return new Complex(Math.sqrt(a), 0);
          }
          re = 0.5 * Math.sqrt(2.0 * (r + a));
        } else {
          re = Math.abs(b) / Math.sqrt(2 * (r - a));
        }
        if (a <= 0) {
          im = 0.5 * Math.sqrt(2.0 * (r - a));
        } else {
          im = Math.abs(b) / Math.sqrt(2 * (r + a));
        }
        return new Complex(re, b < 0 ? -im : im);
      },
      /**
       * Calculate the complex exponent
       *
       * @returns {Complex}
       */
      'exp': function exp() {
        var tmp = Math.exp(this['re']);
        if (this['im'] === 0) ;
        return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
      },
      /**
       * Calculate the complex exponent and subtracts one.
       *
       * This may be more accurate than `Complex(x).exp().sub(1)` if
       * `x` is small.
       *
       * @returns {Complex}
       */
      'expm1': function expm1() {
        /**
         * exp(a + i*b) - 1
         = exp(a) * (cos(b) + j*sin(b)) - 1
         = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
         */

        var a = this['re'];
        var b = this['im'];
        return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
      },
      /**
       * Calculate the natural log
       *
       * @returns {Complex}
       */
      'log': function log() {
        var a = this['re'];
        var b = this['im'];
        return new Complex(logHypot(a, b), Math.atan2(b, a));
      },
      /**
       * Calculate the magnitude of the complex number
       *
       * @returns {number}
       */
      'abs': function abs() {
        return hypot(this['re'], this['im']);
      },
      /**
       * Calculate the angle of the complex number
       *
       * @returns {number}
       */
      'arg': function arg() {
        return Math.atan2(this['im'], this['re']);
      },
      /**
       * Calculate the sine of the complex number
       *
       * @returns {Complex}
       */
      'sin': function sin() {
        // sin(z) = ( e^iz - e^-iz ) / 2i 
        //        = sin(a)cosh(b) + i cos(a)sinh(b)

        var a = this['re'];
        var b = this['im'];
        return new Complex(Math.sin(a) * _cosh(b), Math.cos(a) * _sinh(b));
      },
      /**
       * Calculate the cosine
       *
       * @returns {Complex}
       */
      'cos': function cos() {
        // cos(z) = ( e^iz + e^-iz ) / 2 
        //        = cos(a)cosh(b) - i sin(a)sinh(b)

        var a = this['re'];
        var b = this['im'];
        return new Complex(Math.cos(a) * _cosh(b), -Math.sin(a) * _sinh(b));
      },
      /**
       * Calculate the tangent
       *
       * @returns {Complex}
       */
      'tan': function tan() {
        // tan(z) = sin(z) / cos(z) 
        //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
        //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
        //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

        var a = 2 * this['re'];
        var b = 2 * this['im'];
        var d = Math.cos(a) + _cosh(b);
        return new Complex(Math.sin(a) / d, _sinh(b) / d);
      },
      /**
       * Calculate the cotangent
       *
       * @returns {Complex}
       */
      'cot': function cot() {
        // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

        var a = 2 * this['re'];
        var b = 2 * this['im'];
        var d = Math.cos(a) - _cosh(b);
        return new Complex(-Math.sin(a) / d, _sinh(b) / d);
      },
      /**
       * Calculate the secant
       *
       * @returns {Complex}
       */
      'sec': function sec() {
        // sec(c) = 2 / (e^(ci) + e^(-ci))

        var a = this['re'];
        var b = this['im'];
        var d = 0.5 * _cosh(2 * b) + 0.5 * Math.cos(2 * a);
        return new Complex(Math.cos(a) * _cosh(b) / d, Math.sin(a) * _sinh(b) / d);
      },
      /**
       * Calculate the cosecans
       *
       * @returns {Complex}
       */
      'csc': function csc() {
        // csc(c) = 2i / (e^(ci) - e^(-ci))

        var a = this['re'];
        var b = this['im'];
        var d = 0.5 * _cosh(2 * b) - 0.5 * Math.cos(2 * a);
        return new Complex(Math.sin(a) * _cosh(b) / d, -Math.cos(a) * _sinh(b) / d);
      },
      /**
       * Calculate the complex arcus sinus
       *
       * @returns {Complex}
       */
      'asin': function asin() {
        // asin(c) = -i * log(ci + sqrt(1 - c^2))

        var a = this['re'];
        var b = this['im'];
        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
        return new Complex(t2['im'], -t2['re']);
      },
      /**
       * Calculate the complex arcus cosinus
       *
       * @returns {Complex}
       */
      'acos': function acos() {
        // acos(c) = i * log(c - i * sqrt(1 - c^2))

        var a = this['re'];
        var b = this['im'];
        var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
        var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
        return new Complex(Math.PI / 2 - t2['im'], t2['re']);
      },
      /**
       * Calculate the complex arcus tangent
       *
       * @returns {Complex}
       */
      'atan': function atan() {
        // atan(c) = i / 2 log((i + x) / (i - x))

        var a = this['re'];
        var b = this['im'];
        if (a === 0) {
          if (b === 1) {
            return new Complex(0, Infinity);
          }
          if (b === -1) {
            return new Complex(0, -Infinity);
          }
        }
        var d = a * a + (1.0 - b) * (1.0 - b);
        var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
        return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
      },
      /**
       * Calculate the complex arcus cotangent
       *
       * @returns {Complex}
       */
      'acot': function acot() {
        // acot(c) = i / 2 log((c - i) / (c + i))

        var a = this['re'];
        var b = this['im'];
        if (b === 0) {
          return new Complex(Math.atan2(1, a), 0);
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
      },
      /**
       * Calculate the complex arcus secant
       *
       * @returns {Complex}
       */
      'asec': function asec() {
        // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

        var a = this['re'];
        var b = this['im'];
        if (a === 0 && b === 0) {
          return new Complex(0, Infinity);
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
      },
      /**
       * Calculate the complex arcus cosecans
       *
       * @returns {Complex}
       */
      'acsc': function acsc() {
        // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

        var a = this['re'];
        var b = this['im'];
        if (a === 0 && b === 0) {
          return new Complex(Math.PI / 2, Infinity);
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
      },
      /**
       * Calculate the complex sinh
       *
       * @returns {Complex}
       */
      'sinh': function sinh() {
        // sinh(c) = (e^c - e^-c) / 2

        var a = this['re'];
        var b = this['im'];
        return new Complex(_sinh(a) * Math.cos(b), _cosh(a) * Math.sin(b));
      },
      /**
       * Calculate the complex cosh
       *
       * @returns {Complex}
       */
      'cosh': function cosh() {
        // cosh(c) = (e^c + e^-c) / 2

        var a = this['re'];
        var b = this['im'];
        return new Complex(_cosh(a) * Math.cos(b), _sinh(a) * Math.sin(b));
      },
      /**
       * Calculate the complex tanh
       *
       * @returns {Complex}
       */
      'tanh': function tanh() {
        // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

        var a = 2 * this['re'];
        var b = 2 * this['im'];
        var d = _cosh(a) + Math.cos(b);
        return new Complex(_sinh(a) / d, Math.sin(b) / d);
      },
      /**
       * Calculate the complex coth
       *
       * @returns {Complex}
       */
      'coth': function coth() {
        // coth(c) = (e^c + e^-c) / (e^c - e^-c)

        var a = 2 * this['re'];
        var b = 2 * this['im'];
        var d = _cosh(a) - Math.cos(b);
        return new Complex(_sinh(a) / d, -Math.sin(b) / d);
      },
      /**
       * Calculate the complex coth
       *
       * @returns {Complex}
       */
      'csch': function csch() {
        // csch(c) = 2 / (e^c - e^-c)

        var a = this['re'];
        var b = this['im'];
        var d = Math.cos(2 * b) - _cosh(2 * a);
        return new Complex(-2 * _sinh(a) * Math.cos(b) / d, 2 * _cosh(a) * Math.sin(b) / d);
      },
      /**
       * Calculate the complex sech
       *
       * @returns {Complex}
       */
      'sech': function sech() {
        // sech(c) = 2 / (e^c + e^-c)

        var a = this['re'];
        var b = this['im'];
        var d = Math.cos(2 * b) + _cosh(2 * a);
        return new Complex(2 * _cosh(a) * Math.cos(b) / d, -2 * _sinh(a) * Math.sin(b) / d);
      },
      /**
       * Calculate the complex asinh
       *
       * @returns {Complex}
       */
      'asinh': function asinh() {
        // asinh(c) = log(c + sqrt(c^2 + 1))

        var tmp = this['im'];
        this['im'] = -this['re'];
        this['re'] = tmp;
        var res = this['asin']();
        this['re'] = -this['im'];
        this['im'] = tmp;
        tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
        return res;
      },
      /**
       * Calculate the complex acosh
       *
       * @returns {Complex}
       */
      'acosh': function acosh() {
        // acosh(c) = log(c + sqrt(c^2 - 1))

        var res = this['acos']();
        if (res['im'] <= 0) {
          var tmp = res['re'];
          res['re'] = -res['im'];
          res['im'] = tmp;
        } else {
          var tmp = res['im'];
          res['im'] = -res['re'];
          res['re'] = tmp;
        }
        return res;
      },
      /**
       * Calculate the complex atanh
       *
       * @returns {Complex}
       */
      'atanh': function atanh() {
        // atanh(c) = log((1+c) / (1-c)) / 2

        var a = this['re'];
        var b = this['im'];
        var noIM = a > 1 && b === 0;
        var oneMinus = 1 - a;
        var onePlus = 1 + a;
        var d = oneMinus * oneMinus + b * b;
        var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
        var temp = x['re'];
        x['re'] = logHypot(x['re'], x['im']) / 2;
        x['im'] = Math.atan2(x['im'], temp) / 2;
        if (noIM) {
          x['im'] = -x['im'];
        }
        return x;
      },
      /**
       * Calculate the complex acoth
       *
       * @returns {Complex}
       */
      'acoth': function acoth() {
        // acoth(c) = log((c+1) / (c-1)) / 2

        var a = this['re'];
        var b = this['im'];
        if (a === 0 && b === 0) {
          return new Complex(0, Math.PI / 2);
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
      },
      /**
       * Calculate the complex acsch
       *
       * @returns {Complex}
       */
      'acsch': function acsch() {
        // acsch(c) = log((1+sqrt(1+c^2))/c)

        var a = this['re'];
        var b = this['im'];
        if (b === 0) {
          return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
      },
      /**
       * Calculate the complex asech
       *
       * @returns {Complex}
       */
      'asech': function asech() {
        // asech(c) = log((1+sqrt(1-c^2))/c)

        var a = this['re'];
        var b = this['im'];
        if (this['isZero']()) {
          return Complex['INFINITY'];
        }
        var d = a * a + b * b;
        return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
      },
      /**
       * Calculate the complex inverse 1/z
       *
       * @returns {Complex}
       */
      'inverse': function inverse() {
        // 1 / 0 = Infinity and 1 / Infinity = 0
        if (this['isZero']()) {
          return Complex['INFINITY'];
        }
        if (this['isInfinite']()) {
          return Complex['ZERO'];
        }
        var a = this['re'];
        var b = this['im'];
        var d = a * a + b * b;
        return new Complex(a / d, -b / d);
      },
      /**
       * Returns the complex conjugate
       *
       * @returns {Complex}
       */
      'conjugate': function conjugate() {
        return new Complex(this['re'], -this['im']);
      },
      /**
       * Gets the negated complex number
       *
       * @returns {Complex}
       */
      'neg': function neg() {
        return new Complex(-this['re'], -this['im']);
      },
      /**
       * Ceils the actual complex number
       *
       * @returns {Complex}
       */
      'ceil': function ceil(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
      },
      /**
       * Floors the actual complex number
       *
       * @returns {Complex}
       */
      'floor': function floor(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
      },
      /**
       * Ceils the actual complex number
       *
       * @returns {Complex}
       */
      'round': function round(places) {
        places = Math.pow(10, places || 0);
        return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
      },
      /**
       * Compares two complex numbers
       *
       * **Note:** new Complex(Infinity).equals(Infinity) === false
       *
       * @returns {boolean}
       */
      'equals': function equals(a, b) {
        var z = new Complex(a, b);
        return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
      },
      /**
       * Clones the actual object
       *
       * @returns {Complex}
       */
      'clone': function clone() {
        return new Complex(this['re'], this['im']);
      },
      /**
       * Gets a string of the actual complex number
       *
       * @returns {string}
       */
      'toString': function toString() {
        var a = this['re'];
        var b = this['im'];
        var ret = "";
        if (this['isNaN']()) {
          return 'NaN';
        }
        if (this['isInfinite']()) {
          return 'Infinity';
        }
        if (Math.abs(a) < Complex['EPSILON']) {
          a = 0;
        }
        if (Math.abs(b) < Complex['EPSILON']) {
          b = 0;
        }

        // If is real number
        if (b === 0) {
          return ret + a;
        }
        if (a !== 0) {
          ret += a;
          ret += " ";
          if (b < 0) {
            b = -b;
            ret += "-";
          } else {
            ret += "+";
          }
          ret += " ";
        } else if (b < 0) {
          b = -b;
          ret += "-";
        }
        if (1 !== b) {
          // b is the absolute imaginary part
          ret += b;
        }
        return ret + "i";
      },
      /**
       * Returns the actual number as a vector
       *
       * @returns {Array}
       */
      'toVector': function toVector() {
        return [this['re'], this['im']];
      },
      /**
       * Returns the actual real value of the current object
       *
       * @returns {number|null}
       */
      'valueOf': function valueOf() {
        if (this['im'] === 0) {
          return this['re'];
        }
        return null;
      },
      /**
       * Determines whether a complex number is not on the Riemann sphere.
       *
       * @returns {boolean}
       */
      'isNaN': function (_isNaN) {
        function isNaN() {
          return _isNaN.apply(this, arguments);
        }
        isNaN.toString = function () {
          return _isNaN.toString();
        };
        return isNaN;
      }(function () {
        return isNaN(this['re']) || isNaN(this['im']);
      }),
      /**
       * Determines whether or not a complex number is at the zero pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      'isZero': function isZero() {
        return this['im'] === 0 && this['re'] === 0;
      },
      /**
       * Determines whether a complex number is not at the infinity pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      'isFinite': function (_isFinite) {
        function isFinite() {
          return _isFinite.apply(this, arguments);
        }
        isFinite.toString = function () {
          return _isFinite.toString();
        };
        return isFinite;
      }(function () {
        return isFinite(this['re']) && isFinite(this['im']);
      }),
      /**
       * Determines whether or not a complex number is at the infinity pole of the
       * Riemann sphere.
       *
       * @returns {boolean}
       */
      'isInfinite': function isInfinite() {
        return !(this['isNaN']() || this['isFinite']());
      }
    };
    Complex['ZERO'] = new Complex(0, 0);
    Complex['ONE'] = new Complex(1, 0);
    Complex['I'] = new Complex(0, 1);
    Complex['PI'] = new Complex(Math.PI, 0);
    Complex['E'] = new Complex(Math.E, 0);
    Complex['INFINITY'] = new Complex(Infinity, Infinity);
    Complex['NAN'] = new Complex(NaN, NaN);
    Complex['EPSILON'] = 1e-15;
    {
      Object.defineProperty(Complex, "__esModule", {
        'value': true
      });
      Complex['default'] = Complex;
      Complex['Complex'] = Complex;
      module['exports'] = Complex;
    }
  })();
})(complex$1);
var complexExports = complex$1.exports;
var Complex$1 = /*@__PURE__*/getDefaultExportFromCjs(complexExports);

function _typeof$a(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$a = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$a = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$a(obj);
}
var name$4k = 'Complex';
var dependencies$4l = [];
var createComplexClass = /* #__PURE__ */factory(name$4k, dependencies$4l, function () {
  /**
   * Attach type information
   */
  Complex$1.prototype.type = 'Complex';
  Complex$1.prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  Complex$1.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */

  Complex$1.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */

  Complex$1.prototype.format = function (options) {
    var str = '';
    var im = this.im;
    var re = this.re;
    var strRe = format$3(this.re, options);
    var strIm = format$3(this.im, options); // round either re or im when smaller than the configured precision

    var precision = isNumber(options) ? options : options ? options.precision : null;
    if (precision !== null) {
      var epsilon = Math.pow(10, -precision);
      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }
      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }
    if (im === 0) {
      // real value
      str = strRe;
    } else if (re === 0) {
      // purely complex value
      if (im === 1) {
        str = 'i';
      } else if (im === -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im === -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im === 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }
    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */

  Complex$1.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        {
          var arg = arguments[0];
          if (_typeof$a(arg) === 'object') {
            return Complex$1(arg);
          } else {
            throw new TypeError('Input has to be an object with r and phi keys.');
          }
        }
      case 2:
        {
          var r = arguments[0];
          var phi = arguments[1];
          if (isNumber(r)) {
            if (isUnit(phi) && phi.hasBase('ANGLE')) {
              // convert unit to a number in radians
              phi = phi.toNumber('rad');
            }
            if (isNumber(phi)) {
              return new Complex$1({
                r: r,
                phi: phi
              });
            }
            throw new TypeError('Phi is not a number nor an angle unit.');
          } else {
            throw new TypeError('Radius r is not a number.');
          }
        }
      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };
  Complex$1.prototype.valueOf = Complex$1.prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  Complex$1.fromJSON = function (json) {
    return new Complex$1(json);
  };
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  Complex$1.compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }
    if (a.re < b.re) {
      return -1;
    }
    if (a.im > b.im) {
      return 1;
    }
    if (a.im < b.im) {
      return -1;
    }
    return 0;
  };
  return Complex$1;
}, {
  isClass: true
});

var fraction$1 = {exports: {}};

(function (module, exports) {
  /**
   *
   * This class offers the possibility to calculate fractions.
   * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
   *
   * Array/Object form
   * [ 0 => <numerator>, 1 => <denominator> ]
   * [ n => <numerator>, d => <denominator> ]
   *
   * Integer form
   * - Single integer value
   *
   * Double form
   * - Single double value
   *
   * String form
   * 123.456 - a simple double
   * 123/456 - a string fraction
   * 123.'456' - a double with repeating decimal places
   * 123.(456) - synonym
   * 123.45'6' - a double with repeating last place
   * 123.45(6) - synonym
   *
   * Example:
   *
   * var f = new Fraction("9.4'31'");
   * f.mul([-4, 3]).div(4.9);
   *
   */

  (function (root) {

    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
    var MAX_CYCLE_LEN = 2000;

    // Parsed data to avoid calling "new" all the time
    var P = {
      "s": 1,
      "n": 0,
      "d": 1
    };
    function assign(n, s) {
      if (isNaN(n = parseInt(n, 10))) {
        throw InvalidParameter();
      }
      return n * s;
    }

    // Creates a new Fraction internally without the need of the bulky constructor
    function newFraction(n, d) {
      if (d === 0) {
        throw DivisionByZero();
      }
      var f = Object.create(Fraction.prototype);
      f["s"] = n < 0 ? -1 : 1;
      n = n < 0 ? -n : n;
      var a = _gcd(n, d);
      f["n"] = n / a;
      f["d"] = d / a;
      return f;
    }
    function factorize(num) {
      var factors = {};
      var n = num;
      var i = 2;
      var s = 4;
      while (s <= n) {
        while (n % i === 0) {
          n /= i;
          factors[i] = (factors[i] || 0) + 1;
        }
        s += 1 + 2 * i++;
      }
      if (n !== num) {
        if (n > 1) factors[n] = (factors[n] || 0) + 1;
      } else {
        factors[num] = (factors[num] || 0) + 1;
      }
      return factors;
    }
    var parse = function parse(p1, p2) {
      var n = 0,
        d = 1,
        s = 1;
      var v = 0,
        w = 0,
        x = 0,
        y = 1,
        z = 1;
      var A = 0,
        B = 1;
      var C = 1,
        D = 1;
      var N = 10000000;
      var M;
      if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
        n = p1;
        d = p2;
        s = n * d;
        if (n % 1 !== 0 || d % 1 !== 0) {
          throw NonIntegerParameter();
        }
      } else switch (_typeof$e(p1)) {
        case "object":
          {
            if ("d" in p1 && "n" in p1) {
              n = p1["n"];
              d = p1["d"];
              if ("s" in p1) n *= p1["s"];
            } else if (0 in p1) {
              n = p1[0];
              if (1 in p1) d = p1[1];
            } else {
              throw InvalidParameter();
            }
            s = n * d;
            break;
          }
        case "number":
          {
            if (p1 < 0) {
              s = p1;
              p1 = -p1;
            }
            if (p1 % 1 === 0) {
              n = p1;
            } else if (p1 > 0) {
              // check for != 0, scale would become NaN (log(0)), which converges really slow

              if (p1 >= 1) {
                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                p1 /= z;
              }

              // Using Farey Sequences
              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

              while (B <= N && D <= N) {
                M = (A + C) / (B + D);
                if (p1 === M) {
                  if (B + D <= N) {
                    n = A + C;
                    d = B + D;
                  } else if (D > B) {
                    n = C;
                    d = D;
                  } else {
                    n = A;
                    d = B;
                  }
                  break;
                } else {
                  if (p1 > M) {
                    A += C;
                    B += D;
                  } else {
                    C += A;
                    D += B;
                  }
                  if (B > N) {
                    n = C;
                    d = D;
                  } else {
                    n = A;
                    d = B;
                  }
                }
              }
              n *= z;
            } else if (isNaN(p1) || isNaN(p2)) {
              d = n = NaN;
            }
            break;
          }
        case "string":
          {
            B = p1.match(/\d+|./g);
            if (B === null) throw InvalidParameter();
            if (B[A] === '-') {
              // Check for minus sign at the beginning
              s = -1;
              A++;
            } else if (B[A] === '+') {
              // Check for plus sign at the beginning
              A++;
            }
            if (B.length === A + 1) {
              // Check if it's just a simple number "1234"
              w = assign(B[A++], s);
            } else if (B[A + 1] === '.' || B[A] === '.') {
              // Check if it's a decimal number

              if (B[A] !== '.') {
                // Handle 0.5 and .5
                v = assign(B[A++], s);
              }
              A++;

              // Check for decimal places
              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                w = assign(B[A], s);
                y = Math.pow(10, B[A].length);
                A++;
              }

              // Check for repeating places
              if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                x = assign(B[A + 1], s);
                z = Math.pow(10, B[A + 1].length) - 1;
                A += 3;
              }
            } else if (B[A + 1] === '/' || B[A + 1] === ':') {
              // Check for a simple fraction "123/456" or "123:456"
              w = assign(B[A], s);
              y = assign(B[A + 2], 1);
              A += 3;
            } else if (B[A + 3] === '/' && B[A + 1] === ' ') {
              // Check for a complex fraction "123 1/2"
              v = assign(B[A], s);
              w = assign(B[A + 2], s);
              y = assign(B[A + 4], 1);
              A += 5;
            }
            if (B.length <= A) {
              // Check for more tokens on the stack
              d = y * z;
              s = /* void */
              n = x + d * v + z * w;
              break;
            }

            /* Fall through on error */
          }

        default:
          throw InvalidParameter();
      }
      if (d === 0) {
        throw DivisionByZero();
      }
      P["s"] = s < 0 ? -1 : 1;
      P["n"] = Math.abs(n);
      P["d"] = Math.abs(d);
    };
    function modpow(b, e, m) {
      var r = 1;
      for (; e > 0; b = b * b % m, e >>= 1) {
        if (e & 1) {
          r = r * b % m;
        }
      }
      return r;
    }
    function cycleLen(n, d) {
      for (; d % 2 === 0; d /= 2) {}
      for (; d % 5 === 0; d /= 5) {}
      if (d === 1)
        // Catch non-cyclic numbers
        return 0;

      // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
      // 10^(d-1) % d == 1
      // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
      // as we want to translate the numbers to strings.

      var rem = 10 % d;
      var t = 1;
      for (; rem !== 1; t++) {
        rem = rem * 10 % d;
        if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
      }

      return t;
    }
    function cycleStart(n, d, len) {
      var rem1 = 1;
      var rem2 = modpow(10, len, d);
      for (var t = 0; t < 300; t++) {
        // s < ~log10(Number.MAX_VALUE)
        // Solve 10^s == 10^(s+t) (mod d)

        if (rem1 === rem2) return t;
        rem1 = rem1 * 10 % d;
        rem2 = rem2 * 10 % d;
      }
      return 0;
    }
    function _gcd(a, b) {
      if (!a) return b;
      if (!b) return a;
      while (1) {
        a %= b;
        if (!a) return b;
        b %= a;
        if (!b) return a;
      }
    }

    /**
     * Module constructor
     *
     * @constructor
     * @param {number|Fraction=} a
     * @param {number=} b
     */
    function Fraction(a, b) {
      parse(a, b);
      if (this instanceof Fraction) {
        a = _gcd(P["d"], P["n"]); // Abuse variable a
        this["s"] = P["s"];
        this["n"] = P["n"] / a;
        this["d"] = P["d"] / a;
      } else {
        return newFraction(P['s'] * P['n'], P['d']);
      }
    }
    var DivisionByZero = function DivisionByZero() {
      return new Error("Division by Zero");
    };
    var InvalidParameter = function InvalidParameter() {
      return new Error("Invalid argument");
    };
    var NonIntegerParameter = function NonIntegerParameter() {
      return new Error("Parameters must be integer");
    };
    Fraction.prototype = {
      "s": 1,
      "n": 0,
      "d": 1,
      /**
       * Calculates the absolute value
       *
       * Ex: new Fraction(-4).abs() => 4
       **/
      "abs": function abs() {
        return newFraction(this["n"], this["d"]);
      },
      /**
       * Inverts the sign of the current fraction
       *
       * Ex: new Fraction(-4).neg() => 4
       **/
      "neg": function neg() {
        return newFraction(-this["s"] * this["n"], this["d"]);
      },
      /**
       * Adds two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
       **/
      "add": function add(a, b) {
        parse(a, b);
        return newFraction(this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
      },
      /**
       * Subtracts two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
       **/
      "sub": function sub(a, b) {
        parse(a, b);
        return newFraction(this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"], this["d"] * P["d"]);
      },
      /**
       * Multiplies two rational numbers
       *
       * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
       **/
      "mul": function mul(a, b) {
        parse(a, b);
        return newFraction(this["s"] * P["s"] * this["n"] * P["n"], this["d"] * P["d"]);
      },
      /**
       * Divides two rational numbers
       *
       * Ex: new Fraction("-17.(345)").inverse().div(3)
       **/
      "div": function div(a, b) {
        parse(a, b);
        return newFraction(this["s"] * P["s"] * this["n"] * P["d"], this["d"] * P["n"]);
      },
      /**
       * Clones the actual object
       *
       * Ex: new Fraction("-17.(345)").clone()
       **/
      "clone": function clone() {
        return newFraction(this['s'] * this['n'], this['d']);
      },
      /**
       * Calculates the modulo of two rational numbers - a more precise fmod
       *
       * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
       **/
      "mod": function mod(a, b) {
        if (isNaN(this['n']) || isNaN(this['d'])) {
          return new Fraction(NaN);
        }
        if (a === undefined) {
          return newFraction(this["s"] * this["n"] % this["d"], 1);
        }
        parse(a, b);
        if (0 === P["n"] && 0 === this["d"]) {
          throw DivisionByZero();
        }

        /*
         * First silly attempt, kinda slow
         *
         return that["sub"]({
         "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
         "d": num["d"],
         "s": this["s"]
         });*/

        /*
         * New attempt: a1 / b1 = a2 / b2 * q + r
         * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
         * => (b2 * a1 % a2 * b1) / (b1 * b2)
         */
        return newFraction(this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]), P["d"] * this["d"]);
      },
      /**
       * Calculates the fractional gcd of two rational numbers
       *
       * Ex: new Fraction(5,8).gcd(3,7) => 1/56
       */
      "gcd": function gcd(a, b) {
        parse(a, b);

        // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

        return newFraction(_gcd(P["n"], this["n"]) * _gcd(P["d"], this["d"]), P["d"] * this["d"]);
      },
      /**
       * Calculates the fractional lcm of two rational numbers
       *
       * Ex: new Fraction(5,8).lcm(3,7) => 15
       */
      "lcm": function lcm(a, b) {
        parse(a, b);

        // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

        if (P["n"] === 0 && this["n"] === 0) {
          return newFraction(0, 1);
        }
        return newFraction(P["n"] * this["n"], _gcd(P["n"], this["n"]) * _gcd(P["d"], this["d"]));
      },
      /**
       * Calculates the ceil of a rational number
       *
       * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
       **/
      "ceil": function ceil(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
      },
      /**
       * Calculates the floor of a rational number
       *
       * Ex: new Fraction('4.(3)').floor() => (4 / 1)
       **/
      "floor": function floor(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
      },
      /**
       * Rounds a rational numbers
       *
       * Ex: new Fraction('4.(3)').round() => (4 / 1)
       **/
      "round": function round(places) {
        places = Math.pow(10, places || 0);
        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
      },
      /**
       * Gets the inverse of the fraction, means numerator and denominator are exchanged
       *
       * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
       **/
      "inverse": function inverse() {
        return newFraction(this["s"] * this["d"], this["n"]);
      },
      /**
       * Calculates the fraction to some rational exponent, if possible
       *
       * Ex: new Fraction(-1,2).pow(-3) => -8
       */
      "pow": function pow(a, b) {
        parse(a, b);

        // Trivial case when exp is an integer

        if (P['d'] === 1) {
          if (P['s'] < 0) {
            return newFraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
          } else {
            return newFraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
          }
        }

        // Negative roots become complex
        //     (-a/b)^(c/d) = x
        // <=> (-1)^(c/d) * (a/b)^(c/d) = x
        // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
        // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
        // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
        if (this['s'] < 0) return null;

        // Now prime factor n and d
        var N = factorize(this['n']);
        var D = factorize(this['d']);

        // Exponentiate and take root for n and d individually
        var n = 1;
        var d = 1;
        for (var k in N) {
          if (k === '1') continue;
          if (k === '0') {
            n = 0;
            break;
          }
          N[k] *= P['n'];
          if (N[k] % P['d'] === 0) {
            N[k] /= P['d'];
          } else return null;
          n *= Math.pow(k, N[k]);
        }
        for (var k in D) {
          if (k === '1') continue;
          D[k] *= P['n'];
          if (D[k] % P['d'] === 0) {
            D[k] /= P['d'];
          } else return null;
          d *= Math.pow(k, D[k]);
        }
        if (P['s'] < 0) {
          return newFraction(d, n);
        }
        return newFraction(n, d);
      },
      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      "equals": function equals(a, b) {
        parse(a, b);
        return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
      },

      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      "compare": function compare(a, b) {
        parse(a, b);
        var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
        return (0 < t) - (t < 0);
      },
      "simplify": function simplify(eps) {
        if (isNaN(this['n']) || isNaN(this['d'])) {
          return this;
        }
        eps = eps || 0.001;
        var thisABS = this['abs']();
        var cont = thisABS['toContinued']();
        for (var i = 1; i < cont.length; i++) {
          var s = newFraction(cont[i - 1], 1);
          for (var k = i - 2; k >= 0; k--) {
            s = s['inverse']()['add'](cont[k]);
          }
          if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {
            return s['mul'](this['s']);
          }
        }
        return this;
      },
      /**
       * Check if two rational numbers are divisible
       *
       * Ex: new Fraction(19.6).divisible(1.5);
       */
      "divisible": function divisible(a, b) {
        parse(a, b);
        return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
      },
      /**
       * Returns a decimal representation of the fraction
       *
       * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
       **/
      'valueOf': function valueOf() {
        return this["s"] * this["n"] / this["d"];
      },
      /**
       * Returns a string-fraction representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
       **/
      'toFraction': function toFraction(excludeWhole) {
        var whole,
          str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str += '-';
        }
        if (d === 1) {
          str += n;
        } else {
          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str += whole;
            str += " ";
            n %= d;
          }
          str += n;
          str += '/';
          str += d;
        }
        return str;
      },
      /**
       * Returns a latex representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
       **/
      'toLatex': function toLatex(excludeWhole) {
        var whole,
          str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str += '-';
        }
        if (d === 1) {
          str += n;
        } else {
          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str += whole;
            n %= d;
          }
          str += "\\frac{";
          str += n;
          str += '}{';
          str += d;
          str += '}';
        }
        return str;
      },
      /**
       * Returns an array of continued fraction elements
       *
       * Ex: new Fraction("7/8").toContinued() => [0,1,7]
       */
      'toContinued': function toContinued() {
        var t;
        var a = this['n'];
        var b = this['d'];
        var res = [];
        if (isNaN(a) || isNaN(b)) {
          return res;
        }
        do {
          res.push(Math.floor(a / b));
          t = a % b;
          a = b;
          b = t;
        } while (a !== 1);
        return res;
      },
      /**
       * Creates a string representation of a fraction with all digits
       *
       * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
       **/
      'toString': function toString(dec) {
        var N = this["n"];
        var D = this["d"];
        if (isNaN(N) || isNaN(D)) {
          return "NaN";
        }
        dec = dec || 15; // 15 = decimal places when no repetation

        var cycLen = cycleLen(N, D); // Cycle length
        var cycOff = cycleStart(N, D, cycLen); // Cycle start

        var str = this['s'] < 0 ? "-" : "";
        str += N / D | 0;
        N %= D;
        N *= 10;
        if (N) str += ".";
        if (cycLen) {
          for (var i = cycOff; i--;) {
            str += N / D | 0;
            N %= D;
            N *= 10;
          }
          str += "(";
          for (var i = cycLen; i--;) {
            str += N / D | 0;
            N %= D;
            N *= 10;
          }
          str += ")";
        } else {
          for (var i = dec; N && i--;) {
            str += N / D | 0;
            N %= D;
            N *= 10;
          }
        }
        return str;
      }
    };
    {
      Object.defineProperty(Fraction, "__esModule", {
        'value': true
      });
      Fraction['default'] = Fraction;
      Fraction['Fraction'] = Fraction;
      module['exports'] = Fraction;
    }
  })();
})(fraction$1);
var fractionExports = fraction$1.exports;
var Fraction$1 = /*@__PURE__*/getDefaultExportFromCjs(fractionExports);

var name$4j = 'Fraction';
var dependencies$4k = [];
var createFractionClass = /* #__PURE__ */factory(name$4j, dependencies$4k, function () {
  /**
   * Attach type information
   */
  Fraction$1.prototype.type = 'Fraction';
  Fraction$1.prototype.isFraction = true;
  /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */

  Fraction$1.prototype.toJSON = function () {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */

  Fraction$1.fromJSON = function (json) {
    return new Fraction$1(json);
  };
  return Fraction$1;
}, {
  isClass: true
});

var name$4i = 'Range';
var dependencies$4j = [];
var createRangeClass = /* #__PURE__ */factory(name$4i, dependencies$4j, function () {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    var hasStart = start !== null && start !== undefined;
    var hasEnd = end !== null && end !== undefined;
    var hasStep = step !== null && step !== undefined;
    if (hasStart) {
      if (isBigNumber(start)) {
        start = start.toNumber();
      } else if (typeof start !== 'number') {
        throw new TypeError('Parameter start must be a number');
      }
    }
    if (hasEnd) {
      if (isBigNumber(end)) {
        end = end.toNumber();
      } else if (typeof end !== 'number') {
        throw new TypeError('Parameter end must be a number');
      }
    }
    if (hasStep) {
      if (isBigNumber(step)) {
        step = step.toNumber();
      } else if (typeof step !== 'number') {
        throw new TypeError('Parameter step must be a number');
      }
    }
    this.start = hasStart ? parseFloat(start) : 0;
    this.end = hasEnd ? parseFloat(end) : 0;
    this.step = hasStep ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */

  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }
    var args = str.split(':');
    var nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });
    if (invalid) {
      return null;
    }
    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);
      case 3:
        return new Range(nums[0], nums[2], nums[1]);
      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */

  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */

  Range.prototype.size = function () {
    var len = 0;
    var start = this.start;
    var step = this.step;
    var end = this.end;
    var diff = end - start;
    if (sign$2(step) === sign$2(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff === 0) {
      len = 0;
    }
    if (isNaN(len)) {
      len = 0;
    }
    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */

  Range.prototype.min = function () {
    var size = this.size()[0];
    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */

  Range.prototype.max = function () {
    var size = this.size()[0];
    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */

  Range.prototype.forEach = function (callback) {
    var x = this.start;
    var step = this.step;
    var end = this.end;
    var i = 0;
    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */

  Range.prototype.map = function (callback) {
    var array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */

  Range.prototype.toArray = function () {
    var array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */

  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */

  Range.prototype.format = function (options) {
    var str = format$3(this.start, options);
    if (this.step !== 1) {
      str += ':' + format$3(this.step, options);
    }
    str += ':' + format$3(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */

  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */

  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */

  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };
  return Range;
}, {
  isClass: true
});

var name$4h = 'Matrix';
var dependencies$4i = [];
var createMatrixClass = /* #__PURE__ */factory(name$4h, dependencies$4i, function () {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */

  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */

  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */

  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */

  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */

  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */

  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */

  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */

  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */

  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */

  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */

  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */

  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */

  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */

  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */

  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */

  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };
  return Matrix;
}, {
  isClass: true
});

var name$4g = 'DenseMatrix';
var dependencies$4h = ['Matrix'];
var createDenseMatrixClass = /* #__PURE__ */factory(name$4g, dependencies$4h, function (_ref) {
  var Matrix = _ref.Matrix;

  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (datatype && !isString(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }
    if (isMatrix(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = clone$2(data._data);
        this._size = clone$2(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size; // verify the dimensions of the array

      validate(this._data, this._size);
      this._datatype = datatype || data.datatype;
    } else if (isArray(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = arraySize(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      validate(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }
  DenseMatrix.prototype = new Matrix();
  /**
   * Create a new DenseMatrix
   */

  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */

  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  DenseMatrix.prototype.getDataType = function () {
    return getArrayDataType(this._data, typeOf$1);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */

  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */

  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */

  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);
      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */

  DenseMatrix.prototype.get = function (index) {
    if (!isArray(index)) {
      throw new TypeError('Array expected');
    }
    if (index.length !== this._size.length) {
      throw new DimensionError(index.length, this._size.length);
    } // check index

    for (var x = 0; x < index.length; x++) {
      validateIndex(index[x], this._size[x]);
    }
    var data = this._data;
    for (var i = 0, ii = index.length; i < ii; i++) {
      var indexI = index[i];
      validateIndex(indexI, data.length);
      data = data[indexI];
    }
    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */

  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!isArray(index)) {
      throw new TypeError('Array expected');
    }
    if (index.length < this._size.length) {
      throw new DimensionError(index.length, this._size.length, '<');
    }
    var i, ii, indexI; // enlarge matrix when needed

    var size = index.map(function (i) {
      return i + 1;
    });
    _fit(this, size, defaultValue); // traverse over the dimensions

    var data = this._data;
    for (i = 0, ii = index.length - 1; i < ii; i++) {
      indexI = index[i];
      validateIndex(indexI, data.length);
      data = data[indexI];
    } // set new value

    indexI = index[index.length - 1];
    validateIndex(indexI, data.length);
    data[indexI] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */

  function _get(matrix, index) {
    if (!isIndex(index)) {
      throw new TypeError('Invalid index');
    }
    var isScalar = index.isScalar();
    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      var size = index.size();
      if (size.length !== matrix._size.length) {
        throw new DimensionError(size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range

      var min = index.min();
      var max = index.max();
      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
        validateIndex(min[i], matrix._size[i]);
        validateIndex(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually

      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */

  function _getSubmatrix(data, index, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);
    if (last) {
      return range.map(function (i) {
        validateIndex(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        validateIndex(i, data.length);
        var child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */

  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value

    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;
    if (isMatrix(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = arraySize(submatrix);
    }
    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }
      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      }
      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;
        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }
        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions

        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size

      if (!deepStrictEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      } // enlarge matrix when needed

      var size = index.max().map(function (i) {
        return i + 1;
      });
      _fit(matrix, size, defaultValue); // insert the sub matrix

      var dims = iSize.length;
      var dim = 0;
      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }
    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */

  function _setSubmatrix(data, index, submatrix, dims, dim) {
    var last = dim === dims - 1;
    var range = index.dimension(dim);
    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        validateIndex(dataIndex);
        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[] || Matrix} size The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */

  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!isCollection(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector

    var sizeArray = size.valueOf().map(function (value) {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray, defaultValue);
  };
  function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      var v = matrix._data; // go deep

      while (isArray(v)) {
        v = v[0];
      }
      return v;
    } // resize matrix

    matrix._size = size.slice(0); // copy the array

    matrix._data = resize$1(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */

  DenseMatrix.prototype.reshape = function (size, copy) {
    var m = copy ? this.clone() : this;
    m._data = reshape$1(m._data, size);
    m._size = size.slice(0);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */

  function _fit(matrix, size, defaultValue) {
    var
    // copy the array
    newSize = matrix._size.slice(0);
    var changed = false; // add dimensions when needed

    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed

    for (var i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }
    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */

  DenseMatrix.prototype.clone = function () {
    var m = new DenseMatrix({
      data: clone$2(this._data),
      size: clone$2(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */

  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */

  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    var me = this;
    var recurse = function recurse(value, index) {
      if (isArray(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // determine the new datatype when the original matrix has datatype defined
    // TODO: should be done in matrix constructor instead

    var data = recurse(this._data, []);
    var datatype = this._datatype !== undefined ? getArrayDataType(data, typeOf$1) : undefined;
    return new DenseMatrix(data, datatype);
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */

  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    var me = this;
    var recurse = function recurse(value, index) {
      if (isArray(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };
    recurse(this._data, []);
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */

  DenseMatrix.prototype.toArray = function () {
    return clone$2(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */

  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */

  DenseMatrix.prototype.format = function (options) {
    return format$1(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */

  DenseMatrix.prototype.toString = function () {
    return format$1(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */

  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */

  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (isBigNumber(k)) {
        k = k.toNumber();
      } // is must be an integer

      if (!isNumber(k) || !isInteger$1(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    var data = []; // loop rows

    for (var i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix

    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */

  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
    if (!isArray(size)) {
      throw new TypeError('Array expected, size parameter');
    }
    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate

    size = size.map(function (s) {
      // check it is a big number
      if (isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments

      if (!isNumber(s) || !isInteger$1(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }
      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (isBigNumber(k)) {
        k = k.toNumber();
      } // is must be an integer

      if (!isNumber(k) || !isInteger$1(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value

    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function

      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (isMatrix(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function

      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // discover default value if needed

    if (!defaultValue) {
      // check first value in array
      defaultValue = isBigNumber(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
      : 0;
    } // empty array

    var data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = resize$1(data, size, defaultValue); // fill diagonal

      for (var d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix

    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */

  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */

  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions

    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index

    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance

    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */

  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    var vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */

  function preprocess(data) {
    for (var i = 0, ii = data.length; i < ii; i++) {
      var elem = data[i];
      if (isArray(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }
    return data;
  }
  return DenseMatrix;
}, {
  isClass: true
});

var name$4f = 'clone';
var dependencies$4g = ['typed'];
var createClone = /* #__PURE__ */factory(name$4f, dependencies$4g, function (_ref) {
  var typed = _ref.typed;

  /**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  return typed(name$4f, {
    any: clone$2
  });
});

/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */

function containsCollections(array) {
  for (var i = 0; i < array.length; i++) {
    if (isCollection(array[i])) {
      return true;
    }
  }
  return false;
}
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */

function deepForEach(array, callback) {
  if (isMatrix(array)) {
    array = array.valueOf();
  }
  for (var i = 0, ii = array.length; i < ii; i++) {
    var value = array[i];
    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
}
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */

function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback);
    });
  } else {
    return callback(array);
  }
}
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */

function reduce(mat, dim, callback) {
  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new IndexError(dim, size.length);
  }
  if (isMatrix(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _reduce(mat, dim, callback) {
  var i, ret, val, tran;
  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];
      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }
      return val;
    } else {
      tran = _switch$1(mat);
      ret = [];
      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }
      return ret;
    }
  } else {
    ret = [];
    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }
    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */

function _switch$1(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];
  for (j = 0; j < J; j++) {
    var tmp = [];
    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }
    ret.push(tmp);
  }
  return ret;
} // TODO: document function scatter

function scatter(a, j, w, x, u, mark, cindex, f, inverse, update, value) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr; // vars

  var k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
}

var name$4e = 'isInteger';
var dependencies$4f = ['typed'];
var createIsInteger = /* #__PURE__ */factory(name$4e, dependencies$4f, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$4e, {
    number: isInteger$1,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    BigNumber: function BigNumber(x) {
      return x.isInt();
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var n1$4 = 'number';
var n2$2 = 'number, number';
function absNumber(a) {
  return Math.abs(a);
}
absNumber.signature = n1$4;
function addNumber(a, b) {
  return a + b;
}
addNumber.signature = n2$2;
function multiplyNumber(a, b) {
  return a * b;
}
multiplyNumber.signature = n2$2;
function unaryMinusNumber(x) {
  return -x;
}
unaryMinusNumber.signature = n1$4;
function unaryPlusNumber(x) {
  return x;
}
unaryPlusNumber.signature = n1$4;
function cbrtNumber(x) {
  return cbrt$2(x);
}
cbrtNumber.signature = n1$4;
function ceilNumber(x) {
  return Math.ceil(x);
}
ceilNumber.signature = n1$4;
function cubeNumber(x) {
  return x * x * x;
}
cubeNumber.signature = n1$4;
function expNumber(x) {
  return Math.exp(x);
}
expNumber.signature = n1$4;
function expm1Number(x) {
  return expm1$1(x);
}
expm1Number.signature = n1$4;
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */

function gcdNumber(a, b) {
  if (!isInteger$1(a) || !isInteger$1(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm

  var r;
  while (b !== 0) {
    r = a % b;
    a = b;
    b = r;
  }
  return a < 0 ? -a : a;
}
gcdNumber.signature = n2$2;
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */

function lcmNumber(a, b) {
  if (!isInteger$1(a) || !isInteger$1(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }
  if (a === 0 || b === 0) {
    return 0;
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead

  var t;
  var prod = a * b;
  while (b !== 0) {
    t = b;
    b = a % t;
    a = t;
  }
  return Math.abs(prod / a);
}
lcmNumber.signature = n2$2;
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */

function logNumber(x) {
  return Math.log(x);
}
logNumber.signature = n1$4;
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log10Number(x) {
  return log10$2(x);
}
log10Number.signature = n1$4;
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log2Number(x) {
  return log2$2(x);
}
log2Number.signature = n1$4;
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */

function modNumber(x, y) {
  if (y > 0) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
  } else if (y === 0) {
    return x;
  } else {
    // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
  }
}
modNumber.signature = n2$2;
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */

function nthRootNumber(a, root) {
  var inv = root < 0;
  if (inv) {
    root = -root;
  }
  if (root === 0) {
    throw new Error('Root must be non-zero');
  }
  if (a < 0 && Math.abs(root) % 2 !== 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity

  if (a === 0) {
    return inv ? Infinity : 0;
  }
  if (!isFinite(a)) {
    return inv ? 0 : a;
  }
  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */
}

nthRootNumber.signature = n2$2;
function signNumber(x) {
  return sign$2(x);
}
signNumber.signature = n1$4;
function squareNumber(x) {
  return x * x;
}
squareNumber.signature = n1$4;
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */

function xgcdNumber(a, b) {
  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
  var t; // used to swap two variables

  var q; // quotient

  var r; // remainder

  var x = 0;
  var lastx = 1;
  var y = 1;
  var lasty = 0;
  if (!isInteger$1(a) || !isInteger$1(b)) {
    throw new Error('Parameters in function xgcd must be integer numbers');
  }
  while (b) {
    q = Math.floor(a / b);
    r = a - q * b;
    t = x;
    x = lastx - q * x;
    lastx = t;
    t = y;
    y = lasty - q * y;
    lasty = t;
    a = b;
    b = r;
  }
  var res;
  if (a < 0) {
    res = [-a, -lastx, -lasty];
  } else {
    res = [a, a ? lastx : 0, lasty];
  }
  return res;
}
xgcdNumber.signature = n2$2;
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */

function powNumber(x, y) {
  // x^Infinity === 0 if -1 < x < 1
  // A real number 0 is returned instead of complex(0)
  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
    return 0;
  }
  return Math.pow(x, y);
}
powNumber.signature = n2$2;
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */

function roundNumber(value) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return parseFloat(toFixed$1(value, decimals));
}
roundNumber.signature = n2$2;

var n1$3 = 'number';
var n2$1 = 'number, number';
function bitAndNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function bitAnd');
  }
  return x & y;
}
bitAndNumber.signature = n2$1;
function bitNotNumber(x) {
  if (!isInteger$1(x)) {
    throw new Error('Integer expected in function bitNot');
  }
  return ~x;
}
bitNotNumber.signature = n1$3;
function bitOrNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function bitOr');
  }
  return x | y;
}
bitOrNumber.signature = n2$1;
function bitXorNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function bitXor');
  }
  return x ^ y;
}
bitXorNumber.signature = n2$1;
function leftShiftNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function leftShift');
  }
  return x << y;
}
leftShiftNumber.signature = n2$1;
function rightArithShiftNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function rightArithShift');
  }
  return x >> y;
}
rightArithShiftNumber.signature = n2$1;
function rightLogShiftNumber(x, y) {
  if (!isInteger$1(x) || !isInteger$1(y)) {
    throw new Error('Integers expected in function rightLogShift');
  }
  return x >>> y;
}
rightLogShiftNumber.signature = n2$1;

/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */
function product(i, n) {
  if (n < i) {
    return 1;
  }
  if (n === i) {
    return n;
  }
  var half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

  return product(i, half) * product(half + 1, n);
}

function combinationsNumber(n, k) {
  if (!isInteger$1(n) || n < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }
  if (!isInteger$1(k) || k < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }
  if (k > n) {
    throw new TypeError('k must be less than or equal to n');
  }
  var nMinusk = n - k;
  var prodrange;
  if (k < nMinusk) {
    prodrange = product(nMinusk + 1, n);
    return prodrange / product(1, k);
  }
  prodrange = product(k + 1, n);
  return prodrange / product(1, nMinusk);
}
combinationsNumber.signature = 'number, number';

var pi$1 = Math.PI;
var tau$1 = 2 * Math.PI;
var e$1 = Math.E;
var phi$1 = 1.6180339887498948; // eslint-disable-line no-loss-of-precision

var n1$2 = 'number';
var n2 = 'number, number';
function notNumber(x) {
  return !x;
}
notNumber.signature = n1$2;
function orNumber(x, y) {
  return !!(x || y);
}
orNumber.signature = n2;
function xorNumber(x, y) {
  return !!x !== !!y;
}
xorNumber.signature = n2;
function andNumber(x, y) {
  return !!(x && y);
}
andNumber.signature = n2;

/* eslint-disable no-loss-of-precision */
function gammaNumber(n) {
  var x;
  if (isInteger$1(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }
    if (n > 171) {
      return Infinity; // Will overflow
    }

    return product(1, n - 1);
  }
  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
  }
  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) {
    // Extended Stirling Approx
    var twoN = n * n;
    var threeN = twoN * n;
    var fourN = threeN * n;
    var fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
  }
  --n;
  x = gammaP[0];
  for (var i = 1; i < gammaP.length; ++i) {
    x += gammaP[i] / (n + i);
  }
  var t = n + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}
gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

var gammaG = 4.7421875;
var gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

var n1$1 = 'number';
function acoshNumber(x) {
  return acosh$2(x);
}
acoshNumber.signature = n1$1;
function acotNumber(x) {
  return Math.atan(1 / x);
}
acotNumber.signature = n1$1;
function acothNumber(x) {
  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}
acothNumber.signature = n1$1;
function acscNumber(x) {
  return Math.asin(1 / x);
}
acscNumber.signature = n1$1;
function acschNumber(x) {
  var xInv = 1 / x;
  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}
acschNumber.signature = n1$1;
function asecNumber(x) {
  return Math.acos(1 / x);
}
asecNumber.signature = n1$1;
function asechNumber(x) {
  var xInv = 1 / x;
  var ret = Math.sqrt(xInv * xInv - 1);
  return Math.log(ret + xInv);
}
asechNumber.signature = n1$1;
function asinhNumber(x) {
  return asinh$2(x);
}
asinhNumber.signature = n1$1;
function atanhNumber(x) {
  return atanh$2(x);
}
atanhNumber.signature = n1$1;
function cotNumber(x) {
  return 1 / Math.tan(x);
}
cotNumber.signature = n1$1;
function cothNumber(x) {
  var e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}
cothNumber.signature = n1$1;
function cscNumber(x) {
  return 1 / Math.sin(x);
}
cscNumber.signature = n1$1;
function cschNumber(x) {
  // consider values close to zero (+/-)
  if (x === 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign$2(x);
  }
}
cschNumber.signature = n1$1;
function secNumber(x) {
  return 1 / Math.cos(x);
}
secNumber.signature = n1$1;
function sechNumber(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}
sechNumber.signature = n1$1;
function sinhNumber(x) {
  return sinh$2(x);
}
sinhNumber.signature = n1$1;

var n1 = 'number';
function isNegativeNumber(x) {
  return x < 0;
}
isNegativeNumber.signature = n1;
function isPositiveNumber(x) {
  return x > 0;
}
isPositiveNumber.signature = n1;
function isZeroNumber(x) {
  return x === 0;
}
isZeroNumber.signature = n1;
function isNaNNumber(x) {
  return Number.isNaN(x);
}
isNaNNumber.signature = n1;

var name$4d = 'isNegative';
var dependencies$4e = ['typed'];
var createIsNegative = /* #__PURE__ */factory(name$4d, dependencies$4e, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$4d, {
    number: isNegativeNumber,
    BigNumber: function BigNumber(x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s < 0; // It's enough to decide on the sign
    },

    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$4c = 'isNumeric';
var dependencies$4d = ['typed'];
var createIsNumeric = /* #__PURE__ */factory(name$4c, dependencies$4d, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns false
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name$4c, {
    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
      return true;
    },
    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
      return false;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$4b = 'hasNumericValue';
var dependencies$4c = ['typed', 'isNumeric'];
var createHasNumericValue = /* #__PURE__ */factory(name$4b, dependencies$4c, function (_ref) {
  var typed = _ref.typed,
    isNumeric = _ref.isNumeric;

  /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name$4b, {
    string: function string(x) {
      return x.trim().length > 0 && !isNaN(Number(x));
    },
    any: function any(x) {
      return isNumeric(x);
    }
  });
});

var name$4a = 'isPositive';
var dependencies$4b = ['typed'];
var createIsPositive = /* #__PURE__ */factory(name$4a, dependencies$4b, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$4a, {
    number: isPositiveNumber,
    BigNumber: function BigNumber(x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    Fraction: function Fraction(x) {
      return x.s > 0 && x.n > 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$49 = 'isZero';
var dependencies$4a = ['typed'];
var createIsZero = /* #__PURE__ */factory(name$49, dependencies$4a, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$49, {
    number: isZeroNumber,
    BigNumber: function BigNumber(x) {
      return x.isZero();
    },
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    Fraction: function Fraction(x) {
      return x.d === 1 && x.n === 0;
    },
    Unit: function Unit(x) {
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$48 = 'isNaN';
var dependencies$49 = ['typed'];
var createIsNaN = /* #__PURE__ */factory(name$48, dependencies$49, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$48, {
    number: isNaNNumber,
    BigNumber: function BigNumber(x) {
      return x.isNaN();
    },
    Fraction: function Fraction(x) {
      return false;
    },
    Complex: function Complex(x) {
      return x.isNaN();
    },
    Unit: function Unit(x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, Number.isNaN);
    }
  });
});

var name$47 = 'typeOf';
var dependencies$48 = ['typed'];
var createTypeOf = /* #__PURE__ */factory(name$47, dependencies$48, function (_ref) {
  var typed = _ref.typed;

  /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  return typed(name$47, {
    any: typeOf$1
  });
});

/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x.eq(y);
  } // use "==" operator, handles infinities

  if (x.eq(y)) {
    return true;
  } // NaN

  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite

  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    var diff = x.minus(y).abs();
    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      var max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases

  return false;
}

/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */

function complexEquals(x, y, epsilon) {
  return nearlyEqual$1(x.re, y.re, epsilon) && nearlyEqual$1(x.im, y.im, epsilon);
}

var name$46 = 'equalScalar';
var dependencies$47 = ['typed', 'config'];
var createEqualScalar = /* #__PURE__ */factory(name$46, dependencies$47, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config;

  /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  return typed(name$46, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y;
    },
    'number, number': function numberNumber(x, y) {
      return nearlyEqual$1(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.eq(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return complexEquals(x, y, config.epsilon);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    }
  });
});
factory(name$46, ['typed', 'config'], function (_ref2) {
  var typed = _ref2.typed,
    config = _ref2.config;
  return typed(name$46, {
    'number, number': function numberNumber(x, y) {
      return nearlyEqual$1(x, y, config.epsilon);
    }
  });
});

var name$45 = 'SparseMatrix';
var dependencies$46 = ['typed', 'equalScalar', 'Matrix'];
var createSparseMatrixClass = /* #__PURE__ */factory(name$45, dependencies$46, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar,
    Matrix = _ref.Matrix;

  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (datatype && !isString(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }
    if (isMatrix(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if (isArray(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }
  function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? clone$2(source._values) : undefined;
      matrix._index = clone$2(source._index);
      matrix._ptr = clone$2(source._ptr);
      matrix._size = clone$2(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  }
  function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    var rows = data.length;
    var columns = 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;
    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)

    if (rows > 0) {
      // column index
      var j = 0;
      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows

        for (var i = 0; i < rows; i++) {
          // current row
          var row = data[i]; // check row is an array

          if (isArray(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) {
              columns = row.length;
            } // check row has column

            if (j < row.length) {
              // value
              var v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index

                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) {
              columns = 1;
            } // check value != 0 (row is a scalar)

            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index

              matrix._index.push(i);
            }
          }
        } // increment index

        j++;
      } while (j < columns);
    } // store number of values in ptr

    matrix._ptr.push(matrix._index.length); // size

    matrix._size = [rows, columns];
  }
  SparseMatrix.prototype = new Matrix();
  /**
   * Create a new SparseMatrix
   */

  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */

  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  SparseMatrix.prototype.getDataType = function () {
    return getArrayDataType(this._values, typeOf$1);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */

  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */

  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */

  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */

  SparseMatrix.prototype.density = function () {
    // rows & columns
    var rows = this._size[0];
    var columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke subset on a Pattern only matrix');
    } // check arguments

    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);
      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  function _getsubset(matrix, idx) {
    // check idx
    if (!isIndex(idx)) {
      throw new TypeError('Invalid index');
    }
    var isScalar = idx.isScalar();
    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions

    var size = idx.size();
    if (size.length !== matrix._size.length) {
      throw new DimensionError(size.length, matrix._size.length);
    } // vars

    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

    var min = idx.min();
    var max = idx.max();
    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      validateIndex(min[i], matrix._size[i]);
      validateIndex(max[i], matrix._size[i]);
    } // matrix arrays

    var mvalues = matrix._values;
    var mindex = matrix._index;
    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

    var rows = idx.dimension(0);
    var columns = idx.dimension(1); // workspace & permutation vector

    var w = [];
    var pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    var values = mvalues ? [] : undefined;
    var index = [];
    var ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) {
            values.push(mvalues[k]);
          }
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  }
  function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value

    var iSize = index.size();
    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    var sSize;
    if (isMatrix(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = arraySize(submatrix);
    } // check index is a scalar

    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new DimensionError(iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        var i = 0;
        var outer = 0;
        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }
        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions

        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size

      if (!deepStrictEqual(iSize, sSize)) {
        throw new DimensionError(iSize, sSize, '>');
      } // offsets

      var x0 = index.min()[0];
      var y0 = index.min()[1]; // submatrix rows and columns

      var m = sSize[0];
      var n = sSize[1]; // loop submatrix

      for (var x = 0; x < m; x++) {
        // loop columns
        for (var y = 0; y < n; y++) {
          // value at i, j
          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }
    return matrix;
  }
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */

  SparseMatrix.prototype.get = function (index) {
    if (!isArray(index)) {
      throw new TypeError('Array expected');
    }
    if (index.length !== this._size.length) {
      throw new DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix

    if (!this._values) {
      throw new Error('Cannot invoke get on a Pattern only matrix');
    } // row and column

    var i = index[0];
    var j = index[1]; // check i, j are valid

    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[1]); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row

    if (k < this._ptr[j + 1] && this._index[k] === i) {
      return this._values[k];
    }
    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */

  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!isArray(index)) {
      throw new TypeError('Array expected');
    }
    if (index.length !== this._size.length) {
      throw new DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix

    if (!this._values) {
      throw new Error('Cannot invoke set on a Pattern only matrix');
    } // row and column

    var i = index[0];
    var j = index[1]; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;
    if (isString(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix

    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns

      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid

    validateIndex(i, rows);
    validateIndex(j, columns); // find value index

    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row

    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }
    return this;
  };
  function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) {
      return bottom;
    } // loop rows [top, bottom[

    for (var r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) {
        return r;
      }
    } // we did not find row

    return top;
  }
  function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  }
  function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (var x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[] | Matrix} size  The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */

  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!isCollection(size)) {
      throw new TypeError('Array or Matrix expected');
    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector

    var sizeArray = size.valueOf().map(function (value) {
      return Array.isArray(value) && value.length === 1 ? value[0] : value;
    });
    if (sizeArray.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // check sizes

    sizeArray.forEach(function (value) {
      if (!isNumber(value) || !isInteger$1(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(sizeArray) + ')');
      }
    }); // matrix to resize

    var m = copy ? this.clone() : this; // resize matrix

    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);
  };
  function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    var value = defaultValue || 0; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;
    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?

    var ins = !eq(value, zero); // old columns and rows

    var r = matrix._size[0];
    var c = matrix._size[1];
    var i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index

            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr

      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index

      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns

    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        var n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          var p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index

            matrix._index.splice(k + p, 0, i); // increment inserts

            n++;
          }
        } // store number of matrix._values in matrix._ptr

        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      var d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        var k0 = matrix._ptr[j];
        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index

            matrix._index.splice(k, 1); // increase deletes

            d++;
          }
        }
      } // update matrix._ptr for current column

      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size

    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */

  SparseMatrix.prototype.reshape = function (size, copy) {
    // validate arguments
    if (!isArray(size)) {
      throw new TypeError('Array expected');
    }
    if (size.length !== 2) {
      throw new Error('Sparse matrices can only be reshaped in two dimensions');
    } // check sizes

    size.forEach(function (value) {
      if (!isNumber(value) || !isInteger$1(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(size) + ')');
      }
    }); // m * n must not change

    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape

    var m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === size[0] && this._size[1] === size[1]) {
      return m;
    } // Convert to COO format (generate a column index)

    var colIndex = [];
    for (var i = 0; i < m._ptr.length; i++) {
      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array

    var values = m._values.slice(); // Clone the row index array

    var rowIndex = m._index.slice(); // Transform the (row, column) indices

    for (var _i = 0; _i < m._index.length; _i++) {
      var r1 = rowIndex[_i];
      var c1 = colIndex[_i];
      var flat = r1 * m._size[1] + c1;
      colIndex[_i] = flat % size[1];
      rowIndex[_i] = Math.floor(flat / size[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix

    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = size[1] + 1;
    m._size = size.slice();
    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
      m._ptr[_i2] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming

    for (var h = 0; h < values.length; h++) {
      var _i3 = rowIndex[h];
      var _j = colIndex[h];
      var v = values[h];
      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);
      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?

    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */

  SparseMatrix.prototype.clone = function () {
    var m = new SparseMatrix({
      values: this._values ? clone$2(this._values) : undefined,
      index: clone$2(this._index),
      ptr: clone$2(this._ptr),
      size: clone$2(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */

  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */

  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke map on a Pattern only matrix');
    } // matrix instance

    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // invoke callback

    var invoke = function invoke(v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map

    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */

  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    var values = [];
    var index = [];
    var ptr = []; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;
    if (isString(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback

    var invoke = function invoke(v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns

    for (var j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = matrix._ptr[j];
      var k1 = matrix._ptr[j + 1];
      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = matrix._index[k]; // check i is in range

          if (i >= minRow && i <= maxRow) {
            // value @ k
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
        }
      } else {
        // create a cache holding all defined values
        var _values = {};
        for (var _k = k0; _k < k1; _k++) {
          var _i4 = matrix._index[_k];
          _values[_i4] = matrix._values[_k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero

        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {
          var value = _i5 in _values ? _values[_i5] : 0;
          invoke(value, _i5 - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr

    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  }
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */

  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    } // matrix instance

    var me = this; // rows and columns

    var rows = this._size[0];
    var columns = this._size[1]; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1];
      if (skipZeros) {
        // loop k within [k0, k1[
        for (var k = k0; k < k1; k++) {
          // row index
          var i = this._index[k]; // value @ k

          callback(this._values[k], [i, j], me);
        }
      } else {
        // create a cache holding all defined values
        var values = {};
        for (var _k2 = k0; _k2 < k1; _k2++) {
          var _i6 = this._index[_k2];
          values[_i6] = this._values[_k2];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero

        for (var _i7 = 0; _i7 < rows; _i7++) {
          var value = _i7 in values ? values[_i7] : 0;
          callback(value, [_i7, j], me);
        }
      }
    }
  };
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */

  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */

  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };
  function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    var rows = size[0];
    var columns = size[1]; // result

    var a = []; // vars

    var i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];
      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns

    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? clone$2(values[k]) : values[k] : 1;
      }
    }
    return a;
  }
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */

  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    var rows = this._size[0];
    var columns = this._size[1]; // density

    var density = this.density(); // rows & columns

    var str = 'Sparse Matrix [' + format$1(rows, options) + ' x ' + format$1(columns, options) + '] density: ' + format$1(density, options) + '\n'; // loop columns

    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (var k = k0; k < k1; k++) {
        // row index
        var i = this._index[k]; // append value

        str += '\n    (' + format$1(i, options) + ', ' + format$1(j, options) + ') ==> ' + (this._values ? format$1(this._values[k], options) : 'X');
      }
    }
    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */

  SparseMatrix.prototype.toString = function () {
    return format$1(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */

  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */

  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if (isBigNumber(k)) {
        k = k.toNumber();
      } // is must be an integer

      if (!isNumber(k) || !isInteger$1(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows & columns

    var rows = this._size[0];
    var columns = this._size[1]; // number diagonal values

    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    var values = [];
    var index = [];
    var ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (var j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = this._ptr[j];
      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (var x = k0; x < k1; x++) {
        // row index
        var i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr

    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */

  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */

  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!isArray(size)) {
      throw new TypeError('Array expected, size parameter');
    }
    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate

    size = size.map(function (s) {
      // check it is a big number
      if (isBigNumber(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments

      if (!isNumber(s) || !isInteger$1(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }
      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if (isBigNumber(k)) {
        k = k.toNumber();
      } // is must be an integer

      if (!isNumber(k) || !isInteger$1(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0;
    if (isString(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // rows and columns

    var rows = size[0];
    var columns = size[1]; // number of non-zero items

    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    var _value; // check value

    if (isArray(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function

      _value = function _value(i) {
        // return value @ i
        return value[i];
      };
    } else if (isMatrix(value)) {
      // matrix size
      var ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function

      _value = function _value(i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function _value() {
        // return value
        return value;
      };
    } // create arrays

    var values = [];
    var index = [];
    var ptr = []; // loop items

    for (var j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      var i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        var v = _value(i); // check for zero

        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values

    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */

  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!isNumber(i) || !isInteger$1(i) || !isNumber(j) || !isInteger$1(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions

    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index

    validateIndex(i, this._size[0]);
    validateIndex(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance

    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */

  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    var k0 = ptr[j];
    var k1 = ptr[j + 1]; // loop

    for (var k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */

  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (var j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // find value index @ x

      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x

      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix

      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          var v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column

        continue;
      } // check x row exist & no y row

      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        var vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);
        if (values) {
          values.splice(ky, 0, vx);
        } // remove value @ x (adjust array index if needed)

        index.splice(ky <= kx ? kx + 1 : kx, 1);
        if (values) {
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        } // next column

        continue;
      } // check y row exist & no x row

      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        var vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);
        if (values) {
          values.splice(kx, 0, vy);
        } // remove value @ y (adjust array index if needed)

        index.splice(kx <= ky ? ky + 1 : ky, 1);
        if (values) {
          values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    }
  };
  return SparseMatrix;
}, {
  isClass: true
});

var name$44 = 'number';
var dependencies$45 = ['typed'];
var createNumber = /* #__PURE__ */factory(name$44, dependencies$45, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  var number = typed('number', {
    '': function _() {
      return 0;
    },
    number: function number(x) {
      return x;
    },
    string: function string(x) {
      if (x === 'NaN') return NaN;
      var num = Number(x);
      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }
      if (['0b', '0o', '0x'].includes(x.substring(0, 2))) {
        if (num > Math.pow(2, 32) - 1) {
          throw new SyntaxError("String \"".concat(x, "\" is out of range"));
        }
        if (num & 0x80000000) {
          num = -1 * ~(num - 1);
        }
      }
      return num;
    },
    BigNumber: function BigNumber(x) {
      return x.toNumber();
    },
    Fraction: function Fraction(x) {
      return x.valueOf();
    },
    Unit: function Unit(x) {
      throw new Error('Second argument with valueless unit expected');
    },
    "null": function _null(x) {
      return 0;
    },
    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  }); // reviver function to parse a JSON object like:
  //
  //     {"mathjs":"number","value":"2.3"}
  //
  // into a number 2.3

  number.fromJSON = function (json) {
    return parseFloat(json.value);
  };
  return number;
});

var name$43 = 'string';
var dependencies$44 = ['typed'];
var createString = /* #__PURE__ */factory(name$43, dependencies$44, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  return typed(name$43, {
    '': function _() {
      return '';
    },
    number: format$3,
    "null": function _null(x) {
      return 'null';
    },
    "boolean": function _boolean(x) {
      return x + '';
    },
    string: function string(x) {
      return x;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    },
    any: function any(x) {
      return String(x);
    }
  });
});

var name$42 = 'boolean';
var dependencies$43 = ['typed'];
var createBoolean = /* #__PURE__ */factory(name$42, dependencies$43, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  return typed(name$42, {
    '': function _() {
      return false;
    },
    "boolean": function _boolean(x) {
      return x;
    },
    number: function number(x) {
      return !!x;
    },
    "null": function _null(x) {
      return false;
    },
    BigNumber: function BigNumber(x) {
      return !x.isZero();
    },
    string: function string(x) {
      // try case insensitive
      var lcase = x.toLowerCase();
      if (lcase === 'true') {
        return true;
      } else if (lcase === 'false') {
        return false;
      } // test whether value is a valid number

      var num = Number(x);
      if (x !== '' && !isNaN(num)) {
        return !!num;
      }
      throw new Error('Cannot convert "' + x + '" to a boolean');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$41 = 'bignumber';
var dependencies$42 = ['typed', 'BigNumber'];
var createBignumber = /* #__PURE__ */factory(name$41, dependencies$42, function (_ref) {
  var typed = _ref.typed,
    BigNumber = _ref.BigNumber;

  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  return typed('bignumber', {
    '': function _() {
      return new BigNumber(0);
    },
    number: function number(x) {
      // convert to string to prevent errors in case of >15 digits
      return new BigNumber(x + '');
    },
    string: function string(x) {
      return new BigNumber(x);
    },
    BigNumber: function BigNumber(x) {
      // we assume a BigNumber is immutable
      return x;
    },
    Fraction: function Fraction(x) {
      return new BigNumber(x.n).div(x.d).times(x.s);
    },
    "null": function _null(x) {
      return new BigNumber(0);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$40 = 'complex';
var dependencies$41 = ['typed', 'Complex'];
var createComplex = /* #__PURE__ */factory(name$40, dependencies$41, function (_ref) {
  var typed = _ref.typed,
    Complex = _ref.Complex;

  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  return typed('complex', {
    '': function _() {
      return Complex.ZERO;
    },
    number: function number(x) {
      return new Complex(x, 0);
    },
    'number, number': function numberNumber(re, im) {
      return new Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
      return new Complex(re.toNumber(), im.toNumber());
    },
    Fraction: function Fraction(x) {
      return new Complex(x.valueOf(), 0);
    },
    Complex: function Complex(x) {
      return x.clone();
    },
    string: function string(x) {
      return Complex(x); // for example '2 + 3i'
    },

    "null": function _null(x) {
      return Complex(0);
    },
    Object: function Object(x) {
      if ('re' in x && 'im' in x) {
        return new Complex(x.re, x.im);
      }
      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
        return new Complex(x);
      }
      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3$ = 'fraction';
var dependencies$40 = ['typed', 'Fraction'];
var createFraction = /* #__PURE__ */factory(name$3$, dependencies$40, function (_ref) {
  var typed = _ref.typed,
    Fraction = _ref.Fraction;

  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  return typed('fraction', {
    number: function number(x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }
      return new Fraction(x);
    },
    string: function string(x) {
      return new Fraction(x);
    },
    'number, number': function numberNumber(numerator, denominator) {
      return new Fraction(numerator, denominator);
    },
    "null": function _null(x) {
      return new Fraction(0);
    },
    BigNumber: function BigNumber(x) {
      return new Fraction(x.toString());
    },
    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },

    Object: function Object(x) {
      return new Fraction(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3_ = 'matrix';
var dependencies$3$ = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
var createMatrix = /* #__PURE__ */factory(name$3_, dependencies$3$, function (_ref) {
  var typed = _ref.typed;
    _ref.Matrix;
    var DenseMatrix = _ref.DenseMatrix,
    SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  return typed(name$3_, {
    '': function _() {
      return _create([]);
    },
    string: function string(format) {
      return _create([], format);
    },
    'string, string': function stringString(format, datatype) {
      return _create([], format, datatype);
    },
    Array: function Array(data) {
      return _create(data);
    },
    Matrix: function Matrix(data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    if (format === 'dense' || format === 'default' || format === undefined) {
      return new DenseMatrix(data, datatype);
    }
    if (format === 'sparse') {
      return new SparseMatrix(data, datatype);
    }
    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
  }
});

var name$3Z = 'splitUnit';
var dependencies$3_ = ['typed'];
var createSplitUnit = /* #__PURE__ */factory(name$3Z, dependencies$3_, function (_ref) {
  var typed = _ref.typed;

  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  return typed(name$3Z, {
    'Unit, Array': function UnitArray(unit, parts) {
      return unit.splitUnit(parts);
    }
  });
});

var name$3Y = 'unaryMinus';
var dependencies$3Z = ['typed'];
var createUnaryMinus = /* #__PURE__ */factory(name$3Y, dependencies$3Z, function (_ref) {
  var typed = _ref.typed;

  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  return typed(name$3Y, {
    number: unaryMinusNumber,
    Complex: function Complex(x) {
      return x.neg();
    },
    BigNumber: function BigNumber(x) {
      return x.neg();
    },
    Fraction: function Fraction(x) {
      return x.neg();
    },
    Unit: function Unit(x) {
      var res = x.clone();
      res.value = this(x.value);
      return res;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return deepMap(x, this);
    } // TODO: add support for string
  });
});

var name$3X = 'unaryPlus';
var dependencies$3Y = ['typed', 'config', 'BigNumber'];
var createUnaryPlus = /* #__PURE__ */factory(name$3X, dependencies$3Y, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    BigNumber = _ref.BigNumber;

  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  return typed(name$3X, {
    number: unaryPlusNumber,
    Complex: function Complex(x) {
      return x; // complex numbers are immutable
    },

    BigNumber: function BigNumber(x) {
      return x; // bignumbers are immutable
    },

    Fraction: function Fraction(x) {
      return x; // fractions are immutable
    },

    Unit: function Unit(x) {
      return x.clone();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return deepMap(x, this);
    },
    'boolean | string': function booleanString(x) {
      // convert to a number or bignumber
      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
    }
  });
});

var name$3W = 'abs';
var dependencies$3X = ['typed'];
var createAbs = /* #__PURE__ */factory(name$3W, dependencies$3X, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  return typed(name$3W, {
    number: absNumber,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      return x.abs();
    },
    Fraction: function Fraction(x) {
      return x.abs();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since abs(0) = 0
      return deepMap(x, this);
    },
    Unit: function Unit(x) {
      return x.abs();
    }
  });
});

var name$3V = 'apply';
var dependencies$3W = ['typed', 'isInteger'];
var createApply = /* #__PURE__ */factory(name$3V, dependencies$3W, function (_ref) {
  var typed = _ref.typed,
    isInteger = _ref.isInteger;

  /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */
  return typed(name$3V, {
    'Array | Matrix, number | BigNumber, function': function ArrayMatrixNumberBigNumberFunction(mat, dim, callback) {
      if (!isInteger(dim)) {
        throw new TypeError('Integer number expected for dimension');
      }
      var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
      if (dim < 0 || dim >= size.length) {
        throw new IndexError(dim, size.length);
      }
      if (isMatrix(mat)) {
        return mat.create(_apply(mat.valueOf(), dim, callback));
      } else {
        return _apply(mat, dim, callback);
      }
    }
  });
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

function _apply(mat, dim, callback) {
  var i, ret, tran;
  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      return callback(mat);
    } else {
      tran = _switch(mat);
      ret = [];
      for (i = 0; i < tran.length; i++) {
        ret[i] = _apply(tran[i], dim - 1, callback);
      }
      return ret;
    }
  } else {
    ret = [];
    for (i = 0; i < mat.length; i++) {
      ret[i] = _apply(mat[i], dim - 1, callback);
    }
    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */

function _switch(mat) {
  var I = mat.length;
  var J = mat[0].length;
  var i, j;
  var ret = [];
  for (j = 0; j < J; j++) {
    var tmp = [];
    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }
    ret.push(tmp);
  }
  return ret;
}

var name$3U = 'addScalar';
var dependencies$3V = ['typed'];
var createAddScalar = /* #__PURE__ */factory(name$3U, dependencies$3V, function (_ref) {
  var typed = _ref.typed;

  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */
  return typed(name$3U, {
    'number, number': addNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.add(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
});

var name$3T = 'cbrt';
var dependencies$3U = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
var createCbrt = /* #__PURE__ */factory(name$3T, dependencies$3U, function (_ref) {
  var config = _ref.config,
    typed = _ref.typed,
    isNegative = _ref.isNegative,
    unaryMinus = _ref.unaryMinus,
    matrix = _ref.matrix,
    Complex = _ref.Complex,
    BigNumber = _ref.BigNumber,
    Fraction = _ref.Fraction;

  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  return typed(name$3T, {
    number: cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    Complex: _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    BigNumber: function BigNumber(x) {
      return x.cbrt();
    },
    Unit: _cbrtUnit,
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return deepMap(x, this);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    var arg3 = x.arg() / 3;
    var abs = x.abs(); // principal root:

    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());
    if (allRoots) {
      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */

  function _cbrtUnit(x) {
    if (x.value && isComplex(x.value)) {
      var result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      var negate = isNegative(x.value);
      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this

      var third;
      if (isBigNumber(x.value)) {
        third = new BigNumber(1).div(3);
      } else if (isFraction(x.value)) {
        third = new Fraction(1, 3);
      } else {
        third = 1 / 3;
      }
      var _result = x.pow(third);
      if (negate) {
        _result.value = unaryMinus(_result.value);
      }
      return _result;
    }
  }
});

var name$3S = 'algorithm11';
var dependencies$3T = ['typed', 'equalScalar'];
var createAlgorithm11 = /* #__PURE__ */factory(name$3S, dependencies$3T, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = aindex[k]; // invoke callback

        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr

    cptr[columns] = cindex.length; // return sparse matrix

    return s.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3R = 'algorithm14';
var dependencies$3S = ['typed'];
var createAlgorithm14 = /* #__PURE__ */factory(name$3R, dependencies$3S, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  return function algorithm14(a, b, callback, inverse) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions

    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: clone$2(asize),
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }
    return cv;
  }
});

function _slicedToArray$1(arr, i) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$1();
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$4(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit$1(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr)) return arr;
}
var name$3Q = 'ceil';
var dependencies$3R = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createCeil = /* #__PURE__ */factory(name$3Q, dependencies$3R, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    round = _ref.round,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *    math.ceil(x, n)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    math.ceil(3.212, 2)          // returns number 3.22
   *    math.ceil(3.288, 2)          // returns number 3.29
   *    math.ceil(-4.212, 2)         // returns number -4.21
   *    math.ceil(-4.782, 2)         // returns number -4.78
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('ceil', {
    number: function number(x) {
      if (nearlyEqual$1(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return ceilNumber(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if (nearlyEqual$1(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var _$split = "".concat(x, "e").split('e'),
          _$split2 = _slicedToArray$1(_$split, 2),
          number = _$split2[0],
          exponent = _$split2[1];
        var result = Math.ceil(Number("".concat(number, "e").concat(Number(exponent) + n)));
        var _$split3 = "".concat(result, "e").split('e');
        var _$split4 = _slicedToArray$1(_$split3, 2);
        number = _$split4[0];
        exponent = _$split4[1];
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.ceil();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.ceil(n);
    },
    BigNumber: function BigNumber(x) {
      if (nearlyEqual(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.ceil();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (nearlyEqual(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);
      }
    },
    Fraction: function Fraction(x) {
      return x.ceil();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.ceil(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, this);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, function (i) {
        return _this(i, n);
      });
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3P = 'cube';
var dependencies$3Q = ['typed'];
var createCube = /* #__PURE__ */factory(name$3P, dependencies$3Q, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  return typed(name$3P, {
    number: cubeNumber,
    Complex: function Complex(x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },

    BigNumber: function BigNumber(x) {
      return x.times(x).times(x);
    },
    Fraction: function Fraction(x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },

    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since cube(0) = 0
      return deepMap(x, this);
    },
    Unit: function Unit(x) {
      return x.pow(3);
    }
  });
});

var name$3O = 'exp';
var dependencies$3P = ['typed'];
var createExp = /* #__PURE__ */factory(name$3O, dependencies$3P, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name$3O, {
    number: expNumber,
    Complex: function Complex(x) {
      return x.exp();
    },
    BigNumber: function BigNumber(x) {
      return x.exp();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return deepMap(x, this);
    }
  });
});

var name$3N = 'expm1';
var dependencies$3O = ['typed', 'Complex'];
var createExpm1 = /* #__PURE__ */factory(name$3N, dependencies$3O, function (_ref) {
  var typed = _ref.typed,
    _Complex = _ref.Complex;

  /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  return typed(name$3N, {
    number: expm1Number,
    Complex: function Complex(x) {
      var r = Math.exp(x.re);
      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
    },
    BigNumber: function BigNumber(x) {
      return x.exp().minus(1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3M = 'fix';
var dependencies$3N = ['typed', 'Complex', 'matrix', 'ceil', 'floor'];
var createFix = /* #__PURE__ */factory(name$3M, dependencies$3N, function (_ref) {
  var typed = _ref.typed,
    _Complex = _ref.Complex,
    matrix = _ref.matrix,
    ceil = _ref.ceil,
    floor = _ref.floor;
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    math.fix(3.12, 1)                // returns number 3.1
   *    math.fix(3.18, 1)                // returns number 3.1
   *    math.fix(-4.12, 1)               // returns number -4.1
   *    math.fix(-4.17, 1)               // returns number -4.1
   *
   *    const c = math.complex(3.22, -2.78)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *    math.fix(c, 1)               // returns Complex 3.2 - 2.7i
   *
   *    math.fix([3.2, 3.8, -4.7])      // returns Array [3, 3, -4]
   *    math.fix([3.2, 3.8, -4.7], 1)   // returns Array [3.2, 3.8, -4.7]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x    Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                             Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}     Rounded value
   */

  return typed('fix', {
    number: function number(x) {
      return x > 0 ? floor(x) : ceil(x);
    },
    'number, number | BigNumber': function numberNumberBigNumber(x, n) {
      return x > 0 ? floor(x, n) : ceil(x, n);
    },
    Complex: function Complex(x) {
      return new _Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    'Complex, number | BigNumber': function ComplexNumberBigNumber(x, n) {
      return new _Complex(x.re > 0 ? floor(x.re, n) : ceil(x.re, n), x.im > 0 ? floor(x.im, n) : ceil(x.im, n));
    },
    BigNumber: function BigNumber(x) {
      return x.isNegative() ? ceil(x) : floor(x);
    },
    'BigNumber, number | BigNumber': function BigNumberNumberBigNumber(x, n) {
      return x.isNegative() ? ceil(x, n) : floor(x, n);
    },
    Fraction: function Fraction(x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Fraction, number | BigNumber': function FractionNumberBigNumber(x, n) {
      return x.s < 0 ? x.ceil(n) : x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since fix(0) = 0
      return deepMap(x, this);
    },
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since fix(0) = 0
      return deepMap(x, function (i) {
        return _this(i, n);
      });
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$3(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var name$3L = 'floor';
var dependencies$3M = ['typed', 'config', 'round', 'matrix', 'equalScalar'];
var createFloor = /* #__PURE__ */factory(name$3L, dependencies$3M, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    round = _ref.round,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *    math.floor(x, n)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    math.floor(3.212, 2)          // returns number 3.21
   *    math.floor(3.288, 2)          // returns number 3.28
   *    math.floor(-4.212, 2)         // returns number -4.22
   *    math.floor(-4.782, 2)         // returns number -4.79
   *
   *    const c = math.complex(3.24, -2.71)
   *    math.floor(c)                 // returns Complex 3 - 3i
   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i
   *
   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]
   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed('floor', {
    number: function number(x) {
      if (nearlyEqual$1(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return Math.floor(x);
      }
    },
    'number, number': function numberNumber(x, n) {
      if (nearlyEqual$1(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        var _$split = "".concat(x, "e").split('e'),
          _$split2 = _slicedToArray(_$split, 2),
          number = _$split2[0],
          exponent = _$split2[1];
        var result = Math.floor(Number("".concat(number, "e").concat(Number(exponent) + n)));
        var _$split3 = "".concat(result, "e").split('e');
        var _$split4 = _slicedToArray(_$split3, 2);
        number = _$split4[0];
        exponent = _$split4[1];
        return Number("".concat(number, "e").concat(Number(exponent) - n));
      }
    },
    Complex: function Complex(x) {
      return x.floor();
    },
    'Complex, number': function ComplexNumber(x, n) {
      return x.floor(n);
    },
    BigNumber: function BigNumber(x) {
      if (nearlyEqual(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.floor();
      }
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (nearlyEqual(x, round(x, n), config.epsilon)) {
        return round(x, n);
      } else {
        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);
      }
    },
    Fraction: function Fraction(x) {
      return x.floor();
    },
    'Fraction, number': function FractionNumber(x, n) {
      return x.floor(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since floor(0) = 0
      return deepMap(x, this);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {
      var _this = this;

      // deep map collection, skip zeros since ceil(0) = 0
      return deepMap(x, function (i) {
        return _this(i, n);
      });
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3K = 'algorithm01';
var dependencies$3L = ['typed'];
var createAlgorithm01 = /* #__PURE__ */factory(name$3K, dependencies$3L, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix

    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // process data types

    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    var i, j; // result (DenseMatrix)

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows

      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix

    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3J = 'algorithm04';
var dependencies$3K = ['typed', 'equalScalar'];
var createAlgorithm04 = /* #__PURE__ */factory(name$3J, dependencies$3K, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm04(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspace

    var xa = avalues && bvalues ? [] : undefined;
    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop B(:,j)

      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            var v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) {
            xb[i] = bvalues[k];
          }
        }
      } // check we need to process values (non pattern matrix)

      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3I = 'algorithm10';
var dependencies$3J = ['typed', 'DenseMatrix'];
var createAlgorithm10 = /* #__PURE__ */factory(name$3I, dependencies$3J, function (_ref) {
  var typed = _ref.typed,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows

      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j

        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return dense matrix

    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3H = 'algorithm13';
var dependencies$3I = ['typed'];
var createAlgorithm13 = /* #__PURE__ */factory(name$3H, dependencies$3I, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  return function algorithm13(a, b, callback) {
    // a arrays
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b arrays

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // c arrays

    var csize = []; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // validate each one of the dimension sizes

    for (var s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) {
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      } // update dimension in c

      csize[s] = asize[s];
    } // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions

    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    var cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (var i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (var j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }
    return cv;
  }
});

var name$3G = 'gcd';
var dependencies$3H = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createGcd = /* #__PURE__ */factory(name$3G, dependencies$3H, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    BigNumber = _ref.BigNumber,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  return typed(name$3G, {
    'number, number': gcdNumber,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.gcd(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);
      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }
      return res;
    }
  });
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm

    var zero = new BigNumber(0);
    while (!b.isZero()) {
      var r = a.mod(b);
      a = b;
      b = r;
    }
    return a.lt(zero) ? a.neg() : a;
  }
});

var name$3F = 'algorithm02';
var dependencies$3G = ['typed', 'equalScalar'];
var createAlgorithm02 = /* #__PURE__ */factory(name$3F, dependencies$3G, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix

    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)

    var cvalues = [];
    var cindex = [];
    var cptr = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update C(i,j)

        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return sparseMatrix.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3E = 'algorithm06';
var dependencies$3F = ['typed', 'equalScalar'];
var createAlgorithm06 = /* #__PURE__ */factory(name$3E, dependencies$3F, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm06(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // marks indicating value in a given row has been updated

    var u = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // scatter the values of A(:,j) into workspace

      scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace

      scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        var k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            var v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        var p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3D = 'lcm';
var dependencies$3E = ['typed', 'matrix', 'equalScalar'];
var createLcm = /* #__PURE__ */factory(name$3D, dependencies$3E, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  return typed(name$3D, {
    'number, number': lcmNumber,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.lcm(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
      var res = this(a, b);
      for (var i = 0; i < args.length; i++) {
        res = this(res, args[i]);
      }
      return res;
    }
  });
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }
    if (a.isZero()) {
      return a;
    }
    if (b.isZero()) {
      return b;
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead

    var prod = a.times(b);
    while (!b.isZero()) {
      var t = b;
      b = a.mod(t);
      a = t;
    }
    return prod.div(a).abs();
  }
});

var name$3C = 'log10';
var dependencies$3D = ['typed', 'config', 'Complex'];
var createLog10 = /* #__PURE__ */factory(name$3C, dependencies$3D, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    _Complex = _ref.Complex;

  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  return typed(name$3C, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return log10Number(x);
      } else {
        // negative value -> complex value computation
        return new _Complex(x, 0).log().div(Math.LN10);
      }
    },
    Complex: function Complex(x) {
      return new _Complex(x).log().div(Math.LN10);
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3B = 'log2';
var dependencies$3C = ['typed', 'config', 'Complex'];
var createLog2 = /* #__PURE__ */factory(name$3B, dependencies$3C, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex;

  /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */
  return typed(name$3B, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return log2Number(x);
      } else {
        // negative value -> complex value computation
        return _log2Complex(new Complex(x, 0));
      }
    },
    Complex: _log2Complex,
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.log(2);
      } else {
        // downgrade to number, return Complex valued result
        return _log2Complex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
  /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log2Complex(x) {
    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
  }
});

var name$3A = 'algorithm03';
var dependencies$3B = ['typed'];
var createAlgorithm03 = /* #__PURE__ */factory(name$3A, dependencies$3B, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    var adata = denseMatrix._data;
    var asize = denseMatrix._size;
    var adt = denseMatrix._datatype; // sparse matrix arrays

    var bvalues = sparseMatrix._values;
    var bindex = sparseMatrix._index;
    var bptr = sparseMatrix._ptr;
    var bsize = sparseMatrix._size;
    var bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix

    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)

    var cdata = []; // initialize dense matrix

    for (var z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns in b

    for (var j = 0; j < columns; j++) {
      // column mark
      var mark = j + 1; // values in column j

      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        var i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace

      for (var y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix

    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3z = 'algorithm05';
var dependencies$3A = ['typed', 'equalScalar'];
var createAlgorithm05 = /* #__PURE__ */factory(name$3z, dependencies$3A, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm05(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var xa = cvalues ? [] : undefined;
    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // vars

    var i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop values B(:,j)

      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace

        wb[i] = mark; // check we need to process values

        if (xb) {
          xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)

      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          var wai = wa[i];
          var wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            var va = wai === mark ? xa[i] : zero;
            var vb = wbi === mark ? xb[i] : zero; // Cij

            var vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3y = 'algorithm12';
var dependencies$3z = ['typed', 'DenseMatrix'];
var createAlgorithm12 = /* #__PURE__ */factory(name$3y, dependencies$3z, function (_ref) {
  var typed = _ref.typed,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    var avalues = s._values;
    var aindex = s._index;
    var aptr = s._ptr;
    var asize = s._size;
    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cdata = []; // workspaces

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // loop columns

    for (var j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // values in j

      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        var r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows

      for (var i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j

        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return dense matrix

    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3x = 'mod';
var dependencies$3y = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createMod = /* #__PURE__ */factory(name$3x, dependencies$3y, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  return typed(name$3x, {
    'number, number': modNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isNeg()) {
        throw new Error('Cannot calculate mod for a negative divisor');
      }
      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.compare(0) < 0) {
        throw new Error('Cannot calculate mod for a negative divisor');
      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend

      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3w = 'multiplyScalar';
var dependencies$3x = ['typed'];
var createMultiplyScalar = /* #__PURE__ */factory(name$3w, dependencies$3x, function (_ref) {
  var typed = _ref.typed;

  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */
  return typed('multiplyScalar', {
    'number, number': multiplyNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
      var res = y.clone();
      res.value = res.value === null ? res._normalize(x) : this(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
      var res = x.clone();
      res.value = res.value === null ? res._normalize(y) : this(res.value, y);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.multiply(y);
    }
  });
});

var name$3v = 'multiply';
var dependencies$3w = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];
var createMultiply = /* #__PURE__ */factory(name$3v, dependencies$3w, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    addScalar = _ref.addScalar,
    multiplyScalar = _ref.multiplyScalar,
    equalScalar = _ref.equalScalar,
    dot = _ref.dot;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }
            break;
          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }
            break;
          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }
        break;
      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }
            break;
          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }
            break;
          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }
        break;
      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */

  function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) {
      throw new Error('Cannot multiply two empty vectors');
    }
    return dot(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */

  function _multiplyVectorMatrix(a, b) {
    // process storage
    if (b.storage() !== 'dense') {
      throw new Error('Support for SparseMatrix not implemented');
    }
    return _multiplyVectorDenseMatrix(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */

  function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var alength = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result

    var c = []; // loop matrix columns

    for (var j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      var sum = mf(adata[0], bdata[0][j]); // loop vector

      for (var i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }
      c[j] = sum;
    } // return matrix

    return a.createDenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */

  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
    'DenseMatrix, any': _multiplyDenseMatrixVector,
    'SparseMatrix, any': _multiplySparseMatrixVector
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */

  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */

  function _multiplyDenseMatrixVector(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result

    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // sum (do not initialize it with zero)

      var sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (var j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }
      c[i] = sum;
    } // return matrix

    return a.createDenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */

  function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b dense

    var bdata = b._data;
    var bsize = b._size;
    var bdt = b._datatype; // rows & columns

    var arows = asize[0];
    var acolumns = asize[1];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result

    var c = []; // loop matrix a rows

    for (var i = 0; i < arows; i++) {
      // current row
      var row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (var j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (var x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }
        c[i][j] = sum;
      }
    } // return matrix

    return a.createDenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */

  function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    var adata = a._data;
    var asize = a._size;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate b matrix

    if (!bvalues) {
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    } // rows & columns

    var arows = asize[0];
    var bcolumns = bsize[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = b.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      var kb0 = bptr[jb];
      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        var last = 0; // loop a rows

        for (var i = 0; i < arows; i++) {
          // column mark
          var mark = i + 1; // C[i, jb]

          var cij = void 0; // values in b column j

          for (var kb = kb0; kb < kb1; kb++) {
            // row
            var ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0

          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr

    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */

  function _multiplySparseMatrixVector(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0]; // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (var ib = 0; ib < brows; ib++) {
      // b[ib]
      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          var ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c

    for (var p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      var ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr

    cptr[1] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */

  function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense

    var bdata = b._data;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var brows = b._size[0];
    var bcolumns = b._size[1]; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // equalScalar signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result

    var cvalues = [];
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = []; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // rows in jb

      for (var ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            var ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c

      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        var ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr

    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */

  function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var adt = a._datatype; // b sparse

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bdt = b._datatype; // rows & columns

    var arows = a._size[0];
    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    var values = avalues && bvalues; // datatype

    var dt; // addScalar signature to use

    var af = addScalar; // multiplyScalar signature to use

    var mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // c matrix

    var c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    var w = []; // variables

    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (var jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      var mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)

      if (values) {
        // copy values from x to column jb of c
        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          var ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr

    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */

  return typed(name$3v, extend({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function ArrayArray(x, y) {
      // check dimensions
      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation

      var m = this(matrix(x), matrix(y)); // return array or scalar

      return isMatrix(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // dimensions
      var xsize = x.size();
      var ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions

      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix

        return _multiplyVectorMatrix(x, y);
      } // process y dimensions

      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix

      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use Matrix * Matrix implementation
      return this(x, matrix(y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use Matrix * Matrix implementation
      return this(matrix(x, y.storage()), y);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);
      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }
      return result;
    }
  }, multiplyScalar.signatures));
});

var name$3u = 'nthRoot';
var dependencies$3v = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
var createNthRoot = /* #__PURE__ */factory(name$3u, dependencies$3v, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    _BigNumber = _ref.BigNumber;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
  return typed(name$3u, {
    number: function number(x) {
      return nthRootNumber(x, 2);
    },
    'number, number': nthRootNumber,
    BigNumber: function BigNumber(x) {
      return _bigNthRoot(x, new _BigNumber(2));
    },
    Complex: function Complex(x) {
      throw new Error(complexErr);
    },
    'Complex, number': function ComplexNumber(x, y) {
      throw new Error(complexErr);
    },
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function ArrayMatrix(x) {
      return this(x, 2);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse + sparse
        return algorithm06(x, y, this);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // dense + sparse
        return algorithm01(x, y, this, false);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse - scalar
        return algorithm11(y, x, this, true);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    var precision = _BigNumber.precision;
    var Big = _BigNumber.clone({
      precision: precision + 2
    });
    var zero = new _BigNumber(0);
    var one = new Big(1);
    var inv = root.isNegative();
    if (inv) {
      root = root.neg();
    }
    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }
    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity

    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }
    if (!a.isFinite()) {
      return inv ? zero : a;
    }
    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
});

var name$3t = 'sign';
var dependencies$3u = ['typed', 'BigNumber', 'Fraction', 'complex'];
var createSign = /* #__PURE__ */factory(name$3t, dependencies$3u, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber,
    complex = _ref.complex,
    _Fraction = _ref.Fraction;

  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  return typed(name$3t, {
    number: signNumber,
    Complex: function Complex(x) {
      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x.cmp(0));
    },
    Fraction: function Fraction(x) {
      return new _Fraction(x.s, 1);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sign(0) = 0
      return deepMap(x, this);
    },
    Unit: function Unit(x) {
      return this(x.value);
    }
  });
});

var name$3s = 'sqrt';
var dependencies$3t = ['config', 'typed', 'Complex'];
var createSqrt = /* #__PURE__ */factory(name$3s, dependencies$3t, function (_ref) {
  var config = _ref.config,
    typed = _ref.typed,
    Complex = _ref.Complex;

  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  return typed('sqrt', {
    number: _sqrtNumber,
    Complex: function Complex(x) {
      return x.sqrt();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return deepMap(x, this);
    },
    Unit: function Unit(x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (isNaN(x)) {
      return NaN;
    } else if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new Complex(x, 0).sqrt();
    }
  }
});

var name$3r = 'square';
var dependencies$3s = ['typed'];
var createSquare = /* #__PURE__ */factory(name$3r, dependencies$3s, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  return typed(name$3r, {
    number: squareNumber,
    Complex: function Complex(x) {
      return x.mul(x);
    },
    BigNumber: function BigNumber(x) {
      return x.times(x);
    },
    Fraction: function Fraction(x) {
      return x.mul(x);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since square(0) = 0
      return deepMap(x, this);
    },
    Unit: function Unit(x) {
      return x.pow(2);
    }
  });
});

var name$3q = 'subtract';
var dependencies$3r = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
var createSubtract = /* #__PURE__ */factory(name$3q, dependencies$3r, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    addScalar = _ref.addScalar,
    unaryMinus = _ref.unaryMinus,
    DenseMatrix = _ref.DenseMatrix;
  // TODO: split function subtract in two: subtract and subtractScalar
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  return typed(name$3q, {
    'number, number': function numberNumber(x, y) {
      return x - y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (x.value === null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }
      if (y.value === null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }
      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }
      var res = x.clone();
      res.value = this(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      checkEqualDimensions(x, y);
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, unaryMinus(y), addScalar);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */

function checkEqualDimensions(x, y) {
  var xsize = x.size();
  var ysize = y.size();
  if (xsize.length !== ysize.length) {
    throw new DimensionError(xsize.length, ysize.length);
  }
}

var name$3p = 'xgcd';
var dependencies$3q = ['typed', 'config', 'matrix', 'BigNumber'];
var createXgcd = /* #__PURE__ */factory(name$3p, dependencies$3q, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    BigNumber = _ref.BigNumber;

  /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  return typed(name$3p, {
    'number, number': function numberNumber(a, b) {
      var res = xgcdNumber(a, b);
      return config.matrix === 'Array' ? res : matrix(res);
    },
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction
  });
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */

  function _xgcdBigNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    var
    // used to swap two variables
    t;
    var
    // quotient
    q;
    var
    // remainder
    r;
    var zero = new BigNumber(0);
    var one = new BigNumber(1);
    var x = zero;
    var lastx = one;
    var y = one;
    var lasty = zero;
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }
    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }
    var res;
    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }
    return config.matrix === 'Array' ? res : matrix(res);
  }
});

var name$3o = 'algorithm09';
var dependencies$3p = ['typed', 'equalScalar'];
var createAlgorithm09 = /* #__PURE__ */factory(name$3o, dependencies$3p, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm09(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = avalues && bvalues ? [] : undefined;
    var cindex = [];
    var cptr = []; // workspaces

    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      var mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          var vb = w[i] === mark ? x[i] : zero; // invoke f

          var vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$3n = 'dotMultiply';
var dependencies$3o = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
var createDotMultiply = /* #__PURE__ */factory(name$3n, dependencies$3o, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    multiplyScalar = _ref.multiplyScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm09 = createAlgorithm09({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  return typed(name$3n, {
    'any, any': multiplyScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, multiplyScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, multiplyScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, multiplyScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, multiplyScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
});

/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
function bitAndBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitAnd');
  }
  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }
  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }
  if (y.isZero() || x.eq(-1)) {
    return y;
  }
  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() === y.isNegative()) {
        return x;
      }
      return new BigNumber(0);
    }
    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }
      if (x.isNegative()) {
        return new BigNumber(0);
      }
      return y;
    }
    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }
      if (y.isNegative()) {
        return new BigNumber(0);
      }
      return x;
    }
  }
  return bitwise(x, y, function (a, b) {
    return a & b;
  });
}
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */

function bitNotBigNumber(x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }
  var BigNumber = x.constructor;
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  var result = x.plus(new BigNumber(1));
  result.s = -result.s || null;
  BigNumber.config({
    precision: prevPrec
  });
  return result;
}
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */

function bitOrBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitOr');
  }
  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }
  var negOne = new BigNumber(-1);
  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }
  if (y.isZero() || x.eq(negOne)) {
    return x;
  }
  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
      return negOne;
    }
    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }
    return x.isFinite() ? y : x;
  }
  return bitwise(x, y, function (a, b) {
    return a | b;
  });
}
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */

function bitwise(x, y, func) {
  var BigNumber = x.constructor;
  var xBits, yBits;
  var xSign = +(x.s < 0);
  var ySign = +(y.s < 0);
  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));
    for (var i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }
  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));
    for (var _i = 0; _i < yBits.length; ++_i) {
      yBits[_i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }
  var minBits, maxBits, minSign;
  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }
  var shortLen = minBits.length;
  var longLen = maxBits.length;
  var expFuncVal = func(xSign, ySign) ^ 1;
  var outVal = new BigNumber(expFuncVal ^ 1);
  var twoPower = new BigNumber(1);
  var two = new BigNumber(2);
  var prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }
    twoPower = twoPower.times(two);
  }
  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }
    twoPower = twoPower.times(two);
  }
  BigNumber.config({
    precision: prevPrec
  });
  if (expFuncVal === 0) {
    outVal.s = -outVal.s;
  }
  return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */

function decCoefficientToBinaryString(x) {
  // Convert to string
  var a = x.d; // array with digits

  var r = a[0] + '';
  for (var i = 1; i < a.length; ++i) {
    var s = a[i] + '';
    for (var z = 7 - s.length; z--;) {
      s = '0' + s;
    }
    r += s;
  }
  var j = r.length;
  while (r.charAt(j) === '0') {
    j--;
  }
  var xe = x.e;
  var str = r.slice(0, j + 1 || 1);
  var strL = str.length;
  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      xe -= strL;
      while (xe--) {
        str += '0';
      }
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  } // Convert from base 10 (decimal) to base 2

  var arr = [0];
  for (var _i2 = 0; _i2 < str.length;) {
    var arrL = arr.length;
    while (arrL--) {
      arr[arrL] *= 10;
    }
    arr[0] += parseInt(str.charAt(_i2++)); // convert to int

    for (var _j = 0; _j < arr.length; ++_j) {
      if (arr[_j] > 1) {
        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
          arr[_j + 1] = 0;
        }
        arr[_j + 1] += arr[_j] >> 1;
        arr[_j] &= 1;
      }
    }
  }
  return arr.reverse();
}
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */

function bitXor$1(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitXor');
  }
  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }
  if (x.isZero()) {
    return y;
  }
  if (y.isZero()) {
    return x;
  }
  if (x.eq(y)) {
    return new BigNumber(0);
  }
  var negOne = new BigNumber(-1);
  if (x.eq(negOne)) {
    return bitNotBigNumber(y);
  }
  if (y.eq(negOne)) {
    return bitNotBigNumber(x);
  }
  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }
    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
  }
  return bitwise(x, y, function (a, b) {
    return a ^ b;
  });
}
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */

function leftShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function leftShift');
  }
  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }
  if (x.isZero() || y.isZero()) {
    return x;
  }
  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  } // Math.pow(2, y) is fully precise for y < 55, and fast

  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }
  return x.times(new BigNumber(2).pow(y));
}
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */

function rightArithShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function rightArithShift');
  }
  var BigNumber = x.constructor;
  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }
  if (x.isZero() || y.isZero()) {
    return x;
  }
  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }
    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }
    return new BigNumber(0);
  } // Math.pow(2, y) is fully precise for y < 55, and fast

  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }
  return x.div(new BigNumber(2).pow(y)).floor();
}

var name$3m = 'bitAnd';
var dependencies$3n = ['typed', 'matrix', 'equalScalar'];
var createBitAnd = /* #__PURE__ */factory(name$3m, dependencies$3n, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */

  return typed(name$3m, {
    'number, number': bitAndNumber,
    'BigNumber, BigNumber': bitAndBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3l = 'bitNot';
var dependencies$3m = ['typed'];
var createBitNot = /* #__PURE__ */factory(name$3l, dependencies$3m, function (_ref) {
  var typed = _ref.typed;

  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  return typed(name$3l, {
    number: bitNotNumber,
    BigNumber: bitNotBigNumber,
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3k = 'bitOr';
var dependencies$3l = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createBitOr = /* #__PURE__ */factory(name$3k, dependencies$3l, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */

  return typed(name$3k, {
    'number, number': bitOrNumber,
    'BigNumber, BigNumber': bitOrBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3j = 'algorithm07';
var dependencies$3k = ['typed', 'DenseMatrix'];
var createAlgorithm07 = /* #__PURE__ */factory(name$3j, dependencies$3k, function (_ref) {
  var typed = _ref.typed,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm07(a, b, callback) {
    // sparse matrix arrays
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars

    var i, j; // result arrays

    var cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspaces

    var xa = [];
    var xb = []; // marks indicating we have a value in x for a given column

    var wa = [];
    var wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      var mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace

      _scatter(b, j, wb, xb, mark); // loop rows

      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        var va = wa[i] === mark ? xa[i] : zero;
        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return dense matrix

    return new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
  function _scatter(m, j, w, x, mark) {
    // a arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop values in column j

    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      var i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  }
});

var name$3i = 'bitXor';
var dependencies$3j = ['typed', 'matrix', 'DenseMatrix'];
var createBitXor = /* #__PURE__ */factory(name$3i, dependencies$3j, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */

  return typed(name$3i, {
    'number, number': bitXorNumber,
    'BigNumber, BigNumber': bitXor$1,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3h = 'arg';
var dependencies$3i = ['typed'];
var createArg = /* #__PURE__ */factory(name$3h, dependencies$3i, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  return typed(name$3h, {
    number: function number(x) {
      return Math.atan2(0, x);
    },
    BigNumber: function BigNumber(x) {
      return x.constructor.atan2(0, x);
    },
    Complex: function Complex(x) {
      return x.arg();
    },
    // TODO: implement BigNumber support for function arg
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3g = 'conj';
var dependencies$3h = ['typed'];
var createConj = /* #__PURE__ */factory(name$3g, dependencies$3h, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  return typed(name$3g, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.conjugate();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3f = 'im';
var dependencies$3g = ['typed'];
var createIm = /* #__PURE__ */factory(name$3f, dependencies$3g, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  return typed(name$3f, {
    number: function number(x) {
      return 0;
    },
    BigNumber: function BigNumber(x) {
      return x.mul(0);
    },
    Complex: function Complex(x) {
      return x.im;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3e = 're';
var dependencies$3f = ['typed'];
var createRe = /* #__PURE__ */factory(name$3e, dependencies$3f, function (_ref) {
  var typed = _ref.typed;

  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  return typed(name$3e, {
    number: function number(x) {
      return x;
    },
    BigNumber: function BigNumber(x) {
      return x;
    },
    Complex: function Complex(x) {
      return x.re;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3d = 'not';
var dependencies$3e = ['typed'];
var createNot = /* #__PURE__ */factory(name$3d, dependencies$3e, function (_ref) {
  var typed = _ref.typed;

  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  return typed(name$3d, {
    number: notNumber,
    Complex: function Complex(x) {
      return x.re === 0 && x.im === 0;
    },
    BigNumber: function BigNumber(x) {
      return x.isZero() || x.isNaN();
    },
    Unit: function Unit(x) {
      return x.value !== null ? this(x.value) : true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$3c = 'or';
var dependencies$3d = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createOr = /* #__PURE__ */factory(name$3c, dependencies$3d, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */

  return typed(name$3c, {
    'number, number': orNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3b = 'xor';
var dependencies$3c = ['typed', 'matrix', 'DenseMatrix'];
var createXor = /* #__PURE__ */factory(name$3b, dependencies$3c, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */

  return typed(name$3b, {
    'number, number': xorNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$3a = 'concat';
var dependencies$3b = ['typed', 'matrix', 'isInteger'];
var createConcat = /* #__PURE__ */factory(name$3a, dependencies$3b, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    isInteger = _ref.isInteger;

  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  return typed(name$3a, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
      var i;
      var len = args.length;
      var dim = -1; // zero-based dimension

      var prevDim;
      var asMatrix = false;
      var matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if (isMatrix(arg)) {
          asMatrix = true;
        }
        if (isNumber(arg) || isBigNumber(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate

          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }
          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new IndexError(dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          var m = clone$2(arg).valueOf();
          var size = arraySize(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim !== prevDim) {
            throw new DimensionError(prevDim + 1, dim + 1);
          }
        }
      }
      if (matrices.length === 0) {
        throw new SyntaxError('At least one matrix expected');
      }
      var res = matrices.shift();
      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }
      return asMatrix ? matrix(res) : res;
    },
    '...string': function string(args) {
      return args.join('');
    }
  });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */

function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length !== b.length) {
      throw new DimensionError(a.length, b.length);
    }
    var c = [];
    for (var i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }
    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}

var name$39 = 'column';
var dependencies$3a = ['typed', 'Index', 'matrix', 'range'];
var createColumn = /* #__PURE__ */factory(name$39, dependencies$3a, function (_ref) {
  var typed = _ref.typed,
    Index = _ref.Index,
    matrix = _ref.matrix,
    range = _ref.range;

  /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [[2], [4]]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */
  return typed(name$39, {
    'Matrix, number': _column,
    'Array, number': function ArrayNumber(value, column) {
      return _column(matrix(clone$2(value)), column).valueOf();
    }
  });
  /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */

  function _column(value, column) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }
    validateIndex(column, value.size()[1]);
    var rowRange = range(0, value.size()[0]);
    var index = new Index(rowRange, column);
    return value.subset(index);
  }
});

var name$38 = 'cross';
var dependencies$39 = ['typed', 'matrix', 'subtract', 'multiply'];
var createCross = /* #__PURE__ */factory(name$38, dependencies$39, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    subtract = _ref.subtract,
    multiply = _ref.multiply;

  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  return typed(name$38, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    var highestDimension = Math.max(arraySize(x).length, arraySize(y).length);
    x = squeeze$1(x);
    y = squeeze$1(y);
    var xSize = arraySize(x);
    var ySize = arraySize(y);
    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }
    var product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];
    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
});

var name$37 = 'diag';
var dependencies$38 = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
var createDiag = /* #__PURE__ */factory(name$37, dependencies$38, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix,
    SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  return typed(name$37, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    Array: function Array(x) {
      return _diag(x, 0, arraySize(x), null);
    },
    'Array, number': function ArrayNumber(x, k) {
      return _diag(x, k, arraySize(x), null);
    },
    'Array, BigNumber': function ArrayBigNumber(x, k) {
      return _diag(x, k.toNumber(), arraySize(x), null);
    },
    'Array, string': function ArrayString(x, format) {
      return _diag(x, 0, arraySize(x), format);
    },
    'Array, number, string': function ArrayNumberString(x, k, format) {
      return _diag(x, k, arraySize(x), format);
    },
    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), arraySize(x), format);
    },
    Matrix: function Matrix(x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function MatrixNumber(x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function MatrixString(x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function MatrixNumberString(x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!isInteger$1(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }
    var kSuper = k > 0 ? k : 0;
    var kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }
    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }
  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    var ms = [l + kSub, l + kSuper];
    if (format && format !== 'sparse' && format !== 'dense') {
      throw new TypeError("Unknown matrix type ".concat(format, "\""));
    } // create diagonal matrix

    var m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }
  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if (isMatrix(x)) {
      // get diagonal matrix
      var dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) {
          return matrix(dm, format);
        }
        return dm;
      }
      return dm.valueOf();
    } // vector size

    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    var vector = []; // loop diagonal

    for (var i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix

    return format !== null ? matrix(vector) : vector;
  }
});

function _typeof$9(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$9 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$9 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$9(obj);
}

// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
function memoize(fn, hasher) {
  return function memoize() {
    if (_typeof$9(memoize.cache) !== 'object') {
      memoize.cache = {};
    }
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }
    var hash = hasher ? hasher(args) : JSON.stringify(args);
    if (!(hash in memoize.cache)) {
      memoize.cache[hash] = fn.apply(fn, args);
    }
    return memoize.cache[hash];
  };
}
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */

function maxArgumentCount(fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    var count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
}

var name$36 = 'filter';
var dependencies$37 = ['typed'];
var createFilter = /* #__PURE__ */factory(name$36, dependencies$37, function (_ref) {
  var typed = _ref.typed;

  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  return typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create(filterRegExp(x.toArray(), test));
    }
  });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  return filter$1(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}

var name$35 = 'flatten';
var dependencies$36 = ['typed', 'matrix'];
var createFlatten = /* #__PURE__ */factory(name$35, dependencies$36, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;

  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  return typed(name$35, {
    Array: function Array(x) {
      return flatten$1(clone$2(x));
    },
    Matrix: function Matrix(x) {
      var flat = flatten$1(clone$2(x.toArray())); // TODO: return the same matrix type as x

      return matrix(flat);
    }
  });
});

var name$34 = 'forEach';
var dependencies$35 = ['typed'];
var createForEach = /* #__PURE__ */factory(name$34, dependencies$35, function (_ref) {
  var typed = _ref.typed;

  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  return typed(name$34, {
    'Array, function': _forEach,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.forEach(callback);
    }
  });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */

function _forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      forEach$1(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };
  recurse(array, []);
}

var name$33 = 'getMatrixDataType';
var dependencies$34 = ['typed'];
var createGetMatrixDataType = /* #__PURE__ */factory(name$33, dependencies$34, function (_ref) {
  var typed = _ref.typed;

  /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */
  return typed(name$33, {
    Array: function Array(x) {
      return getArrayDataType(x, typeOf$1);
    },
    Matrix: function Matrix(x) {
      return x.getDataType();
    }
  });
});

var name$32 = 'identity';
var dependencies$33 = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
var createIdentity = /* #__PURE__ */factory(name$32, dependencies$33, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    BigNumber = _ref.BigNumber,
    DenseMatrix = _ref.DenseMatrix,
    SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  return typed(name$32, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber': function numberBigNumber(rows) {
      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, string': function numberBigNumberString(rows, format) {
      return _identity(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
      return _identity(rows, cols, format);
    },
    Array: function Array(size) {
      return _identityVector(size);
    },
    'Array, string': function ArrayString(size, format) {
      return _identityVector(size, format);
    },
    Matrix: function Matrix(size) {
      return _identityVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function MatrixString(size, format) {
      return _identityVector(size.valueOf(), format);
    }
  });
  function _identityVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];
      case 1:
        return _identity(size[0], size[0], format);
      case 2:
        return _identity(size[0], size[1], format);
      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */

  function _identity(rows, cols, format) {
    // BigNumber constructor with the right precision
    var Big = isBigNumber(rows) || isBigNumber(cols) ? BigNumber : null;
    if (isBigNumber(rows)) rows = rows.toNumber();
    if (isBigNumber(cols)) cols = cols.toNumber();
    if (!isInteger$1(rows) || rows < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }
    if (!isInteger$1(cols) || cols < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }
    var one = Big ? new BigNumber(1) : 1;
    var defaultValue = Big ? new Big(0) : 0;
    var size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // create diagonal matrix (use optimized implementation for storage format)
      if (format === 'sparse') {
        return SparseMatrix.diagonal(size, one, 0, defaultValue);
      }
      if (format === 'dense') {
        return DenseMatrix.diagonal(size, one, 0, defaultValue);
      }
      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    } // create and resize array

    var res = resize$1([], size, defaultValue); // fill in ones on the diagonal

    var minimum = rows < cols ? rows : cols; // fill diagonal

    for (var d = 0; d < minimum; d++) {
      res[d][d] = one;
    }
    return res;
  }
});

var name$31 = 'kron';
var dependencies$32 = ['typed', 'matrix', 'multiplyScalar'];
var createKron = /* #__PURE__ */factory(name$31, dependencies$32, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    multiplyScalar = _ref.multiplyScalar;

  /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
  return typed(name$31, {
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if (arraySize(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }
    if (arraySize(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }
    if (arraySize(a).length > 2 || arraySize(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }
    var t = [];
    var r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        r = [];
        t.push(r);
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        });
      });
    }) && t;
  }
});

var name$30 = 'map';
var dependencies$31 = ['typed'];
var createMap = /* #__PURE__ */factory(name$30, dependencies$31, function (_ref) {
  var typed = _ref.typed;

  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  return typed(name$30, {
    'Array, function': _map$1,
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.map(callback);
    }
  });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */

function _map$1(array, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  var recurse = function recurse(value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };
  return recurse(array, []);
}

var name$2$ = 'diff';
var dependencies$30 = ['typed', 'matrix', 'subtract', 'number'];
var createDiff = /* #__PURE__ */factory(name$2$, dependencies$30, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    subtract = _ref.subtract,
    number = _ref.number;

  /**
   * Create a new matrix or array of the difference between elements of the given array
   * The optional dim parameter lets you specify the dimension to evaluate the difference of
   * If no dimension parameter is passed it is assumed as dimension 0
   *
   * Dimension is zero-based in javascript and one-based in the parser and can be a number or bignumber
   * Arrays must be 'rectangular' meaning arrays like [1, 2]
   * If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays
   *
   * Syntax:
   *
   *     math.diff(arr)
   *     math.diff(arr, dim)
   *
   * Examples:
   *
   *     const arr = [1, 2, 4, 7, 0]
   *     math.diff(arr) // returns [1, 2, 3, -7] (no dimension passed so 0 is assumed)
   *     math.diff(math.matrix(arr)) // returns math.matrix([1, 2, 3, -7])
   *
   *     const arr = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 4]]
   *     math.diff(arr) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 0) // returns [[0, 0, 0, 0, 0], [8, 6, 4, 2, -1]]
   *     math.diff(arr, 1) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *     math.diff(arr, math.bignumber(1)) // returns [[1, 1, 1, 1], [1, 1, 1, 1], [-1, -1, -1, -2]]
   *
   *     math.diff(arr, 2) // throws RangeError as arr is 2 dimensional not 3
   *     math.diff(arr, -1) // throws RangeError as negative dimensions are not allowed
   *
   *     // These will all produce the same result
   *     math.diff([[1, 2], [3, 4]])
   *     math.diff([math.matrix([1, 2]), math.matrix([3, 4])])
   *     math.diff([[1, 2], math.matrix([3, 4])])
   *     math.diff([math.matrix([1, 2]), [3, 4]])
   *     // They do not produce the same result as  math.diff(math.matrix([[1, 2], [3, 4]])) as this returns a matrix
   *
   * See Also:
   *
   *      sum
   *      subtract
   *      partitionSelect
   *
   * @param {Array | Matrix} arr    An array or matrix
   * @param {number} dim            Dimension
   * @return {Array | Matrix}       Difference between array elements in given dimension
   */
  return typed(name$2$, {
    'Array | Matrix': function ArrayMatrix(arr) {
      // No dimension specified => assume dimension 0
      if (isMatrix(arr)) {
        return matrix(_diff(arr.toArray()));
      } else {
        return _diff(arr);
      }
    },
    'Array | Matrix, number': function ArrayMatrixNumber(arr, dim) {
      if (!isInteger$1(dim)) throw new RangeError('Dimension must be a whole number');
      if (isMatrix(arr)) {
        return matrix(_recursive(arr.toArray(), dim));
      } else {
        return _recursive(arr, dim);
      }
    },
    'Array | Matrix, BigNumber': function ArrayMatrixBigNumber(arr, dim) {
      return this(arr, number(dim));
    }
  });
  /**
   * Recursively find the correct dimension in the array/matrix
   * Then Apply _diff to that dimension
   *
   * @param {Array} arr      The array
   * @param {number} dim     Dimension
   * @return {Array}         resulting array
   */

  function _recursive(arr, dim) {
    if (isMatrix(arr)) {
      arr = arr.toArray(); // Makes sure arrays like [ matrix([0, 1]), matrix([1, 0]) ] are processed properly
    }

    if (!Array.isArray(arr)) {
      throw RangeError('Array/Matrix does not have that many dimensions');
    }
    if (dim > 0) {
      var result = [];
      arr.forEach(function (element) {
        result.push(_recursive(element, dim - 1));
      });
      return result;
    } else if (dim === 0) {
      return _diff(arr);
    } else {
      throw RangeError('Cannot have negative dimension');
    }
  }
  /**
   * Difference between elements in the array
   *
   * @param {Array} arr      An array
   * @return {Array}         resulting array
   */

  function _diff(arr) {
    var result = [];
    var size = arr.length;
    if (size < 2) {
      return arr;
    }
    for (var i = 1; i < size; i++) {
      result.push(_ElementDiff(arr[i - 1], arr[i]));
    }
    return result;
  }
  /**
   * Difference between 2 objects
   *
   * @param {Object} obj1    First object
   * @param {Object} obj2    Second object
   * @return {Array}         resulting array
   */

  function _ElementDiff(obj1, obj2) {
    // Convert matrices to arrays
    if (isMatrix(obj1)) obj1 = obj1.toArray();
    if (isMatrix(obj2)) obj2 = obj2.toArray();
    var obj1IsArray = Array.isArray(obj1);
    var obj2IsArray = Array.isArray(obj2);
    if (obj1IsArray && obj2IsArray) {
      return _ArrayDiff(obj1, obj2);
    }
    if (!obj1IsArray && !obj2IsArray) {
      return subtract(obj2, obj1); // Difference is (second - first) NOT (first - second)
    }

    throw TypeError('Cannot calculate difference between 1 array and 1 non-array');
  }
  /**
   * Difference of elements in 2 arrays
   *
   * @param {Array} arr1     Array 1
   * @param {Array} arr2     Array 2
   * @return {Array}         resulting array
   */

  function _ArrayDiff(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      throw RangeError('Not all sub-arrays have the same length');
    }
    var result = [];
    var size = arr1.length;
    for (var i = 0; i < size; i++) {
      result.push(_ElementDiff(arr1[i], arr2[i]));
    }
    return result;
  }
});

var name$2_ = 'ones';
var dependencies$2$ = ['typed', 'config', 'matrix', 'BigNumber'];
var createOnes = /* #__PURE__ */factory(name$2_, dependencies$2$, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  return typed('ones', {
    '': function _() {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];
      if (typeof last === 'string') {
        var format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    Array: _ones,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    var hasBigNumbers = _normalize(size);
    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;
    _validate(size);
    if (format) {
      // return a matrix
      var m = matrix(format);
      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }
      return m;
    } else {
      // return an Array
      var arr = [];
      if (size.length > 0) {
        return resize$1(arr, size, defaultValue);
      }
      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers

  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments

  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
});

function noBignumber() {
  throw new Error('No "bignumber" implementation available');
}
function noFraction() {
  throw new Error('No "fraction" implementation available');
}
function noMatrix() {
  throw new Error('No "matrix" implementation available');
}

var name$2Z = 'range';
var dependencies$2_ = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRange = /* #__PURE__ */factory(name$2Z, dependencies$2_, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    bignumber = _ref.bignumber,
    smaller = _ref.smaller,
    smallerEq = _ref.smallerEq,
    larger = _ref.larger,
    largerEq = _ref.largerEq;

  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  return typed(name$2Z, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    string: _strRange,
    'string, boolean': _strRange,
    'number, number': function numberNumber(start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function numberNumberNumber(start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
      var BigNumber = start.constructor;
      return _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
      var BigNumber = start.constructor;
      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });
  function _out(arr) {
    if (config.matrix === 'Matrix') {
      return matrix ? matrix(arr) : noMatrix();
    }
    return arr;
  }
  function _strRange(str, includeEnd) {
    var r = _parse(str);
    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }
    var fn;
    if (config.number === 'BigNumber') {
      if (bignumber === undefined) {
        noBignumber();
      }
      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */

  function _rangeEx(start, end, step) {
    var array = [];
    var x = start;
    if (step > 0) {
      while (smaller(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (larger(x, end)) {
        array.push(x);
        x += step;
      }
    }
    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */

  function _rangeInc(start, end, step) {
    var array = [];
    var x = start;
    if (step > 0) {
      while (smallerEq(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (largerEq(x, end)) {
        array.push(x);
        x += step;
      }
    }
    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */

  function _bigRangeEx(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;
    if (step.gt(zero)) {
      while (smaller(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (larger(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }
    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */

  function _bigRangeInc(start, end, step) {
    var zero = bignumber(0);
    var array = [];
    var x = start;
    if (step.gt(zero)) {
      while (smallerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (largerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }
    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */

  function _parse(str) {
    var args = str.split(':'); // number

    var nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    var invalid = nums.some(function (num) {
      return isNaN(num);
    });
    if (invalid) {
      return null;
    }
    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };
      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };
      default:
        return null;
    }
  }
});

var name$2Y = 'reshape';
var dependencies$2Z = ['typed', 'isInteger', 'matrix'];
var createReshape = /* #__PURE__ */factory(name$2Y, dependencies$2Z, function (_ref) {
  var typed = _ref.typed,
    isInteger = _ref.isInteger,
    matrix = _ref.matrix;

  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  return typed(name$2Y, {
    'Matrix, Array': function MatrixArray(x, sizes) {
      if (x.reshape) {
        return x.reshape(sizes);
      } else {
        return matrix(reshape$1(x.valueOf(), sizes));
      }
    },
    'Array, Array': function ArrayArray(x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return reshape$1(x, sizes);
    }
  });
});

/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }
  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}
ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;

var name$2X = 'resize';
var dependencies$2Y = ['config', 'matrix'];
var createResize = /* #__PURE__ */factory(name$2X, dependencies$2Y, function (_ref) {
  var config = _ref.config,
    matrix = _ref.matrix;

  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  return function resize(x, size, defaultValue) {
    if (arguments.length !== 2 && arguments.length !== 3) {
      throw new ArgumentsError('resize', arguments.length, 2, 3);
    }
    if (isMatrix(size)) {
      size = size.valueOf(); // get Array
    }

    if (isBigNumber(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return !isBigNumber(value) ? value : value.toNumber();
      });
    } // check x is a Matrix

    if (isMatrix(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }
    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix

    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';
    if (size.length === 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }
      return clone$2(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }
      x = clone$2(x);
      var res = resize$1(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }
    if (size.length !== 1) {
      throw new DimensionError(size.length, 1);
    }
    var len = size[0];
    if (typeof len !== 'number' || !isInteger$1(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$1(size) + ')');
    }
    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      var res = str;
      for (var i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }
      return res;
    } else {
      return str;
    }
  }
});

var name$2W = 'rotate';
var dependencies$2X = ['typed', 'multiply', 'rotationMatrix'];
var createRotate = /* #__PURE__ */factory(name$2W, dependencies$2X, function (_ref) {
  var typed = _ref.typed,
    multiply = _ref.multiply,
    rotationMatrix = _ref.rotationMatrix;

  /**
     * Rotate a vector of size 1x2 counter-clockwise by a given angle
     * Rotate a vector of size 1x3 counter-clockwise by a given angle around the given axis
     *
     * Syntax:
     *
     *    math.rotate(w, theta)
     *    math.rotate(w, theta, v)
     *
     * Examples:
     *
     *    math.rotate([11, 12], math.pi / 2)                           // returns matrix([-12, 11])
     *    math.rotate(matrix([11, 12]), math.pi / 2)                   // returns matrix([-12, 11])
     *
     *    math.rotate([1, 0, 0], unit('90deg'), [0, 0, 1])             // returns matrix([0, 1, 0])
     *    math.rotate(matrix([1, 0, 0]), unit('90deg'), [0, 0, 1])     // returns matrix([0, 1, 0])
     *
     *    math.rotate([1, 0], math.complex(1 + i))                     // returns matrix([cos(1 + i) - sin(1 + i), sin(1 + i) + cos(1 + i)])
     *
     * See also:
     *
     *    matrix, rotationMatrix
     *
     * @param {Array | Matrix} w                             Vector to rotate
     * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
     * @param {Array | Matrix} [v]                           Rotation axis
     * @return {Array | Matrix}                              Multiplication of the rotation matrix and w
     */
  return typed(name$2W, {
    'Array , number | BigNumber | Complex | Unit': function ArrayNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);
      var matrixRes = multiply(rotationMatrix(theta), w);
      return matrixRes.toArray();
    },
    'Matrix , number | BigNumber | Complex | Unit': function MatrixNumberBigNumberComplexUnit(w, theta) {
      _validateSize(w, 2);
      return multiply(rotationMatrix(theta), w);
    },
    'Array, number | BigNumber | Complex | Unit, Array | Matrix': function ArrayNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);
      var matrixRes = multiply(rotationMatrix(theta, v), w);
      return matrixRes;
    },
    'Matrix, number | BigNumber | Complex | Unit, Array | Matrix': function MatrixNumberBigNumberComplexUnitArrayMatrix(w, theta, v) {
      _validateSize(w, 3);
      return multiply(rotationMatrix(theta, v), w);
    }
  });
  function _validateSize(v, expectedSize) {
    var actualSize = Array.isArray(v) ? arraySize(v) : v.size();
    if (actualSize.length > 2) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }
    if (actualSize.length === 2 && actualSize[1] !== 1) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }
    if (actualSize[0] !== expectedSize) {
      throw new RangeError("Vector must be of dimensions 1x".concat(expectedSize));
    }
  }
});

var name$2V = 'rotationMatrix';
var dependencies$2W = ['typed', 'config', 'multiplyScalar', 'addScalar', 'unaryMinus', 'norm', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix', 'cos', 'sin'];
var createRotationMatrix = /* #__PURE__ */factory(name$2V, dependencies$2W, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    multiplyScalar = _ref.multiplyScalar,
    addScalar = _ref.addScalar,
    unaryMinus = _ref.unaryMinus,
    norm = _ref.norm,
    BigNumber = _ref.BigNumber,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix,
    SparseMatrix = _ref.SparseMatrix,
    cos = _ref.cos,
    sin = _ref.sin;

  /**
   * Create a 2-dimensional counter-clockwise rotation matrix (2x2) for a given angle (expressed in radians).
   * Create a 2-dimensional counter-clockwise rotation matrix (3x3) by a given angle (expressed in radians) around a given axis (1x3).
   *
   * Syntax:
   *
   *    math.rotationMatrix(theta)
   *    math.rotationMatrix(theta, format)
   *    math.rotationMatrix(theta, [v])
   *    math.rotationMatrix(theta, [v], format)
   *
   * Examples:
   *
   *    math.rotationMatrix(math.pi / 2)                      // returns [[0, -1], [1, 0]]
   *    math.rotationMatrix(math.bignumber(1))                // returns [[bignumber(cos(1)), bignumber(-sin(1))], [bignumber(sin(1)), bignumber(cos(1))]]
   *    math.rotationMatrix(math.complex(1 + i))              // returns [[cos(1 + i), -sin(1 + i)], [sin(1 + i), cos(1 + i)]]
   *    math.rotationMatrix(math.unit('1rad'))                // returns [[cos(1), -sin(1)], [sin(1), cos(1)]]
   *
   *    math.rotationMatrix(math.pi / 2, [0, 1, 0])           // returns [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]
   *    math.rotationMatrix(math.pi / 2, matrix([0, 1, 0]))   // returns matrix([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
   *
   *
   * See also:
   *
   *    matrix, cos, sin
   *
   *
   * @param {number | BigNumber | Complex | Unit} theta    Rotation angle
   * @param {Array | Matrix} [v]                           Rotation axis
   * @param {string} [format]                              Result Matrix storage format
   * @return {Array | Matrix}                              Rotation matrix
   */
  return typed(name$2V, {
    '': function _() {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    string: function string(format) {
      return matrix(format);
    },
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(theta) {
      return _rotationMatrix2x2(theta, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber | Complex | Unit, string': function numberBigNumberComplexUnitString(theta, format) {
      return _rotationMatrix2x2(theta, format);
    },
    'number | BigNumber | Complex | Unit, Array': function numberBigNumberComplexUnitArray(theta, v) {
      var matrixV = matrix(v);
      _validateVector(matrixV);
      return _rotationMatrix3x3(theta, matrixV, undefined);
    },
    'number | BigNumber | Complex | Unit, Matrix': function numberBigNumberComplexUnitMatrix(theta, v) {
      _validateVector(v);
      var storageType = v.storage() || (config.matrix === 'Matrix' ? 'dense' : undefined);
      return _rotationMatrix3x3(theta, v, storageType);
    },
    'number | BigNumber | Complex | Unit, Array, string': function numberBigNumberComplexUnitArrayString(theta, v, format) {
      var matrixV = matrix(v);
      _validateVector(matrixV);
      return _rotationMatrix3x3(theta, matrixV, format);
    },
    'number | BigNumber | Complex | Unit, Matrix, string': function numberBigNumberComplexUnitMatrixString(theta, v, format) {
      _validateVector(v);
      return _rotationMatrix3x3(theta, v, format);
    }
  });
  /**
   * Returns 2x2 matrix of 2D rotation of angle theta
   *
   * @param {number | BigNumber | Complex | Unit} theta  The rotation angle
   * @param {string} format                              The result Matrix storage format
   * @returns {Matrix}
   * @private
   */

  function _rotationMatrix2x2(theta, format) {
    var Big = isBigNumber(theta);
    var minusOne = Big ? new BigNumber(-1) : -1;
    var cosTheta = cos(theta);
    var sinTheta = sin(theta);
    var data = [[cosTheta, multiplyScalar(minusOne, sinTheta)], [sinTheta, cosTheta]];
    return _convertToFormat(data, format);
  }
  function _validateVector(v) {
    var size = v.size();
    if (size.length < 1 || size[0] !== 3) {
      throw new RangeError('Vector must be of dimensions 1x3');
    }
  }
  function _mul(array) {
    return array.reduce(function (p, curr) {
      return multiplyScalar(p, curr);
    });
  }
  function _convertToFormat(data, format) {
    if (format) {
      if (format === 'sparse') {
        return new SparseMatrix(data);
      }
      if (format === 'dense') {
        return new DenseMatrix(data);
      }
      throw new TypeError("Unknown matrix type \"".concat(format, "\""));
    }
    return data;
  }
  /**
   * Returns a 3x3 matrix of rotation of angle theta around vector v
   *
   * @param {number | BigNumber | Complex | Unit} theta The rotation angle
   * @param {Matrix} v                                  The rotation axis vector
   * @param {string} format                             The storage format of the resulting matrix
   * @returns {Matrix}
   * @private
   */

  function _rotationMatrix3x3(theta, v, format) {
    var normV = norm(v);
    if (normV === 0) {
      throw new RangeError('Rotation around zero vector');
    }
    var Big = isBigNumber(theta) ? BigNumber : null;
    var one = Big ? new Big(1) : 1;
    var minusOne = Big ? new Big(-1) : -1;
    var vx = Big ? new Big(v.get([0]) / normV) : v.get([0]) / normV;
    var vy = Big ? new Big(v.get([1]) / normV) : v.get([1]) / normV;
    var vz = Big ? new Big(v.get([2]) / normV) : v.get([2]) / normV;
    var c = cos(theta);
    var oneMinusC = addScalar(one, unaryMinus(c));
    var s = sin(theta);
    var r11 = addScalar(c, _mul([vx, vx, oneMinusC]));
    var r12 = addScalar(_mul([vx, vy, oneMinusC]), _mul([minusOne, vz, s]));
    var r13 = addScalar(_mul([vx, vz, oneMinusC]), _mul([vy, s]));
    var r21 = addScalar(_mul([vx, vy, oneMinusC]), _mul([vz, s]));
    var r22 = addScalar(c, _mul([vy, vy, oneMinusC]));
    var r23 = addScalar(_mul([vy, vz, oneMinusC]), _mul([minusOne, vx, s]));
    var r31 = addScalar(_mul([vx, vz, oneMinusC]), _mul([minusOne, vy, s]));
    var r32 = addScalar(_mul([vy, vz, oneMinusC]), _mul([vx, s]));
    var r33 = addScalar(c, _mul([vz, vz, oneMinusC]));
    var data = [[r11, r12, r13], [r21, r22, r23], [r31, r32, r33]];
    return _convertToFormat(data, format);
  }
});

var name$2U = 'row';
var dependencies$2V = ['typed', 'Index', 'matrix', 'range'];
var createRow = /* #__PURE__ */factory(name$2U, dependencies$2V, function (_ref) {
  var typed = _ref.typed,
    Index = _ref.Index,
    matrix = _ref.matrix,
    range = _ref.range;

  /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [[3, 4]]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */
  return typed(name$2U, {
    'Matrix, number': _row,
    'Array, number': function ArrayNumber(value, row) {
      return _row(matrix(clone$2(value)), row).valueOf();
    }
  });
  /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */

  function _row(value, row) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }
    validateIndex(row, value.size()[0]);
    var columnRange = range(0, value.size()[1]);
    var index = new Index(row, columnRange);
    return value.subset(index);
  }
});

var name$2T = 'size';
var dependencies$2U = ['typed', 'config', '?matrix'];
var createSize = /* #__PURE__ */factory(name$2T, dependencies$2U, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix;

  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  return typed(name$2T, {
    Matrix: function Matrix(x) {
      return x.create(x.size());
    },
    Array: arraySize,
    string: function string(x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();
    }
  });
});

var name$2S = 'squeeze';
var dependencies$2T = ['typed', 'matrix'];
var createSqueeze = /* #__PURE__ */factory(name$2S, dependencies$2T, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;

  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  return typed(name$2S, {
    Array: function Array(x) {
      return squeeze$1(clone$2(x));
    },
    Matrix: function Matrix(x) {
      var res = squeeze$1(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    any: function any(x) {
      // scalar
      return clone$2(x);
    }
  });
});

function _typeof$8(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$8 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$8 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$8(obj);
}
/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */

function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }
  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }
  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?

function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    object[prop] = value;
    return value;
  }
  throw new Error('No access to property "' + prop + '"');
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */

function isSafeProperty(object, prop) {
  if (!object || _typeof$8(object) !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length

  if (hasOwnProperty(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor

  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply

  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }
  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?

function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */

function isSafeMethod(object, method) {
  if (object === null || object === undefined || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.

  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
    return false;
  } // SAFE: whitelisted
  // e.g toString

  if (hasOwnProperty(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor

  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply

  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }
  return true;
}
function isPlainObject(object) {
  return _typeof$8(object) === 'object' && object && object.constructor === Object;
}
var safeNativeProperties = {
  length: true,
  name: true
};
var safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};

var name$2R = 'subset';
var dependencies$2S = ['typed', 'matrix'];
var createSubset = /* #__PURE__ */factory(name$2R, dependencies$2S, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;

  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  return typed(name$2R, {
    // get subset
    'Array, Index': function ArrayIndex(value, index) {
      var m = matrix(value);
      var subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },

    'Matrix, Index': function MatrixIndex(value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
      return matrix(clone$2(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
      return matrix(clone$2(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */

function _getSubstring(str, index) {
  if (!isIndex(index)) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }
  if (index.size().length !== 1) {
    throw new DimensionError(index.size().length, 1);
  } // validate whether the range is out of range

  var strLen = str.length;
  validateIndex(index.min()[0], strLen);
  validateIndex(index.max()[0], strLen);
  var range = index.dimension(0);
  var substr = '';
  range.forEach(function (v) {
    substr += str.charAt(v);
  });
  return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */

function _setSubstring(str, index, replacement, defaultValue) {
  if (!index || index.isIndex !== true) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }
  if (index.size().length !== 1) {
    throw new DimensionError(index.size().length, 1);
  }
  if (defaultValue !== undefined) {
    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
      throw new TypeError('Single character expected as defaultValue');
    }
  } else {
    defaultValue = ' ';
  }
  var range = index.dimension(0);
  var len = range.size()[0];
  if (len !== replacement.length) {
    throw new DimensionError(range.size()[0], replacement.length);
  } // validate whether the range is out of range

  var strLen = str.length;
  validateIndex(index.min()[0]);
  validateIndex(index.max()[0]); // copy the string into an array with characters

  var chars = [];
  for (var i = 0; i < strLen; i++) {
    chars[i] = str.charAt(i);
  }
  range.forEach(function (v, i) {
    chars[v] = replacement.charAt(i[0]);
  }); // initialize undefined characters with a space

  if (chars.length > strLen) {
    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
      if (!chars[_i]) {
        chars[_i] = defaultValue;
      }
    }
  }
  return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */

function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }
  var key = index.dimension(0);
  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }
  return getSafeProperty(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */

function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new DimensionError(index.size(), 1);
  }
  var key = index.dimension(0);
  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone

  var updated = clone$2(object);
  setSafeProperty(updated, key, replacement);
  return updated;
}

var name$2Q = 'transpose';
var dependencies$2R = ['typed', 'matrix'];
var createTranspose = /* #__PURE__ */factory(name$2Q, dependencies$2R, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;

  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  return typed('transpose', {
    Array: function Array(x) {
      // use dense matrix implementation
      return this(matrix(x)).valueOf();
    },
    Matrix: function Matrix(x) {
      // matrix size
      var size = x.size(); // result

      var c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;
        case 2:
          {
            // rows and columns
            var rows = size[0];
            var columns = size[1]; // check columns

            if (columns === 0) {
              // throw exception
              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format$1(size) + ')');
            } // process storage format

            switch (x.storage()) {
              case 'dense':
                c = _denseTranspose(x, rows, columns);
                break;
              case 'sparse':
                c = _sparseTranspose(x, rows, columns);
                break;
            }
          }
          break;
        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format$1(this._size) + ')');
      }
      return c;
    },
    // scalars
    any: function any(x) {
      return clone$2(x);
    }
  });
  function _denseTranspose(m, rows, columns) {
    // matrix array
    var data = m._data; // transposed matrix data

    var transposed = [];
    var transposedRow; // loop columns

    for (var j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (var i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = clone$2(data[i][j]);
      }
    } // return matrix

    return m.createDenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  }
  function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result matrices

    var cvalues = values ? [] : undefined;
    var cindex = [];
    var cptr = []; // row counts

    var w = [];
    for (var x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars

    var p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum

    var sum = 0; // initialize cptr with the cummulative sum of row counts

    for (var i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr

    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        var q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) {
          cvalues[q] = clone$2(values[k]);
        }
      }
    } // return matrix

    return m.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  }
});

var name$2P = 'ctranspose';
var dependencies$2Q = ['typed', 'transpose', 'conj'];
var createCtranspose = /* #__PURE__ */factory(name$2P, dependencies$2Q, function (_ref) {
  var typed = _ref.typed,
    transpose = _ref.transpose,
    conj = _ref.conj;

  /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */
  return typed(name$2P, {
    any: function any(x) {
      return conj(transpose(x));
    }
  });
});

var name$2O = 'zeros';
var dependencies$2P = ['typed', 'config', 'matrix', 'BigNumber'];
var createZeros = /* #__PURE__ */factory(name$2O, dependencies$2P, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    BigNumber = _ref.BigNumber;

  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  return typed(name$2O, {
    '': function _() {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function numberBigNumberString(size) {
      var last = size[size.length - 1];
      if (typeof last === 'string') {
        var format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    Array: _zeros,
    Matrix: function Matrix(size) {
      var format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function ArrayMatrixString(size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    var hasBigNumbers = _normalize(size);
    var defaultValue = hasBigNumbers ? new BigNumber(0) : 0;
    _validate(size);
    if (format) {
      // return a matrix
      var m = matrix(format);
      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }
      return m;
    } else {
      // return an Array
      var arr = [];
      if (size.length > 0) {
        return resize$1(arr, size, defaultValue);
      }
      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers

  function _normalize(size) {
    var hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if (isBigNumber(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments

  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !isInteger$1(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}); // TODO: zeros contains almost the same code as ones. Reuse this?

/* eslint-disable no-loss-of-precision */
var name$2N = 'erf';
var dependencies$2O = ['typed'];
var createErf = /* #__PURE__ */factory(name$2N, dependencies$2O, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  return typed('name', {
    number: function number(x) {
      var y = Math.abs(x);
      if (y >= MAX_NUM) {
        return sign$2(x);
      }
      if (y <= THRESH) {
        return sign$2(x) * erf1(y);
      }
      if (y <= 4.0) {
        return sign$2(x) * (1 - erfc2(y));
      }
      return sign$2(x) * (1 - erfc3(y));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, this);
    } // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)
  });
  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */

  function erf1(y) {
    var ysq = y * y;
    var xnum = P$1[0][4] * ysq;
    var xden = ysq;
    var i;
    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + P$1[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }
    return y * (xnum + P$1[0][3]) / (xden + Q[0][3]);
  }
  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */

  function erfc2(y) {
    var xnum = P$1[1][8] * y;
    var xden = y;
    var i;
    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + P$1[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }
    var result = (xnum + P$1[1][7]) / (xden + Q[1][7]);
    var ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */

  function erfc3(y) {
    var ysq = 1 / (y * y);
    var xnum = P$1[2][5] * ysq;
    var xden = ysq;
    var i;
    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + P$1[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }
    var result = ysq * (xnum + P$1[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    var del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */

var THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */

var SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var P$1 = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */

var MAX_NUM = Math.pow(2, 53);

var name$2M = 'mode';
var dependencies$2N = ['typed', 'isNaN', 'isNumeric'];
var createMode = /* #__PURE__ */factory(name$2M, dependencies$2N, function (_ref) {
  var typed = _ref.typed,
    isNaN = _ref.isNaN,
    isNumeric = _ref.isNumeric;

  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  return typed(name$2M, {
    'Array | Matrix': _mode,
    '...': function _(args) {
      return _mode(args);
    }
  });
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */

  function _mode(values) {
    values = flatten$1(values.valueOf());
    var num = values.length;
    if (num === 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }
    var count = {};
    var mode = [];
    var max = 0;
    for (var i = 0; i < values.length; i++) {
      var value = values[i];
      if (isNumeric(value) && isNaN(value)) {
        throw new Error('Cannot calculate mode of an array containing NaN values');
      }
      if (!(value in count)) {
        count[value] = 0;
      }
      count[value]++;
      if (count[value] === max) {
        mode.push(value);
      } else if (count[value] > max) {
        max = count[value];
        mode = [value];
      }
    }
    return mode;
  }
});

/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */

function improveErrorMessage(err, fnName, value) {
  // TODO: add information with the index (also needs transform in expression parser)
  var details;
  if (String(err).indexOf('Unexpected type') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + typeOf$1(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
  }
  if (String(err).indexOf('complex numbers') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + typeOf$1(value) + ', value: ' + JSON.stringify(value) + ')' : '';
    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
  }
  return err;
}

var name$2L = 'prod';
var dependencies$2M = ['typed', 'config', 'multiplyScalar', 'numeric'];
var createProd = /* #__PURE__ */factory(name$2L, dependencies$2M, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    multiplyScalar = _ref.multiplyScalar,
    numeric = _ref.numeric;

  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  return typed(name$2L, {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
    },

    // prod(a, b, c, d, ...)
    '...': function _(args) {
      return _prod(args);
    }
  });
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    var prod;
    deepForEach(array, function (value) {
      try {
        prod = prod === undefined ? value : multiplyScalar(prod, value);
      } catch (err) {
        throw improveErrorMessage(err, 'prod', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (typeof prod === 'string') {
      prod = numeric(prod, config.number);
    }
    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }
    return prod;
  }
});

var name$2K = 'format';
var dependencies$2L = ['typed'];
var createFormat = /* #__PURE__ */factory(name$2K, dependencies$2L, function (_ref) {
  var typed = _ref.typed;

  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation: always have exponential notation,
   *        and select the exponent to be a multiple of 3.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  return typed(name$2K, {
    any: format$1,
    'any, Object | function | number': format$1
  });
});

function baseFormatter(base) {
  var prefixes = {
    2: '0b',
    8: '0o',
    16: '0x'
  };
  var prefix = prefixes[base];
  return function (n) {
    if (n > Math.pow(2, 31) - 1 || n < -Math.pow(2, 31)) {
      throw new Error('Value must be in range [-2^31, 2^31-1]');
    }
    if (!isInteger$1(n)) {
      throw new Error('Value must be an integer');
    }
    if (n < 0) {
      n = n + Math.pow(2, 32);
    }
    return "".concat(prefix).concat(n.toString(base));
  };
}
var dependencies$2K = ['typed'];
function createBaseFormatterFactory(name, base) {
  return factory(name, dependencies$2K, function (_ref) {
    var typed = _ref.typed;
    return typed(name, {
      number: baseFormatter(base)
    });
  });
}

/**
 * Format a number as binary.
 *
 * Syntax:
 *
 *    math.bin(value)
 *
 * Examples:
 *
 *    //the following outputs "0b10"
 *    math.bin(2)
 *
 * See also:
 *
 *    oct
 *    hex
 *
 * @param {number} value    Value to be stringified
 * @return {string}         The formatted value
 */

var createBin = createBaseFormatterFactory('bin', 2);

/**
 * Format a number as octal.
 *
 * Syntax:
 *
 *    math.oct(value)
 *
 * Examples:
 *
 *    //the following outputs "0o70"
 *    math.oct(56)
 *
 * See also:
 *
 *    bin
 *    hex
 *
 * @param {number} value  Value to be stringified
 * @return {string}       The formatted value
 */

var createOct = createBaseFormatterFactory('oct', 8);

/**
 * Format a number as hexadecimal.
 *
 * Syntax:
 *
 *    math.hex(value)
 *
 * Examples:
 *
 *    //the following outputs "0xF0"
 *    math.hex(240)
 *
 * See also:
 *
 *    oct
 *    bin
 *
 * @param {number} value    Value to be stringified
 * @return {string}         The formatted value
 */

var createHex = createBaseFormatterFactory('hex', 16);

var name$2J = 'print';
var dependencies$2J = ['typed'];
var createPrint = /* #__PURE__ */factory(name$2J, dependencies$2J, function (_ref) {
  var typed = _ref.typed;

  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */
  return typed(name$2J, {
    // note: Matrix will be converted automatically to an Array
    'string, Object | Array': _print,
    'string, Object | Array, number | Object': _print
  });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */

function _print(template, values, options) {
  return template.replace(/\$([\w.]+)/g, function (original, key) {
    var keys = key.split('.');
    var value = values[keys.shift()];
    while (keys.length && value !== undefined) {
      var k = keys.shift();
      value = k ? value[k] : value + '.';
    }
    if (value !== undefined) {
      if (!isString(value)) {
        return format$1(value, options);
      } else {
        return value;
      }
    }
    return original;
  });
}

var name$2I = 'to';
var dependencies$2I = ['typed', 'matrix'];
var createTo = /* #__PURE__ */factory(name$2I, dependencies$2I, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */

  return typed(name$2I, {
    'Unit, Unit | string': function UnitUnitString(x, unit) {
      return x.to(unit);
    },
    'Matrix, Matrix': function MatrixMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'Matrix, any': function MatrixAny(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, this, false);
    },
    'any, Matrix': function anyMatrix(x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2H = 'isPrime';
var dependencies$2H = ['typed'];
var createIsPrime = /* #__PURE__ */factory(name$2H, dependencies$2H, function (_ref) {
  var typed = _ref.typed;

  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name$2H, {
    number: function number(x) {
      if (x * 0 !== 0) {
        return false;
      }
      if (x <= 3) {
        return x > 1;
      }
      if (x % 2 === 0 || x % 3 === 0) {
        return false;
      }
      for (var i = 5; i * i <= x; i += 6) {
        if (x % i === 0 || x % (i + 2) === 0) {
          return false;
        }
      }
      return true;
    },
    BigNumber: function BigNumber(n) {
      if (n.toNumber() * 0 !== 0) {
        return false;
      }
      if (n.lte(3)) return n.gt(1);
      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;
      for (var i = 5; n.gte(i * i); i += 6) {
        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {
          return false;
        }
      }
      return true;
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$2G = 'numeric';
var dependencies$2G = ['number', '?bignumber', '?fraction'];
var createNumeric = /* #__PURE__ */factory(name$2G, dependencies$2G, function (_ref) {
  var _number = _ref.number,
    bignumber = _ref.bignumber,
    fraction = _ref.fraction;
  var validInputTypes = {
    string: true,
    number: true,
    BigNumber: true,
    Fraction: true
  }; // Load the conversion functions for each output type

  var validOutputTypes = {
    number: function number(x) {
      return _number(x);
    },
    BigNumber: bignumber ? function (x) {
      return bignumber(x);
    } : noBignumber,
    Fraction: fraction ? function (x) {
      return fraction(x);
    } : noFraction
  };
  /**
   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
   *
   * Syntax:
   *
   *    math.numeric(x)
   *
   * Examples:
   *
   *    math.numeric('4')                           // returns number 4
   *    math.numeric('4', 'number')                 // returns number 4
   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
   *    math.numeric('4', 'Fraction')               // returns Fraction 4
   *    math.numeric(4, 'Fraction')                 // returns Fraction 4
   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
   *
   * See also:
   *
   *    number, fraction, bignumber, string, format
   *
   * @param {string | number | BigNumber | Fraction } value
   *              A numeric value or a string containing a numeric value
   * @param {string} outputType
   *              Desired numeric output type.
   *              Available values: 'number', 'BigNumber', or 'Fraction'
   * @return {number | BigNumber | Fraction}
   *              Returns an instance of the numeric in the requested type
   */

  return function numeric(value, outputType) {
    var inputType = typeOf$1(value);
    if (!(inputType in validInputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
    }
    if (!(outputType in validOutputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
    }
    if (outputType === inputType) {
      return value;
    } else {
      return validOutputTypes[outputType](value);
    }
  };
});

var name$2F = 'divideScalar';
var dependencies$2F = ['typed', 'numeric'];
var createDivideScalar = /* #__PURE__ */factory(name$2F, dependencies$2F, function (_ref) {
  var typed = _ref.typed,
    numeric = _ref.numeric;

  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */
  return typed(name$2F, {
    'number, number': function numberNumber(x, y) {
      return x / y;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, typeOf$1(y));
      res.value = this(res.value === null ? res._normalize(one) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
      var res = y.clone();
      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      var one = numeric(1, typeOf$1(x));
      res.value = this(x, y.value === null ? y._normalize(one) : y.value);
      return res;
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return x.divide(y);
    }
  });
});

var name$2E = 'pow';
var dependencies$2E = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
var createPow = /* #__PURE__ */factory(name$2E, dependencies$2E, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    identity = _ref.identity,
    multiply = _ref.multiply,
    matrix = _ref.matrix,
    number = _ref.number,
    fraction = _ref.fraction,
    Complex = _ref.Complex;

  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  return typed(name$2E, {
    'number, number': _pow,
    'Complex, Complex': function ComplexComplex(x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        } else {
          return _pow(x.valueOf(), y.valueOf());
        }
      } else {
        return x.pow(y);
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function ArrayBigNumber(x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !isInteger$1(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        var yFrac = fraction(y);
        var yNum = number(yFrac);
        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {// fraction() throws an error if y is Infinity, etc.
      } // Unable to express y as a fraction, so continue on
    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity

    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }
    if (isInteger$1(y) || x >= 0 || config.predictable) {
      return powNumber(x, y);
    } else {
      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }
      return new Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */

  function _powArray(x, y) {
    if (!isInteger$1(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix

    var s = arraySize(x);
    if (s.length !== 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }
    if (s[0] !== s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }
    var res = identity(s[0]).valueOf();
    var px = x;
    while (y >= 1) {
      if ((y & 1) === 1) {
        res = multiply(px, res);
      }
      y >>= 1;
      px = multiply(px, px);
    }
    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */

  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }
});

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var NO_INT = 'Number of decimals in function round must be an integer';
var name$2D = 'round';
var dependencies$2D = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
var createRound = /* #__PURE__ */factory(name$2D, dependencies$2D, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    zeros = _ref.zeros,
    BigNumber = _ref.BigNumber,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.22)             // returns number 3
   *    math.round(3.82)             // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(3.22, 1)          // returns number 3.2
   *    math.round(3.88, 1)          // returns number 3.8
   *    math.round(-4.21, 1)         // returns number -4.2
   *    math.round(-4.71, 1)         // returns number -4.7
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  return typed(name$2D, _objectSpread$1(_objectSpread$1({}, roundNumberSignatures), {}, {
    Complex: function Complex(x) {
      return x.round();
    },
    'Complex, number': function ComplexNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }
      return x.round(n);
    },
    'Complex, BigNumber': function ComplexBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }
      var _n = n.toNumber();
      return x.round(_n);
    },
    'number, BigNumber': function numberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }
      return new BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    BigNumber: function BigNumber(x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }
      return x.toDecimalPlaces(n.toNumber());
    },
    Fraction: function Fraction(x) {
      return x.round();
    },
    'Fraction, number': function FractionNumber(x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }
      return x.round(n);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since round(0) = 0
      return deepMap(x, this);
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }
      return algorithm12(y, x, this, true);
    },
    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  }));
});
var roundNumberSignatures = {
  number: roundNumber,
  'number, number': function numberNumber(x, n) {
    if (!isInteger$1(n)) {
      throw new TypeError(NO_INT);
    }
    if (n < 0 || n > 15) {
      throw new Error('Number of decimals in function round must be in te range of 0-15');
    }
    return roundNumber(x, n);
  }
};

var name$2C = 'log';
var dependencies$2C = ['config', 'typed', 'divideScalar', 'Complex'];
var createLog = /* #__PURE__ */factory(name$2C, dependencies$2C, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    divideScalar = _ref.divideScalar,
    Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  return typed(name$2C, {
    number: function number(x) {
      if (x >= 0 || config.predictable) {
        return logNumber(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log();
      }
    },
    Complex: function Complex(x) {
      return x.log();
    },
    BigNumber: function BigNumber(x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(this(x), this(base));
    }
  });
});

var name$2B = 'log1p';
var dependencies$2B = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
var createLog1p = /* #__PURE__ */factory(name$2B, dependencies$2B, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    divideScalar = _ref.divideScalar,
    log = _ref.log,
    Complex = _ref.Complex;

  /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */
  return typed(name$2B, {
    number: function number(x) {
      if (x >= -1 || config.predictable) {
        return log1p$1(x);
      } else {
        // negative value -> complex value computation
        return _log1pComplex(new Complex(x, 0));
      }
    },
    Complex: _log1pComplex,
    BigNumber: function BigNumber(x) {
      var y = x.plus(1);
      if (!y.isNegative() || config.predictable) {
        return y.ln();
      } else {
        // downgrade to number, return Complex valued result
        return _log1pComplex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    },
    'any, any': function anyAny(x, base) {
      // calculate logarithm for a specified base, log1p(x, base)
      return divideScalar(this(x), log(base));
    }
  });
  /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log1pComplex(x) {
    var xRe1p = x.re + 1;
    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
  }
});

var name$2A = 'nthRoots';
var dependencies$2A = ['config', 'typed', 'divideScalar', 'Complex'];
var createNthRoots = /* #__PURE__ */factory(name$2A, dependencies$2A, function (_ref) {
  var typed = _ref.typed;
    _ref.config;
    _ref.divideScalar;
    var Complex = _ref.Complex;

  /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */
  // This is used to fix float artifacts for zero-valued components.
  var _calculateExactResult = [function realPos(val) {
    return new Complex(val, 0);
  }, function imagPos(val) {
    return new Complex(0, val);
  }, function realNeg(val) {
    return new Complex(-val, 0);
  }, function imagNeg(val) {
    return new Complex(0, -val);
  }];
  /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */

  function _nthComplexRoots(a, root) {
    if (root < 0) throw new Error('Root must be greater than zero');
    if (root === 0) throw new Error('Root must be non-zero');
    if (root % 1 !== 0) throw new Error('Root must be an integer');
    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
    var aIsNumeric = typeof a === 'number';
    var offset; // determine the offset (argument of a)/(pi/2)

    if (aIsNumeric || a.re === 0 || a.im === 0) {
      if (aIsNumeric) {
        offset = 2 * +(a < 0); // numeric value on the real axis
      } else if (a.im === 0) {
        offset = 2 * +(a.re < 0); // complex value on the real axis
      } else {
        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
      }
    }

    var arg = a.arg();
    var abs = a.abs();
    var roots = [];
    var r = Math.pow(abs, 1 / root);
    for (var k = 0; k < root; k++) {
      var halfPiFactor = (offset + 4 * k) / root;
      /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */

      if (halfPiFactor === Math.round(halfPiFactor)) {
        roots.push(_calculateExactResult[halfPiFactor % 4](r));
        continue;
      }
      roots.push(new Complex({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      }));
    }
    return roots;
  }
  /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex}            Rounded value
   */

  return typed(name$2A, {
    Complex: function Complex(x) {
      return _nthComplexRoots(x, 2);
    },
    'Complex, number': _nthComplexRoots
  });
});

var name$2z = 'dotPow';
var dependencies$2z = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
var createDotPow = /* #__PURE__ */factory(name$2z, dependencies$2z, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar,
    matrix = _ref.matrix,
    pow = _ref.pow,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  return typed(name$2z, {
    'any, any': pow,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, pow, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, pow, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, pow, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, pow);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2y = 'dotDivide';
var dependencies$2y = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
var createDotDivide = /* #__PURE__ */factory(name$2y, dependencies$2y, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    divideScalar = _ref.divideScalar,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  return typed(name$2y, {
    'any, any': divideScalar,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, divideScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, divideScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, divideScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, divideScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, divideScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, divideScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
});

function createSolveValidation(_ref) {
  var DenseMatrix = _ref.DenseMatrix;

  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  return function solveValidation(m, b, copy) {
    var mSize = m.size();
    if (mSize.length !== 2) {
      throw new RangeError('Matrix must be two dimensional (size: ' + format$1(mSize) + ')');
    }
    var rows = mSize[0];
    var columns = mSize[1];
    if (rows !== columns) {
      throw new RangeError('Matrix must be square (size: ' + format$1(mSize) + ')');
    }
    var data = [];
    if (isMatrix(b)) {
      var bSize = b.size();
      var bdata = b._data; // 1-dim vector

      if (bSize.length === 1) {
        if (bSize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }
        for (var i = 0; i < rows; i++) {
          data[i] = [bdata[i]];
        }
        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // 2-dim column

      if (bSize.length === 2) {
        if (bSize[0] !== rows || bSize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }
        if (isDenseMatrix(b)) {
          if (copy) {
            data = [];
            for (var _i = 0; _i < rows; _i++) {
              data[_i] = [bdata[_i][0]];
            }
            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          }
          return b;
        }
        if (isSparseMatrix(b)) {
          for (var _i2 = 0; _i2 < rows; _i2++) {
            data[_i2] = [0];
          }
          var values = b._values;
          var index = b._index;
          var ptr = b._ptr;
          for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
            var _i3 = index[k];
            data[_i3][0] = values[k];
          }
          return new DenseMatrix({
            data: data,
            size: [rows, 1],
            datatype: b._datatype
          });
        }
      }
      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }
    if (isArray(b)) {
      var bsize = arraySize(b);
      if (bsize.length === 1) {
        if (bsize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }
        for (var _i4 = 0; _i4 < rows; _i4++) {
          data[_i4] = [b[_i4]];
        }
        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }
      if (bsize.length === 2) {
        if (bsize[0] !== rows || bsize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        }
        for (var _i5 = 0; _i5 < rows; _i5++) {
          data[_i5] = [b[_i5][0]];
        }
        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }
      throw new RangeError('Dimension mismatch. The right side has to be either 1- or 2-dimensional vector.');
    }
  };
}

var name$2x = 'lsolve';
var dependencies$2x = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolve = /* #__PURE__ */factory(name$2x, dependencies$2x, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix. Throws an error if there's no solution.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lsolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name$2x, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);
      var r = _denseForwardSubstitution(m, b);
      return r.valueOf();
    }
  });
  function _denseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;
      var xj = void 0;
      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = mdata[j][j];
        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j + 1; i < rows; i++) {
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // degenerate row, we can choose any value
        xj = 0;
      }
      x[j] = [xj];
    }
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
  function _sparseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns

    for (var j = 0; j < columns; j++) {
      var bj = bdata[j][0] || 0;
      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // matrix values & indices (column j)

        var jValues = [];
        var jIndices = []; // first and last index in the column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j]

        for (var k = firstIndex; k < lastIndex; k++) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i > j) {
            // store lower triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj

        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        var xj = divideScalar(bj, vjj);
        for (var _k = 0, l = jIndices.length; _k < l; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0] || 0, multiplyScalar(xj, jValues[_k]))];
        }
        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});

var name$2w = 'usolve';
var dependencies$2w = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolve = /* #__PURE__ */factory(name$2w, dependencies$2w, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds one solution of a linear equation system by backward substitution. Matrix must be an upper triangular matrix. Throws an error if there's no solution.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    usolveAll, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name$2w, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);
      var r = _denseBackwardSubstitution(m, b);
      return r.valueOf();
    }
  });
  function _denseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1]; // result

    var x = [];
    var mdata = m._data; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      // b[j]
      var bj = bdata[j][0] || 0; // x[j]

      var xj = void 0;
      if (!equalScalar(bj, 0)) {
        // value at [j, j]
        var vjj = mdata[j][j];
        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        xj = divideScalar(bj, vjj); // loop rows

        for (var i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, mdata[i][j]))];
        }
      } else {
        // zero value at j
        xj = 0;
      } // update x

      x[j] = [xj];
    }
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
  function _sparseBackwardSubstitution(m, b) {
    // make b into a column vector
    b = solveValidation(m, b, true);
    var bdata = b._data;
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // result

    var x = []; // loop columns backwards

    for (var j = columns - 1; j >= 0; j--) {
      var bj = bdata[j][0] || 0;
      if (!equalScalar(bj, 0)) {
        // non-degenerate row, find solution
        var vjj = 0; // upper triangular matrix values & index (column j)

        var jValues = [];
        var jIndices = []; // first & last indeces in column

        var firstIndex = ptr[j];
        var lastIndex = ptr[j + 1]; // values in column, find value at [j, j], loop backwards

        for (var k = lastIndex - 1; k >= firstIndex; k--) {
          var i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            vjj = values[k];
          } else if (i < j) {
            // store upper triangular
            jValues.push(values[k]);
            jIndices.push(i);
          }
        } // at this point we must have a value in vjj

        if (equalScalar(vjj, 0)) {
          throw new Error('Linear system cannot be solved since matrix is singular');
        }
        var xj = divideScalar(bj, vjj);
        for (var _k = 0, _lastIndex = jIndices.length; _k < _lastIndex; _k++) {
          var _i = jIndices[_k];
          bdata[_i] = [subtract(bdata[_i][0], multiplyScalar(xj, jValues[_k]))];
        }
        x[j] = [xj];
      } else {
        // degenerate row, we can choose any value
        x[j] = [0];
      }
    }
    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});

function _toConsumableArray$2(arr) {
  return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2();
}
function _nonIterableSpread$2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
}
function _iterableToArray$2(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles$2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var name$2v = 'lsolveAll';
var dependencies$2v = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createLsolveAll = /* #__PURE__ */factory(name$2v, dependencies$2v, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [ [[-5.5], [20]] ]
   *
   * See also:
   *
   *    lsolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name$2v, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);
      var R = _denseForwardSubstitution(m, b);
      return R.map(function (r) {
        return r.valueOf();
      });
    }
  });
  function _denseForwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/project/5e6c87c554a3190001a3fc93
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];
        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);
          for (var j = i + 1; j < columns; j++) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = _toConsumableArray$2(b);
          bNew[i] = 1;
          for (var _j = i + 1; _j < columns; _j++) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }
          B.push(bNew);
        }
      }
    }
    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
  function _sparseForwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns

    for (var i = 0; i < columns; i++) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;
        for (var j = firstIndex; j < lastIndex; j++) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J > i) {
            // store lower triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }
        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii);
          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = _toConsumableArray$2(b);
          bNew[i] = 1;
          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }
          B.push(bNew);
        }
      }
    }
    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
});

function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}
function _iterableToArray$1(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles$1(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var name$2u = 'usolveAll';
var dependencies$2u = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
var createUsolveAll = /* #__PURE__ */factory(name$2u, dependencies$2u, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Finds all solutions of a linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [ [[8], [9]] ]
   *
   * See also:
   *
   *    usolve, lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix[] | Array[]}  An array of affine-independent column vectors (x) that solve the linear system
   */

  return typed(name$2u, {
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      var m = matrix(a);
      var R = _denseBackwardSubstitution(m, b);
      return R.map(function (r) {
        return r.valueOf();
      });
    }
  });
  function _denseBackwardSubstitution(m, b_) {
    // the algorithm is derived from
    // https://www.overleaf.com/project/5e6c87c554a3190001a3fc93
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var M = m._data;
    var rows = m._size[0];
    var columns = m._size[1]; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k];
        if (!equalScalar(M[i][i], 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], M[i][i]);
          for (var j = i - 1; j >= 0; j--) {
            // b[j] -= b[i] * M[j,i]
            b[j] = subtract(b[j], multiplyScalar(b[i], M[j][i]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = _toConsumableArray$1(b);
          bNew[i] = 1;
          for (var _j = i - 1; _j >= 0; _j--) {
            bNew[_j] = subtract(bNew[_j], M[_j][i]);
          }
          B.push(bNew);
        }
      }
    }
    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
  function _sparseBackwardSubstitution(m, b_) {
    // array of right-hand sides
    var B = [solveValidation(m, b_, true)._data.map(function (e) {
      return e[0];
    })];
    var rows = m._size[0];
    var columns = m._size[1];
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // loop columns backwards

    for (var i = columns - 1; i >= 0; i--) {
      var L = B.length; // loop right-hand sides

      for (var k = 0; k < L; k++) {
        var b = B[k]; // values & indices (column i)

        var iValues = [];
        var iIndices = []; // first & last indeces in column

        var firstIndex = ptr[i];
        var lastIndex = ptr[i + 1]; // find the value at [i, i]

        var Mii = 0;
        for (var j = lastIndex - 1; j >= firstIndex; j--) {
          var J = index[j]; // check row

          if (J === i) {
            Mii = values[j];
          } else if (J < i) {
            // store upper triangular
            iValues.push(values[j]);
            iIndices.push(J);
          }
        }
        if (!equalScalar(Mii, 0)) {
          // non-singular row
          b[i] = divideScalar(b[i], Mii); // loop upper triangular

          for (var _j2 = 0, _lastIndex = iIndices.length; _j2 < _lastIndex; _j2++) {
            var _J = iIndices[_j2];
            b[_J] = subtract(b[_J], multiplyScalar(b[i], iValues[_j2]));
          }
        } else if (!equalScalar(b[i], 0)) {
          // singular row, nonzero RHS
          if (k === 0) {
            // There is no valid solution
            return [];
          } else {
            // This RHS is invalid but other solutions may still exist
            B.splice(k, 1);
            k -= 1;
            L -= 1;
          }
        } else if (k === 0) {
          // singular row, RHS is zero
          var bNew = _toConsumableArray$1(b);
          bNew[i] = 1; // loop upper triangular

          for (var _j3 = 0, _lastIndex2 = iIndices.length; _j3 < _lastIndex2; _j3++) {
            var _J2 = iIndices[_j3];
            bNew[_J2] = subtract(bNew[_J2], iValues[_j3]);
          }
          B.push(bNew);
        }
      }
    }
    return B.map(function (x) {
      return new DenseMatrix({
        data: x.map(function (e) {
          return [e];
        }),
        size: [rows, 1]
      });
    });
  }
});

var name$2t = 'algorithm08';
var dependencies$2t = ['typed', 'equalScalar'];
var createAlgorithm08 = /* #__PURE__ */factory(name$2t, dependencies$2t, function (_ref) {
  var typed = _ref.typed,
    equalScalar = _ref.equalScalar;

  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm08(a, b, callback) {
    // sparse matrix arrays
    var avalues = a._values;
    var aindex = a._index;
    var aptr = a._ptr;
    var asize = a._size;
    var adt = a._datatype; // sparse matrix arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr;
    var bsize = b._size;
    var bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new DimensionError(asize.length, bsize.length);
    } // check rows & columns

    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix

    if (!avalues || !bvalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
    } // rows & columns

    var rows = asize[0];
    var columns = asize[1]; // datatype

    var dt; // equal signature to use

    var eq = equalScalar; // zero value

    var zero = 0; // callback signature to use

    var cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays

    var cvalues = [];
    var cindex = [];
    var cptr = []; // workspace

    var x = []; // marks indicating we have a value in x for a given column

    var w = []; // vars

    var k, k0, k1, i; // loop columns

    for (var j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      var mark = j + 1; // loop values in a

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // mark workspace

        w[i] = mark; // set value

        x[i] = avalues[k]; // add index

        cindex.push(i);
      } // loop values in b

      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check value exists in workspace

        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      } // initialize first index in j

      k = cptr[j]; // loop index in j

      while (k < cindex.length) {
        // row
        i = cindex[k]; // value @ i

        var v = x[i]; // check for zero value

        if (!eq(v, zero)) {
          // push value
          cvalues.push(v); // increment pointer

          k++;
        } else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }
    } // update cptr

    cptr[columns] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});

var name$2s = 'leftShift';
var dependencies$2s = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createLeftShift = /* #__PURE__ */factory(name$2s, dependencies$2s, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    zeros = _ref.zeros,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */

  return typed(name$2s, {
    'number, number': leftShiftNumber,
    'BigNumber, BigNumber': leftShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

var name$2r = 'rightArithShift';
var dependencies$2r = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightArithShift = /* #__PURE__ */factory(name$2r, dependencies$2r, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    zeros = _ref.zeros,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */

  return typed(name$2r, {
    'number, number': rightArithShiftNumber,
    'BigNumber, BigNumber': rightArithShiftBigNumber,
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

var name$2q = 'rightLogShift';
var dependencies$2q = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
var createRightLogShift = /* #__PURE__ */factory(name$2q, dependencies$2q, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    zeros = _ref.zeros,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm08 = createAlgorithm08({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  return typed(name$2q, {
    'number, number': rightLogShiftNumber,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm08(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm10(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

var name$2p = 'and';
var dependencies$2p = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
var createAnd = /* #__PURE__ */factory(name$2p, dependencies$2p, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    zeros = _ref.zeros,
    not = _ref.not;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm06 = createAlgorithm06({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */

  return typed(name$2p, {
    'number, number': andNumber,
    'Complex, Complex': function ComplexComplex(x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },
    'Unit, Unit': function UnitUnit(x, y) {
      return this(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm06(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm02(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      return algorithm11(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return this(matrix(x), y).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y)).valueOf();
    }
  });
});

var name$2o = 'compare';
var dependencies$2o = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
var createCompare = /* #__PURE__ */factory(name$2o, dependencies$2o, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    equalScalar = _ref.equalScalar,
    matrix = _ref.matrix,
    BigNumber = _ref.BigNumber,
    Fraction = _ref.Fraction,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm05 = createAlgorithm05({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name$2o, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function numberNumber(x, y) {
      return nearlyEqual$1(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return nearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return new Fraction(x.compare(y));
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm05(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

/*jshint unused:false */
var naturalSort = function naturalSort(a, b) {

  var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
    sre = /(^[ ]*|[ ]*$)/g,
    dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
    hre = /^0x[0-9a-f]+$/i,
    ore = /^0/,
    i = function i(s) {
      return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s;
    },
    // convert all to strings strip whitespace
    x = i(a).replace(sre, '') || '',
    y = i(b).replace(sre, '') || '',
    // chunk/tokenize
    xN = x.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
    yN = y.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
    // numeric, hex or date detection
    xD = parseInt(x.match(hre), 16) || xN.length !== 1 && x.match(dre) && Date.parse(x),
    yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
    oFxNcL,
    oFyNcL;
  // first try and sort Hex codes or Dates
  if (yD) {
    if (xD < yD) {
      return -1;
    } else if (xD > yD) {
      return 1;
    }
  }
  // natural sorting through split numeric strings and default strings
  for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
    // find floats not starting with '0', string or 0 if not defined (Clint Priest)
    oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
    oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
    // handle numeric vs string comparison - number < string - (Kyle Adams)
    if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {
      return isNaN(oFxNcL) ? 1 : -1;
    }
    // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
    else if (_typeof$e(oFxNcL) !== _typeof$e(oFyNcL)) {
      oFxNcL += '';
      oFyNcL += '';
    }
    if (oFxNcL < oFyNcL) {
      return -1;
    }
    if (oFxNcL > oFyNcL) {
      return 1;
    }
  }
  return 0;
};
var naturalSort$1 = /*@__PURE__*/getDefaultExportFromCjs(naturalSort);

var name$2n = 'compareNatural';
var dependencies$2n = ['typed', 'compare'];
var createCompareNatural = /* #__PURE__ */factory(name$2n, dependencies$2n, function (_ref) {
  var typed = _ref.typed,
    compare = _ref.compare;
  var compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name$2n, {
    'any, any': function anyAny(x, y) {
      var typeX = typeOf$1(x);
      var typeY = typeOf$1(y);
      var c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);
        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return naturalSort$1(typeX, typeY);
        }
      } // matrix types

      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(this, x, y);
        if (c !== 0) {
          return c;
        } else {
          return naturalSort$1(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'

      if (typeX !== typeY) {
        return naturalSort$1(typeX, typeY);
      }
      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }
      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return this(x.value, y.value);
        } // compare by units

        return compareArrays(this, x.formatUnits(), y.formatUnits());
      }
      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }
      if (typeX === 'string') {
        return naturalSort$1(x, y);
      }
      if (typeX === 'Object') {
        return compareObjects(this, x, y);
      }
      if (typeX === 'null') {
        return 0;
      }
      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...

      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(compareNatural, x, y) {
    if (isSparseMatrix(x) && isSparseMatrix(y)) {
      return compareArrays(compareNatural, x.toJSON().values, y.toJSON().values);
    }
    if (isSparseMatrix(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x.toArray(), y);
    }
    if (isSparseMatrix(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(compareNatural, x, y.toArray());
    } // convert DenseArray into Array

    if (isDenseMatrix(x)) {
      return compareMatricesAndArrays(compareNatural, x.toJSON().data, y);
    }
    if (isDenseMatrix(y)) {
      return compareMatricesAndArrays(compareNatural, x, y.toJSON().data);
    } // convert scalars to array

    if (!Array.isArray(x)) {
      return compareMatricesAndArrays(compareNatural, [x], y);
    }
    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(compareNatural, x, [y]);
    }
    return compareArrays(compareNatural, x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareArrays(compareNatural, x, y) {
    // compare each value
    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      var v = compareNatural(x[i], y[i]);
      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays

    if (x.length > y.length) {
      return 1;
    }
    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content

    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareObjects(compareNatural, x, y) {
    var keysX = Object.keys(x);
    var keysY = Object.keys(y); // compare keys

    keysX.sort(naturalSort$1);
    keysY.sort(naturalSort$1);
    var c = compareArrays(compareNatural, keysX, keysY);
    if (c !== 0) {
      return c;
    } // compare values

    for (var i = 0; i < keysX.length; i++) {
      var v = compareNatural(x[keysX[i]], y[keysY[i]]);
      if (v !== 0) {
        return v;
      }
    }
    return 0;
  }
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */

function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }
  if (x.re < y.re) {
    return -1;
  }
  if (x.im > y.im) {
    return 1;
  }
  if (x.im < y.im) {
    return -1;
  }
  return 0;
}

var name$2m = 'compareText';
var dependencies$2m = ['typed', 'matrix'];
var createCompareText = /* #__PURE__ */factory(name$2m, dependencies$2m, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */

  return typed(name$2m, {
    'any, any': compareText$1,
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, compareText$1);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, compareText$1, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, compareText$1, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, compareText$1, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, compareText$1, true).valueOf();
    }
  });
});

var name$2l = 'equal';
var dependencies$2l = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
var createEqual = /* #__PURE__ */factory(name$2l, dependencies$2l, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */

  return typed(name$2l, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }
      if (y === null) {
        return x === null;
      }
      if (x === undefined) {
        return y === undefined;
      }
      if (y === undefined) {
        return x === undefined;
      }
      return equalScalar(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, equalScalar);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, equalScalar, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, equalScalar, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, equalScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, equalScalar, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, equalScalar, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, equalScalar, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, equalScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });
});
factory(name$2l, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
    equalScalar = _ref2.equalScalar;
  return typed(name$2l, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }
      if (y === null) {
        return x === null;
      }
      if (x === undefined) {
        return y === undefined;
      }
      if (y === undefined) {
        return x === undefined;
      }
      return equalScalar(x, y);
    }
  });
});

var name$2k = 'equalText';
var dependencies$2k = ['typed', 'compareText', 'isZero'];
var createEqualText = /* #__PURE__ */factory(name$2k, dependencies$2k, function (_ref) {
  var typed = _ref.typed,
    compareText = _ref.compareText,
    isZero = _ref.isZero;

  /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */
  return typed(name$2k, {
    'any, any': function anyAny(x, y) {
      return isZero(compareText(x, y));
    }
  });
});

var name$2j = 'smaller';
var dependencies$2j = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmaller = /* #__PURE__ */factory(name$2j, dependencies$2j, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name$2j, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x < y;
    },
    'number, number': function numberNumber(x, y) {
      return x < y && !nearlyEqual$1(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function ComplexComplex(x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2i = 'smallerEq';
var dependencies$2i = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createSmallerEq = /* #__PURE__ */factory(name$2i, dependencies$2i, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  return typed(name$2i, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x <= y;
    },
    'number, number': function numberNumber(x, y) {
      return x <= y || nearlyEqual$1(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.lte(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2h = 'larger';
var dependencies$2h = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLarger = /* #__PURE__ */factory(name$2h, dependencies$2h, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */

  return typed(name$2h, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x > y;
    },
    'number, number': function numberNumber(x, y) {
      return x > y && !nearlyEqual$1(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2g = 'largerEq';
var dependencies$2g = ['typed', 'config', 'matrix', 'DenseMatrix'];
var createLargerEq = /* #__PURE__ */factory(name$2g, dependencies$2g, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */

  return typed(name$2g, {
    'boolean, boolean': function booleanBoolean(x, y) {
      return x >= y;
    },
    'number, number': function numberNumber(x, y) {
      return x >= y || nearlyEqual$1(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
      return x.gte(y) || nearlyEqual(x, y, config.epsilon);
    },
    'Fraction, Fraction': function FractionFraction(x, y) {
      return x.compare(y) !== -1;
    },
    'Complex, Complex': function ComplexComplex() {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function UnitUnit(x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }
      return this(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, this);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, this, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, this, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, this, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, this, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$2f = 'deepEqual';
var dependencies$2f = ['typed', 'equal'];
var createDeepEqual = /* #__PURE__ */factory(name$2f, dependencies$2f, function (_ref) {
  var typed = _ref.typed,
    equal = _ref.equal;

  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  return typed(name$2f, {
    'any, any': function anyAny(x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });
  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */

  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        var len = x.length;
        if (len !== y.length) {
          return false;
        }
        for (var i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    } else {
      if (Array.isArray(y)) {
        return false;
      } else {
        return equal(x, y);
      }
    }
  }
});

var name$2e = 'unequal';
var dependencies$2e = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
var createUnequal = /* #__PURE__ */factory(name$2e, dependencies$2e, function (_ref) {
  var typed = _ref.typed;
    _ref.config;
    var equalScalar = _ref.equalScalar,
    matrix = _ref.matrix,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm07 = createAlgorithm07({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */

  return typed('unequal', {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }
      if (y === null) {
        return x !== null;
      }
      if (x === undefined) {
        return y !== undefined;
      }
      if (y === undefined) {
        return x !== undefined;
      }
      return _unequal(x, y);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm07(x, y, _unequal);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm03(y, x, _unequal, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, _unequal, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, _unequal);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm12(x, y, _unequal, false);
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, _unequal, false);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm12(y, x, _unequal, true);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, _unequal, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });
  function _unequal(x, y) {
    return !equalScalar(x, y);
  }
});
factory(name$2e, ['typed', 'equalScalar'], function (_ref2) {
  var typed = _ref2.typed,
    equalScalar = _ref2.equalScalar;
  return typed(name$2e, {
    'any, any': function anyAny(x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }
      if (y === null) {
        return x !== null;
      }
      if (x === undefined) {
        return y !== undefined;
      }
      if (y === undefined) {
        return x !== undefined;
      }
      return !equalScalar(x, y);
    }
  });
});

var name$2d = 'partitionSelect';
var dependencies$2d = ['typed', 'isNumeric', 'isNaN', 'compare'];
var createPartitionSelect = /* #__PURE__ */factory(name$2d, dependencies$2d, function (_ref) {
  var typed = _ref.typed,
    isNumeric = _ref.isNumeric,
    isNaN = _ref.isNaN,
    compare = _ref.compare;
  var asc = compare;
  var desc = function desc(a, b) {
    return -compare(a, b);
  };
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */

  return typed(name$2d, {
    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });
  function _partitionSelect(x, k, compare) {
    if (!isInteger$1(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }
    if (isMatrix(x)) {
      var size = x.size();
      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }
      return quickSelect(x.valueOf(), k, compare);
    }
    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */

  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    } // check for NaN values since these can cause an infinite while loop

    for (var i = 0; i < arr.length; i++) {
      if (isNumeric(arr[i]) && isNaN(arr[i])) {
        return arr[i]; // return NaN
      }
    }

    var from = 0;
    var to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      var r = from;
      var w = to;
      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          var tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)

      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements

      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }
    return arr[k];
  }
});

var name$2c = 'sort';
var dependencies$2c = ['typed', 'matrix', 'compare', 'compareNatural'];
var createSort = /* #__PURE__ */factory(name$2c, dependencies$2c, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    compare = _ref.compare,
    compareNatural = _ref.compareNatural;
  var compareAsc = compare;
  var compareDesc = function compareDesc(a, b) {
    return -compare(a, b);
  };
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */

  return typed(name$2c, {
    Array: function Array(x) {
      _arrayIsVector(x);
      return x.sort(compareAsc);
    },
    Matrix: function Matrix(x) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function ArrayFunction(x, _comparator) {
      _arrayIsVector(x);
      return x.sort(_comparator);
    },
    'Matrix, function': function MatrixFunction(x, _comparator) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function ArrayString(x, order) {
      _arrayIsVector(x);
      return x.sort(_comparator(order));
    },
    'Matrix, string': function MatrixString(x, order) {
      _matrixIsVector(x);
      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */

  function _arrayIsVector(array) {
    if (arraySize(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */

  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }
});

var name$2b = 'max';
var dependencies$2b = ['typed', 'config', 'numeric', 'larger'];
var createMax = /* #__PURE__ */factory(name$2b, dependencies$2b, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    numeric = _ref.numeric,
    larger = _ref.larger;

  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  return typed(name$2b, {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function max');
      }
      return _max(args);
    }
  });
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    try {
      return larger(x, y) ? x : y;
    } catch (err) {
      throw improveErrorMessage(err, 'max', y);
    }
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */

  function _max(array) {
    var res;
    deepForEach(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          res = NaN;
        } else if (res === undefined || larger(value, res)) {
          res = value;
        }
      } catch (err) {
        throw improveErrorMessage(err, 'max', value);
      }
    });
    if (res === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value

    if (typeof res === 'string') {
      res = numeric(res, config.number);
    }
    return res;
  }
});

var name$2a = 'min';
var dependencies$2a = ['typed', 'config', 'numeric', 'smaller'];
var createMin = /* #__PURE__ */factory(name$2a, dependencies$2a, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    numeric = _ref.numeric,
    smaller = _ref.smaller;

  /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  return typed(name$2a, {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return reduce(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function min');
      }
      return _min(args);
    }
  });
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    try {
      return smaller(x, y) ? x : y;
    } catch (err) {
      throw improveErrorMessage(err, 'min', y);
    }
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */

  function _min(array) {
    var min;
    deepForEach(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          min = NaN;
        } else if (min === undefined || smaller(value, min)) {
          min = value;
        }
      } catch (err) {
        throw improveErrorMessage(err, 'min', value);
      }
    });
    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    } // make sure returning numeric value: parse a string into a numeric value

    if (typeof min === 'string') {
      min = numeric(min, config.number);
    }
    return min;
  }
});

var name$29 = 'ImmutableDenseMatrix';
var dependencies$29 = ['smaller', 'DenseMatrix'];
var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name$29, dependencies$29, function (_ref) {
  var smaller = _ref.smaller,
    DenseMatrix = _ref.DenseMatrix;
  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (datatype && !isString(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }
    if (isMatrix(data) || isArray(data)) {
      // use DenseMatrix implementation
      var matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && isArray(data.data) && isArray(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + typeOf$1(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }
  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        {
          // use base implementation
          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

          if (isMatrix(m)) {
            // return immutable matrix
            return new ImmutableDenseMatrix({
              data: m._data,
              size: m._size,
              datatype: m._datatype
            });
          }
          return m;
        }
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */

  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */

  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */

  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */

  ImmutableDenseMatrix.prototype.clone = function () {
    return new ImmutableDenseMatrix({
      data: clone$2(this._data),
      size: clone$2(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */

  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */

  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */

  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */

  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      var m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) {
          m = v;
        }
      });
      this._min = m !== null ? m : undefined;
    }
    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */

  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      var m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) {
          m = v;
        }
      });
      this._max = m !== null ? m : undefined;
    }
    return this._max;
  };
  return ImmutableDenseMatrix;
}, {
  isClass: true
});

var name$28 = 'Index';
var dependencies$28 = ['ImmutableDenseMatrix'];
var createIndexClass = /* #__PURE__ */factory(name$28, dependencies$28, function (_ref) {
  var ImmutableDenseMatrix = _ref.ImmutableDenseMatrix;

  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this._dimensions = [];
    this._isScalar = true;
    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i];
      if (isRange(arg)) {
        this._dimensions.push(arg);
        this._isScalar = false;
      } else if (Array.isArray(arg) || isMatrix(arg)) {
        // create matrix
        var m = _createImmutableMatrix(arg.valueOf());
        this._dimensions.push(m); // size

        var size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      } // TODO: implement support for wildcard '*'
    }
  }
  /**
   * Attach type information
   */

  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;
  function _createImmutableMatrix(arg) {
    // loop array elements
    for (var i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !isInteger$1(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix

    return new ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */

  Index.prototype.clone = function () {
    var index = new Index();
    index._dimensions = clone$2(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */

  Index.create = function (ranges) {
    var index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */

  Index.prototype.size = function () {
    var size = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }
    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */

  Index.prototype.max = function () {
    var values = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }
    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */

  Index.prototype.min = function () {
    var values = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }
    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */

  Index.prototype.forEach = function (callback) {
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */

  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */

  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */

  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */

  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */

  Index.prototype.toArray = function () {
    var array = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }
    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */

  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    var strings = [];
    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
      var dimension = this._dimensions[i];
      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }
    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */

  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */

  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };
  return Index;
}, {
  isClass: true
});

var name$27 = 'FibonacciHeap';
var dependencies$27 = ['smaller', 'larger'];
var createFibonacciHeapClass = /* #__PURE__ */factory(name$27, dependencies$27, function (_ref) {
  var smaller = _ref.smaller,
    larger = _ref.larger;
  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // initialize fields

    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */

  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    var node = {
      key: key,
      value: value,
      degree: 0
    }; // check we have a node in the minimum

    if (this._minimum) {
      // minimum node
      var minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap

    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    var node = this._minimum; // check we have a minimum

    if (node === null) {
      return node;
    } // current minimum

    var minimum = this._minimum; // get number of children

    var numberOfChildren = node.degree; // pointer to the first child

    var x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      var tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap

    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node === node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap

    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */

  function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    var parent = node.parent;
    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent

      _cascadingCut(minimum, parent);
    } // update minimum node if needed

    if (smaller(node.key, minimum.key)) {
      minimum = node;
    } // return minimum

    return minimum;
  }
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */

  function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child === node) {
      parent.child = node.right;
    } // remove child if degree is 0

    if (parent.degree === 0) {
      parent.child = null;
    } // add node to root list of heap

    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  }
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */

  function _cascadingCut(minimum, node) {
    // store parent node
    var parent = node.parent; // if there's a parent...

    if (!parent) {
      return;
    } // if node is unmarked, set it marked

    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well

      _cascadingCut(parent);
    }
  }
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  var _linkNodes = function _linkNodes(node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;
    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]

    parent.degree++; // set mark[node] false

    node.mark = false;
  };
  function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    var array = new Array(arraySize); // find the number of root nodes.

    var numRoots = 0;
    var x = minimum;
    if (x) {
      numRoots++;
      x = x.right;
      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars

    var y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      var d = x.degree; // get next node

      var next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];
        if (!y) {
          break;
        } // make one node with the same degree a child of the other, do this based on the key value.

        if (larger(x.key, y.key)) {
          var temp = y;
          y = x;
          x = temp;
        } // make y a child of x

        _linkNodes(y, x); // we have handled this degree, go to next one.

        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.

      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].

    minimum = null; // loop nodes in array

    for (var i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];
      if (!y) {
        continue;
      } // check if we have a linked list

      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) {
          minimum = y;
        }
      } else {
        minimum = y;
      }
    }
    return minimum;
  }
  return FibonacciHeap;
}, {
  isClass: true
});

var name$26 = 'Spa';
var dependencies$26 = ['addScalar', 'equalScalar', 'FibonacciHeap'];
var createSpaClass = /* #__PURE__ */factory(name$26, dependencies$26, function (_ref) {
  var addScalar = _ref.addScalar,
    equalScalar = _ref.equalScalar,
    FibonacciHeap = _ref.FibonacciHeap;

  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // allocate vector, TODO use typed arrays

    this._values = [];
    this._heap = new FibonacciHeap();
  }
  /**
   * Attach type information
   */

  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      var node = this._heap.insert(i, v); // set the value @ i

      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };
  Spa.prototype.get = function (i) {
    var node = this._values[i];
    if (node) {
      return node.value;
    }
    return 0;
  };
  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    var node = this._values[i];
    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = addScalar(node.value, v);
    }
  };
  Spa.prototype.forEach = function (from, to, callback) {
    // references
    var heap = this._heap;
    var values = this._values; // nodes

    var nodes = []; // node with minimum key, save it

    var node = heap.extractMinimum();
    if (node) {
      nodes.push(node);
    } // extract nodes from heap (ordered)

    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it

      node = heap.extractMinimum();
      if (node) {
        nodes.push(node);
      }
    } // reinsert all nodes in heap

    for (var i = 0; i < nodes.length; i++) {
      // current node
      var n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };
  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    var nodei = this._values[i];
    var nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values

      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values

      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      var v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };
  return Spa;
}, {
  isClass: true
});

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */

var createBigNumberE = memoize(function (BigNumber) {
  return new BigNumber(1).exp();
}, hasher);
/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */

var createBigNumberPhi = memoize(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, hasher);
/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */

var createBigNumberPi = memoize(function (BigNumber) {
  return BigNumber.acos(-1);
}, hasher);
/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */

var createBigNumberTau = memoize(function (BigNumber) {
  return createBigNumberPi(BigNumber).times(2);
}, hasher);
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */

function hasher(args) {
  return args[0].precision;
}

function _typeof$7(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$7 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$7 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$7(obj);
}
function _extends$6() {
  _extends$6 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$6.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var name$25 = 'Unit';
var dependencies$25 = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
var createUnitClass = /* #__PURE__ */factory(name$25, dependencies$25, function (_ref) {
  var on = _ref.on,
    config = _ref.config,
    addScalar = _ref.addScalar,
    subtract = _ref.subtract,
    multiplyScalar = _ref.multiplyScalar,
    divideScalar = _ref.divideScalar,
    pow = _ref.pow,
    abs = _ref.abs,
    fix = _ref.fix,
    round = _ref.round,
    equal = _ref.equal,
    isNumeric = _ref.isNumeric,
    format = _ref.format,
    number = _ref.number,
    Complex = _ref.Complex,
    _BigNumber = _ref.BigNumber,
    _Fraction = _ref.Fraction;
  var toNumber = number;
  /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */

  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }
    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }
    if (name !== undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }
    if (name !== undefined) {
      var u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    } else {
      this.units = [{
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE,
        // link to a list with supported prefixes
        power: 0
      }];
      this.dimensions = [];
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }
    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
    this.fixPrefix = false; // if true, function format will not search for the
    // best prefix but leave it as initially provided.
    // fixPrefix is set true by the method Unit.to
    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.

    this.skipAutomaticSimplification = true;
  }
  /**
   * Attach type information
   */

  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

  var text, index, c;
  function skipWhitespace() {
    while (c === ' ' || c === '\t') {
      next();
    }
  }
  function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  }
  function isDigit(c) {
    return c >= '0' && c <= '9';
  }
  function next() {
    index++;
    c = text.charAt(index);
  }
  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }
  function parseNumber() {
    var number = '';
    var oldIndex = index;
    if (c === '+') {
      next();
    } else if (c === '-') {
      number += c;
      next();
    }
    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    } // get number, can have a single dot

    if (c === '.') {
      number += c;
      next();
      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    } else {
      while (isDigit(c)) {
        number += c;
        next();
      }
      if (c === '.') {
        number += c;
        next();
      }
    }
    while (isDigit(c)) {
      number += c;
      next();
    } // check for exponential notation like "2.3e-4" or "1.23e50"

    if (c === 'E' || c === 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
      var tentativeNumber = '';
      var tentativeIndex = index;
      tentativeNumber += c;
      next();
      if (c === '+' || c === '-') {
        tentativeNumber += c;
        next();
      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)

      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      } // We can now safely say that this is scientific notation.

      number = number + tentativeNumber;
      while (isDigit(c)) {
        number += c;
        next();
      }
    }
    return number;
  }
  function parseUnit() {
    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

    while (isDigit(c) || Unit.isValidAlpha(c)) {
      unitName += c;
      next();
    } // Must begin with [a-zA-Z]

    var firstC = unitName.charAt(0);
    if (Unit.isValidAlpha(firstC)) {
      return unitName;
    } else {
      return null;
    }
  }
  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    } else {
      return null;
    }
  }
  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */

  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';
    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }
    var unit = new Unit();
    unit.units = [];
    var powerMultiplierCurrent = 1;
    var expectingUnit = false; // A unit should follow this pattern:
    // [number] ...[ [*/] unit[^number] ]
    // unit[^number] ... [ [*/] unit[^number] ]
    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace(); // Optional number at the start of the string

    var valueStr = parseNumber();
    var value = null;
    if (valueStr) {
      if (config.number === 'BigNumber') {
        value = new _BigNumber(valueStr);
      } else if (config.number === 'Fraction') {
        try {
          // not all numbers can be turned in Fractions, for example very small numbers not
          value = new _Fraction(valueStr);
        } catch (err) {
          value = parseFloat(valueStr);
        }
      } else {
        // number
        value = parseFloat(valueStr);
      }
      skipWhitespace(); // Whitespace is not required here
      // handle multiplication or division right after the value, like '1/s'

      if (parseCharacter('*')) {
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
    } // Stack to keep track of powerMultipliers applied to each parentheses group

    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

    var powerMultiplierStackProduct = 1;
    while (true) {
      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.

      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      } // Is there something here?

      var uStr = void 0;
      if (c) {
        var oldC = c;
        uStr = parseUnit();
        if (uStr === null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      } else {
        // End of input.
        break;
      } // Verify the unit exists and get the prefix (if any)

      var res = _findUnit(uStr);
      if (res === null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }
      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

      skipWhitespace();
      if (parseCharacter('^')) {
        skipWhitespace();
        var p = parseNumber();
        if (p === null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }
        power *= p;
      } // Add the unit to the list

      unit.units.push({
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });
      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      } // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.

      skipWhitespace();
      while (c === ')') {
        if (powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }
        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      } // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.

      expectingUnit = false;
      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      } else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      } // Replace the unit into the auto unit system

      if (res.unit.base) {
        var baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    } // Has the string been entirely consumed?

    skipWhitespace();
    if (c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    } // Is there a trailing slash?

    if (expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    } // Is the parentheses stack empty?

    if (powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    } // Are there any units at all?

    if (unit.units.length === 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }
    unit.value = value !== undefined ? unit._normalize(value) : null;
    return unit;
  };
  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */

  Unit.prototype.clone = function () {
    var unit = new Unit();
    unit.fixPrefix = this.fixPrefix;
    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
    unit.value = clone$2(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];
    for (var i = 0; i < this.units.length; i++) {
      unit.units[i] = {};
      for (var p in this.units[i]) {
        if (hasOwnProperty(this.units[i], p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }
    return unit;
  };
  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */

  Unit.prototype._isDerived = function () {
    if (this.units.length === 0) {
      return false;
    }
    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };
  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */

  Unit.prototype._normalize = function (value) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;
    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      var res = value;
      convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }
      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitOffset = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);
      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
    }
  };
  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */

  Unit.prototype._denormalize = function (value, prefixValue) {
    var unitValue, unitOffset, unitPower, unitPrefixValue;
    var convert;
    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      var res = value;
      convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed

      for (var i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }
      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter(typeOf$1(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset = convert(this.units[0].unit.offset);
      if (prefixValue === undefined || prefixValue === null) {
        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
      } else {
        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
      }
    }
  };
  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */

  function _findUnit(str) {
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if (hasOwnProperty(UNITS, str)) {
      var unit = UNITS[str];
      var prefix = unit.prefixes[''];
      return {
        unit: unit,
        prefix: prefix
      };
    }
    for (var _name in UNITS) {
      if (hasOwnProperty(UNITS, _name)) {
        if (endsWith(str, _name)) {
          var _unit = UNITS[_name];
          var prefixLen = str.length - _name.length;
          var prefixName = str.substring(0, prefixLen);
          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;
          if (_prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit: _unit,
              prefix: _prefix
            };
          }
        }
      }
    }
    return null;
  }
  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */

  Unit.isValuelessUnit = function (name) {
    return _findUnit(name) !== null;
  };
  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */

  Unit.prototype.hasBase = function (base) {
    if (typeof base === 'string') {
      base = BASE_UNITS[base];
    }
    if (!base) {
      return false;
    } // All dimensions must be the same

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }
    return true;
  };
  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */

  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }
    return true;
  };
  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */

  Unit.prototype.equals = function (other) {
    return this.equalBase(other) && equal(this.value, other.value);
  };
  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */

  Unit.prototype.multiply = function (other) {
    var res = this.clone();
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    } // Append other's units list onto res

    for (var _i = 0; _i < other.units.length; _i++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread({}, other.units[_i]);
      res.units.push(inverted);
    } // If at least one operand has a value, then the result should also have a value

    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = multiplyScalar(valThis, valOther);
    } else {
      res.value = null;
    }
    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */

  Unit.prototype.divide = function (other) {
    var res = this.clone();
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    } // Invert and append other's units list onto res

    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
      // Make a shallow copy of every unit
      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {
        power: -other.units[_i2].power
      });
      res.units.push(inverted);
    } // If at least one operand has a value, the result should have a value

    if (this.value !== null || other.value !== null) {
      var valThis = this.value === null ? this._normalize(1) : this.value;
      var valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = divideScalar(valThis, valOther);
    } else {
      res.value = null;
    }
    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */

  Unit.prototype.pow = function (p) {
    var res = this.clone();
    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    } // Adjust the power of each unit in the list

    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
      res.units[_i3].power *= p;
    }
    if (res.value !== null) {
      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
      // if (!isNumeric(res.value)) {
      //  res.value = NaN
      // }
      // Update: Complex supported now
    } else {
      res.value = null;
    }
    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */

  function getNumericIfUnitless(unit) {
    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    } else {
      return unit;
    }
  }
  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */

  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    var ret = this.clone();
    ret.value = ret.value !== null ? abs(ret.value) : null;
    for (var i in ret.units) {
      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS.W;
      }
    }
    return ret;
  };
  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */

  Unit.prototype.to = function (valuelessUnit) {
    var other;
    var value = this.value === null ? this._normalize(1) : this.value;
    if (typeof valuelessUnit === 'string') {
      // other = new Unit(null, valuelessUnit)
      other = Unit.parse(valuelessUnit);
      if (!this.equalBase(other)) {
        throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
      }
      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }
      other.value = clone$2(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else if (isUnit(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
      }
      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }
      other = valuelessUnit.clone();
      other.value = clone$2(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else {
      throw new Error('String or Unit expected as parameter');
    }
  };
  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric

  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };
  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */

  Unit.prototype.toNumeric = function (valuelessUnit) {
    var other;
    if (valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    } else {
      other = this.clone();
    }
    if (other._isDerived() || other.units.length === 0) {
      return other._denormalize(other.value);
    } else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };
  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */

  Unit.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */

  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };
  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */

  Unit.fromJSON = function (json) {
    var unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };
  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */

  Unit.prototype.valueOf = Unit.prototype.toString;
  /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */

  Unit.prototype.simplify = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Search for a matching base

    var matchingBase;
    for (var key in currentUnitSystem) {
      if (hasOwnProperty(currentUnitSystem, key)) {
        if (ret.hasBase(BASE_UNITS[key])) {
          matchingBase = key;
          break;
        }
      }
    }
    if (matchingBase === 'NONE') {
      ret.units = [];
    } else {
      var matchingUnit;
      if (matchingBase) {
        // Does the unit system have a matching unit?
        if (hasOwnProperty(currentUnitSystem, matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }
      if (matchingUnit) {
        ret.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      } else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        var missingBaseDim = false;
        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
          var baseDim = BASE_DIMENSIONS[i];
          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (hasOwnProperty(currentUnitSystem, baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              missingBaseDim = true;
            }
          }
        } // Is the proposed unit list "simpler" than the existing one?

        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          ret.units = proposedUnitList;
        }
      }
    }
    return ret;
  };
  /**
   * Returns a new Unit in the SI system with the same value as this one
   */

  Unit.prototype.toSI = function () {
    var ret = this.clone();
    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system

    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
      var baseDim = BASE_DIMENSIONS[i];
      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS.si[baseDim].unit,
            prefix: UNIT_SYSTEMS.si[baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        } else {
          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
        }
      }
    } // Replace this unit list with the proposed list

    ret.units = proposedUnitList;
    ret.fixPrefix = true;
    ret.skipAutomaticSimplification = true;
    return ret;
  };
  /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */

  Unit.prototype.formatUnits = function () {
    var strNum = '';
    var strDen = '';
    var nNum = 0;
    var nDen = 0;
    for (var i = 0; i < this.units.length; i++) {
      if (this.units[i].power > 0) {
        nNum++;
        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;
        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += '^' + this.units[i].power;
        }
      } else if (this.units[i].power < 0) {
        nDen++;
      }
    }
    if (nDen > 0) {
      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
        if (this.units[_i4].power < 0) {
          if (nNum > 0) {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
              strDen += '^' + -this.units[_i4].power;
            }
          } else {
            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
            strDen += '^' + this.units[_i4].power;
          }
        }
      }
    } // Remove leading " "

    strNum = strNum.substr(1);
    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

    if (nNum > 1 && nDen > 0) {
      strNum = '(' + strNum + ')';
    }
    if (nDen > 1 && nNum > 0) {
      strDen = '(' + strDen + ')';
    }
    var str = strNum;
    if (nNum > 0 && nDen > 0) {
      str += ' / ';
    }
    str += strDen;
    return str;
  };
  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */

  Unit.prototype.format = function (options) {
    // Simplfy the unit list, unless it is valueless or was created directly in the
    // constructor or as the result of to or toSI
    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

    var isImaginary = false;
    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(simp.value.re) < 1e-14;
    }
    for (var i in simp.units) {
      if (hasOwnProperty(simp.units, i)) {
        if (simp.units[i].unit) {
          if (simp.units[i].unit.name === 'VA' && isImaginary) {
            simp.units[i].unit = UNITS.VAR;
          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
            simp.units[i].unit = UNITS.VA;
          }
        }
      }
    } // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set

    if (simp.units.length === 1 && !simp.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
        // Apply the best prefix
        simp.units[0].prefix = simp._bestPrefix();
      }
    }
    var value = simp._denormalize(simp.value);
    var str = simp.value !== null ? format(value, options || {}) : '';
    var unitStr = simp.formatUnits();
    if (simp.value && isComplex(simp.value)) {
      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
    }

    if (unitStr.length > 0 && str.length > 0) {
      str += ' ';
    }
    str += unitStr;
    return str;
  };
  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */

  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    }
    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    } // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers

    var absValue = this.value !== null ? abs(this.value) : 0;
    var absUnitValue = abs(this.units[0].unit.value);
    var bestPrefix = this.units[0].prefix;
    if (absValue === 0) {
      return bestPrefix;
    }
    var power = this.units[0].power;
    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

    bestDiff = Math.abs(bestDiff);
    var prefixes = this.units[0].unit.prefixes;
    for (var p in prefixes) {
      if (hasOwnProperty(prefixes, p)) {
        var prefix = prefixes[p];
        if (prefix.scientific) {
          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
            // choose the prefix with the smallest diff, or if equal, choose the one
            // with the shortest name (can happen with SHORTLONG for example)
            bestPrefix = prefix;
            bestDiff = diff;
          }
        }
      }
    }
    return bestPrefix;
  };
  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */

  Unit.prototype.splitUnit = function (parts) {
    var x = this.clone();
    var ret = [];
    for (var i = 0; i < parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if (i === parts.length - 1) break; // Get the numeric value of this unit

      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error

      var xRounded = round(xNumeric);
      var xFixed = void 0;
      var isNearlyEqual = equal(xRounded, xNumeric);
      if (isNearlyEqual) {
        xFixed = xRounded;
      } else {
        xFixed = fix(x.toNumeric());
      }
      var y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.

    var testSum = 0;
    for (var _i5 = 0; _i5 < ret.length; _i5++) {
      testSum = addScalar(testSum, ret[_i5].value);
    }
    if (equal(testSum, this.value)) {
      x.value = 0;
    }
    ret.push(x);
    return ret;
  };
  var PREFIXES = {
    NONE: {
      '': {
        name: '',
        value: 1,
        scientific: true
      }
    },
    SHORT: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e1,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e2,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-1,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-2,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-3,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-6,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-9,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-12,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-15,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-18,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-21,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-24,
        scientific: true
      }
    },
    LONG: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      deca: {
        name: 'deca',
        value: 1e1,
        scientific: false
      },
      hecto: {
        name: 'hecto',
        value: 1e2,
        scientific: false
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      },
      deci: {
        name: 'deci',
        value: 1e-1,
        scientific: false
      },
      centi: {
        name: 'centi',
        value: 1e-2,
        scientific: false
      },
      milli: {
        name: 'milli',
        value: 1e-3,
        scientific: true
      },
      micro: {
        name: 'micro',
        value: 1e-6,
        scientific: true
      },
      nano: {
        name: 'nano',
        value: 1e-9,
        scientific: true
      },
      pico: {
        name: 'pico',
        value: 1e-12,
        scientific: true
      },
      femto: {
        name: 'femto',
        value: 1e-15,
        scientific: true
      },
      atto: {
        name: 'atto',
        value: 1e-18,
        scientific: true
      },
      zepto: {
        name: 'zepto',
        value: 1e-21,
        scientific: true
      },
      yocto: {
        name: 'yocto',
        value: 1e-24,
        scientific: true
      }
    },
    SQUARED: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e2,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e4,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e6,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e12,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e18,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e24,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e30,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e36,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e42,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e48,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-2,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-4,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-6,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-12,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-18,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-24,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-30,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-36,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-42,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-48,
        scientific: true
      }
    },
    CUBIC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      da: {
        name: 'da',
        value: 1e3,
        scientific: false
      },
      h: {
        name: 'h',
        value: 1e6,
        scientific: false
      },
      k: {
        name: 'k',
        value: 1e9,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e18,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e27,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e36,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e45,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e54,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e63,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e72,
        scientific: true
      },
      d: {
        name: 'd',
        value: 1e-3,
        scientific: false
      },
      c: {
        name: 'c',
        value: 1e-6,
        scientific: false
      },
      m: {
        name: 'm',
        value: 1e-9,
        scientific: true
      },
      u: {
        name: 'u',
        value: 1e-18,
        scientific: true
      },
      n: {
        name: 'n',
        value: 1e-27,
        scientific: true
      },
      p: {
        name: 'p',
        value: 1e-36,
        scientific: true
      },
      f: {
        name: 'f',
        value: 1e-45,
        scientific: true
      },
      a: {
        name: 'a',
        value: 1e-54,
        scientific: true
      },
      z: {
        name: 'z',
        value: 1e-63,
        scientific: true
      },
      y: {
        name: 'y',
        value: 1e-72,
        scientific: true
      }
    },
    BINARY_SHORT_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      k: {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      M: {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      G: {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      T: {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      P: {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      E: {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      Z: {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      Y: {
        name: 'Y',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_SHORT_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      Ki: {
        name: 'Ki',
        value: 1024,
        scientific: true
      },
      Mi: {
        name: 'Mi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      Gi: {
        name: 'Gi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      Ti: {
        name: 'Ti',
        value: Math.pow(1024, 4),
        scientific: true
      },
      Pi: {
        name: 'Pi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      Ei: {
        name: 'Ei',
        value: Math.pow(1024, 6),
        scientific: true
      },
      Zi: {
        name: 'Zi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      Yi: {
        name: 'Yi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BINARY_LONG_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kilo: {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      mega: {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      giga: {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      tera: {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      peta: {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      exa: {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      zetta: {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      yotta: {
        name: 'yotta',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_LONG_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      kibi: {
        name: 'kibi',
        value: 1024,
        scientific: true
      },
      mebi: {
        name: 'mebi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      gibi: {
        name: 'gibi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      tebi: {
        name: 'tebi',
        value: Math.pow(1024, 4),
        scientific: true
      },
      pebi: {
        name: 'pebi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      exi: {
        name: 'exi',
        value: Math.pow(1024, 6),
        scientific: true
      },
      zebi: {
        name: 'zebi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      yobi: {
        name: 'yobi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BTU: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      MM: {
        name: 'MM',
        value: 1e6,
        scientific: true
      }
    }
  };
  PREFIXES.SHORTLONG = _extends$6({}, PREFIXES.SHORT, PREFIXES.LONG);
  PREFIXES.BINARY_SHORT = _extends$6({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
  PREFIXES.BINARY_LONG = _extends$6({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
  var BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };
  for (var key in BASE_UNITS) {
    if (hasOwnProperty(BASE_UNITS, key)) {
      BASE_UNITS[key].key = key;
    }
  }
  var BASE_UNIT_NONE = {};
  var UNIT_NONE = {
    name: '',
    base: BASE_UNIT_NONE,
    value: 1,
    offset: 0,
    dimensions: BASE_DIMENSIONS.map(function (x) {
      return 0;
    })
  };
  var UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    "in": {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: 't',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 1000,
      offset: 0
    },
    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: 'decade',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000,
      // Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000,
      // Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: 'radian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: 'degree',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: 'gradian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },
    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'watt',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORTLONG,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },
    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    }
  }; // aliases (formerly plurals)

  var ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',
    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',
    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
    kips: 'kip',
    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',
    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',
    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',
    decades: 'decade',
    centuries: 'century',
    millennia: 'millennium',
    hertz: 'hertz',
    radians: 'radian',
    degrees: 'degree',
    gradians: 'gradian',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',
    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',
    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole',
    bit: 'bits',
    "byte": 'bytes'
  };
  /**
   * Calculate the values for the angle units.
   * Value is calculated as number or BigNumber depending on the configuration
   * @param {{number: 'number' | 'BigNumber'}} config
   */

  function calculateAngleValues(config) {
    if (config.number === 'BigNumber') {
      var pi = createBigNumberPi(_BigNumber);
      UNITS.rad.value = new _BigNumber(1);
      UNITS.deg.value = pi.div(180); // 2 * pi / 360

      UNITS.grad.value = pi.div(200); // 2 * pi / 400

      UNITS.cycle.value = pi.times(2); // 2 * pi

      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
    } else {
      // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

      UNITS.cycle.value = Math.PI * 2; // 2 * pi

      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
    } // copy to the full names of the angles

    UNITS.radian.value = UNITS.rad.value;
    UNITS.degree.value = UNITS.deg.value;
    UNITS.gradian.value = UNITS.grad.value;
  } // apply the angle values now

  calculateAngleValues(config);
  if (on) {
    // recalculate the values on change of configuration
    on('config', function (curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
  }
  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */

  var UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE: {
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE['']
      },
      LENGTH: {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT['']
      },
      MASS: {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT.k
      },
      TIME: {
        unit: UNITS.s,
        prefix: PREFIXES.SHORT['']
      },
      CURRENT: {
        unit: UNITS.A,
        prefix: PREFIXES.SHORT['']
      },
      TEMPERATURE: {
        unit: UNITS.K,
        prefix: PREFIXES.SHORT['']
      },
      LUMINOUS_INTENSITY: {
        unit: UNITS.cd,
        prefix: PREFIXES.SHORT['']
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: UNITS.mol,
        prefix: PREFIXES.SHORT['']
      },
      ANGLE: {
        unit: UNITS.rad,
        prefix: PREFIXES.SHORT['']
      },
      BIT: {
        unit: UNITS.bits,
        prefix: PREFIXES.SHORT['']
      },
      // Derived units
      FORCE: {
        unit: UNITS.N,
        prefix: PREFIXES.SHORT['']
      },
      ENERGY: {
        unit: UNITS.J,
        prefix: PREFIXES.SHORT['']
      },
      POWER: {
        unit: UNITS.W,
        prefix: PREFIXES.SHORT['']
      },
      PRESSURE: {
        unit: UNITS.Pa,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CHARGE: {
        unit: UNITS.C,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CAPACITANCE: {
        unit: UNITS.F,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_POTENTIAL: {
        unit: UNITS.V,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_RESISTANCE: {
        unit: UNITS.ohm,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_INDUCTANCE: {
        unit: UNITS.H,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CONDUCTANCE: {
        unit: UNITS.S,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX: {
        unit: UNITS.Wb,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: UNITS.T,
        prefix: PREFIXES.SHORT['']
      },
      FREQUENCY: {
        unit: UNITS.Hz,
        prefix: PREFIXES.SHORT['']
      }
    }
  }; // Clone to create the other unit systems

  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {
    unit: UNITS.m,
    prefix: PREFIXES.SHORT.c
  };
  UNIT_SYSTEMS.cgs.MASS = {
    unit: UNITS.g,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.FORCE = {
    unit: UNITS.dyn,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.ENERGY = {
    unit: UNITS.erg,
    prefix: PREFIXES.NONE['']
  }; // there are wholly 4 unique cgs systems for electricity and magnetism,
  // so let's not worry about it unless somebody complains

  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH = {
    unit: UNITS.ft,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.MASS = {
    unit: UNITS.lbm,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.TEMPERATURE = {
    unit: UNITS.degF,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.FORCE = {
    unit: UNITS.lbf,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.ENERGY = {
    unit: UNITS.BTU,
    prefix: PREFIXES.BTU['']
  };
  UNIT_SYSTEMS.us.POWER = {
    unit: UNITS.hp,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.PRESSURE = {
    unit: UNITS.psi,
    prefix: PREFIXES.NONE['']
  }; // Add additional unit systems here.
  // Choose a unit system to seed the auto unit system.

  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

  var currentUnitSystem = UNIT_SYSTEMS.auto;
  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */

  Unit.setUnitSystem = function (name) {
    if (hasOwnProperty(UNIT_SYSTEMS, name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    } else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };
  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */

  Unit.getUnitSystem = function () {
    for (var _key in UNIT_SYSTEMS) {
      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {
        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {
          return _key;
        }
      }
    }
  };
  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */

  Unit.typeConverters = {
    BigNumber: function BigNumber(x) {
      return new _BigNumber(x + ''); // stringify to prevent constructor error
    },

    Fraction: function Fraction(x) {
      return new _Fraction(x);
    },
    Complex: function Complex(x) {
      return x;
    },
    number: function number(x) {
      return x;
    }
  };
  /**
   * Retrieve the right convertor function corresponding with the type
   * of provided exampleValue.
   *
   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
   *                        In case of an unknown type,
   * @return {Function}
   */

  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }
    return Unit.typeConverters[type];
  }; // Add dimensions to each built-in unit

  for (var _key2 in UNITS) {
    if (hasOwnProperty(UNITS, _key2)) {
      var unit = UNITS[_key2];
      unit.dimensions = unit.base.dimensions;
    }
  } // Create aliases

  for (var _name2 in ALIASES) {
    if (hasOwnProperty(ALIASES, _name2)) {
      var _unit2 = UNITS[ALIASES[_name2]];
      var alias = {};
      for (var _key3 in _unit2) {
        if (hasOwnProperty(_unit2, _key3)) {
          alias[_key3] = _unit2[_key3];
        }
      }
      alias.name = _name2;
      UNITS[_name2] = alias;
    }
  }
  /**
   * Checks if a character is a valid latin letter (upper or lower case).
   * Note that this function can be overridden, for example to allow support of other alphabets.
   * @param {string} c Tested character
   */

  Unit.isValidAlpha = function isValidAlpha(c) {
    return /^[a-zA-Z]$/.test(c);
  };
  function assertUnitNameIsValid(name) {
    for (var i = 0; i < name.length; i++) {
      c = name.charAt(i);
      if (i === 0 && !Unit.isValidAlpha(c)) {
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
      }
      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
      }
    }
  }
  /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */

  Unit.createUnit = function (obj, options) {
    if (_typeof$7(obj) !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    } // Remove all units and aliases we are overriding

    if (options && options.override) {
      for (var _key4 in obj) {
        if (hasOwnProperty(obj, _key4)) {
          Unit.deleteUnit(_key4);
        }
        if (obj[_key4].aliases) {
          for (var i = 0; i < obj[_key4].aliases.length; i++) {
            Unit.deleteUnit(obj[_key4].aliases[i]);
          }
        }
      }
    } // TODO: traverse multiple times until all units have been added

    var lastUnit;
    for (var _key5 in obj) {
      if (hasOwnProperty(obj, _key5)) {
        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);
      }
    }
    return lastUnit;
  };
  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit, Object} definition      Definition of the unit in terms
   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,
   * or an Object. If an Object, may have the following properties:
   *   - definition {string|Unit} The definition of this unit.
   *   - prefixes {string} "none", "short", "long", "binary_short", or "binary_long".
   *     The default is "none".
   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *   - offset {Numeric} An offset to apply when converting from the unit. For
   *     example, the offset for celsius is 273.15 and the offset for farhenheit
   *     is 459.67. Default is 0.
   *   - baseName {string} If the unit's dimension does not match that of any other
   *     base unit, the name of the newly create base unit. Otherwise, this property
   *     has no effect.
   *
   * @param {Object} options   (optional) An object containing any of the following
   * properties:
   *   - override {boolean} Whether this unit should be allowed to override existing
   *     units.
   *
   * @return {Unit}
   */

  Unit.createUnitSingle = function (name, obj, options) {
    if (typeof obj === 'undefined' || obj === null) {
      obj = {};
    }
    if (typeof name !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    } // Check collisions with existing units

    if (hasOwnProperty(UNITS, name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.

    assertUnitNameIsValid(name);
    var defUnit = null; // The Unit from which the new unit will be created.

    var aliases = [];
    var offset = 0;
    var definition;
    var prefixes;
    var baseName;
    if (obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    } else if (typeof obj === 'string') {
      if (obj !== '') {
        definition = obj;
      }
    } else if (_typeof$7(obj) === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes;
      offset = obj.offset;
      baseName = obj.baseName;
      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    } else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }
    if (aliases) {
      for (var i = 0; i < aliases.length; i++) {
        if (hasOwnProperty(UNITS, aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }
    if (definition && typeof definition === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {
          allowNoUnits: true
        });
      } catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw ex;
      }
    } else if (definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }
    aliases = aliases || [];
    offset = offset || 0;
    if (prefixes && prefixes.toUpperCase) {
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    } else {
      prefixes = PREFIXES.NONE;
    } // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.

    var newUnit = {};
    if (!defUnit) {
      // Add a new base dimension
      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }
      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

      for (var b in BASE_UNITS) {
        if (hasOwnProperty(BASE_UNITS, b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
        }
      } // Add the new base unit

      var newBaseUnit = {
        dimensions: []
      };
      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
        newBaseUnit.dimensions[_i6] = 0;
      }
      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: BASE_UNITS[baseName]
      };
      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };
    } else {
      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset
      }; // Create a new base if no matching base exists

      var anyMatch = false;
      for (var _i7 in BASE_UNITS) {
        if (hasOwnProperty(BASE_UNITS, _i7)) {
          var match = true;
          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }
          if (match) {
            anyMatch = true;
            newUnit.base = BASE_UNITS[_i7];
            break;
          }
        }
      }
      if (!anyMatch) {
        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit

        var _newBaseUnit = {
          dimensions: defUnit.dimensions.slice(0)
        };
        _newBaseUnit.key = baseName;
        BASE_UNITS[baseName] = _newBaseUnit;
        currentUnitSystem[baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };
        newUnit.base = BASE_UNITS[baseName];
      }
    }
    Unit.UNITS[name] = newUnit;
    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
      var aliasName = aliases[_i8];
      var _alias = {};
      for (var _key6 in newUnit) {
        if (hasOwnProperty(newUnit, _key6)) {
          _alias[_key6] = newUnit[_key6];
        }
      }
      _alias.name = aliasName;
      Unit.UNITS[aliasName] = _alias;
    }
    return new Unit(null, name);
  };
  Unit.deleteUnit = function (name) {
    delete Unit.UNITS[name];
  }; // expose arrays with prefixes, dimensions, units, systems

  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;
  return Unit;
}, {
  isClass: true
});

var name$24 = 'unit';
var dependencies$24 = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

var createUnitFunction = /* #__PURE__ */factory(name$24, dependencies$24, function (_ref) {
  var typed = _ref.typed,
    Unit = _ref.Unit;

  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */
  return typed(name$24, {
    Unit: function Unit(x) {
      return x.clone();
    },
    string: function string(x) {
      if (Unit.isValuelessUnit(x)) {
        return new Unit(null, x); // a pure unit
      }

      return Unit.parse(x, {
        allowNoUnits: true
      }); // a unit with value, like '5cm'
    },

    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
      return new Unit(value, unit);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$23 = 'sparse';
var dependencies$23 = ['typed', 'SparseMatrix'];
var createSparse = /* #__PURE__ */factory(name$23, dependencies$23, function (_ref) {
  var typed = _ref.typed,
    SparseMatrix = _ref.SparseMatrix;

  /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  return typed(name$23, {
    '': function _() {
      return new SparseMatrix([]);
    },
    string: function string(datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function ArrayMatrix(data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
});

var name$22 = 'createUnit';
var dependencies$22 = ['typed', 'Unit'];
var createCreateUnit = /* #__PURE__ */factory(name$22, dependencies$22, function (_ref) {
  var typed = _ref.typed,
    Unit = _ref.Unit;

  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  return typed(name$22, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function ObjectObject(obj, options) {
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    Object: function Object(obj) {
      return Unit.createUnit(obj, {});
    },
    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
      var obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, {});
    },
    // Without a definition, creates a base unit.
    string: function string(name) {
      var obj = {};
      obj[name] = {};
      return Unit.createUnit(obj, {});
    }
  });
});

var name$21 = 'acos';
var dependencies$21 = ['typed', 'config', 'Complex'];
var createAcos = /* #__PURE__ */factory(name$21, dependencies$21, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex;

  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  return typed(name$21, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new Complex(x, 0).acos();
      }
    },
    Complex: function Complex(x) {
      return x.acos();
    },
    BigNumber: function BigNumber(x) {
      return x.acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$20 = 'acosh';
var dependencies$20 = ['typed', 'config', 'Complex'];
var createAcosh = /* #__PURE__ */factory(name$20, dependencies$20, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  return typed(name$20, {
    number: function number(x) {
      if (x >= 1 || config.predictable) {
        return acoshNumber(x);
      }
      if (x <= -1) {
        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }
      return new Complex(x, 0).acosh();
    },
    Complex: function Complex(x) {
      return x.acosh();
    },
    BigNumber: function BigNumber(x) {
      return x.acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1$ = 'acot';
var dependencies$1$ = ['typed', 'BigNumber'];
var createAcot = /* #__PURE__ */factory(name$1$, dependencies$1$, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  return typed(name$1$, {
    number: acotNumber,
    Complex: function Complex(x) {
      return x.acot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1_ = 'acoth';
var dependencies$1_ = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcoth = /* #__PURE__ */factory(name$1_, dependencies$1_, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  return typed(name$1_, {
    number: function number(x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return acothNumber(x);
      }
      return new Complex(x, 0).acoth();
    },
    Complex: function Complex(x) {
      return x.acoth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1Z = 'acsc';
var dependencies$1Z = ['typed', 'config', 'Complex', 'BigNumber'];
var createAcsc = /* #__PURE__ */factory(name$1Z, dependencies$1Z, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  return typed(name$1Z, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return acscNumber(x);
      }
      return new Complex(x, 0).acsc();
    },
    Complex: function Complex(x) {
      return x.acsc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1Y = 'acsch';
var dependencies$1Y = ['typed', 'BigNumber'];
var createAcsch = /* #__PURE__ */factory(name$1Y, dependencies$1Y, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  return typed(name$1Y, {
    number: acschNumber,
    Complex: function Complex(x) {
      return x.acsch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1X = 'asec';
var dependencies$1X = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsec = /* #__PURE__ */factory(name$1X, dependencies$1X, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  return typed(name$1X, {
    number: function number(x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return asecNumber(x);
      }
      return new Complex(x, 0).asec();
    },
    Complex: function Complex(x) {
      return x.asec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1W = 'asech';
var dependencies$1W = ['typed', 'config', 'Complex', 'BigNumber'];
var createAsech = /* #__PURE__ */factory(name$1W, dependencies$1W, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  return typed(name$1W, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        var xInv = 1 / x;
        if (xInv > 0 || config.predictable) {
          return asechNumber(x);
        }
        var ret = Math.sqrt(xInv * xInv - 1);
        return new Complex(Math.log(ret - xInv), Math.PI);
      }
      return new Complex(x, 0).asech();
    },
    Complex: function Complex(x) {
      return x.asech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1V = 'asin';
var dependencies$1V = ['typed', 'config', 'Complex'];
var createAsin = /* #__PURE__ */factory(name$1V, dependencies$1V, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex;

  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  return typed(name$1V, {
    number: function number(x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new Complex(x, 0).asin();
      }
    },
    Complex: function Complex(x) {
      return x.asin();
    },
    BigNumber: function BigNumber(x) {
      return x.asin();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asin(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1U = 'asinh';
var dependencies$1U = ['typed'];
var createAsinh = /* #__PURE__ */factory(name$1U, dependencies$1U, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  return typed('asinh', {
    number: asinhNumber,
    Complex: function Complex(x) {
      return x.asinh();
    },
    BigNumber: function BigNumber(x) {
      return x.asinh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1T = 'atan';
var dependencies$1T = ['typed'];
var createAtan = /* #__PURE__ */factory(name$1T, dependencies$1T, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  return typed('atan', {
    number: function number(x) {
      return Math.atan(x);
    },
    Complex: function Complex(x) {
      return x.atan();
    },
    BigNumber: function BigNumber(x) {
      return x.atan();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atan(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1S = 'atan2';
var dependencies$1S = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
var createAtan2 = /* #__PURE__ */factory(name$1S, dependencies$1S, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    equalScalar = _ref.equalScalar,
    BigNumber = _ref.BigNumber,
    DenseMatrix = _ref.DenseMatrix;
  var algorithm02 = createAlgorithm02({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm03 = createAlgorithm03({
    typed: typed
  });
  var algorithm09 = createAlgorithm09({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm12 = createAlgorithm12({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  return typed(name$1S, {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
      return BigNumber.atan2(y, x);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm09(x, y, this, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      // mind the order of y and x!
      return algorithm02(y, x, this, true);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm03(x, y, this, false);
    },
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, this);
    },
    'Array, Array': function ArrayArray(x, y) {
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      return this(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
      return algorithm11(x, y, this, false);
    },
    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
      return algorithm14(x, y, this, false);
    },
    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
      // mind the order of y and x
      return algorithm12(y, x, this, true);
    },
    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
      // mind the order of y and x
      return algorithm14(y, x, this, true);
    },
    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
      return algorithm14(matrix(x), y, this, false).valueOf();
    },
    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
      return algorithm14(matrix(y), x, this, true).valueOf();
    }
  });
});

var name$1R = 'atanh';
var dependencies$1R = ['typed', 'config', 'Complex'];
var createAtanh = /* #__PURE__ */factory(name$1R, dependencies$1R, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    Complex = _ref.Complex;

  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  return typed(name$1R, {
    number: function number(x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return atanhNumber(x);
      }
      return new Complex(x, 0).atanh();
    },
    Complex: function Complex(x) {
      return x.atanh();
    },
    BigNumber: function BigNumber(x) {
      return x.atanh();
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1Q = 'cos';
var dependencies$1Q = ['typed'];
var createCos = /* #__PURE__ */factory(name$1Q, dependencies$1Q, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  return typed(name$1Q, {
    number: Math.cos,
    Complex: function Complex(x) {
      return x.cos();
    },
    BigNumber: function BigNumber(x) {
      return x.cos();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1P = 'cosh';
var dependencies$1P = ['typed'];
var createCosh = /* #__PURE__ */factory(name$1P, dependencies$1P, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  return typed(name$1P, {
    number: cosh$2,
    Complex: function Complex(x) {
      return x.cosh();
    },
    BigNumber: function BigNumber(x) {
      return x.cosh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1O = 'cot';
var dependencies$1O = ['typed', 'BigNumber'];
var createCot = /* #__PURE__ */factory(name$1O, dependencies$1O, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  return typed(name$1O, {
    number: cotNumber,
    Complex: function Complex(x) {
      return x.cot();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tan());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1N = 'coth';
var dependencies$1N = ['typed', 'BigNumber'];
var createCoth = /* #__PURE__ */factory(name$1N, dependencies$1N, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  return typed(name$1N, {
    number: cothNumber,
    Complex: function Complex(x) {
      return x.coth();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.tanh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1M = 'csc';
var dependencies$1M = ['typed', 'BigNumber'];
var createCsc = /* #__PURE__ */factory(name$1M, dependencies$1M, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  return typed(name$1M, {
    number: cscNumber,
    Complex: function Complex(x) {
      return x.csc();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sin());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1L = 'csch';
var dependencies$1L = ['typed', 'BigNumber'];
var createCsch = /* #__PURE__ */factory(name$1L, dependencies$1L, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  return typed(name$1L, {
    number: cschNumber,
    Complex: function Complex(x) {
      return x.csch();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.sinh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1K = 'sec';
var dependencies$1K = ['typed', 'BigNumber'];
var createSec = /* #__PURE__ */factory(name$1K, dependencies$1K, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  return typed(name$1K, {
    number: secNumber,
    Complex: function Complex(x) {
      return x.sec();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cos());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1J = 'sech';
var dependencies$1J = ['typed', 'BigNumber'];
var createSech = /* #__PURE__ */factory(name$1J, dependencies$1J, function (_ref) {
  var typed = _ref.typed,
    _BigNumber = _ref.BigNumber;

  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  return typed(name$1J, {
    number: sechNumber,
    Complex: function Complex(x) {
      return x.sech();
    },
    BigNumber: function BigNumber(x) {
      return new _BigNumber(1).div(x.cosh());
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      return deepMap(x, this);
    }
  });
});

var name$1I = 'sin';
var dependencies$1I = ['typed'];
var createSin = /* #__PURE__ */factory(name$1I, dependencies$1I, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  return typed(name$1I, {
    number: Math.sin,
    Complex: function Complex(x) {
      return x.sin();
    },
    BigNumber: function BigNumber(x) {
      return x.sin();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sin(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1H = 'sinh';
var dependencies$1H = ['typed'];
var createSinh = /* #__PURE__ */factory(name$1H, dependencies$1H, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  return typed(name$1H, {
    number: sinhNumber,
    Complex: function Complex(x) {
      return x.sinh();
    },
    BigNumber: function BigNumber(x) {
      return x.sinh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1G = 'tan';
var dependencies$1G = ['typed'];
var createTan = /* #__PURE__ */factory(name$1G, dependencies$1G, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  return typed(name$1G, {
    number: Math.tan,
    Complex: function Complex(x) {
      return x.tan();
    },
    BigNumber: function BigNumber(x) {
      return x.tan();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tan(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1F = 'tanh';
var dependencies$1F = ['typed'];
var createTanh = /* #__PURE__ */factory(name$1F, dependencies$1F, function (_ref) {
  var typed = _ref.typed;

  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  return typed('tanh', {
    number: tanh$2,
    Complex: function Complex(x) {
      return x.tanh();
    },
    BigNumber: function BigNumber(x) {
      return x.tanh();
    },
    Unit: function Unit(x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }
      return this(x.value);
    },
    'Array | Matrix': function ArrayMatrix(x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return deepMap(x, this);
    }
  });
});

var name$1E = 'setCartesian';
var dependencies$1E = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetCartesian = /* #__PURE__ */factory(name$1E, dependencies$1E, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  return typed(name$1E, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result = [];
      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
        // if any of them is empty, return empty
        var b1 = flatten$1(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        var b2 = flatten$1(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        result = [];
        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      } // return an array, if both inputs were arrays

      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      } // return a matrix otherwise

      return new DenseMatrix(result);
    }
  });
});

var name$1D = 'setDifference';
var dependencies$1D = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDifference = /* #__PURE__ */factory(name$1D, dependencies$1D, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  return typed(name$1D, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;
      if (subset(size(a1), new Index(0)) === 0) {
        // empty-anything=empty
        result = [];
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything-empty=anything
        return flatten$1(a1.toArray());
      } else {
        var b1 = identify(flatten$1(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = identify(flatten$1(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        var inb2;
        for (var i = 0; i < b1.length; i++) {
          inb2 = false;
          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }
          if (!inb2) {
            result.push(b1[i]);
          }
        }
      } // return an array, if both inputs were arrays

      if (Array.isArray(a1) && Array.isArray(a2)) {
        return generalize(result);
      } // return a matrix otherwise

      return new DenseMatrix(generalize(result));
    }
  });
});

var name$1C = 'setDistinct';
var dependencies$1C = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetDistinct = /* #__PURE__ */factory(name$1C, dependencies$1C, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  return typed(name$1C, {
    'Array | Matrix': function ArrayMatrix(a) {
      var result;
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        result = [];
      } else {
        var b = flatten$1(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        result = [];
        result.push(b[0]);
        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            result.push(b[i]);
          }
        }
      } // return an array, if the input was an array

      if (Array.isArray(a)) {
        return result;
      } // return a matrix otherwise

      return new DenseMatrix(result);
    }
  });
});

var name$1B = 'setIntersect';
var dependencies$1B = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
var createSetIntersect = /* #__PURE__ */factory(name$1B, dependencies$1B, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index,
    DenseMatrix = _ref.DenseMatrix;

  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  return typed(name$1B, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      var result;
      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
        // of any of them is empty, return empty
        result = [];
      } else {
        var b1 = identify(flatten$1(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        var b2 = identify(flatten$1(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        for (var i = 0; i < b1.length; i++) {
          for (var j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              result.push(b1[i]);
              break;
            }
          }
        }
      } // return an array, if both inputs were arrays

      if (Array.isArray(a1) && Array.isArray(a2)) {
        return generalize(result);
      } // return a matrix otherwise

      return new DenseMatrix(generalize(result));
    }
  });
});

var name$1A = 'setIsSubset';
var dependencies$1A = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetIsSubset = /* #__PURE__ */factory(name$1A, dependencies$1A, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index;

  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  return typed(name$1A, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // empty is a subset of anything
        return true;
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything is not a subset of empty
        return false;
      }
      var b1 = identify(flatten$1(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      var b2 = identify(flatten$1(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      var inb2;
      for (var i = 0; i < b1.length; i++) {
        inb2 = false;
        for (var j = 0; j < b2.length; j++) {
          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
            // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }
        if (inb2 === false) {
          return false;
        }
      }
      return true;
    }
  });
});

var name$1z = 'setMultiplicity';
var dependencies$1z = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetMultiplicity = /* #__PURE__ */factory(name$1z, dependencies$1z, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index;

  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  return typed(name$1z, {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return 0
        return 0;
      }
      var b = flatten$1(Array.isArray(a) ? a : a.toArray());
      var count = 0;
      for (var i = 0; i < b.length; i++) {
        if (compareNatural(b[i], e) === 0) {
          count++;
        }
      }
      return count;
    }
  });
});

var name$1y = 'setPowerset';
var dependencies$1y = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
var createSetPowerset = /* #__PURE__ */factory(name$1y, dependencies$1y, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    subset = _ref.subset,
    compareNatural = _ref.compareNatural,
    Index = _ref.Index;

  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  return typed(name$1y, {
    'Array | Matrix': function ArrayMatrix(a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        return [];
      }
      var b = flatten$1(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      var result = [];
      var number = 0;
      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split('').reverse()));
        number++;
      } // can not return a matrix, because of the different size of the subarrays

      return _sort(result);
    }
  }); // create subset

  function _subset(array, bitarray) {
    var result = [];
    for (var i = 0; i < bitarray.length; i++) {
      if (bitarray[i] === '1') {
        result.push(array[i]);
      }
    }
    return result;
  } // sort subsests by length

  function _sort(array) {
    var temp = [];
    for (var i = array.length - 1; i > 0; i--) {
      for (var j = 0; j < i; j++) {
        if (array[j].length > array[j + 1].length) {
          temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }
    return array;
  }
});

var name$1x = 'setSize';
var dependencies$1x = ['typed', 'compareNatural'];
var createSetSize = /* #__PURE__ */factory(name$1x, dependencies$1x, function (_ref) {
  var typed = _ref.typed,
    compareNatural = _ref.compareNatural;

  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  return typed(name$1x, {
    'Array | Matrix': function ArrayMatrix(a) {
      return Array.isArray(a) ? flatten$1(a).length : flatten$1(a.toArray()).length;
    },
    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? flatten$1(a).length : flatten$1(a.toArray()).length;
      } else {
        var b = flatten$1(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        var count = 1;
        for (var i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            count++;
          }
        }
        return count;
      }
    }
  });
});

var name$1w = 'setSymDifference';
var dependencies$1w = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
var createSetSymDifference = /* #__PURE__ */factory(name$1w, dependencies$1w, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    concat = _ref.concat,
    subset = _ref.subset,
    setDifference = _ref.setDifference,
    Index = _ref.Index;

  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  return typed(name$1w, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return flatten$1(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return flatten$1(a1);
      }
      var b1 = flatten$1(a1);
      var b2 = flatten$1(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });
});

var name$1v = 'setUnion';
var dependencies$1v = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
var createSetUnion = /* #__PURE__ */factory(name$1v, dependencies$1v, function (_ref) {
  var typed = _ref.typed,
    size = _ref.size,
    concat = _ref.concat,
    subset = _ref.subset,
    setIntersect = _ref.setIntersect,
    setSymDifference = _ref.setSymDifference,
    Index = _ref.Index;

  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  return typed(name$1v, {
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return flatten$1(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return flatten$1(a1);
      }
      var b1 = flatten$1(a1);
      var b2 = flatten$1(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });
});

var name$1u = 'add';
var dependencies$1u = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
var createAdd = /* #__PURE__ */factory(name$1u, dependencies$1u, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    addScalar = _ref.addScalar,
    equalScalar = _ref.equalScalar,
    DenseMatrix = _ref.DenseMatrix;
    _ref.SparseMatrix;
  var algorithm01 = createAlgorithm01({
    typed: typed
  });
  var algorithm04 = createAlgorithm04({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm10 = createAlgorithm10({
    typed: typed,
    DenseMatrix: DenseMatrix
  });
  var algorithm13 = createAlgorithm13({
    typed: typed
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  return typed(name$1u, extend({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
      return algorithm13(x, y, addScalar);
    },
    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
      return algorithm01(x, y, addScalar, false);
    },
    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
      return algorithm01(y, x, addScalar, true);
    },
    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
      return algorithm04(x, y, addScalar);
    },
    'Array, Array': function ArrayArray(x, y) {
      // use matrix implementation
      return this(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function ArrayMatrix(x, y) {
      // use matrix implementation
      return this(matrix(x), y);
    },
    'Matrix, Array': function MatrixArray(x, y) {
      // use matrix implementation
      return this(x, matrix(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, addScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm10(x, y, addScalar, false);
    },
    'any, DenseMatrix': function anyDenseMatrix(x, y) {
      return algorithm14(y, x, addScalar, true);
    },
    'any, SparseMatrix': function anySparseMatrix(x, y) {
      return algorithm10(y, x, addScalar, true);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function anyArray(x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'any, any, ...any': function anyAnyAny(x, y, rest) {
      var result = this(x, y);
      for (var i = 0; i < rest.length; i++) {
        result = this(result, rest[i]);
      }
      return result;
    }
  }, addScalar.signatures));
});

var name$1t = 'hypot';
var dependencies$1t = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
var createHypot = /* #__PURE__ */factory(name$1t, dependencies$1t, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    addScalar = _ref.addScalar,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    sqrt = _ref.sqrt,
    smaller = _ref.smaller,
    isPositive = _ref.isPositive;

  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  return typed(name$1t, {
    '... number | BigNumber': _hypot,
    Array: function Array(x) {
      return this.apply(this, flatten$1(x));
    },
    Matrix: function Matrix(x) {
      return this.apply(this, flatten$1(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    var result = 0;
    var largest = 0;
    for (var i = 0; i < args.length; i++) {
      var value = abs(args[i]);
      if (smaller(largest, value)) {
        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
        result = addScalar(result, 1);
        largest = value;
      } else {
        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
      }
    }
    return multiplyScalar(largest, sqrt(result));
  }
});

var name$1s = 'norm';
var dependencies$1s = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];
var createNorm = /* #__PURE__ */factory(name$1s, dependencies$1s, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    add = _ref.add,
    pow = _ref.pow,
    conj = _ref.conj,
    sqrt = _ref.sqrt,
    multiply = _ref.multiply,
    equalScalar = _ref.equalScalar,
    larger = _ref.larger,
    smaller = _ref.smaller,
    matrix = _ref.matrix,
    ctranspose = _ref.ctranspose,
    eigs = _ref.eigs;

  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  return typed(name$1s, {
    number: Math.abs,
    Complex: function Complex(x) {
      return x.abs();
    },
    BigNumber: function BigNumber(x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    "boolean": function _boolean(x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    Array: function Array(x) {
      return _norm(matrix(x), 2);
    },
    Matrix: function Matrix(x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return this(x);
    },
    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the plus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _vectorNormPlusInfinity(x) {
    // norm(x, Infinity) = max(abs(x))
    var pinf = 0; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);
      if (larger(v, pinf)) {
        pinf = v;
      }
    }, true);
    return pinf;
  }
  /**
   * Calculate the minus infinity norm for a vector
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _vectorNormMinusInfinity(x) {
    // norm(x, -Infinity) = min(abs(x))
    var ninf; // skip zeros since abs(0) === 0

    x.forEach(function (value) {
      var v = abs(value);
      if (!ninf || smaller(v, ninf)) {
        ninf = v;
      }
    }, true);
    return ninf || 0;
  }
  /**
   * Calculate the norm for a vector
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _vectorNorm(x, p) {
    // check p
    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _vectorNormPlusInfinity(x);
    }
    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
      return _vectorNormMinusInfinity(x);
    }
    if (p === 'fro') {
      return _norm(x, 2);
    }
    if (typeof p === 'number' && !isNaN(p)) {
      // check p != 0
      if (!equalScalar(p, 0)) {
        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
        var n = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          n = add(pow(abs(value), p), n);
        }, true);
        return pow(n, 1 / p);
      }
      return Number.POSITIVE_INFINITY;
    } // invalid parameter value

    throw new Error('Unsupported parameter value');
  }
  /**
   * Calculate the Frobenius norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _matrixNormFrobenius(x) {
    // norm(x) = sqrt(sum(diag(x'x)))
    var fro = 0;
    x.forEach(function (value, index) {
      fro = add(fro, multiply(value, conj(value)));
    });
    return abs(sqrt(fro));
  }
  /**
   * Calculate the norm L1 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _matrixNormOne(x) {
    // norm(x) = the largest column sum
    var c = []; // result

    var maxc = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var j = index[1];
      var cj = add(c[j] || 0, abs(value));
      if (larger(cj, maxc)) {
        maxc = cj;
      }
      c[j] = cj;
    }, true);
    return maxc;
  }
  /**
   * Calculate the norm L2 for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _matrixNormTwo(x) {
    // norm(x) = sqrt( max eigenvalue of A*.A)
    var sizeX = x.size();
    if (sizeX[0] !== sizeX[1]) {
      throw new RangeError('Invalid matrix dimensions');
    }
    var tx = ctranspose(x);
    var squaredX = multiply(tx, x);
    var eigenVals = eigs(squaredX).values;
    var rho = eigenVals.get([eigenVals.size()[0] - 1]);
    return abs(sqrt(rho));
  }
  /**
   * Calculate the infinity norm for a matrix
   * @param {Matrix} x
   * @returns {number} Returns the norm
   * @private
   */

  function _matrixNormInfinity(x) {
    // norm(x) = the largest row sum
    var r = []; // result

    var maxr = 0; // skip zeros since abs(0) == 0

    x.forEach(function (value, index) {
      var i = index[0];
      var ri = add(r[i] || 0, abs(value));
      if (larger(ri, maxr)) {
        maxr = ri;
      }
      r[i] = ri;
    }, true);
    return maxr;
  }
  /**
   * Calculate the norm for a 2D Matrix (M*N)
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _matrixNorm(x, p) {
    // check p
    if (p === 1) {
      return _matrixNormOne(x);
    }
    if (p === Number.POSITIVE_INFINITY || p === 'inf') {
      return _matrixNormInfinity(x);
    }
    if (p === 'fro') {
      return _matrixNormFrobenius(x);
    }
    if (p === 2) {
      return _matrixNormTwo(x);
    } // invalid parameter value

    throw new Error('Unsupported parameter value ' + p);
  }
  /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _norm(x, p) {
    // size
    var sizeX = x.size(); // check if it is a vector

    if (sizeX.length === 1) {
      return _vectorNorm(x, p);
    } // MxN matrix

    if (sizeX.length === 2) {
      if (sizeX[0] && sizeX[1]) {
        return _matrixNorm(x, p);
      } else {
        throw new RangeError('Invalid matrix dimensions');
      }
    }
  }
});

var name$1r = 'dot';
var dependencies$1r = ['typed', 'addScalar', 'multiplyScalar', 'conj', 'size'];
var createDot = /* #__PURE__ */factory(name$1r, dependencies$1r, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    multiplyScalar = _ref.multiplyScalar,
    conj = _ref.conj,
    size = _ref.size;

  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, ..., an]` and `B = [b1, b2, ..., bn]` is defined as:
   *
   *    dot(A, B) = conj(a1) * b1 + conj(a2) * b2 + ... + conj(an) * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  return typed(name$1r, {
    'Array | DenseMatrix, Array | DenseMatrix': _denseDot,
    'SparseMatrix, SparseMatrix': _sparseDot
  });
  function _validateDim(x, y) {
    var xSize = _size(x);
    var ySize = _size(y);
    var xLen, yLen;
    if (xSize.length === 1) {
      xLen = xSize[0];
    } else if (xSize.length === 2 && xSize[1] === 1) {
      xLen = xSize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + xSize.join(', ') + ')');
    }
    if (ySize.length === 1) {
      yLen = ySize[0];
    } else if (ySize.length === 2 && ySize[1] === 1) {
      yLen = ySize[0];
    } else {
      throw new RangeError('Expected a column vector, instead got a matrix of size (' + ySize.join(', ') + ')');
    }
    if (xLen !== yLen) throw new RangeError('Vectors must have equal length (' + xLen + ' != ' + yLen + ')');
    if (xLen === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    return xLen;
  }
  function _denseDot(a, b) {
    var N = _validateDim(a, b);
    var adata = isMatrix(a) ? a._data : a;
    var adt = isMatrix(a) ? a._datatype : undefined;
    var bdata = isMatrix(b) ? b._data : b;
    var bdt = isMatrix(b) ? b._datatype : undefined; // are these 2-dimensional column vectors? (as opposed to 1-dimensional vectors)

    var aIsColumn = _size(a).length === 2;
    var bIsColumn = _size(b).length === 2;
    var add = addScalar;
    var mul = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      var dt = adt; // find signatures that matches (dt, dt)

      add = typed.find(addScalar, [dt, dt]);
      mul = typed.find(multiplyScalar, [dt, dt]);
    } // both vectors 1-dimensional

    if (!aIsColumn && !bIsColumn) {
      var c = mul(conj(adata[0]), bdata[0]);
      for (var i = 1; i < N; i++) {
        c = add(c, mul(conj(adata[i]), bdata[i]));
      }
      return c;
    } // a is 1-dim, b is column

    if (!aIsColumn && bIsColumn) {
      var _c = mul(conj(adata[0]), bdata[0][0]);
      for (var _i = 1; _i < N; _i++) {
        _c = add(_c, mul(conj(adata[_i]), bdata[_i][0]));
      }
      return _c;
    } // a is column, b is 1-dim

    if (aIsColumn && !bIsColumn) {
      var _c2 = mul(conj(adata[0][0]), bdata[0]);
      for (var _i2 = 1; _i2 < N; _i2++) {
        _c2 = add(_c2, mul(conj(adata[_i2][0]), bdata[_i2]));
      }
      return _c2;
    } // both vectors are column

    if (aIsColumn && bIsColumn) {
      var _c3 = mul(conj(adata[0][0]), bdata[0][0]);
      for (var _i3 = 1; _i3 < N; _i3++) {
        _c3 = add(_c3, mul(conj(adata[_i3][0]), bdata[_i3][0]));
      }
      return _c3;
    }
  }
  function _sparseDot(x, y) {
    _validateDim(x, y);
    var xindex = x._index;
    var xvalues = x._values;
    var yindex = y._index;
    var yvalues = y._values; // TODO optimize add & mul using datatype

    var c = 0;
    var add = addScalar;
    var mul = multiplyScalar;
    var i = 0;
    var j = 0;
    while (i < xindex.length && j < yindex.length) {
      var I = xindex[i];
      var J = yindex[j];
      if (I < J) {
        i++;
        continue;
      }
      if (I > J) {
        j++;
        continue;
      }
      if (I === J) {
        c = add(c, mul(xvalues[i], yvalues[j]));
        i++;
        j++;
      }
    }
    return c;
  } // TODO remove this once #1771 is fixed

  function _size(x) {
    return isMatrix(x) ? x.size() : size(x);
  }
});

var name$1q = 'trace';
var dependencies$1q = ['typed', 'matrix', 'add'];
var createTrace = /* #__PURE__ */factory(name$1q, dependencies$1q, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    add = _ref.add;

  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  return typed('trace', {
    Array: function _arrayTrace(x) {
      // use dense matrix implementation
      return _denseTrace(matrix(x));
    },
    SparseMatrix: _sparseTrace,
    DenseMatrix: _denseTrace,
    any: clone$2
  });
  function _denseTrace(m) {
    // matrix size & data
    var size = m._size;
    var data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] === 1) {
          // return data[0]
          return clone$2(data[0]);
        }
        throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
      case 2:
        {
          // two dimensional
          var rows = size[0];
          var cols = size[1];
          if (rows === cols) {
            // calulate sum
            var sum = 0; // loop diagonal

            for (var i = 0; i < rows; i++) {
              sum = add(sum, data[i][i]);
            } // return trace

            return sum;
          } else {
            throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
          }
        }
      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + format$1(size) + ')');
    }
  }
  function _sparseTrace(m) {
    // matrix arrays
    var values = m._values;
    var index = m._index;
    var ptr = m._ptr;
    var size = m._size; // check dimensions

    var rows = size[0];
    var columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      var sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (var j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          var k0 = ptr[j];
          var k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (var k = k0; k < k1; k++) {
            // row index
            var i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }
            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace

      return sum;
    }
    throw new RangeError('Matrix must be square (size: ' + format$1(size) + ')');
  }
});

var name$1p = 'index';
var dependencies$1p = ['typed', 'Index'];
var createIndex = /* #__PURE__ */factory(name$1p, dependencies$1p, function (_ref) {
  var typed = _ref.typed,
    Index = _ref.Index;

  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed(name$1p, {
    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
      var ranges = args.map(function (arg) {
        if (isBigNumber(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || isMatrix(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return isBigNumber(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      var res = new Index();
      Index.apply(res, ranges);
      return res;
    }
  });
});

// Reserved keywords not allowed to use in the parser
var keywords = {
  end: true
};

function _typeof$6(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$6 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$6 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$6(obj);
}
var name$1o = 'Node';
var dependencies$1o = ['mathWithTransform'];
var createNode = /* #__PURE__ */factory(name$1o, dependencies$1o, function (_ref) {
  var mathWithTransform = _ref.mathWithTransform;

  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */

  Node.prototype.evaluate = function (scope) {
    return this.compile().evaluate(scope);
  };
  Node.prototype.type = 'Node';
  Node.prototype.isNode = true;
  Node.prototype.comment = '';
  /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */

  Node.prototype.compile = function () {
    var expr = this._compile(mathWithTransform, {});
    var args = {};
    var context = null;
    function evaluate(scope) {
      var s = scope || {};
      _validateScope(s);
      return expr(s, args, context);
    }
    return {
      evaluate: evaluate
    };
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  Node.prototype._compile = function (math, argNames) {
    throw new Error('Method _compile should be implemented by type ' + this.type);
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };
  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */

  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };
  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */

  Node.prototype._ifNode = function (node) {
    if (!isNode(node)) {
      throw new TypeError('Callback function must return a Node');
    }
    return node;
  };
  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */

  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    // eslint-disable-next-line
    callback(this, null, null); // recursively traverse over all childs of a node

    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);
        _traverse(child, callback);
      });
    }
    _traverse(this, callback);
  };
  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */

  Node.prototype.transform = function (callback) {
    function _transform(child, path, parent) {
      var replacement = callback(child, path, parent);
      if (replacement !== child) {
        // stop iterating when the node is replaced
        return replacement;
      }
      return child.map(_transform);
    }
    return _transform(this, null, null);
  };
  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */

  Node.prototype.filter = function (callback) {
    var nodes = [];
    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });
    return nodes;
  };
  /**
   * Create a shallow clone of this node
   * @return {Node}
   */

  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };
  /**
   * Create a deep clone of this node
   * @return {Node}
   */

  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };
  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */

  Node.prototype.equals = function (other) {
    return other ? deepStrictEqual(this, other) : false;
  };
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */

  Node.prototype.toString = function (options) {
    var customString;
    if (options && _typeof$6(options) === 'object') {
      switch (_typeof$6(options.handler)) {
        case 'object':
        case 'undefined':
          break;
        case 'function':
          customString = options.handler(this, options);
          break;
        default:
          throw new TypeError('Object or function expected as callback');
      }
    }
    if (typeof customString !== 'undefined') {
      return customString;
    }
    return this._toString(options);
  };
  /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */

  Node.prototype.toJSON = function () {
    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
  };
  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */

  Node.prototype.toHTML = function (options) {
    var customString;
    if (options && _typeof$6(options) === 'object') {
      switch (_typeof$6(options.handler)) {
        case 'object':
        case 'undefined':
          break;
        case 'function':
          customString = options.handler(this, options);
          break;
        default:
          throw new TypeError('Object or function expected as callback');
      }
    }
    if (typeof customString !== 'undefined') {
      return customString;
    }
    return this.toHTML(options);
  };
  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */

  Node.prototype._toString = function () {
    // must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };
  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */

  Node.prototype.toTex = function (options) {
    var customTex;
    if (options && _typeof$6(options) === 'object') {
      switch (_typeof$6(options.handler)) {
        case 'object':
        case 'undefined':
          break;
        case 'function':
          customTex = options.handler(this, options);
          break;
        default:
          throw new TypeError('Object or function expected as callback');
      }
    }
    if (typeof customTex !== 'undefined') {
      return customTex;
    }
    return this._toTex(options);
  };
  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */

  Node.prototype._toTex = function (options) {
    // must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };
  /**
   * Get identifier.
   * @return {string}
   */

  Node.prototype.getIdentifier = function () {
    return this.type;
  };
  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/

  Node.prototype.getContent = function () {
    return this;
  };
  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */

  function _validateScope(scope) {
    for (var symbol in scope) {
      if (hasOwnProperty(scope, symbol)) {
        if (symbol in keywords) {
          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
      }
    }
  }
  return Node;
}, {
  isClass: true,
  isNode: true
});

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */

function errorTransform(err) {
  if (err && err.isIndexError) {
    return new IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
  }
  return err;
}

function _typeof$5(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$5 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$5 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$5(obj);
}
function accessFactory(_ref) {
  var subset = _ref.subset;

  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index);
      } else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      } else if (_typeof$5(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }
        return getSafeProperty(object, index.getObjectProperty());
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw errorTransform(err);
    }
  };
}

var name$1n = 'AccessorNode';
var dependencies$1n = ['subset', 'Node'];
var createAccessorNode = /* #__PURE__ */factory(name$1n, dependencies$1n, function (_ref) {
  var subset = _ref.subset,
    Node = _ref.Node;
  var access = accessFactory({
    subset: subset
  });
  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */

  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (!isNode(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }
    if (!isIndexNode(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }
    this.object = object || null;
    this.index = index; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }
  AccessorNode.prototype = new Node();
  AccessorNode.prototype.type = 'AccessorNode';
  AccessorNode.prototype.isAccessorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AccessorNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);
    var evalIndex = this.index._compile(math, argNames);
    if (this.index.isObjectProperty()) {
      var prop = this.index.getObjectProperty();
      return function evalAccessorNode(scope, args, context) {
        return getSafeProperty(evalObject(scope, args, context), prop);
      };
    } else {
      return function evalAccessorNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var index = evalIndex(scope, args, object); // we pass object here instead of context

        return access(object, index);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };
  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */

  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */

  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */

  AccessorNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }
    return object + this.index.toString(options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */

  AccessorNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return object + this.index.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */

  AccessorNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    if (needParenthesis(this.object)) {
      object = '\\left(\' + object + \'\\right)';
    }
    return object + this.index.toTex(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  AccessorNode.prototype.toJSON = function () {
    return {
      mathjs: 'AccessorNode',
      object: this.object,
      index: this.index
    };
  };
  /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */

  AccessorNode.fromJSON = function (json) {
    return new AccessorNode(json.object, json.index);
  };
  /**
   * Are parenthesis needed?
   * @private
   */

  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));
  }
  return AccessorNode;
}, {
  isClass: true,
  isNode: true
});

var name$1m = 'ArrayNode';
var dependencies$1m = ['Node'];
var createArrayNode = /* #__PURE__ */factory(name$1m, dependencies$1m, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.items = items || []; // validate input

    if (!Array.isArray(this.items) || !this.items.every(isNode)) {
      throw new TypeError('Array containing Nodes expected');
    }
  }
  ArrayNode.prototype = new Node();
  ArrayNode.prototype.type = 'ArrayNode';
  ArrayNode.prototype.isArrayNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ArrayNode.prototype._compile = function (math, argNames) {
    var evalItems = map$1(this.items, function (item) {
      return item._compile(math, argNames);
    });
    var asMatrix = math.config.matrix !== 'Array';
    if (asMatrix) {
      var matrix = math.matrix;
      return function evalArrayNode(scope, args, context) {
        return matrix(map$1(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        }));
      };
    } else {
      return function evalArrayNode(scope, args, context) {
        return map$1(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        });
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  ArrayNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.items.length; i++) {
      var node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };
  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */

  ArrayNode.prototype.map = function (callback) {
    var items = [];
    for (var i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }
    return new ArrayNode(items);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */

  ArrayNode.prototype.clone = function () {
    return new ArrayNode(this.items.slice(0));
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ArrayNode.prototype._toString = function (options) {
    var items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  ArrayNode.prototype.toJSON = function () {
    return {
      mathjs: 'ArrayNode',
      items: this.items
    };
  };
  /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */

  ArrayNode.fromJSON = function (json) {
    return new ArrayNode(json.items);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ArrayNode.prototype.toHTML = function (options) {
    var items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  ArrayNode.prototype._toTex = function (options) {
    var s = '\\begin{bmatrix}';
    this.items.forEach(function (node) {
      if (node.items) {
        s += node.items.map(function (childNode) {
          return childNode.toTex(options);
        }).join('&');
      } else {
        s += node.toTex(options);
      } // new line

      s += '\\\\';
    });
    s += '\\end{bmatrix}';
    return s;
  };
  return ArrayNode;
}, {
  isClass: true,
  isNode: true
});

function _typeof$4(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$4 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$4(obj);
}
function assignFactory(_ref) {
  var subset = _ref.subset,
    matrix = _ref.matrix;

  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        // we use matrix.subset here instead of the function subset because we must not clone the contents
        return matrix(object).subset(index, value).valueOf();
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index, value);
      } else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      } else if (_typeof$4(object) === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }
        setSafeProperty(object, index.getObjectProperty(), value);
        return object;
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw errorTransform(err);
    }
  };
}

// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
var properties = [{
  // assignment
  AssignmentNode: {},
  FunctionAssignmentNode: {}
}, {
  // conditional expression
  ConditionalNode: {
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional
  }
}, {
  // logical or
  'OperatorNode:or': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical xor
  'OperatorNode:xor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical and
  'OperatorNode:and': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise or
  'OperatorNode:bitOr': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise xor
  'OperatorNode:bitXor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise and
  'OperatorNode:bitAnd': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // relational operators
  'OperatorNode:equal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:unequal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smaller': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:larger': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smallerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:largerEq': {
    associativity: 'left',
    associativeWith: []
  },
  RelationalNode: {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitshift operators
  'OperatorNode:leftShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightArithShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightLogShift': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unit conversion
  'OperatorNode:to': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // range
  RangeNode: {}
}, {
  // addition, subtraction
  'OperatorNode:add': {
    associativity: 'left',
    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
  },
  'OperatorNode:subtract': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  'OperatorNode:multiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
  },
  'OperatorNode:divide': {
    associativity: 'left',
    associativeWith: [],
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX
  },

  'OperatorNode:dotMultiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
  },
  'OperatorNode:dotDivide': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:mod': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unary prefix operators
  'OperatorNode:unaryPlus': {
    associativity: 'right'
  },
  'OperatorNode:unaryMinus': {
    associativity: 'right'
  },
  'OperatorNode:bitNot': {
    associativity: 'right'
  },
  'OperatorNode:not': {
    associativity: 'right'
  }
}, {
  // exponentiation
  'OperatorNode:pow': {
    associativity: 'right',
    associativeWith: [],
    latexRightParens: false // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)
  },

  'OperatorNode:dotPow': {
    associativity: 'right',
    associativeWith: []
  }
}, {
  // factorial
  'OperatorNode:factorial': {
    associativity: 'left'
  }
}, {
  // matrix transpose
  'OperatorNode:transpose': {
    associativity: 'left'
  }
}];
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node} _node
 * @param {string} parenthesis
 * @return {number | null}
 */

function getPrecedence(_node, parenthesis) {
  var node = _node;
  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }
  var identifier = node.getIdentifier();
  for (var i = 0; i < properties.length; i++) {
    if (identifier in properties[i]) {
      return i;
    }
  }
  return null;
}
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */

function getAssociativity(_node, parenthesis) {
  var node = _node;
  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }
  var identifier = node.getIdentifier();
  var index = getPrecedence(node, parenthesis);
  if (index === null) {
    // node isn't in the list
    return null;
  }
  var property = properties[index][identifier];
  if (hasOwnProperty(property, 'associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }
    if (property.associativity === 'right') {
      return 'right';
    } // associativity is invalid

    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
  } // associativity is undefined

  return null;
}
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {boolean | null}
 */

function isAssociativeWith(nodeA, nodeB, parenthesis) {
  // ParenthesisNodes are only ignored when not in 'keep' mode
  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
  var identifierA = a.getIdentifier();
  var identifierB = b.getIdentifier();
  var index = getPrecedence(a, parenthesis);
  if (index === null) {
    // node isn't in the list
    return null;
  }
  var property = properties[index][identifierA];
  if (hasOwnProperty(property, 'associativeWith') && property.associativeWith instanceof Array) {
    for (var i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }
    return false;
  } // associativeWith is not defined

  return null;
}

var name$1l = 'AssignmentNode';
var dependencies$1l = ['subset', '?matrix',
// FIXME: should not be needed at all, should be handled by subset
'Node'];
var createAssignmentNode = /* #__PURE__ */factory(name$1l, dependencies$1l, function (_ref) {
  var subset = _ref.subset,
    matrix = _ref.matrix,
    Node = _ref.Node;
  var access = accessFactory({
    subset: subset
  });
  var assign = assignFactory({
    subset: subset,
    matrix: matrix
  });
  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */

  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.object = object;
    this.index = value ? index : null;
    this.value = value || index; // validate input

    if (!isSymbolNode(object) && !isAccessorNode(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }
    if (isSymbolNode(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }
    if (this.index && !isIndexNode(this.index)) {
      // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }
    if (!isNode(this.value)) {
      throw new TypeError('Node expected as "value"');
    } // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }
  AssignmentNode.prototype = new Node();
  AssignmentNode.prototype.type = 'AssignmentNode';
  AssignmentNode.prototype.isAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AssignmentNode.prototype._compile = function (math, argNames) {
    var evalObject = this.object._compile(math, argNames);
    var evalIndex = this.index ? this.index._compile(math, argNames) : null;
    var evalValue = this.value._compile(math, argNames);
    var name = this.object.name;
    if (!this.index) {
      // apply a variable to the scope, for example `a=2`
      if (!isSymbolNode(this.object)) {
        throw new TypeError('SymbolNode expected as object');
      }
      return function evalAssignmentNode(scope, args, context) {
        return setSafeProperty(scope, name, evalValue(scope, args, context));
      };
    } else if (this.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      var prop = this.index.getObjectProperty();
      return function evalAssignmentNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        return setSafeProperty(object, prop, value);
      };
    } else if (isSymbolNode(this.object)) {
      // update a matrix subset, for example `a[2]=3`
      return function evalAssignmentNode(scope, args, context) {
        var childObject = evalObject(scope, args, context);
        var value = evalValue(scope, args, context);
        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

        setSafeProperty(scope, name, assign(childObject, index, value));
        return value;
      };
    } else {
      // isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      var evalParentObject = this.object.object._compile(math, argNames);
      if (this.object.index.isObjectProperty()) {
        var parentProp = this.object.index.getObjectProperty();
        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var childObject = getSafeProperty(parent, parentProp);
          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

          var value = evalValue(scope, args, context);
          setSafeProperty(parent, parentProp, assign(childObject, index, value));
          return value;
        };
      } else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        var evalParentIndex = this.object.index._compile(math, argNames);
        return function evalAssignmentNode(scope, args, context) {
          var parent = evalParentObject(scope, args, context);
          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

          var childObject = access(parent, parentIndex);
          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

          var value = evalValue(scope, args, context);
          assign(parent, parentIndex, assign(childObject, index, value));
          return value;
        };
      }
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    if (this.index) {
      callback(this.index, 'index', this);
    }
    callback(this.value, 'value', this);
  };
  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */

  AssignmentNode.prototype.map = function (callback) {
    var object = this._ifNode(callback(this.object, 'object', this));
    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;
    var value = this._ifNode(callback(this.value, 'value', this));
    return new AssignmentNode(object, index, value);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */

  AssignmentNode.prototype.clone = function () {
    return new AssignmentNode(this.object, this.index, this.value);
  };
  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */

  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }
    var precedence = getPrecedence(node, parenthesis);
    var exprPrecedence = getPrecedence(node.value, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */

  AssignmentNode.prototype._toString = function (options) {
    var object = this.object.toString(options);
    var index = this.index ? this.index.toString(options) : '';
    var value = this.value.toString(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }
    return object + index + ' = ' + value;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  AssignmentNode.prototype.toJSON = function () {
    return {
      mathjs: 'AssignmentNode',
      object: this.object,
      index: this.index,
      value: this.value
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */

  AssignmentNode.fromJSON = function (json) {
    return new AssignmentNode(json.object, json.index, json.value);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */

  AssignmentNode.prototype.toHTML = function (options) {
    var object = this.object.toHTML(options);
    var index = this.index ? this.index.toHTML(options) : '';
    var value = this.value.toHTML(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }
    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */

  AssignmentNode.prototype._toTex = function (options) {
    var object = this.object.toTex(options);
    var index = this.index ? this.index.toTex(options) : '';
    var value = this.value.toTex(options);
    if (needParenthesis(this, options && options.parenthesis)) {
      value = "\\left(".concat(value, "\\right)");
    }
    return object + index + ':=' + value;
  };
  return AssignmentNode;
}, {
  isClass: true,
  isNode: true
});

var name$1k = 'BlockNode';
var dependencies$1k = ['ResultSet', 'Node'];
var createBlockNode = /* #__PURE__ */factory(name$1k, dependencies$1k, function (_ref) {
  var ResultSet = _ref.ResultSet,
    Node = _ref.Node;

  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input, copy blocks

    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      var node = block && block.node;
      var visible = block && block.visible !== undefined ? block.visible : true;
      if (!isNode(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
      return {
        node: node,
        visible: visible
      };
    });
  }
  BlockNode.prototype = new Node();
  BlockNode.prototype.type = 'BlockNode';
  BlockNode.prototype.isBlockNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  BlockNode.prototype._compile = function (math, argNames) {
    var evalBlocks = map$1(this.blocks, function (block) {
      return {
        evaluate: block.node._compile(math, argNames),
        visible: block.visible
      };
    });
    return function evalBlockNodes(scope, args, context) {
      var results = [];
      forEach$1(evalBlocks, function evalBlockNode(block) {
        var result = block.evaluate(scope, args, context);
        if (block.visible) {
          results.push(result);
        }
      });
      return new ResultSet(results);
    };
  };
  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  BlockNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };
  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */

  BlockNode.prototype.map = function (callback) {
    var blocks = [];
    for (var i = 0; i < this.blocks.length; i++) {
      var block = this.blocks[i];
      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }
    return new BlockNode(blocks);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */

  BlockNode.prototype.clone = function () {
    var blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });
    return new BlockNode(blocks);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  BlockNode.prototype.toJSON = function () {
    return {
      mathjs: 'BlockNode',
      blocks: this.blocks
    };
  };
  /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */

  BlockNode.fromJSON = function (json) {
    return new BlockNode(json.blocks);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };
  return BlockNode;
}, {
  isClass: true,
  isNode: true
});

var name$1j = 'ConditionalNode';
var dependencies$1j = ['Node'];
var createConditionalNode = /* #__PURE__ */factory(name$1j, dependencies$1j, function (_ref) {
  var Node = _ref.Node;

  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (!isNode(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
    if (!isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }
  ConditionalNode.prototype = new Node();
  ConditionalNode.prototype.type = 'ConditionalNode';
  ConditionalNode.prototype.isConditionalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConditionalNode.prototype._compile = function (math, argNames) {
    var evalCondition = this.condition._compile(math, argNames);
    var evalTrueExpr = this.trueExpr._compile(math, argNames);
    var evalFalseExpr = this.falseExpr._compile(math, argNames);
    return function evalConditionalNode(scope, args, context) {
      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };
  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */

  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */

  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */

  ConditionalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toString(options);
    var conditionPrecedence = getPrecedence(this.condition, parenthesis);
    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '(' + condition + ')';
    }
    var trueExpr = this.trueExpr.toString(options);
    var truePrecedence = getPrecedence(this.trueExpr, parenthesis);
    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '(' + trueExpr + ')';
    }
    var falseExpr = this.falseExpr.toString(options);
    var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);
    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '(' + falseExpr + ')';
    }
    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  ConditionalNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConditionalNode',
      condition: this.condition,
      trueExpr: this.trueExpr,
      falseExpr: this.falseExpr
    };
  };
  /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */

  ConditionalNode.fromJSON = function (json) {
    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  ConditionalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    var condition = this.condition.toHTML(options);
    var conditionPrecedence = getPrecedence(this.condition, parenthesis);
    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    var trueExpr = this.trueExpr.toHTML(options);
    var truePrecedence = getPrecedence(this.trueExpr, parenthesis);
    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    var falseExpr = this.falseExpr.toHTML(options);
    var falsePrecedence = getPrecedence(this.falseExpr, parenthesis);
    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };
  /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */

  function testCondition(condition) {
    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
      return !!condition;
    }
    if (condition) {
      if (isBigNumber(condition)) {
        return !condition.isZero();
      }
      if (isComplex(condition)) {
        return !!(condition.re || condition.im);
      }
      if (isUnit(condition)) {
        return !!condition.value;
      }
    }
    if (condition === null || condition === undefined) {
      return false;
    }
    throw new TypeError('Unsupported type of condition "' + typeOf$1(condition) + '"');
  }
  return ConditionalNode;
}, {
  isClass: true,
  isNode: true
});

// Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

var _extends$5 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
var defaultEscapes = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
};
var formatEscapes = {
  "\u2013": "\\--",
  "\u2014": "\\---",
  " ": "~",
  "\t": "\\qquad{}",
  "\r\n": "\\newline{}",
  "\n": "\\newline{}"
};
var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
  return _extends$5({}, defaultEscapes, formatEscapes);
};

/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */
var dist = function dist(str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref$preserveFormatti = _ref.preserveFormatting,
    preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
    _ref$escapeMapFn = _ref.escapeMapFn,
    escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;
  var runningStr = String(str);
  var result = "";
  var escapes = escapeMapFn(_extends$5({}, defaultEscapes), preserveFormatting ? _extends$5({}, formatEscapes) : {});
  var escapeKeys = Object.keys(escapes); // as it is reused later on

  // Algorithm: Go through the string character by character, if it matches
  // with one of the special characters then we'll replace it with the escaped
  // version.

  var _loop = function _loop() {
    var specialCharFound = false;
    escapeKeys.forEach(function (key, index) {
      if (specialCharFound) {
        return;
      }
      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
        result += escapes[escapeKeys[index]];
        runningStr = runningStr.slice(key.length, runningStr.length);
        specialCharFound = true;
      }
    });
    if (!specialCharFound) {
      result += runningStr.slice(0, 1);
      runningStr = runningStr.slice(1, runningStr.length);
    }
  };
  while (runningStr) {
    _loop();
  }
  return result;
};
var escapeLatexLib = /*@__PURE__*/getDefaultExportFromCjs(dist);

/* eslint no-template-curly-in-string: "off" */
var latexSymbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: "\\Upsilon",
  upsilon: "\\upsilon",
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  // logic
  "true": '\\mathrm{True}',
  "false": '\\mathrm{False}',
  // other
  i: 'i',
  // TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  undefined: '\\mathbf{?}'
};
var latexOperators = {
  transpose: '^\\top',
  ctranspose: '^H',
  factorial: '!',
  pow: '^',
  dotPow: '.^\\wedge',
  // TODO find ideal solution
  unaryPlus: '+',
  unaryMinus: '-',
  bitNot: '\\~',
  // TODO find ideal solution
  not: '\\neg',
  multiply: '\\cdot',
  divide: '\\frac',
  // TODO how to handle that properly?
  dotMultiply: '.\\cdot',
  // TODO find ideal solution
  dotDivide: '.:',
  // TODO find ideal solution
  mod: '\\mod',
  add: '+',
  subtract: '-',
  to: '\\rightarrow',
  leftShift: '<<',
  rightArithShift: '>>',
  rightLogShift: '>>>',
  equal: '=',
  unequal: '\\neq',
  smaller: '<',
  larger: '>',
  smallerEq: '\\leq',
  largerEq: '\\geq',
  bitAnd: '\\&',
  bitXor: "\\underline{|}",
  bitOr: '|',
  and: '\\wedge',
  xor: '\\veebar',
  or: '\\vee'
};
var latexFunctions = {
  // arithmetic
  abs: {
    1: '\\left|${args[0]}\\right|'
  },
  add: {
    2: "\\left(${args[0]}".concat(latexOperators.add, "${args[1]}\\right)")
  },
  cbrt: {
    1: '\\sqrt[3]{${args[0]}}'
  },
  ceil: {
    1: '\\left\\lceil${args[0]}\\right\\rceil'
  },
  cube: {
    1: '\\left(${args[0]}\\right)^3'
  },
  divide: {
    2: '\\frac{${args[0]}}{${args[1]}}'
  },
  dotDivide: {
    2: "\\left(${args[0]}".concat(latexOperators.dotDivide, "${args[1]}\\right)")
  },
  dotMultiply: {
    2: "\\left(${args[0]}".concat(latexOperators.dotMultiply, "${args[1]}\\right)")
  },
  dotPow: {
    2: "\\left(${args[0]}".concat(latexOperators.dotPow, "${args[1]}\\right)")
  },
  exp: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  expm1: "\\left(e".concat(latexOperators.pow, "{${args[0]}}-1\\right)"),
  fix: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  floor: {
    1: '\\left\\lfloor${args[0]}\\right\\rfloor'
  },
  gcd: '\\gcd\\left(${args}\\right)',
  hypot: '\\hypot\\left(${args}\\right)',
  log: {
    1: '\\ln\\left(${args[0]}\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
  },
  log10: {
    1: '\\log_{10}\\left(${args[0]}\\right)'
  },
  log1p: {
    1: '\\ln\\left(${args[0]}+1\\right)',
    2: '\\log_{${args[1]}}\\left(${args[0]}+1\\right)'
  },
  log2: '\\log_{2}\\left(${args[0]}\\right)',
  mod: {
    2: "\\left(${args[0]}".concat(latexOperators.mod, "${args[1]}\\right)")
  },
  multiply: {
    2: "\\left(${args[0]}".concat(latexOperators.multiply, "${args[1]}\\right)")
  },
  norm: {
    1: '\\left\\|${args[0]}\\right\\|',
    2: undefined // use default template
  },

  nthRoot: {
    2: '\\sqrt[${args[1]}]{${args[0]}}'
  },
  nthRoots: {
    2: '\\{y : $y^{args[1]} = {${args[0]}}\\}'
  },
  pow: {
    2: "\\left(${args[0]}\\right)".concat(latexOperators.pow, "{${args[1]}}")
  },
  round: {
    1: '\\left\\lfloor${args[0]}\\right\\rceil',
    2: undefined // use default template
  },

  sign: {
    1: '\\mathrm{${name}}\\left(${args[0]}\\right)'
  },
  sqrt: {
    1: '\\sqrt{${args[0]}}'
  },
  square: {
    1: '\\left(${args[0]}\\right)^2'
  },
  subtract: {
    2: "\\left(${args[0]}".concat(latexOperators.subtract, "${args[1]}\\right)")
  },
  unaryMinus: {
    1: "".concat(latexOperators.unaryMinus, "\\left(${args[0]}\\right)")
  },
  unaryPlus: {
    1: "".concat(latexOperators.unaryPlus, "\\left(${args[0]}\\right)")
  },
  // bitwise
  bitAnd: {
    2: "\\left(${args[0]}".concat(latexOperators.bitAnd, "${args[1]}\\right)")
  },
  bitNot: {
    1: latexOperators.bitNot + '\\left(${args[0]}\\right)'
  },
  bitOr: {
    2: "\\left(${args[0]}".concat(latexOperators.bitOr, "${args[1]}\\right)")
  },
  bitXor: {
    2: "\\left(${args[0]}".concat(latexOperators.bitXor, "${args[1]}\\right)")
  },
  leftShift: {
    2: "\\left(${args[0]}".concat(latexOperators.leftShift, "${args[1]}\\right)")
  },
  rightArithShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightArithShift, "${args[1]}\\right)")
  },
  rightLogShift: {
    2: "\\left(${args[0]}".concat(latexOperators.rightLogShift, "${args[1]}\\right)")
  },
  // combinatorics
  bellNumbers: {
    1: '\\mathrm{B}_{${args[0]}}'
  },
  catalan: {
    1: '\\mathrm{C}_{${args[0]}}'
  },
  stirlingS2: {
    2: '\\mathrm{S}\\left(${args}\\right)'
  },
  // complex
  arg: {
    1: '\\arg\\left(${args[0]}\\right)'
  },
  conj: {
    1: '\\left(${args[0]}\\right)^*'
  },
  im: {
    1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  re: {
    1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'
  },
  // logical
  and: {
    2: "\\left(${args[0]}".concat(latexOperators.and, "${args[1]}\\right)")
  },
  not: {
    1: latexOperators.not + '\\left(${args[0]}\\right)'
  },
  or: {
    2: "\\left(${args[0]}".concat(latexOperators.or, "${args[1]}\\right)")
  },
  xor: {
    2: "\\left(${args[0]}".concat(latexOperators.xor, "${args[1]}\\right)")
  },
  // matrix
  cross: {
    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
  },
  ctranspose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.ctranspose)
  },
  det: {
    1: '\\det\\left(${args[0]}\\right)'
  },
  dot: {
    2: '\\left(${args[0]}\\cdot${args[1]}\\right)'
  },
  expm: {
    1: '\\exp\\left(${args[0]}\\right)'
  },
  inv: {
    1: '\\left(${args[0]}\\right)^{-1}'
  },
  sqrtm: {
    1: "{${args[0]}}".concat(latexOperators.pow, "{\\frac{1}{2}}")
  },
  trace: {
    1: '\\mathrm{tr}\\left(${args[0]}\\right)'
  },
  transpose: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.transpose)
  },
  // probability
  combinations: {
    2: '\\binom{${args[0]}}{${args[1]}}'
  },
  combinationsWithRep: {
    2: '\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)'
  },
  factorial: {
    1: "\\left(${args[0]}\\right)".concat(latexOperators.factorial)
  },
  gamma: {
    1: '\\Gamma\\left(${args[0]}\\right)'
  },
  // relational
  equal: {
    2: "\\left(${args[0]}".concat(latexOperators.equal, "${args[1]}\\right)")
  },
  larger: {
    2: "\\left(${args[0]}".concat(latexOperators.larger, "${args[1]}\\right)")
  },
  largerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.largerEq, "${args[1]}\\right)")
  },
  smaller: {
    2: "\\left(${args[0]}".concat(latexOperators.smaller, "${args[1]}\\right)")
  },
  smallerEq: {
    2: "\\left(${args[0]}".concat(latexOperators.smallerEq, "${args[1]}\\right)")
  },
  unequal: {
    2: "\\left(${args[0]}".concat(latexOperators.unequal, "${args[1]}\\right)")
  },
  // special
  erf: {
    1: 'erf\\left(${args[0]}\\right)'
  },
  // statistics
  max: '\\max\\left(${args}\\right)',
  min: '\\min\\left(${args}\\right)',
  variance: '\\mathrm{Var}\\left(${args}\\right)',
  // trigonometry
  acos: {
    1: '\\cos^{-1}\\left(${args[0]}\\right)'
  },
  acosh: {
    1: '\\cosh^{-1}\\left(${args[0]}\\right)'
  },
  acot: {
    1: '\\cot^{-1}\\left(${args[0]}\\right)'
  },
  acoth: {
    1: '\\coth^{-1}\\left(${args[0]}\\right)'
  },
  acsc: {
    1: '\\csc^{-1}\\left(${args[0]}\\right)'
  },
  acsch: {
    1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'
  },
  asec: {
    1: '\\sec^{-1}\\left(${args[0]}\\right)'
  },
  asech: {
    1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'
  },
  asin: {
    1: '\\sin^{-1}\\left(${args[0]}\\right)'
  },
  asinh: {
    1: '\\sinh^{-1}\\left(${args[0]}\\right)'
  },
  atan: {
    1: '\\tan^{-1}\\left(${args[0]}\\right)'
  },
  atan2: {
    2: '\\mathrm{atan2}\\left(${args}\\right)'
  },
  atanh: {
    1: '\\tanh^{-1}\\left(${args[0]}\\right)'
  },
  cos: {
    1: '\\cos\\left(${args[0]}\\right)'
  },
  cosh: {
    1: '\\cosh\\left(${args[0]}\\right)'
  },
  cot: {
    1: '\\cot\\left(${args[0]}\\right)'
  },
  coth: {
    1: '\\coth\\left(${args[0]}\\right)'
  },
  csc: {
    1: '\\csc\\left(${args[0]}\\right)'
  },
  csch: {
    1: '\\mathrm{csch}\\left(${args[0]}\\right)'
  },
  sec: {
    1: '\\sec\\left(${args[0]}\\right)'
  },
  sech: {
    1: '\\mathrm{sech}\\left(${args[0]}\\right)'
  },
  sin: {
    1: '\\sin\\left(${args[0]}\\right)'
  },
  sinh: {
    1: '\\sinh\\left(${args[0]}\\right)'
  },
  tan: {
    1: '\\tan\\left(${args[0]}\\right)'
  },
  tanh: {
    1: '\\tanh\\left(${args[0]}\\right)'
  },
  // unit
  to: {
    2: "\\left(${args[0]}".concat(latexOperators.to, "${args[1]}\\right)")
  },
  // utils
  numeric: function numeric(node, options) {
    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
    return node.args[0].toTex();
  },
  // type
  number: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  },
  string: {
    0: '\\mathtt{""}',
    1: '\\mathrm{string}\\left(${args[0]}\\right)'
  },
  bignumber: {
    0: '0',
    1: '\\left(${args[0]}\\right)'
  },
  complex: {
    0: '0',
    1: '\\left(${args[0]}\\right)',
    2: "\\left(\\left(${args[0]}\\right)+".concat(latexSymbols.i, "\\cdot\\left(${args[1]}\\right)\\right)")
  },
  matrix: {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: '\\left(${args[0]}\\right)',
    2: '\\left(${args[0]}\\right)'
  },
  sparse: {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: '\\left(${args[0]}\\right)'
  },
  unit: {
    1: '\\left(${args[0]}\\right)',
    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
  }
};
var defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
var latexUnits = {
  deg: '^\\circ'
};
function escapeLatex(string) {
  return escapeLatexLib(string, {
    preserveFormatting: true
  });
} // @param {string} name
// @param {boolean} isUnit

function toSymbol(name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
  if (isUnit) {
    if (hasOwnProperty(latexUnits, name)) {
      return latexUnits[name];
    }
    return '\\mathrm{' + escapeLatex(name) + '}';
  }
  if (hasOwnProperty(latexSymbols, name)) {
    return latexSymbols[name];
  }
  return escapeLatex(name);
}

var name$1i = 'ConstantNode';
var dependencies$1i = ['Node'];
var createConstantNode = /* #__PURE__ */factory(name$1i, dependencies$1i, function (_ref) {
  var Node = _ref.Node;

  /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.value = value;
  }
  ConstantNode.prototype = new Node();
  ConstantNode.prototype.type = 'ConstantNode';
  ConstantNode.prototype.isConstantNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConstantNode.prototype._compile = function (math, argNames) {
    var value = this.value;
    return function evalConstantNode() {
      return value;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  ConstantNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */

  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */

  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */

  ConstantNode.prototype._toString = function (options) {
    return format$1(this.value, options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  ConstantNode.prototype.toHTML = function (options) {
    var value = this._toString(options);
    switch (typeOf$1(this.value)) {
      case 'number':
      case 'BigNumber':
      case 'Fraction':
        return '<span class="math-number">' + value + '</span>';
      case 'string':
        return '<span class="math-string">' + value + '</span>';
      case 'boolean':
        return '<span class="math-boolean">' + value + '</span>';
      case 'null':
        return '<span class="math-null-symbol">' + value + '</span>';
      case 'undefined':
        return '<span class="math-undefined">' + value + '</span>';
      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  ConstantNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConstantNode',
      value: this.value
    };
  };
  /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */

  ConstantNode.fromJSON = function (json) {
    return new ConstantNode(json.value);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  ConstantNode.prototype._toTex = function (options) {
    var value = this._toString(options);
    switch (typeOf$1(this.value)) {
      case 'string':
        return '\\mathtt{' + escapeLatex(value) + '}';
      case 'number':
      case 'BigNumber':
        {
          if (!isFinite(this.value)) {
            return this.value.valueOf() < 0 ? '-\\infty' : '\\infty';
          }
          var index = value.toLowerCase().indexOf('e');
          if (index !== -1) {
            return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
          }
        }
        return value;
      case 'Fraction':
        return this.value.toLatex();
      default:
        return value;
    }
  };
  return ConstantNode;
}, {
  isClass: true,
  isNode: true
});

var name$1h = 'FunctionAssignmentNode';
var dependencies$1h = ['typed', 'Node'];
var createFunctionAssignmentNode = /* #__PURE__ */factory(name$1h, dependencies$1h, function (_ref) {
  var typed = _ref.typed,
    Node = _ref.Node;

  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input

    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any';
    });
    this.expr = expr;
  }
  FunctionAssignmentNode.prototype = new Node();
  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
    var childArgNames = Object.create(argNames);
    forEach$1(this.params, function (param) {
      childArgNames[param] = true;
    }); // compile the function expression with the child args

    var evalExpr = this.expr._compile(math, childArgNames);
    var name = this.name;
    var params = this.params;
    var signature = join(this.types, ',');
    var syntax = name + '(' + join(this.params, ', ') + ')';
    return function evalFunctionAssignmentNode(scope, args, context) {
      var signatures = {};
      signatures[signature] = function () {
        var childArgs = Object.create(args);
        for (var i = 0; i < params.length; i++) {
          childArgs[params[i]] = arguments[i];
        }
        return evalExpr(scope, childArgs, context);
      };
      var fn = typed(name, signatures);
      fn.syntax = syntax;
      setSafeProperty(scope, name, fn);
      return fn;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };
  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */

  FunctionAssignmentNode.prototype.map = function (callback) {
    var expr = this._ifNode(callback(this.expr, 'expr', this));
    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */

  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };
  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */

  function needParenthesis(node, parenthesis) {
    var precedence = getPrecedence(node, parenthesis);
    var exprPrecedence = getPrecedence(node.expr, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionAssignmentNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toString(options);
    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }
    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  FunctionAssignmentNode.prototype.toJSON = function () {
    var types = this.types;
    return {
      mathjs: 'FunctionAssignmentNode',
      name: this.name,
      params: this.params.map(function (param, index) {
        return {
          name: param,
          type: types[index]
        };
      }),
      expr: this.expr
    };
  };
  /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */

  FunctionAssignmentNode.fromJSON = function (json) {
    return new FunctionAssignmentNode(json.name, json.params, json.expr);
  };
  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionAssignmentNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var params = [];
    for (var i = 0; i < this.params.length; i++) {
      params.push('<span class="math-symbol math-parameter">' + escape$1(this.params[i]) + '</span>');
    }
    var expr = this.expr.toHTML(options);
    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return '<span class="math-function">' + escape$1(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };
  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionAssignmentNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var expr = this.expr.toTex(options);
    if (needParenthesis(this, parenthesis)) {
      expr = "\\left(".concat(expr, "\\right)");
    }
    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(toSymbol).join(',') + '\\right):=' + expr;
  };
  return FunctionAssignmentNode;
}, {
  isClass: true,
  isNode: true
});

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var name$1g = 'IndexNode';
var dependencies$1g = ['Range', 'Node', 'size'];
var createIndexNode = /* #__PURE__ */factory(name$1g, dependencies$1g, function (_ref) {
  var Range = _ref.Range,
    Node = _ref.Node,
    size = _ref.size;

  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */
  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false; // validate input

    if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }
    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    }
  }
  IndexNode.prototype = new Node();
  IndexNode.prototype.type = 'IndexNode';
  IndexNode.prototype.isIndexNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  IndexNode.prototype._compile = function (math, argNames) {
    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)
    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value
    // optimization for a simple object property
    var evalDimensions = map$1(this.dimensions, function (range, i) {
      if (isRangeNode(range)) {
        if (range.needsEnd()) {
          // create a range containing end (like '4:end')
          var childArgNames = Object.create(argNames);
          childArgNames.end = true;
          var evalStart = range.start._compile(math, childArgNames);
          var evalEnd = range.end._compile(math, childArgNames);
          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            var s = size(context).valueOf();
            var childArgs = Object.create(args);
            childArgs.end = s[i];
            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
          };
        } else {
          // create range
          var _evalStart = range.start._compile(math, argNames);
          var _evalEnd = range.end._compile(math, argNames);
          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
          };
        }
      } else if (isSymbolNode(range) && range.name === 'end') {
        // SymbolNode 'end'
        var _childArgNames = Object.create(argNames);
        _childArgNames.end = true;
        var evalRange = range._compile(math, _childArgNames);
        return function evalDimension(scope, args, context) {
          var s = size(context).valueOf();
          var childArgs = Object.create(args);
          childArgs.end = s[i];
          return evalRange(scope, childArgs, context);
        };
      } else {
        // ConstantNode
        var _evalRange = range._compile(math, argNames);
        return function evalDimension(scope, args, context) {
          return _evalRange(scope, args, context);
        };
      }
    });
    var index = getSafeProperty(math, 'index');
    return function evalIndexNode(scope, args, context) {
      var dimensions = map$1(evalDimensions, function (evalDimension) {
        return evalDimension(scope, args, context);
      });
      return index.apply(void 0, _toConsumableArray(dimensions));
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  IndexNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };
  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */

  IndexNode.prototype.map = function (callback) {
    var dimensions = [];
    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }
    return new IndexNode(dimensions, this.dotNotation);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */

  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0), this.dotNotation);
  };
  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */

  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
  };
  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */

  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */

  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  IndexNode.prototype.toJSON = function () {
    return {
      mathjs: 'IndexNode',
      dimensions: this.dimensions,
      dotNotation: this.dotNotation
    };
  };
  /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */

  IndexNode.fromJSON = function (json) {
    return new IndexNode(json.dimensions, json.dotNotation);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
    var dimensions = [];
    for (var i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this.dimensions[i].toHTML();
    }
    if (this.dotNotation) {
      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape$1(this.getObjectProperty()) + '</span>';
    } else {
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  IndexNode.prototype._toTex = function (options) {
    var dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });
    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
  }; // helper function to create a Range from start, step and end

  function createRange(start, end, step) {
    return new Range(isBigNumber(start) ? start.toNumber() : start, isBigNumber(end) ? end.toNumber() : end, isBigNumber(step) ? step.toNumber() : step);
  }
  return IndexNode;
}, {
  isClass: true,
  isNode: true
});

function _typeof$3(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$3 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$3(obj);
}
var name$1f = 'ObjectNode';
var dependencies$1f = ['Node'];
var createObjectNode = /* #__PURE__ */factory(name$1f, dependencies$1f, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.properties = properties || {}; // validate input

    if (properties) {
      if (!(_typeof$3(properties) === 'object') || !Object.keys(properties).every(function (key) {
        return isNode(properties[key]);
      })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }
  ObjectNode.prototype = new Node();
  ObjectNode.prototype.type = 'ObjectNode';
  ObjectNode.prototype.isObjectNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ObjectNode.prototype._compile = function (math, argNames) {
    var evalEntries = {};
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null}
        var stringifiedKey = stringify(key);
        var parsedKey = JSON.parse(stringifiedKey);
        if (!isSafeProperty(this.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }
        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
      }
    }
    return function evalObjectNode(scope, args, context) {
      var obj = {};
      for (var _key in evalEntries) {
        if (hasOwnProperty(evalEntries, _key)) {
          obj[_key] = evalEntries[_key](scope, args, context);
        }
      }
      return obj;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  ObjectNode.prototype.forEach = function (callback) {
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
      }
    }
  };
  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */

  ObjectNode.prototype.map = function (callback) {
    var properties = {};
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
      }
    }
    return new ObjectNode(properties);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */

  ObjectNode.prototype.clone = function () {
    var properties = {};
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        properties[key] = this.properties[key];
      }
    }
    return new ObjectNode(properties);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ObjectNode.prototype._toString = function (options) {
    var entries = [];
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
      }
    }
    return '{' + entries.join(', ') + '}';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  ObjectNode.prototype.toJSON = function () {
    return {
      mathjs: 'ObjectNode',
      properties: this.properties
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */

  ObjectNode.fromJSON = function (json) {
    return new ObjectNode(json.properties);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ObjectNode.prototype.toHTML = function (options) {
    var entries = [];
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        entries.push('<span class="math-symbol math-property">' + escape$1(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }
    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  ObjectNode.prototype._toTex = function (options) {
    var entries = [];
    for (var key in this.properties) {
      if (hasOwnProperty(this.properties, key)) {
        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
      }
    }
    return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
  };
  return ObjectNode;
}, {
  isClass: true,
  isNode: true
});

var name$1e = 'OperatorNode';
var dependencies$1e = ['Node'];
var createOperatorNode = /* #__PURE__ */factory(name$1e, dependencies$1e, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
  function OperatorNode(op, fn, args, implicit) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input

    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }
    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }
    if (!Array.isArray(args) || !args.every(isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }
    this.implicit = implicit === true;
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }
  OperatorNode.prototype = new Node();
  OperatorNode.prototype.type = 'OperatorNode';
  OperatorNode.prototype.isOperatorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  OperatorNode.prototype._compile = function (math, argNames) {
    // validate fn
    if (typeof this.fn !== 'string' || !isSafeMethod(math, this.fn)) {
      if (!math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      } else {
        throw new Error('No access to function "' + this.fn + '"');
      }
    }
    var fn = getSafeProperty(math, this.fn);
    var evalArgs = map$1(this.args, function (arg) {
      return arg._compile(math, argNames);
    });
    if (evalArgs.length === 1) {
      var evalArg0 = evalArgs[0];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context));
      };
    } else if (evalArgs.length === 2) {
      var _evalArg = evalArgs[0];
      var evalArg1 = evalArgs[1];
      return function evalOperatorNode(scope, args, context) {
        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
      };
    } else {
      return function evalOperatorNode(scope, args, context) {
        return fn.apply(null, map$1(evalArgs, function (evalArg) {
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  OperatorNode.prototype.forEach = function (callback) {
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */

  OperatorNode.prototype.map = function (callback) {
    var args = [];
    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }
    return new OperatorNode(this.op, this.fn, args, this.implicit);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */

  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
  };
  /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */

  OperatorNode.prototype.isUnary = function () {
    return this.args.length === 1;
  };
  /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */

  OperatorNode.prototype.isBinary = function () {
    return this.args.length === 2;
  };
  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */

  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    // precedence of the root OperatorNode
    var precedence = getPrecedence(root, parenthesis);
    var associativity = getAssociativity(root, parenthesis);
    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
      return args.map(function (arg) {
        switch (arg.getContent().type) {
          // Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;
          default:
            return true;
        }
      });
    }
    var result;
    switch (args.length) {
      case 0:
        result = [];
        break;
      case 1:
        // unary operators
        {
          // precedence of the operand
          var operandPrecedence = getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

          if (latex && operandPrecedence !== null) {
            var operandIdentifier;
            var rootIdentifier;
            if (parenthesis === 'keep') {
              operandIdentifier = args[0].getIdentifier();
              rootIdentifier = root.getIdentifier();
            } else {
              // Ignore Parenthesis Nodes when not in 'keep' mode
              operandIdentifier = args[0].getContent().getIdentifier();
              rootIdentifier = root.getContent().getIdentifier();
            }
            if (properties[precedence][rootIdentifier].latexLeftParens === false) {
              result = [false];
              break;
            }
            if (properties[operandPrecedence][operandIdentifier].latexParens === false) {
              result = [false];
              break;
            }
          }
          if (operandPrecedence === null) {
            // if the operand has no defined precedence, no parens are needed
            result = [false];
            break;
          }
          if (operandPrecedence <= precedence) {
            // if the operands precedence is lower, parens are needed
            result = [true];
            break;
          } // otherwise, no parens needed

          result = [false];
        }
        break;
      case 2:
        // binary operators
        {
          var lhsParens; // left hand side needs parenthesis?
          // precedence of the left hand side

          var lhsPrecedence = getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side

          var assocWithLhs = isAssociativeWith(root, args[0], parenthesis);
          if (lhsPrecedence === null) {
            // if the left hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            lhsParens = false;
          } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
            // In case of equal precedence, if the root node is left associative
            // parens are **never** necessary for the left hand side.
            // If it is right associative however, parens are necessary
            // if the root node isn't associative with the left hand side
            lhsParens = true;
          } else if (lhsPrecedence < precedence) {
            lhsParens = true;
          } else {
            lhsParens = false;
          }
          var rhsParens; // right hand side needs parenthesis?
          // precedence of the right hand side

          var rhsPrecedence = getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?

          var assocWithRhs = isAssociativeWith(root, args[1], parenthesis);
          if (rhsPrecedence === null) {
            // if the right hand side has no defined precedence, no parens are needed
            // FunctionNode for example
            rhsParens = false;
          } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
            // In case of equal precedence, if the root node is right associative
            // parens are **never** necessary for the right hand side.
            // If it is left associative however, parens are necessary
            // if the root node isn't associative with the right hand side
            rhsParens = true;
          } else if (rhsPrecedence < precedence) {
            rhsParens = true;
          } else {
            rhsParens = false;
          } // handle special cases for LaTeX, where some of the parentheses aren't needed

          if (latex) {
            var _rootIdentifier;
            var lhsIdentifier;
            var rhsIdentifier;
            if (parenthesis === 'keep') {
              _rootIdentifier = root.getIdentifier();
              lhsIdentifier = root.args[0].getIdentifier();
              rhsIdentifier = root.args[1].getIdentifier();
            } else {
              // Ignore ParenthesisNodes when not in 'keep' mode
              _rootIdentifier = root.getContent().getIdentifier();
              lhsIdentifier = root.args[0].getContent().getIdentifier();
              rhsIdentifier = root.args[1].getContent().getIdentifier();
            }
            if (lhsPrecedence !== null) {
              if (properties[precedence][_rootIdentifier].latexLeftParens === false) {
                lhsParens = false;
              }
              if (properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
                lhsParens = false;
              }
            }
            if (rhsPrecedence !== null) {
              if (properties[precedence][_rootIdentifier].latexRightParens === false) {
                rhsParens = false;
              }
              if (properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
                rhsParens = false;
              }
            }
          }
          result = [lhsParens, rhsParens];
        }
        break;
      default:
        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
          result = args.map(function (arg) {
            var argPrecedence = getPrecedence(arg, parenthesis);
            var assocWithArg = isAssociativeWith(root, arg, parenthesis);
            var argAssociativity = getAssociativity(arg, parenthesis);
            if (argPrecedence === null) {
              // if the argument has no defined precedence, no parens are needed
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }
            return false;
          });
        }
        break;
    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    // printed.

    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
      result = args.map(function (arg, index) {
        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';
        if (result[index] || isParenthesisNode) {
          // put in parenthesis?
          return true;
        }
        return false;
      });
    }
    return result;
  }
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */

  OperatorNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toString(options);
      if (parens[0]) {
        operand = '(' + operand + ')';
      } // for example for "not", we want a space between operand and argument

      var opIsNamed = /[a-zA-Z]+/.test(this.op);
      if (assoc === 'right') {
        // prefix operator
        return this.op + (opIsNamed ? ' ' : '') + operand;
      } else if (assoc === 'left') {
        // postfix
        return operand + (opIsNamed ? ' ' : '') + this.op;
      } // fall back to postfix

      return operand + this.op;
    } else if (args.length === 2) {
      var lhs = args[0].toString(options); // left hand side

      var rhs = args[1].toString(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }
      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }
      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + ' ' + rhs;
      }
      return lhs + ' ' + this.op + ' ' + rhs;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);
        if (parens[index]) {
          // put in parenthesis?
          arg = '(' + arg + ')';
        }
        return arg;
      });
      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return stringifiedArgs.join(' ');
      }
      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      // fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  OperatorNode.prototype.toJSON = function () {
    return {
      mathjs: 'OperatorNode',
      op: this.op,
      fn: this.fn,
      args: this.args,
      implicit: this.implicit
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */

  OperatorNode.fromJSON = function (json) {
    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
  };
  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */

  OperatorNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);
    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toHTML(options);
      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      if (assoc === 'right') {
        // prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape$1(this.op) + '</span>' + operand;
      } else {
        // postfix when assoc === 'left' or undefined
        return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$1(this.op) + '</span>';
      }
    } else if (args.length === 2) {
      // binary operatoes
      var lhs = args[0].toHTML(options); // left hand side

      var rhs = args[1].toHTML(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
      }
      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(this.op) + '</span>' + rhs;
    } else {
      var stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);
        if (parens[index]) {
          // put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }
        return arg;
      });
      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
        }
        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(this.op) + '</span>');
      } else {
        // fallback to formatting as a function call
        return '<span class="math-function">' + escape$1(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  OperatorNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var implicit = options && options.implicit ? options.implicit : 'hide';
    var args = this.args;
    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    var op = latexOperators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

    if (args.length === 1) {
      // unary operators
      var assoc = getAssociativity(this, parenthesis);
      var operand = args[0].toTex(options);
      if (parens[0]) {
        operand = "\\left(".concat(operand, "\\right)");
      }
      if (assoc === 'right') {
        // prefix operator
        return op + operand;
      } else if (assoc === 'left') {
        // postfix operator
        return operand + op;
      } // fall back to postfix

      return operand + op;
    } else if (args.length === 2) {
      // binary operators
      var lhs = args[0]; // left hand side

      var lhsTex = lhs.toTex(options);
      if (parens[0]) {
        lhsTex = "\\left(".concat(lhsTex, "\\right)");
      }
      var rhs = args[1]; // right hand side

      var rhsTex = rhs.toTex(options);
      if (parens[1]) {
        rhsTex = "\\left(".concat(rhsTex, "\\right)");
      } // handle some exceptions (due to the way LaTeX works)

      var lhsIdentifier;
      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      } else {
        // Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }
      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          // op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';
          switch (lhsIdentifier) {
            case 'ConditionalNode': //

            case 'OperatorNode:divide':
              lhsTex = "\\left(".concat(lhsTex, "\\right)");
          }
          break;
        case 'OperatorNode:multiply':
          if (this.implicit && implicit === 'hide') {
            return lhsTex + '~' + rhsTex;
          }
      }
      return lhsTex + op + rhsTex;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      var texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);
        if (parens[index]) {
          arg = "\\left(".concat(arg, "\\right)");
        }
        return arg;
      });
      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
        return texifiedArgs.join('~');
      }
      return texifiedArgs.join(op);
    } else {
      // fall back to formatting as a function call
      // as this is a fallback, it doesn't use
      // fancy function names
      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
        return arg.toTex(options);
      }).join(',') + '\\right)';
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */

  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };
  return OperatorNode;
}, {
  isClass: true,
  isNode: true
});

var name$1d = 'ParenthesisNode';
var dependencies$1d = ['Node'];
var createParenthesisNode = /* #__PURE__ */factory(name$1d, dependencies$1d, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input

    if (!isNode(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }
    this.content = content;
  }
  ParenthesisNode.prototype = new Node();
  ParenthesisNode.prototype.type = 'ParenthesisNode';
  ParenthesisNode.prototype.isParenthesisNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ParenthesisNode.prototype._compile = function (math, argNames) {
    return this.content._compile(math, argNames);
  };
  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/

  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };
  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */

  ParenthesisNode.prototype.map = function (callback) {
    var content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */

  ParenthesisNode.prototype.clone = function () {
    return new ParenthesisNode(this.content);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ParenthesisNode.prototype._toString = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '(' + this.content.toString(options) + ')';
    }
    return this.content.toString(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  ParenthesisNode.prototype.toJSON = function () {
    return {
      mathjs: 'ParenthesisNode',
      content: this.content
    };
  };
  /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */

  ParenthesisNode.fromJSON = function (json) {
    return new ParenthesisNode(json.content);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ParenthesisNode.prototype.toHTML = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    return this.content.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  ParenthesisNode.prototype._toTex = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return "\\left(".concat(this.content.toTex(options), "\\right)");
    }
    return this.content.toTex(options);
  };
  return ParenthesisNode;
}, {
  isClass: true,
  isNode: true
});

var name$1c = 'RangeNode';
var dependencies$1c = ['Node'];
var createRangeNode = /* #__PURE__ */factory(name$1c, dependencies$1c, function (_ref) {
  var Node = _ref.Node;

  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate inputs

    if (!isNode(start)) throw new TypeError('Node expected');
    if (!isNode(end)) throw new TypeError('Node expected');
    if (step && !isNode(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');
    this.start = start; // included lower-bound

    this.end = end; // included upper-bound

    this.step = step || null; // optional step
  }

  RangeNode.prototype = new Node();
  RangeNode.prototype.type = 'RangeNode';
  RangeNode.prototype.isRangeNode = true;
  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */

  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    var endSymbols = this.filter(function (node) {
      return isSymbolNode(node) && node.name === 'end';
    });
    return endSymbols.length > 0;
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RangeNode.prototype._compile = function (math, argNames) {
    var range = math.range;
    var evalStart = this.start._compile(math, argNames);
    var evalEnd = this.end._compile(math, argNames);
    if (this.step) {
      var evalStep = this.step._compile(math, argNames);
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
      };
    } else {
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);
    if (this.step) {
      callback(this.step, 'step', this);
    }
  };
  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */

  RangeNode.prototype.map = function (callback) {
    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */

  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };
  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */

  function calculateNecessaryParentheses(node, parenthesis) {
    var precedence = getPrecedence(node, parenthesis);
    var parens = {};
    var startPrecedence = getPrecedence(node.start, parenthesis);
    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';
    if (node.step) {
      var stepPrecedence = getPrecedence(node.step, parenthesis);
      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
    }
    var endPrecedence = getPrecedence(node.end, parenthesis);
    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
    return parens;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */

  RangeNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toString(options);
    if (parens.start) {
      start = '(' + start + ')';
    }
    str = start;
    if (this.step) {
      var step = this.step.toString(options);
      if (parens.step) {
        step = '(' + step + ')';
      }
      str += ':' + step;
    }
    var end = this.end.toString(options);
    if (parens.end) {
      end = '(' + end + ')';
    }
    str += ':' + end;
    return str;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  RangeNode.prototype.toJSON = function () {
    return {
      mathjs: 'RangeNode',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */

  RangeNode.fromJSON = function (json) {
    return new RangeNode(json.start, json.end, json.step);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  RangeNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    var str;
    var start = this.start.toHTML(options);
    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    str = start;
    if (this.step) {
      var step = this.step.toHTML(options);
      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }
      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }
    var end = this.end.toHTML(options);
    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }
    str += '<span class="math-operator math-range-operator">:</span>' + end;
    return str;
  };
  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */

  RangeNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var parens = calculateNecessaryParentheses(this, parenthesis);
    var str = this.start.toTex(options);
    if (parens.start) {
      str = "\\left(".concat(str, "\\right)");
    }
    if (this.step) {
      var step = this.step.toTex(options);
      if (parens.step) {
        step = "\\left(".concat(step, "\\right)");
      }
      str += ':' + step;
    }
    var end = this.end.toTex(options);
    if (parens.end) {
      end = "\\left(".concat(end, "\\right)");
    }
    str += ':' + end;
    return str;
  };
  return RangeNode;
}, {
  isClass: true,
  isNode: true
});

var name$1b = 'RelationalNode';
var dependencies$1b = ['Node'];
var createRelationalNode = /* #__PURE__ */factory(name$1b, dependencies$1b, function (_ref) {
  var Node = _ref.Node;

  /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */
  function RelationalNode(conditionals, params) {
    if (!(this instanceof RelationalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
    this.conditionals = conditionals;
    this.params = params;
  }
  RelationalNode.prototype = new Node();
  RelationalNode.prototype.type = 'RelationalNode';
  RelationalNode.prototype.isRelationalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RelationalNode.prototype._compile = function (math, argNames) {
    var self = this;
    var compiled = this.params.map(function (p) {
      return p._compile(math, argNames);
    });
    return function evalRelationalNode(scope, args, context) {
      var evalLhs;
      var evalRhs = compiled[0](scope, args, context);
      for (var i = 0; i < self.conditionals.length; i++) {
        evalLhs = evalRhs;
        evalRhs = compiled[i + 1](scope, args, context);
        var condFn = getSafeProperty(math, self.conditionals[i]);
        if (!condFn(evalLhs, evalRhs)) {
          return false;
        }
      }
      return true;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  RelationalNode.prototype.forEach = function (callback) {
    var _this = this;
    this.params.forEach(function (n, i) {
      return callback(n, 'params[' + i + ']', _this);
    }, this);
  };
  /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */

  RelationalNode.prototype.map = function (callback) {
    var _this2 = this;
    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {
      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));
    }, this));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */

  RelationalNode.prototype.clone = function () {
    return new RelationalNode(this.conditionals, this.params);
  };
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */

  RelationalNode.prototype._toString = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];
    for (var i = 0; i < this.conditionals.length; i++) {
      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
    }
    return ret;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  RelationalNode.prototype.toJSON = function () {
    return {
      mathjs: 'RelationalNode',
      conditionals: this.conditionals,
      params: this.params
    };
  };
  /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */

  RelationalNode.fromJSON = function (json) {
    return new RelationalNode(json.conditionals, json.params);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  RelationalNode.prototype.toHTML = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
    });
    var operatorMap = {
      equal: '==',
      unequal: '!=',
      smaller: '<',
      larger: '>',
      smallerEq: '<=',
      largerEq: '>='
    };
    var ret = paramStrings[0];
    for (var i = 0; i < this.conditionals.length; i++) {
      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$1(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
    }
    return ret;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  RelationalNode.prototype._toTex = function (options) {
    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    var precedence = getPrecedence(this, parenthesis);
    var paramStrings = this.params.map(function (p, index) {
      var paramPrecedence = getPrecedence(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
    });
    var ret = paramStrings[0];
    for (var i = 0; i < this.conditionals.length; i++) {
      ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];
    }
    return ret;
  };
  return RelationalNode;
}, {
  isClass: true,
  isNode: true
});

var name$1a = 'SymbolNode';
var dependencies$1a = ['math', '?Unit', 'Node'];
var createSymbolNode = /* #__PURE__ */factory(name$1a, dependencies$1a, function (_ref) {
  var math = _ref.math,
    Unit = _ref.Unit,
    Node = _ref.Node;

  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit(name) {
    return Unit ? Unit.isValuelessUnit(name) : false;
  }
  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */

  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input

    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    this.name = name;
  }
  SymbolNode.prototype = new Node();
  SymbolNode.prototype.type = 'SymbolNode';
  SymbolNode.prototype.isSymbolNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  SymbolNode.prototype._compile = function (math, argNames) {
    var name = this.name;
    if (argNames[name] === true) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return function (scope, args, context) {
        return args[name];
      };
    } else if (name in math) {
      return function (scope, args, context) {
        return name in scope ? getSafeProperty(scope, name) : getSafeProperty(math, name);
      };
    } else {
      var isUnit = isValuelessUnit(name);
      return function (scope, args, context) {
        return name in scope ? getSafeProperty(scope, name) : isUnit ? new Unit(null, name) : undef(name);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  SymbolNode.prototype.forEach = function (callback) {// nothing to do, we don't have childs
  };
  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */

  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */

  function undef(name) {
    throw new Error('Undefined symbol ' + name);
  }
  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */

  SymbolNode.prototype.clone = function () {
    return new SymbolNode(this.name);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  SymbolNode.prototype._toString = function (options) {
    return this.name;
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  SymbolNode.prototype.toHTML = function (options) {
    var name = escape$1(this.name);
    if (name === 'true' || name === 'false') {
      return '<span class="math-symbol math-boolean">' + name + '</span>';
    } else if (name === 'i') {
      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
    } else if (name === 'Infinity') {
      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
    } else if (name === 'NaN') {
      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
    } else if (name === 'null') {
      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
    } else if (name === 'undefined') {
      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
    }
    return '<span class="math-symbol">' + name + '</span>';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  SymbolNode.prototype.toJSON = function () {
    return {
      mathjs: 'SymbolNode',
      name: this.name
    };
  };
  /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */

  SymbolNode.fromJSON = function (json) {
    return new SymbolNode(json.name);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */

  SymbolNode.prototype._toTex = function (options) {
    var isUnit = false;
    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
      isUnit = true;
    }
    var symbol = toSymbol(this.name, isUnit);
    if (symbol[0] === '\\') {
      // no space needed if the symbol starts with '\'
      return symbol;
    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol

    return ' ' + symbol;
  };
  return SymbolNode;
}, {
  isClass: true,
  isNode: true
});

function _typeof$2(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$2 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$2(obj);
}
function _extends$4() {
  _extends$4 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$4.apply(this, arguments);
}
var name$19 = 'FunctionNode';
var dependencies$19 = ['math', 'Node', 'SymbolNode'];
var createFunctionNode = /* #__PURE__ */factory(name$19, dependencies$19, function (_ref) {
  var math = _ref.math,
    Node = _ref.Node,
    SymbolNode = _ref.SymbolNode;

  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    } // validate input

    if (!isNode(fn)) throw new TypeError('Node expected as parameter "fn"');
    if (!Array.isArray(args) || !args.every(isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }
    this.fn = fn;
    this.args = args || []; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function set() {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }
  FunctionNode.prototype = new Node();
  FunctionNode.prototype.type = 'FunctionNode';
  FunctionNode.prototype.isFunctionNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode');
    } // compile arguments

    var evalArgs = map$1(this.args, function (arg) {
      return arg._compile(math, argNames);
    });
    if (isSymbolNode(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      var _name = this.fn.name;
      var fn = _name in math ? getSafeProperty(math, _name) : undefined;
      var isRaw = typeof fn === 'function' && fn.rawArgs === true;
      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        var rawArgs = this.args;
        return function evalFunctionNode(scope, args, context) {
          return (_name in scope ? getSafeProperty(scope, _name) : fn)(rawArgs, math, _extends$4({}, scope, args));
        };
      } else {
        // "regular" evaluation
        if (evalArgs.length === 1) {
          var evalArg0 = evalArgs[0];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn)(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          var _evalArg = evalArgs[0];
          var evalArg1 = evalArgs[1];
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalFunctionNode(scope, args, context) {
            return (_name in scope ? getSafeProperty(scope, _name) : fn).apply(null, map$1(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      }
    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      var evalObject = this.fn.object._compile(math, argNames);
      var prop = this.fn.index.getObjectProperty();
      var _rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        var object = evalObject(scope, args, context);
        validateSafeMethod(object, prop);
        var isRaw = object[prop] && object[prop].rawArgs;
        return isRaw ? object[prop](_rawArgs, math, _extends$4({}, scope, args)) // "raw" evaluation
        : object[prop].apply(object, map$1(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    } else {
      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      var evalFn = this.fn._compile(math, argNames);
      var _rawArgs2 = this.args;
      return function evalFunctionNode(scope, args, context) {
        var fn = evalFn(scope, args, context);
        var isRaw = fn && fn.rawArgs;
        return isRaw ? fn(_rawArgs2, math, _extends$4({}, scope, args)) // "raw" evaluation
        : fn.apply(fn, map$1(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */

  FunctionNode.prototype.forEach = function (callback) {
    callback(this.fn, 'fn', this);
    for (var i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */

  FunctionNode.prototype.map = function (callback) {
    var fn = this._ifNode(callback(this.fn, 'fn', this));
    var args = [];
    for (var i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }
    return new FunctionNode(fn, args);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */

  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  }; // backup Node's toString function
  // @private

  var nodeToString = FunctionNode.prototype.toString;
  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */

  FunctionNode.prototype.toString = function (options) {
    var customString;
    var name = this.fn.toString(options);
    if (options && _typeof$2(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {
      // callback is a map of callback functions
      customString = options.handler[name](this, options);
    }
    if (typeof customString !== 'undefined') {
      return customString;
    } // fall back to Node's toString

    return nodeToString.call(this, options);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionNode.prototype._toString = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toString(options);
    });
    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

    return fn + '(' + args.join(', ') + ')';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */

  FunctionNode.prototype.toJSON = function () {
    return {
      mathjs: 'FunctionNode',
      fn: this.fn,
      args: this.args
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */

  FunctionNode.fromJSON = function (json) {
    return new FunctionNode(json.fn, json.args);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionNode.prototype.toHTML = function (options) {
    var args = this.args.map(function (arg) {
      return arg.toHTML(options);
    }); // format the arguments like "add(2, 4.2)"

    return '<span class="math-function">' + escape$1(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/

  function expandTemplate(template, node, options) {
    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)

    var regex = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi;
    var inputPos = 0; // position in the input string

    var match;
    while ((match = regex.exec(template)) !== null) {
      // go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;
      if (match[0] === '$$') {
        // escaped dollar sign
        latex += '$';
        inputPos++;
      } else {
        // template parameter
        inputPos += match[0].length;
        var property = node[match[1]];
        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }
        if (match[2] === undefined) {
          // no square brackets
          switch (_typeof$2(property)) {
            case 'string':
              latex += property;
              break;
            case 'object':
              if (isNode(property)) {
                latex += property.toTex(options);
              } else if (Array.isArray(property)) {
                // make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if (isNode(arg)) {
                    return arg.toTex(options);
                  }
                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              } else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }
              break;
            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        } else {
          // with square brackets
          if (isNode(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          } else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }
    latex += template.slice(inputPos); // append rest of the template

    return latex;
  } // backup Node's toTex function
  // @private

  var nodeToTex = FunctionNode.prototype.toTex;
  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */

  FunctionNode.prototype.toTex = function (options) {
    var customTex;
    if (options && _typeof$2(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {
      // callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }
    if (typeof customTex !== 'undefined') {
      return customTex;
    } // fall back to Node's toTex

    return nodeToTex.call(this, options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */

  FunctionNode.prototype._toTex = function (options) {
    var args = this.args.map(function (arg) {
      // get LaTeX of the arguments
      return arg.toTex(options);
    });
    var latexConverter;
    if (latexFunctions[this.name]) {
      latexConverter = latexFunctions[this.name];
    } // toTex property on the function itself

    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof$2(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
      // .toTex is a callback function
      latexConverter = math[this.name].toTex;
    }
    var customToTex;
    switch (_typeof$2(latexConverter)) {
      case 'function':
        // a callback function
        customToTex = latexConverter(this, options);
        break;
      case 'string':
        // a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;
      case 'object':
        // an object with different "converters" for different numbers of arguments
        switch (_typeof$2(latexConverter[args.length])) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;
          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }
    }
    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }
    return expandTemplate(defaultTemplate, this, options);
  };
  /**
   * Get identifier.
   * @return {string}
   */

  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };
  return FunctionNode;
}, {
  isClass: true,
  isNode: true
});

function _extends$3() {
  _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
var name$18 = 'parse';
var dependencies$18 = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
var createParse = /* #__PURE__ */factory(name$18, dependencies$18, function (_ref) {
  var typed = _ref.typed,
    numeric = _ref.numeric,
    config = _ref.config,
    AccessorNode = _ref.AccessorNode,
    ArrayNode = _ref.ArrayNode,
    AssignmentNode = _ref.AssignmentNode,
    BlockNode = _ref.BlockNode,
    ConditionalNode = _ref.ConditionalNode,
    ConstantNode = _ref.ConstantNode,
    FunctionAssignmentNode = _ref.FunctionAssignmentNode,
    FunctionNode = _ref.FunctionNode,
    IndexNode = _ref.IndexNode,
    ObjectNode = _ref.ObjectNode,
    OperatorNode = _ref.OperatorNode,
    ParenthesisNode = _ref.ParenthesisNode,
    RangeNode = _ref.RangeNode,
    RelationalNode = _ref.RelationalNode,
    SymbolNode = _ref.SymbolNode;

  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  var parse = typed(name$18, {
    string: function string(expression) {
      return parseStart(expression, {});
    },
    'Array | Matrix': function ArrayMatrix(expressions) {
      return parseMultiple(expressions, {});
    },
    'string, Object': function stringObject(expression, options) {
      var extraNodes = options.nodes !== undefined ? options.nodes : {};
      return parseStart(expression, extraNodes);
    },
    'Array | Matrix, Object': parseMultiple
  });
  function parseMultiple(expressions) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

    return deepMap(expressions, function (elem) {
      if (typeof elem !== 'string') throw new TypeError('String expected');
      return parseStart(elem, extraNodes);
    });
  } // token types enumeration

  var TOKENTYPE = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4
  }; // map with all delimiters

  var DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '"': true,
    '\'': true,
    ';': true,
    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '=': true,
    ':': true,
    '?': true,
    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,
    '<<': true,
    '>>': true,
    '>>>': true
  }; // map with all named delimiters

  var NAMED_DELIMITERS = {
    mod: true,
    to: true,
    "in": true,
    and: true,
    xor: true,
    or: true,
    not: true
  };
  var CONSTANTS = {
    "true": true,
    "false": false,
    "null": null,
    undefined: undefined
  };
  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];
  function initialState() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: '',
      // current expression
      comment: '',
      // last parsed comment
      index: 0,
      // current index in expr
      token: '',
      // current token
      tokenType: TOKENTYPE.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here
    };
  }
  /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {Object} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */

  function currentString(state, length) {
    return state.expression.substr(state.index, length);
  }
  /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {Object} state
   * @returns {string}
   * @private
   */

  function currentCharacter(state) {
    return currentString(state, 1);
  }
  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */

  function next(state) {
    state.index++;
  }
  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */

  function prevCharacter(state) {
    return state.expression.charAt(state.index - 1);
  }
  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */

  function nextCharacter(state) {
    return state.expression.charAt(state.index + 1);
  }
  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */

  function getToken(state) {
    state.tokenType = TOKENTYPE.NULL;
    state.token = '';
    state.comment = ''; // skip over whitespaces
    // space, tab, and newline when inside parameters

    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
      next(state);
    } // skip comment

    if (currentCharacter(state) === '#') {
      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
        state.comment += currentCharacter(state);
        next(state);
      }
    } // check for end of expression

    if (currentCharacter(state) === '') {
      // token is still empty
      state.tokenType = TOKENTYPE.DELIMITER;
      return;
    } // check for new line character

    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = currentCharacter(state);
      next(state);
      return;
    }
    var c1 = currentCharacter(state);
    var c2 = currentString(state, 2);
    var c3 = currentString(state, 3);
    if (c3.length === 3 && DELIMITERS[c3]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c3;
      next(state);
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 2 characters

    if (c2.length === 2 && DELIMITERS[c2]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c2;
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 1 character

    if (DELIMITERS[c1]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c1;
      next(state);
      return;
    } // check for a number

    if (parse.isDigitDot(c1)) {
      state.tokenType = TOKENTYPE.NUMBER; // check for binary, octal, or hex

      var _c = currentString(state, 2);
      if (_c === '0b' || _c === '0o' || _c === '0x') {
        state.token += currentCharacter(state);
        next(state);
        state.token += currentCharacter(state);
        next(state);
        while (parse.isHexDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
        return;
      } // get number, can have a single dot

      if (currentCharacter(state) === '.') {
        state.token += currentCharacter(state);
        next(state);
        if (!parse.isDigit(currentCharacter(state))) {
          // this is no number, it is just a dot (can be dot notation)
          state.tokenType = TOKENTYPE.DELIMITER;
        }
      } else {
        while (parse.isDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
      }
      while (parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"

      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
          state.token += currentCharacter(state);
          next(state);
          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
            state.token += currentCharacter(state);
            next(state);
          } // Scientific notation MUST be followed by an exponent

          if (!parse.isDigit(currentCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }
          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
        } else if (nextCharacter(state) === '.') {
          next(state);
          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
        }
      }
      return;
    } // check for variables, functions, named operators

    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      }
      if (hasOwnProperty(NAMED_DELIMITERS, state.token)) {
        state.tokenType = TOKENTYPE.DELIMITER;
      } else {
        state.tokenType = TOKENTYPE.SYMBOL;
      }
      return;
    } // something unknown is found, wrong characters -> a syntax error

    state.tokenType = TOKENTYPE.UNKNOWN;
    while (currentCharacter(state) !== '') {
      state.token += currentCharacter(state);
      next(state);
    }
    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
  }
  /**
   * Get next token and skip newline tokens
   */

  function getTokenSkipNewline(state) {
    do {
      getToken(state);
    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition
  }
  /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */

  function openParams(state) {
    state.nestingLevel++;
  }
  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */

  function closeParams(state) {
    state.nestingLevel--;
  }
  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */

  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
  };
  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */

  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };
  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */

  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };
  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */

  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
  };
  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */

  parse.isDecimalMark = function isDecimalMark(c, cNext) {
    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };
  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */

  parse.isDigitDot = function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  };
  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */

  parse.isDigit = function isDigit(c) {
    return c >= '0' && c <= '9';
  };
  /**
   * checks if the given char c is a hex digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */

  parse.isHexDigit = function isHexDigit(c) {
    return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
  };
  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */

  function parseStart(expression, extraNodes) {
    var state = initialState();
    _extends$3(state, {
      expression: expression,
      extraNodes: extraNodes
    });
    getToken(state);
    var node = parseBlock(state); // check for garbage at the end of the expression
    // an expression ends with a empty character '' and tokenType DELIMITER

    if (state.token !== '') {
      if (state.tokenType === TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"
        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
        throw createError(state, 'Unexpected operator ' + state.token);
      } else {
        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
      }
    }
    return node;
  }
  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */

  function parseBlock(state) {
    var node;
    var blocks = [];
    var visible;
    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
      node = parseAssignment(state);
      node.comment = state.comment;
    } // TODO: simplify this loop

    while (state.token === '\n' || state.token === ';') {
      // eslint-disable-line no-unmodified-loop-condition
      if (blocks.length === 0 && node) {
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
      getToken(state);
      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
        node = parseAssignment(state);
        node.comment = state.comment;
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }
    if (blocks.length > 0) {
      return new BlockNode(blocks);
    } else {
      if (!node) {
        node = new ConstantNode(undefined);
        node.comment = state.comment;
      }
      return node;
    }
  }
  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */

  function parseAssignment(state) {
    var name, args, value, valid;
    var node = parseConditional(state);
    if (state.token === '=') {
      if (isSymbolNode(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(new SymbolNode(name), value);
      } else if (isAccessorNode(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(node.object, node.index, value);
      } else if (isFunctionNode(node) && isSymbolNode(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];
        name = node.name;
        node.args.forEach(function (arg, index) {
          if (isSymbolNode(arg)) {
            args[index] = arg.name;
          } else {
            valid = false;
          }
        });
        if (valid) {
          getTokenSkipNewline(state);
          value = parseAssignment(state);
          return new FunctionAssignmentNode(name, args, value);
        }
      }
      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
    }
    return node;
  }
  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */

  function parseConditional(state) {
    var node = parseLogicalOr(state);
    while (state.token === '?') {
      // eslint-disable-line no-unmodified-loop-condition
      // set a conditional level, the range operator will be ignored as long
      // as conditionalLevel === state.nestingLevel.
      var prev = state.conditionalLevel;
      state.conditionalLevel = state.nestingLevel;
      getTokenSkipNewline(state);
      var condition = node;
      var trueExpr = parseAssignment(state);
      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
      state.conditionalLevel = null;
      getTokenSkipNewline(state);
      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

      state.conditionalLevel = prev;
    }
    return node;
  }
  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */

  function parseLogicalOr(state) {
    var node = parseLogicalXor(state);
    while (state.token === 'or') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
    }
    return node;
  }
  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */

  function parseLogicalXor(state) {
    var node = parseLogicalAnd(state);
    while (state.token === 'xor') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
    }
    return node;
  }
  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */

  function parseLogicalAnd(state) {
    var node = parseBitwiseOr(state);
    while (state.token === 'and') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
    }
    return node;
  }
  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */

  function parseBitwiseOr(state) {
    var node = parseBitwiseXor(state);
    while (state.token === '|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
    }
    return node;
  }
  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */

  function parseBitwiseXor(state) {
    var node = parseBitwiseAnd(state);
    while (state.token === '^|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
    }
    return node;
  }
  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */

  function parseBitwiseAnd(state) {
    var node = parseRelational(state);
    while (state.token === '&') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
    }
    return node;
  }
  /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */

  function parseRelational(state) {
    var params = [parseShift(state)];
    var conditionals = [];
    var operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };
    while (hasOwnProperty(operators, state.token)) {
      // eslint-disable-line no-unmodified-loop-condition
      var cond = {
        name: state.token,
        fn: operators[state.token]
      };
      conditionals.push(cond);
      getTokenSkipNewline(state);
      params.push(parseShift(state));
    }
    if (params.length === 1) {
      return params[0];
    } else if (params.length === 2) {
      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
    } else {
      return new RelationalNode(conditionals.map(function (c) {
        return c.fn;
      }), params);
    }
  }
  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */

  function parseShift(state) {
    var node, name, fn, params;
    node = parseConversion(state);
    var operators = {
      '<<': 'leftShift',
      '>>': 'rightArithShift',
      '>>>': 'rightLogShift'
    };
    while (hasOwnProperty(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseConversion(state)];
      node = new OperatorNode(name, fn, params);
    }
    return node;
  }
  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */

  function parseConversion(state) {
    var node, name, fn, params;
    node = parseRange(state);
    var operators = {
      to: 'to',
      "in": 'to' // alias of 'to'
    };

    while (hasOwnProperty(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      if (name === 'in' && state.token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      } else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange(state)];
        node = new OperatorNode(name, fn, params);
      }
    }
    return node;
  }
  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */

  function parseRange(state) {
    var node;
    var params = [];
    if (state.token === ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode(1);
    } else {
      // explicit start
      node = parseAddSubtract(state);
    }
    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node); // parse step and end

      while (state.token === ':' && params.length < 3) {
        // eslint-disable-line no-unmodified-loop-condition
        getTokenSkipNewline(state);
        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
          // implicit end
          params.push(new SymbolNode('end'));
        } else {
          // explicit end
          params.push(parseAddSubtract(state));
        }
      }
      if (params.length === 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      } else {
        // length === 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }
  /**
   * add or subtract
   * @return {Node} node
   * @private
   */

  function parseAddSubtract(state) {
    var node, name, fn, params;
    node = parseMultiplyDivide(state);
    var operators = {
      '+': 'add',
      '-': 'subtract'
    };
    while (hasOwnProperty(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseMultiplyDivide(state)];
      node = new OperatorNode(name, fn, params);
    }
    return node;
  }
  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */

  function parseMultiplyDivide(state) {
    var node, last, name, fn;
    node = parseImplicitMultiplication(state);
    last = node;
    var operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide',
      '%': 'mod',
      mod: 'mod'
    };
    while (true) {
      if (hasOwnProperty(operators, state.token)) {
        // explicit operators
        name = state.token;
        fn = operators[name];
        getTokenSkipNewline(state);
        last = parseImplicitMultiplication(state);
        node = new OperatorNode(name, fn, [node, last]);
      } else {
        break;
      }
    }
    return node;
  }
  /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */

  function parseImplicitMultiplication(state) {
    var node, last;
    node = parseRule2(state);
    last = node;
    while (true) {
      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !isConstantNode(last) && (!isOperatorNode(last) || last.op === '!') || state.token === '(') {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseRule2(state);
        node = new OperatorNode('*', 'multiply', [node, last], true
        /* implicit */);
      } else {
        break;
      }
    }
    return node;
  }
  /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */

  function parseRule2(state) {
    var node = parseUnary(state);
    var last = node;
    var tokenStates = [];
    while (true) {
      // Match the "number /" part of the pattern "number / number symbol"
      if (state.token === '/' && isConstantNode(last)) {
        // Look ahead to see if the next token is a number
        tokenStates.push(_extends$3({}, state));
        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // Look ahead again
          tokenStates.push(_extends$3({}, state));
          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
            // We've matched the pattern "number / number symbol".
            // Rewind once and build the "number / number" node; the symbol will be consumed later
            _extends$3(state, tokenStates.pop());
            tokenStates.pop();
            last = parseUnary(state);
            node = new OperatorNode('/', 'divide', [node, last]);
          } else {
            // Not a match, so rewind
            tokenStates.pop();
            _extends$3(state, tokenStates.pop());
            break;
          }
        } else {
          // Not a match, so rewind
          _extends$3(state, tokenStates.pop());
          break;
        }
      } else {
        break;
      }
    }
    return node;
  }
  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */

  function parseUnary(state) {
    var name, params, fn;
    var operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      not: 'not'
    };
    if (hasOwnProperty(operators, state.token)) {
      fn = operators[state.token];
      name = state.token;
      getTokenSkipNewline(state);
      params = [parseUnary(state)];
      return new OperatorNode(name, fn, params);
    }
    return parsePow(state);
  }
  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */

  function parsePow(state) {
    var node, name, fn, params;
    node = parseLeftHandOperators(state);
    if (state.token === '^' || state.token === '.^') {
      name = state.token;
      fn = name === '^' ? 'pow' : 'dotPow';
      getTokenSkipNewline(state);
      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

      node = new OperatorNode(name, fn, params);
    }
    return node;
  }
  /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */

  function parseLeftHandOperators(state) {
    var node, name, fn, params;
    node = parseCustomNodes(state);
    var operators = {
      '!': 'factorial',
      '\'': 'ctranspose'
    };
    while (hasOwnProperty(operators, state.token)) {
      name = state.token;
      fn = operators[name];
      getToken(state);
      params = [node];
      node = new OperatorNode(name, fn, params);
      node = parseAccessors(state, node);
    }
    return node;
  }
  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */

  function parseCustomNodes(state) {
    var params = [];
    if (state.tokenType === TOKENTYPE.SYMBOL && hasOwnProperty(state.extraNodes, state.token)) {
      var CustomNode = state.extraNodes[state.token];
      getToken(state); // parse parameters

      if (state.token === '(') {
        params = [];
        openParams(state);
        getToken(state);
        if (state.token !== ')') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }
        if (state.token !== ')') {
          throw createSyntaxError(state, 'Parenthesis ) expected');
        }
        closeParams(state);
        getToken(state);
      } // create a new custom node
      // noinspection JSValidateTypes

      return new CustomNode(params);
    }
    return parseSymbol(state);
  }
  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */

  function parseSymbol(state) {
    var node, name;
    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
      name = state.token;
      getToken(state);
      if (hasOwnProperty(CONSTANTS, name)) {
        // true, false, null, ...
        node = new ConstantNode(CONSTANTS[name]);
      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
        // NaN, Infinity
        node = new ConstantNode(numeric(name, 'number'));
      } else {
        node = new SymbolNode(name);
      } // parse function parameters and matrix index

      node = parseAccessors(state, node);
      return node;
    }
    return parseDoubleQuotesString(state);
  }
  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Object} state
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */

  function parseAccessors(state, node, types) {
    var params;
    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
      // eslint-disable-line no-unmodified-loop-condition
      params = [];
      if (state.token === '(') {
        if (isSymbolNode(node) || isAccessorNode(node)) {
          // function invocation like fn(2, 3) or obj.fn(2, 3)
          openParams(state);
          getToken(state);
          if (state.token !== ')') {
            params.push(parseAssignment(state)); // parse a list with parameters

            while (state.token === ',') {
              // eslint-disable-line no-unmodified-loop-condition
              getToken(state);
              params.push(parseAssignment(state));
            }
          }
          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }
          closeParams(state);
          getToken(state);
          node = new FunctionNode(node, params);
        } else {
          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
          // don't parse it here but let it be handled by parseImplicitMultiplication
          // with correct precedence
          return node;
        }
      } else if (state.token === '[') {
        // index notation like variable[2, 3]
        openParams(state);
        getToken(state);
        if (state.token !== ']') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }
        if (state.token !== ']') {
          throw createSyntaxError(state, 'Parenthesis ] expected');
        }
        closeParams(state);
        getToken(state);
        node = new AccessorNode(node, new IndexNode(params));
      } else {
        // dot notation like variable.prop
        getToken(state);
        if (state.tokenType !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError(state, 'Property name expected after dot');
        }
        params.push(new ConstantNode(state.token));
        getToken(state);
        var dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }
    return node;
  }
  /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */

  function parseDoubleQuotesString(state) {
    var node, str;
    if (state.token === '"') {
      str = parseDoubleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }
    return parseSingleQuotesString(state);
  }
  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */

  function parseDoubleQuotesStringToken(state) {
    var str = '';
    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\"'
        str += currentCharacter(state);
        next(state);
      }
      str += currentCharacter(state);
      next(state);
    }
    getToken(state);
    if (state.token !== '"') {
      throw createSyntaxError(state, 'End of string " expected');
    }
    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */

  function parseSingleQuotesString(state) {
    var node, str;
    if (state.token === '\'') {
      str = parseSingleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }
    return parseMatrix(state);
  }
  /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */

  function parseSingleQuotesStringToken(state) {
    var str = '';
    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\''
        str += currentCharacter(state);
        next(state);
      }
      str += currentCharacter(state);
      next(state);
    }
    getToken(state);
    if (state.token !== '\'') {
      throw createSyntaxError(state, 'End of string \' expected');
    }
    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */

  function parseMatrix(state) {
    var array, params, rows, cols;
    if (state.token === '[') {
      // matrix [...]
      openParams(state);
      getToken(state);
      if (state.token !== ']') {
        // this is a non-empty matrix
        var row = parseRow(state);
        if (state.token === ';') {
          // 2 dimensional array
          rows = 1;
          params = [row]; // the rows of the matrix are separated by dot-comma's

          while (state.token === ';') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params[rows] = parseRow(state);
            rows++;
          }
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }
          closeParams(state);
          getToken(state); // check if the number of columns matches in all rows

          cols = params[0].items.length;
          for (var r = 1; r < rows; r++) {
            if (params[r].items.length !== cols) {
              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
            }
          }
          array = new ArrayNode(params);
        } else {
          // 1 dimensional vector
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }
          closeParams(state);
          getToken(state);
          array = row;
        }
      } else {
        // this is an empty matrix "[ ]"
        closeParams(state);
        getToken(state);
        array = new ArrayNode([]);
      }
      return parseAccessors(state, array);
    }
    return parseObject(state);
  }
  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */

  function parseRow(state) {
    var params = [parseAssignment(state)];
    var len = 1;
    while (state.token === ',') {
      // eslint-disable-line no-unmodified-loop-condition
      getToken(state); // parse expression

      params[len] = parseAssignment(state);
      len++;
    }
    return new ArrayNode(params);
  }
  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */

  function parseObject(state) {
    if (state.token === '{') {
      openParams(state);
      var key;
      var properties = {};
      do {
        getToken(state);
        if (state.token !== '}') {
          // parse key
          if (state.token === '"') {
            key = parseDoubleQuotesStringToken(state);
          } else if (state.token === '\'') {
            key = parseSingleQuotesStringToken(state);
          } else if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
            key = state.token;
            getToken(state);
          } else {
            throw createSyntaxError(state, 'Symbol or string expected as object key');
          } // parse key/value separator

          if (state.token !== ':') {
            throw createSyntaxError(state, 'Colon : expected after object key');
          }
          getToken(state); // parse key

          properties[key] = parseAssignment(state);
        }
      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition

      if (state.token !== '}') {
        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
      }
      closeParams(state);
      getToken(state);
      var node = new ObjectNode(properties); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }
    return parseNumber(state);
  }
  /**
   * parse a number
   * @return {Node} node
   * @private
   */

  function parseNumber(state) {
    var numberStr;
    if (state.tokenType === TOKENTYPE.NUMBER) {
      // this is a number
      numberStr = state.token;
      getToken(state);
      return new ConstantNode(numeric(numberStr, config.number));
    }
    return parseParentheses(state);
  }
  /**
   * parentheses
   * @return {Node} node
   * @private
   */

  function parseParentheses(state) {
    var node; // check if it is a parenthesized expression

    if (state.token === '(') {
      // parentheses (...)
      openParams(state);
      getToken(state);
      node = parseAssignment(state); // start again

      if (state.token !== ')') {
        throw createSyntaxError(state, 'Parenthesis ) expected');
      }
      closeParams(state);
      getToken(state);
      node = new ParenthesisNode(node);
      node = parseAccessors(state, node);
      return node;
    }
    return parseEnd(state);
  }
  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */

  function parseEnd(state) {
    if (state.token === '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError(state, 'Unexpected end of expression');
    } else {
      throw createSyntaxError(state, 'Value expected');
    }
  }
  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */

  /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */

  function col(state) {
    return state.index - state.token.length + 1;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */

  function createSyntaxError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }
  /**
   * Create an error
   * @param {Object} state
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */

  function createError(state, message) {
    var c = col(state);
    var error = new SyntaxError(message + ' (char ' + c + ')');
    error["char"] = c;
    return error;
  }
  return parse;
});

var name$17 = 'compile';
var dependencies$17 = ['typed', 'parse'];
var createCompile = /* #__PURE__ */factory(name$17, dependencies$17, function (_ref) {
  var typed = _ref.typed,
    parse = _ref.parse;

  /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed(name$17, {
    string: function string(expr) {
      return parse(expr).compile();
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
});

var name$16 = 'evaluate';
var dependencies$16 = ['typed', 'parse'];
var createEvaluate = /* #__PURE__ */factory(name$16, dependencies$16, function (_ref) {
  var typed = _ref.typed,
    parse = _ref.parse;

  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed(name$16, {
    string: function string(expr) {
      var scope = {};
      return parse(expr).compile().evaluate(scope);
    },
    'string, Object': function stringObject(expr, scope) {
      return parse(expr).compile().evaluate(scope);
    },
    'Array | Matrix': function ArrayMatrix(expr) {
      var scope = {};
      return deepMap(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    },
    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
      return deepMap(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    }
  });
});

var name$15 = 'Parser';
var dependencies$15 = ['parse'];
var createParserClass = /* #__PURE__ */factory(name$15, dependencies$15, function (_ref) {
  var parse = _ref.parse;

  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    this.scope = {};
  }
  /**
   * Attach type information
   */

  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */

  Parser.prototype.evaluate = function (expr) {
    // TODO: validate arguments
    return parse(expr).compile().evaluate(this.scope);
  };
  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */

  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;
  };
  /**
   * Get a map with all defined variables
   * @return {Object} values
   */

  Parser.prototype.getAll = function () {
    return extend({}, this.scope);
  };
  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */

  Parser.prototype.set = function (name, value) {
    // TODO: validate arguments
    return setSafeProperty(this.scope, name, value);
  };
  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */

  Parser.prototype.remove = function (name) {
    // TODO: validate arguments
    delete this.scope[name];
  };
  /**
   * Clear the scope with variables and functions
   */

  Parser.prototype.clear = function () {
    for (var _name in this.scope) {
      if (hasOwnProperty(this.scope, _name)) {
        delete this.scope[_name];
      }
    }
  };
  return Parser;
}, {
  isClass: true
});

var name$14 = 'parser';
var dependencies$14 = ['typed', 'Parser'];
var createParser = /* #__PURE__ */factory(name$14, dependencies$14, function (_ref) {
  var typed = _ref.typed,
    Parser = _ref.Parser;

  /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')                 // 3.5
   *     parser.evaluate('x + 3')                     // 6.5
   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)
   *     parser.evaluate('f(2, 3)')                   // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed(name$14, {
    '': function _() {
      return new Parser();
    }
  });
});

var name$13 = 'lup';
var dependencies$13 = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
var createLup = /* #__PURE__ */factory(name$13, dependencies$13, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    abs = _ref.abs,
    addScalar = _ref.addScalar,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    larger = _ref.larger,
    equalScalar = _ref.equalScalar,
    unaryMinus = _ref.unaryMinus,
    DenseMatrix = _ref.DenseMatrix,
    SparseMatrix = _ref.SparseMatrix,
    Spa = _ref.Spa;

  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  return typed(name$13, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseLUP(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseLUP(m);
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseLUP(m); // result

      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });
  function _denseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix array, clone original data

    var data = clone$2(m._data); // l matrix arrays

    var ldata = [];
    var lsize = [rows, n]; // u matrix arrays

    var udata = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vector

    var p = [];
    for (i = 0; i < rows; i++) {
      p[i] = i;
    } // loop columns

    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          var min = Math.min(i, j); // v[i, j]

          var s = 0; // loop up to min

          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }
          data[i][j] = subtract(data[i][j], s);
        }
      } // row with larger value in cvector, row >= j

      var pi = j;
      var pabsv = 0;
      var vjj = 0; // loop rows

      for (i = j; i < rows; i++) {
        // data @ i, j
        var v = data[i][j]; // absolute value

        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = i; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      } // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

        DenseMatrix._swapRows(j, pi, data);
      } // check column is in lower triangular matrix

      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          var vij = data[i][j];
          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    } // loop columns

    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          } // L

          ldata[i] = [];
        } // check we are in the upper triangular matrix

        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix

          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }
          continue;
        } // diagonal value

        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix

          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }
          continue;
        } // check row exists in upper triangular matrix

        if (i < columns) {
          // U
          udata[i][j] = 0;
        } // check column exists in lower triangular matrix

        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    } // l matrix

    var l = new DenseMatrix({
      data: ldata,
      size: lsize
    }); // u matrix

    var u = new DenseMatrix({
      data: udata,
      size: usize
    }); // p vector

    var pv = [];
    for (i = 0, n = p.length; i < n; i++) {
      pv[p[i]] = i;
    } // return matrices

    return {
      L: l,
      U: u,
      p: pv,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
  function _sparseLUP(m) {
    // rows & columns
    var rows = m._size[0];
    var columns = m._size[1]; // minimum rows and columns

    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

    var values = m._values;
    var index = m._index;
    var ptr = m._ptr; // l matrix arrays

    var lvalues = [];
    var lindex = [];
    var lptr = [];
    var lsize = [rows, n]; // u matrix arrays

    var uvalues = [];
    var uindex = [];
    var uptr = [];
    var usize = [n, columns]; // vars

    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

    var pvCo = [];
    var pvOc = [];
    for (i = 0; i < rows; i++) {
      pvCo[i] = i;
      pvOc[i] = i;
    } // swap indices in permutation vectors (condition x < y)!

    var swapIndeces = function swapIndeces(x, y) {
      // find pv indeces getting data from x and y
      var kx = pvOc[x];
      var ky = pvOc[y]; // update permutation vector current -> original

      pvCo[kx] = y;
      pvCo[ky] = x; // update permutation vector original -> current

      pvOc[x] = ky;
      pvOc[y] = kx;
    }; // loop columns

    var _loop = function _loop() {
      // sparse accumulator
      var spa = new Spa(); // check lower triangular matrix has a value @ column j

      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

        lvalues.push(1);
        lindex.push(j);
      } // update ptr

      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      var k0 = ptr[j];
      var k1 = ptr[j + 1]; // copy column j into sparse accumulator

      for (k = k0; k < k1; k++) {
        // row
        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

        spa.set(pvCo[i], values[k]);
      } // skip first column in upper triangular matrix

      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });
      } // row with larger value in spa, row >= j

      var pi = j;
      var vjj = spa.get(j);
      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        var absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = x; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      }); // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U

        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa

        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

        swapIndeces(j, pi);
      } // loop values in spa (order by row)

      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        } else {
          // update value
          v = divideScalar(v, vjj); // check value is non zero

          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    };
    for (j = 0; j < columns; j++) {
      _loop();
    } // update ptrs

    uptr.push(uvalues.length);
    lptr.push(lvalues.length); // return matrices

    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }),
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pvCo,
      toString: function toString() {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
});

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
var name$12 = 'qr';
var dependencies$12 = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'equal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'complex'];
var createQr = /* #__PURE__ */factory(name$12, dependencies$12, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    zeros = _ref.zeros,
    identity = _ref.identity,
    isZero = _ref.isZero,
    equal = _ref.equal,
    sign = _ref.sign,
    sqrt = _ref.sqrt,
    conj = _ref.conj,
    unaryMinus = _ref.unaryMinus,
    addScalar = _ref.addScalar,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    subtract = _ref.subtract,
    complex = _ref.complex;

  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  return _extends$2(typed(name$12, {
    DenseMatrix: function DenseMatrix(m) {
      return _denseQR(m);
    },
    SparseMatrix: function SparseMatrix(m) {
      return _sparseQR();
    },
    Array: function Array(a) {
      // create dense matrix from array
      var m = matrix(a); // lup, use matrix implementation

      var r = _denseQR(m); // result

      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  }), {
    _denseQRimpl: _denseQRimpl
  });
  function _denseQRimpl(m) {
    // rows & columns (m x n)
    var rows = m._size[0]; // m

    var cols = m._size[1]; // n

    var Q = identity([rows], 'dense');
    var Qdata = Q._data;
    var R = m.clone();
    var Rdata = R._data; // vars

    var i, j, k;
    var w = zeros([rows], '');
    for (k = 0; k < Math.min(cols, rows); ++k) {
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */
      var pivot = Rdata[k][k];
      var sgn = unaryMinus(equal(pivot, 0) ? 1 : sign(pivot));
      var conjSgn = conj(sgn);
      var alphaSquared = 0;
      for (i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
      }
      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
      if (!isZero(alpha)) {
        // first element in vector u
        var u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

        w[k] = 1;
        for (i = k + 1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        } // tau = - conj(u1 / alpha)

        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
        var s = void 0;
        /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */

        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (j = k; j < cols; j++) {
          s = 0.0; // calculate jth element of [tranpose(w) * R]

          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          } // calculate the jth element of [tau * transpose(w) * R]

          s = multiplyScalar(s, tau);
          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
          }
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (i = 0; i < rows; i++) {
          s = 0.0; // calculate ith element of [Q * w]

          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          } // calculate the ith element of [tau * Q * w]

          s = multiplyScalar(s, tau);
          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
          }
        }
      }
    } // return matrices

    return {
      Q: Q,
      R: R,
      toString: function toString() {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  }
  function _denseQR(m) {
    var ret = _denseQRimpl(m);
    var Rdata = ret.R._data;
    if (m._data.length > 0) {
      var zero = Rdata[0][0].type === 'Complex' ? complex(0) : 0;
      for (var i = 0; i < Rdata.length; ++i) {
        for (var j = 0; j < i && j < (Rdata[0] || []).length; ++j) {
          Rdata[i][j] = zero;
        }
      }
    }
    return ret;
  }
  function _sparseQR(m) {
    throw new Error('qr not implemented for sparse matrices yet');
  }
});

/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPermute(a, pinv, q, values) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size;
  var adt = a._datatype; // rows & columns

  var m = asize[0];
  var n = asize[1]; // c arrays

  var cvalues = values && a._values ? [] : null;
  var cindex = []; // (aptr[n])

  var cptr = []; // (n + 1)
  // initialize vars

  var nz = 0; // loop columns

  for (var k = 0; k < n; k++) {
    // column k of C is column q[k] of A
    cptr[k] = nz; // apply column permutation

    var j = q ? q[k] : k; // loop values in column j of A

    for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
      // row i of A is row pinv[i] of C
      var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

      cindex[nz] = r; // check we need to populate values

      if (cvalues) {
        cvalues[nz] = avalues[t];
      } // increment number of nonzero elements

      nz++;
    }
  } // finalize the last column of C

  cptr[n] = nz; // return C matrix

  return a.createSparseMatrix({
    values: cvalues,
    index: cindex,
    ptr: cptr,
    size: [m, n],
    datatype: adt
  });
}

/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csTdfs(j, k, w, head, next, post, stack) {
  // variables
  var top = 0; // place j on the stack

  w[stack] = j; // while (stack is not empty)

  while (top >= 0) {
    // p = top of stack
    var p = w[stack + top]; // i = youngest child of p

    var i = w[head + p];
    if (i === -1) {
      // p has no unordered children left
      top--; // node p is the kth postordered node

      post[k++] = p;
    } else {
      // remove i from children of p
      w[head + p] = w[next + i]; // increment top

      ++top; // start dfs on child node i

      w[stack + top] = i;
    }
  }
  return k;
}

/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csPost(parent, n) {
  // check inputs
  if (!parent) {
    return null;
  } // vars

  var k = 0;
  var j; // allocate result

  var post = []; // (n)
  // workspace, head: first n entries, next: next n entries, stack: last n entries

  var w = []; // (3 * n)

  var head = 0;
  var next = n;
  var stack = 2 * n; // initialize workspace

  for (j = 0; j < n; j++) {
    // empty linked lists
    w[head + j] = -1;
  } // traverse nodes in reverse order

  for (j = n - 1; j >= 0; j--) {
    // check j is a root
    if (parent[j] === -1) {
      continue;
    } // add j to list of its parent

    w[next + j] = w[head + parent[j]];
    w[head + parent[j]] = j;
  } // loop nodes

  for (j = 0; j < n; j++) {
    // skip j if it is not a root
    if (parent[j] !== -1) {
      continue;
    } // depth-first search

    k = csTdfs(j, k, w, head, next, post, stack);
  }
  return post;
}

/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csEtree(a, ata) {
  // check inputs
  if (!a) {
    return null;
  } // a arrays

  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // rows & columns

  var m = asize[0];
  var n = asize[1]; // allocate result

  var parent = []; // (n)
  // allocate workspace

  var w = []; // (n + (ata ? m : 0))

  var ancestor = 0; // first n entries in w

  var prev = n; // last m entries (ata = true)

  var i, inext; // check we are calculating A'A

  if (ata) {
    // initialize workspace
    for (i = 0; i < m; i++) {
      w[prev + i] = -1;
    }
  } // loop columns

  for (var k = 0; k < n; k++) {
    // node k has no parent yet
    parent[k] = -1; // nor does k have an ancestor

    w[ancestor + k] = -1; // values in column k

    for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
      // row
      var r = aindex[p]; // node

      i = ata ? w[prev + r] : r; // traverse from i to k

      for (; i !== -1 && i < k; i = inext) {
        // inext = ancestor of i
        inext = w[ancestor + i]; // path compression

        w[ancestor + i] = k; // check no anc., parent is k

        if (inext === -1) {
          parent[i] = k;
        }
      }
      if (ata) {
        w[prev + r] = k;
      }
    }
  }
  return parent;
}

/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFkeep(a, callback, other) {
  // a arrays
  var avalues = a._values;
  var aindex = a._index;
  var aptr = a._ptr;
  var asize = a._size; // columns

  var n = asize[1]; // nonzero items

  var nz = 0; // loop columns

  for (var j = 0; j < n; j++) {
    // get current location of col j
    var p = aptr[j]; // record new location of col j

    aptr[j] = nz;
    for (; p < aptr[j + 1]; p++) {
      // check we need to keep this item
      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
        // keep A(i,j)
        aindex[nz] = aindex[p]; // check we need to process values (pattern only)

        if (avalues) {
          avalues[nz] = avalues[p];
        } // increment nonzero items

        nz++;
      }
    }
  } // finalize A

  aptr[n] = nz; // trim arrays

  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

  if (avalues) {
    avalues.splice(nz, avalues.length - nz);
  } // return number of nonzero items

  return nz;
}

/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFlip(i) {
  // flip the value
  return -i - 2;
}

var name$11 = 'csAmd';
var dependencies$11 = ['add', 'multiply', 'transpose'];
var createCsAmd = /* #__PURE__ */factory(name$11, dependencies$11, function (_ref) {
  var add = _ref.add,
    multiply = _ref.multiply,
    transpose = _ref.transpose;

  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */
  return function csAmd(order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3) {
      return null;
    } // a matrix arrays

    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // initialize vars

    var lemax = 0; // dense threshold

    var dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense); // create target matrix C

    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries

    csFkeep(cm, _diag, null); // C matrix arrays

    var cindex = cm._index;
    var cptr = cm._ptr; // number of nonzero elements in C

    var cnz = cptr[n]; // allocate result (n+1)

    var P = []; // create workspace (8 * (n + 1))

    var W = [];
    var len = 0; // first n + 1 entries

    var nv = n + 1; // next n + 1 entries

    var next = 2 * (n + 1); // next n + 1 entries

    var head = 3 * (n + 1); // next n + 1 entries

    var elen = 4 * (n + 1); // next n + 1 entries

    var degree = 5 * (n + 1); // next n + 1 entries

    var w = 6 * (n + 1); // next n + 1 entries

    var hhead = 7 * (n + 1); // last n + 1 entries
    // use P as workspace for last

    var last = P; // initialize quotient graph

    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists

    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node

    var mindeg = 0; // vars

    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
      }
      if (W[next + k] !== -1) {
        last[W[next + k]] = -1;
      } // remove k from degree list

      W[head + mindeg] = W[next + k]; // elenk = |Ek|

      var elenk = W[elen + k]; // # of nodes k represents

      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.

      var dk = 0; // flag k as in Lk

      W[nv + k] = -nvk;
      var p = cptr[k]; // do in place if W[elen + k] === 0

      var pk1 = elenk === 0 ? p : cnz;
      var pk2 = pk1;
      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k; // list of nodes starts at cindex[pj]

          pj = p; // length of list of nodes in k

          ln = W[len + k] - elenk;
        } else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e]; // length of list of nodes in e

          ln = W[len + e];
        }
        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++]; // check  node i dead, or seen

          if ((nvi = W[nv + i]) <= 0) {
            continue;
          } // W[degree + Lk] += size of node i

          dk += nvi; // negate W[nv + i] to denote i in Lk

          W[nv + i] = -nvi; // place i in Lk

          cindex[pk2++] = i;
          if (W[next + i] !== -1) {
            last[W[next + i]] = last[i];
          } // check we need to remove i from degree list

          if (last[i] !== -1) {
            W[next + last[i]] = W[next + i];
          } else {
            W[head + W[degree + i]] = W[next + i];
          }
        }
        if (e !== k) {
          // absorb e into k
          cptr[e] = csFlip(k); // e is now a dead element

          W[w + e] = 0;
        }
      } // cindex[cnz...nzmax] is free

      if (elenk !== 0) {
        cnz = pk2;
      } // external degree of k - |Lk\i|

      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

      cptr[k] = pk1;
      W[len + k] = pk2 - pk1; // k is now an element

      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      // clear w if necessary

      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check if W[elen + i] empty, skip it

        if ((eln = W[elen + i]) <= 0) {
          continue;
        } // W[nv + i] was negated

        nvi = -W[nv + i];
        var wnvi = mark - nvi; // scan Ei

        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];
          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          } else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      } // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      // scan2: degree update

      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1; // scan Ei

        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p]; // check e is an unabsorbed element

          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            var dext = W[w + e] - mark;
            if (dext > 0) {
              // sum up the set differences
              d += dext; // keep e in Ei

              cindex[pn++] = e; // compute the hash of node i

              h += e;
            } else {
              // aggressive absorb. e->k
              cptr[e] = csFlip(k); // e is a dead element

              W[w + e] = 0;
            }
          }
        } // W[elen + i] = |Ei|

        W[elen + i] = pn - p1 + 1;
        var p3 = pn;
        var p4 = p1 + W[len + i]; // prune edges in Ai

        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p]; // check node j dead or in Lk

          var nvj = W[nv + j];
          if (nvj <= 0) {
            continue;
          } // degree(i) += |j|

          d += nvj; // place j in node list of i

          cindex[pn++] = j; // compute hash for node i

          h += j;
        } // check for mass elimination

        if (d === 0) {
          // absorb i into k
          cptr[i] = csFlip(k);
          nvi = -W[nv + i]; // |Lk| -= |i|

          dk -= nvi; // |k| += W[nv + i]

          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0; // node i is dead

          W[elen + i] = -1;
        } else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

          cindex[p1] = k; // new len of adj. list of node i

          W[len + i] = pn - p1 + 1; // finalize hash of i

          h = (h < 0 ? -h : h) % n; // place i in hash bucket

          W[next + i] = W[hhead + h];
          W[hhead + h] = i; // save hash of i in last[i]

          last[i] = h;
        }
      } // finalize |Lk|

      W[degree + k] = dk;
      lemax = Math.max(lemax, dk); // clear w

      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check i is dead, skip it

        if (W[nv + i] >= 0) {
          continue;
        } // scan hash bucket of node i

        h = last[i];
        i = W[hhead + h]; // hash bucket will be empty

        W[hhead + h] = -1;
        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];
          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
            W[w + cindex[p]] = mark;
          }
          var jlast = i; // compare i with all j

          for (j = W[next + i]; j !== -1;) {
            var ok = W[len + j] === ln && W[elen + j] === eln;
            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] !== mark) {
                ok = 0;
              }
            } // check i and j are identical

            if (ok) {
              // absorb j into i
              cptr[j] = csFlip(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0; // node j is dead

              W[elen + j] = -1; // delete j from hash bucket

              j = W[next + j];
              W[next + jlast] = j;
            } else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.

      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check  i is dead, skip it

        if ((nvi = -W[nv + i]) <= 0) {
          continue;
        } // restore W[nv + i]

        W[nv + i] = nvi; // compute external degree(i)

        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);
        if (W[head + d] !== -1) {
          last[W[head + d]] = i;
        } // put i back in degree list

        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i; // find new minimum degree

        mindeg = Math.min(mindeg, d);
        W[degree + i] = d; // place i in Lk

        cindex[p++] = i;
      } // # nodes absorbed into k

      W[nv + k] = nvk; // length of adj list of element k

      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1; // k is now a dead element

        W[w + k] = 0;
      }
      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    // fix assembly tree

    for (i = 0; i < n; i++) {
      cptr[i] = csFlip(cptr[i]);
    }
    for (j = 0; j <= n; j++) {
      W[head + j] = -1;
    } // place unordered nodes in lists

    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0) {
        continue;
      } // place j in list of its parent

      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    } // place elements in lists

    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0) {
        continue;
      }
      if (cptr[e] !== -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    } // postorder the assembly tree

    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] === -1) {
        k = csTdfs(i, k, W, head, next, P, w);
      }
    } // remove last item in array

    P.splice(P.length - 1, 1); // return P

    return P;
  };
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */

  function _createTargetMatrix(order, a, m, n, dense) {
    // compute A'
    var at = transpose(a); // check order = 1, matrix must be square

    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    } // check order = 2, drop dense columns from M'

    if (order === 2) {
      // transpose arrays
      var tindex = at._index;
      var tptr = at._ptr; // new column index

      var p2 = 0; // loop A' columns (rows)

      for (var j = 0; j < m; j++) {
        // column j of AT starts here
        var p = tptr[j]; // new column j starts here

        tptr[j] = p2; // skip dense col j

        if (tptr[j + 1] - p > dense) {
          continue;
        } // map rows in column j of A

        for (var p1 = tptr[j + 1]; p < p1; p++) {
          tindex[p2++] = tindex[p];
        }
      } // finalize AT

      tptr[m] = p2; // recreate A from new transpose matrix

      a = transpose(at); // use A' * A

      return multiply(at, a);
    } // use A' * A, square or rectangular matrix

    return multiply(at, a);
  }
  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */

  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (var k = 0; k < n; k++) {
      W[len + k] = cptr[k + 1] - cptr[k];
    }
    W[len + n] = 0; // initialize workspace

    for (var i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1; // hash list i is empty

      W[hhead + i] = -1; // node i is just one node

      W[nv + i] = 1; // node i is alive

      W[w + i] = 1; // Ek of node i is empty

      W[elen + i] = 0; // degree of node i

      W[degree + i] = W[len + i];
    } // clear w

    var mark = _wclear(0, 0, W, w, n); // n is a dead element

    W[elen + n] = -2; // n is a root of assembly tree

    cptr[n] = -1; // n is a dead element

    W[w + n] = 0; // return mark

    return mark;
  }
  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */

  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    var nel = 0; // loop columns

    for (var i = 0; i < n; i++) {
      // degree @ i
      var d = W[degree + i]; // check node i is empty

      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++; // i is a root of assembly tree

        cptr[i] = -1;
        W[w + i] = 0;
      } else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0; // node i is dead

        W[elen + i] = -1;
        nel++;
        cptr[i] = csFlip(n);
        W[nv + n]++;
      } else {
        var h = W[head + d];
        if (h !== -1) {
          last[h] = i;
        } // put node i in degree list d

        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }
    return nel;
  }
  function _wclear(mark, lemax, W, w, n) {
    if (mark < 2 || mark + lemax < 0) {
      for (var k = 0; k < n; k++) {
        if (W[w + k] !== 0) {
          W[w + k] = 1;
        }
      }
      mark = 2;
    } // at this point, W [0..n-1] < mark holds

    return mark;
  }
  function _diag(i, j) {
    return i !== j;
  }
});

/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
  var s, sparent; // our result

  var jleaf = 0;
  var q; // check j is a leaf

  if (i <= j || w[first + j] <= w[maxfirst + i]) {
    return -1;
  } // update max first[j] seen so far

  w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

  var jprev = w[prevleaf + i];
  w[prevleaf + i] = j; // check j is first or subsequent leaf

  if (jprev === -1) {
    // 1st leaf, q = root of ith subtree
    jleaf = 1;
    q = i;
  } else {
    // update jleaf
    jleaf = 2; // q = least common ancester (jprev,j)

    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
    }
    for (s = jprev; s !== q; s = sparent) {
      // path compression
      sparent = w[ancestor + s];
      w[ancestor + s] = q;
    }
  }
  return {
    jleaf: jleaf,
    q: q
  };
}

var name$10 = 'csCounts';
var dependencies$10 = ['transpose'];
var createCsCounts = /* #__PURE__ */factory(name$10, dependencies$10, function (_ref) {
  var transpose = _ref.transpose;

  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) {
      return null;
    } // a matrix arrays

    var asize = a._size; // rows and columns

    var m = asize[0];
    var n = asize[1]; // variables

    var i, j, k, J, p, p0, p1; // workspace size

    var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

    var w = []; // (s)

    var ancestor = 0; // first n entries

    var maxfirst = n; // next n entries

    var prevleaf = 2 * n; // next n entries

    var first = 3 * n; // next n entries

    var head = 4 * n; // next n + 1 entries (used when ata is true)

    var next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]

    for (k = 0; k < s; k++) {
      w[k] = -1;
    } // allocate result

    var colcount = []; // (n)
    // AT = A'

    var at = transpose(a); // at arrays

    var tindex = at._index;
    var tptr = at._ptr; // find w[first + j]

    for (k = 0; k < n; k++) {
      j = post[k]; // colcount[j]=1 if j is a leaf

      colcount[j] = w[first + j] === -1 ? 1 : 0;
      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
        w[first + j] = k;
      }
    } // initialize ata if needed

    if (ata) {
      // invert post
      for (k = 0; k < n; k++) {
        w[post[k]] = k;
      } // loop rows (columns in AT)

      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
          k = Math.min(k, w[tindex[p]]);
        } // place row i in linked list k

        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    } // each node in its own set

    for (i = 0; i < n; i++) {
      w[ancestor + i] = i;
    }
    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k]; // check j is not a root

      if (parent[j] !== -1) {
        colcount[parent[j]]--;
      } // J=j for LL'=A case

      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
        for (p = tptr[J]; p < tptr[J + 1]; p++) {
          i = tindex[p];
          var r = csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

          if (r.jleaf >= 1) {
            colcount[j]++;
          } // check account for overlap in q

          if (r.jleaf === 2) {
            colcount[r.q]--;
          }
        }
      }
      if (parent[j] !== -1) {
        w[ancestor + j] = parent[j];
      }
    } // sum up colcount's of each child

    for (j = 0; j < n; j++) {
      if (parent[j] !== -1) {
        colcount[parent[j]] += colcount[j];
      }
    }
    return colcount;
  };
});

var name$$ = 'csSqr';
var dependencies$$ = ['add', 'multiply', 'transpose'];
var createCsSqr = /* #__PURE__ */factory(name$$, dependencies$$, function (_ref) {
  var add = _ref.add,
    multiply = _ref.multiply,
    transpose = _ref.transpose;
  var csAmd = createCsAmd({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csCounts = createCsCounts({
    transpose: transpose
  });
  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csSqr(order, a, qr) {
    // a arrays
    var aptr = a._ptr;
    var asize = a._size; // columns

    var n = asize[1]; // vars

    var k; // symbolic analysis result

    var s = {}; // fill-reducing ordering

    s.q = csAmd(order, a); // validate results

    if (order && !s.q) {
      return null;
    } // QR symbolic analysis

    if (qr) {
      // apply permutations if needed
      var c = order ? csPermute(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

      s.parent = csEtree(c, 1); // post order elimination tree

      var post = csPost(s.parent, n); // col counts chol(C'*C)

      s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) {
          s.unz += s.cp[k];
        }
      }
    } else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * aptr[n] + n;
      s.lnz = s.unz;
    } // return result S

    return s;
  };
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */

  function _vcount(a, s) {
    // a arrays
    var aptr = a._ptr;
    var aindex = a._index;
    var asize = a._size; // rows & columns

    var m = asize[0];
    var n = asize[1]; // initialize s arrays

    s.pinv = []; // (m + n)

    s.leftmost = []; // (m)
    // vars

    var parent = s.parent;
    var pinv = s.pinv;
    var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

    var w = []; // (m + 3 * n)

    var next = 0;
    var head = m;
    var tail = m + n;
    var nque = m + 2 * n; // vars

    var i, k, p, p0, p1; // initialize w

    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    } // initialize row arrays

    for (i = 0; i < m; i++) {
      leftmost[i] = -1;
    } // loop columns backwards

    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    } // scan rows in reverse order

    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i]; // check row i is empty

      if (k === -1) {
        continue;
      } // first row in queue k

      if (w[nque + k]++ === 0) {
        w[tail + k] = i;
      } // put i at head of queue k

      w[next + i] = w[head + k];
      w[head + k] = i;
    }
    s.lnz = 0;
    s.m2 = m; // find row permutation and nnz(V)

    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k]; // count V(k,k) as nonzero

      s.lnz++; // add a fictitious row

      if (i < 0) {
        i = s.m2++;
      } // associate row i with V(:,k)

      pinv[i] = k; // skip if V(k+1:m,k) is empty

      if (--nque[k] <= 0) {
        continue;
      } // nque[k] is nnz (V(k+1:m,k))

      s.lnz += w[nque + k]; // move all rows to parent of k

      var pa = parent[k];
      if (pa !== -1) {
        if (w[nque + pa] === 0) {
          w[tail + pa] = w[tail + k];
        }
        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }
    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) {
        pinv[i] = k++;
      }
    }
    return true;
  }
});

/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMarked(w, j) {
  // check node is marked
  return w[j] < 0;
}

/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csMark(w, j) {
  // mark w[j]
  w[j] = csFlip(w[j]);
}

/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csUnflip(i) {
  // flip the value if it is negative
  return i < 0 ? csFlip(i) : i;
}

/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csDfs(j, g, top, xi, pinv) {
  // g arrays
  var index = g._index;
  var ptr = g._ptr;
  var size = g._size; // columns

  var n = size[1]; // vars

  var i, p, p2; // initialize head

  var head = 0; // initialize the recursion stack

  xi[0] = j; // loop

  while (head >= 0) {
    // get j from the top of the recursion stack
    j = xi[head]; // apply permutation vector

    var jnew = pinv ? pinv[j] : j; // check node j is marked

    if (!csMarked(ptr, j)) {
      // mark node j as visited
      csMark(ptr, j); // update stack (last n entries in xi)

      xi[n + head] = jnew < 0 ? 0 : csUnflip(ptr[jnew]);
    } // node j done if no unvisited neighbors

    var done = 1; // examine all neighbors of j, stack (last n entries in xi)

    for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip(ptr[jnew + 1]); p < p2; p++) {
      // consider neighbor node i
      i = index[p]; // check we have visited node i, skip it

      if (csMarked(ptr, i)) {
        continue;
      } // pause depth-first search of node j, update stack (last n entries in xi)

      xi[n + head] = p; // start dfs at node i

      xi[++head] = i; // node j is not done

      done = 0; // break, to start dfs(i)

      break;
    } // check depth-first search at node j is done

    if (done) {
      // remove j from the recursion stack
      head--; // and place in the output stack

      xi[--top] = j;
    }
  }
  return top;
}

/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */

function csReach(g, b, k, xi, pinv) {
  // g arrays
  var gptr = g._ptr;
  var gsize = g._size; // b arrays

  var bindex = b._index;
  var bptr = b._ptr; // columns

  var n = gsize[1]; // vars

  var p, p0, p1; // initialize top

  var top = n; // loop column indeces in B

  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
    // node i
    var i = bindex[p]; // check node i is marked

    if (!csMarked(gptr, i)) {
      // start a dfs at unmarked node i
      top = csDfs(i, g, top, xi, pinv);
    }
  } // loop columns from top -> n - 1

  for (p = top; p < n; p++) {
    // restore G
    csMark(gptr, xi[p]);
  }
  return top;
}

var name$_ = 'csSpsolve';
var dependencies$_ = ['divideScalar', 'multiply', 'subtract'];
var createCsSpsolve = /* #__PURE__ */factory(name$_, dependencies$_, function (_ref) {
  var divideScalar = _ref.divideScalar,
    multiply = _ref.multiply,
    subtract = _ref.subtract;

  /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function csSpsolve(g, b, k, xi, x, pinv, lo) {
    // g arrays
    var gvalues = g._values;
    var gindex = g._index;
    var gptr = g._ptr;
    var gsize = g._size; // columns

    var n = gsize[1]; // b arrays

    var bvalues = b._values;
    var bindex = b._index;
    var bptr = b._ptr; // vars

    var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

    var top = csReach(g, b, k, xi, pinv); // clear x

    for (p = top; p < n; p++) {
      x[xi[p]] = 0;
    } // scatter b

    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      x[bindex[p]] = bvalues[p];
    } // loop columns

    for (var px = top; px < n; px++) {
      // x array index for px
      var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

      var J = pinv ? pinv[j] : j; // check column J is empty

      if (J < 0) {
        continue;
      } // column value indeces in G, p0 <= p < p1

      p0 = gptr[J];
      p1 = gptr[J + 1]; // x(j) /= G(j,j)

      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

      p = lo ? p0 + 1 : p0;
      q = lo ? p1 : p1 - 1; // loop

      for (; p < q; p++) {
        // row
        var i = gindex[p]; // x(i) -= G(i,j) * x(j)

        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    } // return top of stack

    return top;
  };
});

var name$Z = 'csLu';
var dependencies$Z = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createCsLu = /* #__PURE__ */factory(name$Z, dependencies$Z, function (_ref) {
  var abs = _ref.abs,
    divideScalar = _ref.divideScalar,
    multiply = _ref.multiply,
    subtract = _ref.subtract,
    larger = _ref.larger,
    largerEq = _ref.largerEq,
    SparseMatrix = _ref.SparseMatrix;
  var csSpsolve = createCsSpsolve({
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract
  });
  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csLu(m, s, tol) {
    // validate input
    if (!m) {
      return null;
    } // m arrays

    var size = m._size; // columns

    var n = size[1]; // symbolic analysis result

    var q;
    var lnz = 100;
    var unz = 100; // update symbolic analysis parameters

    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    } // L arrays

    var lvalues = []; // (lnz)

    var lindex = []; // (lnz)

    var lptr = []; // (n + 1)
    // L

    var L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    }); // U arrays

    var uvalues = []; // (unz)

    var uindex = []; // (unz)

    var uptr = []; // (n + 1)
    // U

    var U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    }); // inverse of permutation vector

    var pinv = []; // (n)
    // vars

    var i, p; // allocate arrays

    var x = []; // (n)

    var xi = []; // (2 * n)
    // initialize variables

    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0; // no rows pivotal yet

      pinv[i] = -1; // no cols of L yet

      lptr[i + 1] = 0;
    } // reset number of nonzero elements in L and U

    lnz = 0;
    unz = 0; // compute L(:,k) and U(:,k)

    for (var k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz; // apply column permutations if needed

      var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

      var ipiv = -1;
      var a = -1; // loop xi[] from top -> n

      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p]; // check row i is not yet pivotal

        if (pinv[i] < 0) {
          // absolute value of x[i]
          var xabs = abs(x[i]); // check absoulte value is greater than pivot value

          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        } else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      } // validate we found a valid pivot

      if (ipiv === -1 || a <= 0) {
        return null;
      } // update actual pivot column, give preference to diagonal value

      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
        ipiv = col;
      } // the chosen pivot

      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

      uindex[unz] = k;
      uvalues[unz++] = pivot; // ipiv is the kth pivot row

      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

      for (p = top; p < n; p++) {
        // row
        i = xi[p]; // check x(i) is an entry in L(:,k)

        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i; // scale pivot column

          lvalues[lnz++] = divideScalar(x[i], pivot);
        } // x[0..n-1] = 0 for next k

        x[i] = 0;
      }
    } // update ptr

    lptr[n] = lnz;
    uptr[n] = unz; // fix row indices of L for final pinv

    for (p = 0; p < lnz; p++) {
      lindex[p] = pinv[lindex[p]];
    } // trim arrays

    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz); // return LU factor

    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };
});

var name$Y = 'slu';
var dependencies$Y = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
var createSlu = /* #__PURE__ */factory(name$Y, dependencies$Y, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    add = _ref.add,
    multiply = _ref.multiply,
    transpose = _ref.transpose,
    divideScalar = _ref.divideScalar,
    subtract = _ref.subtract,
    larger = _ref.larger,
    largerEq = _ref.largerEq,
    SparseMatrix = _ref.SparseMatrix;
  var csSqr = createCsSqr({
    add: add,
    multiply: multiply,
    transpose: transpose
  });
  var csLu = createCsLu({
    abs: abs,
    divideScalar: divideScalar,
    multiply: multiply,
    subtract: subtract,
    larger: larger,
    largerEq: largerEq,
    SparseMatrix: SparseMatrix
  });
  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */

  return typed(name$Y, {
    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
      // verify order
      if (!isInteger$1(order) || order < 0 || order > 3) {
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      } // verify threshold

      if (threshold < 0 || threshold > 1) {
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      } // perform symbolic ordering and analysis

      var s = csSqr(order, a, false); // perform lu decomposition

      var f = csLu(a, s, threshold); // return decomposition

      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function toString() {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });
});

/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */
function csIpvec(p, b) {
  // vars
  var k;
  var n = b.length;
  var x = []; // check permutation vector was provided, p = null denotes identity

  if (p) {
    // loop vector
    for (k = 0; k < n; k++) {
      // apply permutation
      x[p[k]] = b[k];
    }
  } else {
    // loop vector
    for (k = 0; k < n; k++) {
      // x[i] = b[i]
      x[k] = b[k];
    }
  }
  return x;
}

var name$X = 'lusolve';
var dependencies$X = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
var createLusolve = /* #__PURE__ */factory(name$X, dependencies$X, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    lup = _ref.lup,
    slu = _ref.slu,
    usolve = _ref.usolve,
    lsolve = _ref.lsolve,
    DenseMatrix = _ref.DenseMatrix;
  var solveValidation = createSolveValidation({
    DenseMatrix: DenseMatrix
  });
  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */

  return typed(name$X, {
    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
      a = matrix(a);
      var d = lup(a);
      var x = _lusolve(d.L, d.U, d.p, null, b);
      return x.valueOf();
    },
    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
      var d = lup(a);
      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
      var d = slu(a, order, threshold);
      return _lusolve(d.L, d.U, d.p, d.q, b);
    },
    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });
  function _toMatrix(a) {
    if (isMatrix(a)) {
      return a;
    }
    if (isArray(a)) {
      return matrix(a);
    }
    throw new TypeError('Invalid Matrix LU decomposition');
  }
  function _lusolve(l, u, p, q, b) {
    // verify decomposition
    l = _toMatrix(l);
    u = _toMatrix(u); // apply row permutations if needed (b is a DenseMatrix)

    if (p) {
      b = solveValidation(l, b, true);
      b._data = csIpvec(p, b._data);
    } // use forward substitution to resolve L * y = b

    var y = lsolve(l, b); // use backward substitution to resolve U * x = y

    var x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

    if (q) {
      x._data = csIpvec(q, x._data);
    }
    return x;
  }
});

var name$W = 'Help';
var dependencies$W = ['parse'];
var createHelpClass = /* #__PURE__ */factory(name$W, dependencies$W, function (_ref) {
  var parse = _ref.parse;

  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (!doc) throw new Error('Argument "doc" missing');
    this.doc = doc;
  }
  /**
   * Attach type information
   */

  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;
  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */

  Help.prototype.toString = function () {
    var doc = this.doc || {};
    var desc = '\n';
    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }
    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }
    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }
    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }
    if (doc.examples) {
      desc += 'Examples:\n';
      var scope = {};
      for (var i = 0; i < doc.examples.length; i++) {
        var expr = doc.examples[i];
        desc += '    ' + expr + '\n';
        var res = void 0;
        try {
          // note: res can be undefined when `expr` is an empty string
          res = parse(expr).compile().evaluate(scope);
        } catch (e) {
          res = e;
        }
        if (res !== undefined && !isHelp(res)) {
          desc += '        ' + format$1(res, {
            precision: 14
          }) + '\n';
        }
      }
      desc += '\n';
    }
    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }
    return desc;
  };
  /**
   * Export the help object to JSON
   */

  Help.prototype.toJSON = function () {
    var obj = clone$2(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };
  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */

  Help.fromJSON = function (json) {
    var doc = {};
    Object.keys(json).filter(function (prop) {
      return prop !== 'mathjs';
    }).forEach(function (prop) {
      doc[prop] = json[prop];
    });
    return new Help(doc);
  };
  /**
   * Returns a string representation of the Help object
   */

  Help.prototype.valueOf = Help.prototype.toString;
  return Help;
}, {
  isClass: true
});

var name$V = 'Chain';
var dependencies$V = ['?on', 'math'];
var createChainClass = /* #__PURE__ */factory(name$V, dependencies$V, function (_ref) {
  var on = _ref.on,
    math = _ref.math;

  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain(value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
    if (isChain(value)) {
      this.value = value.value;
    } else {
      this.value = value;
    }
  }
  /**
   * Attach type information
   */

  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;
  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */

  Chain.prototype.done = function () {
    return this.value;
  };
  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */

  Chain.prototype.valueOf = function () {
    return this.value;
  };
  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */

  Chain.prototype.toString = function () {
    return format$1(this.value);
  };
  /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */

  Chain.prototype.toJSON = function () {
    return {
      mathjs: 'Chain',
      value: this.value
    };
  };
  /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */

  Chain.fromJSON = function (json) {
    return new Chain(json.value);
  };
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */

  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */

  function createLazyProxy(name, resolver) {
    lazy(Chain.prototype, name, function outerResolver() {
      var fn = resolver();
      if (typeof fn === 'function') {
        return chainify(fn);
      }
      return undefined; // if not a function, ignore
    });
  }
  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */

  function chainify(fn) {
    return function () {
      var args = [this.value]; // `this` will be the context of a Chain instance

      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }
      return new Chain(fn.apply(fn, args));
    };
  }
  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */

  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    } else {
      var _loop = function _loop(_name) {
        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {
          createLazyProxy(_name, function () {
            return arg0[_name];
          });
        }
      };

      // createProxy(values)
      for (var _name in arg0) {
        _loop(_name);
      }
    }
  };
  var excludedNames = {
    expression: true,
    docs: true,
    type: true,
    classes: true,
    json: true,
    error: true,
    isChain: true // conflicts with the property isChain of a Chain instance
  }; // create proxy for everything that is in math.js

  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

  if (on) {
    on('import', function (name, resolver, path) {
      if (!path) {
        // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
      }
    });
  }
  return Chain;
}, {
  isClass: true
});

var bignumberDocs = {
  name: 'bignumber',
  category: 'Construction',
  syntax: ['bignumber(x)'],
  description: 'Create a big number from a number or string.',
  examples: ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
  seealso: ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};

var typeOfDocs = {
  name: 'typeOf',
  category: 'Utils',
  syntax: ['typeOf(x)'],
  description: 'Get the type of a variable.',
  examples: ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
  seealso: ['getMatrixDataType']
};

var isZeroDocs = {
  name: 'isZero',
  category: 'Utils',
  syntax: ['isZero(x)'],
  description: 'Test whether a value is zero.',
  examples: ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};

var isPrimeDocs = {
  name: 'isPrime',
  category: 'Utils',
  syntax: ['isPrime(x)'],
  description: 'Test whether a value is prime: has no divisors other than itself and one.',
  examples: ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};

var isPositiveDocs = {
  name: 'isPositive',
  category: 'Utils',
  syntax: ['isPositive(x)'],
  description: 'Test whether a value is positive: larger than zero.',
  examples: ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};

var isNumericDocs = {
  name: 'isNumeric',
  category: 'Utils',
  syntax: ['isNumeric(x)'],
  description: 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  examples: ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
};

var hasNumericValueDocs = {
  name: 'hasNumericValue',
  category: 'Utils',
  syntax: ['hasNumericValue(x)'],
  description: 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
  examples: ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
  seealso: ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
};

var isNegativeDocs = {
  name: 'isNegative',
  category: 'Utils',
  syntax: ['isNegative(x)'],
  description: 'Test whether a value is negative: smaller than zero.',
  examples: ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
  seealso: ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};

var isIntegerDocs = {
  name: 'isInteger',
  category: 'Utils',
  syntax: ['isInteger(x)'],
  description: 'Test whether a value is an integer number.',
  examples: ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

var isNaNDocs = {
  name: 'isNaN',
  category: 'Utils',
  syntax: ['isNaN(x)'],
  description: 'Test whether a value is NaN (not a number)',
  examples: ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
  seealso: ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};

var formatDocs = {
  name: 'format',
  category: 'Utils',
  syntax: ['format(value)', 'format(value, precision)'],
  description: 'Format a value of any type as string.',
  examples: ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
  seealso: ['print']
};

var binDocs = {
  name: 'bin',
  category: 'Utils',
  syntax: ['bin(value)'],
  description: 'Format a number as binary',
  examples: ['bin(2)'],
  seealso: ['oct', 'hex']
};

var octDocs = {
  name: 'oct',
  category: 'Utils',
  syntax: ['oct(value)'],
  description: 'Format a number as octal',
  examples: ['oct(56)'],
  seealso: ['bin', 'hex']
};

var hexDocs = {
  name: 'hex',
  category: 'Utils',
  syntax: ['hex(value)'],
  description: 'Format a number as hexadecimal',
  examples: ['hex(240)'],
  seealso: ['bin', 'oct']
};

var cloneDocs = {
  name: 'clone',
  category: 'Utils',
  syntax: ['clone(x)'],
  description: 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  examples: ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
  seealso: []
};

var toDocs = {
  name: 'to',
  category: 'Units',
  syntax: ['x to unit', 'to(x, unit)'],
  description: 'Change the unit of a value.',
  examples: ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
  seealso: []
};

var tanhDocs = {
  name: 'tanh',
  category: 'Trigonometry',
  syntax: ['tanh(x)'],
  description: 'Compute the hyperbolic tangent of x in radians.',
  examples: ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
  seealso: ['sinh', 'cosh']
};

var tanDocs = {
  name: 'tan',
  category: 'Trigonometry',
  syntax: ['tan(x)'],
  description: 'Compute the tangent of x in radians.',
  examples: ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
  seealso: ['atan', 'sin', 'cos']
};

var sinhDocs = {
  name: 'sinh',
  category: 'Trigonometry',
  syntax: ['sinh(x)'],
  description: 'Compute the hyperbolic sine of x in radians.',
  examples: ['sinh(0.5)'],
  seealso: ['cosh', 'tanh']
};

var sechDocs = {
  name: 'sech',
  category: 'Trigonometry',
  syntax: ['sech(x)'],
  description: 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  examples: ['sech(2)', '1 / cosh(2)'],
  seealso: ['coth', 'csch', 'cosh']
};

var secDocs = {
  name: 'sec',
  category: 'Trigonometry',
  syntax: ['sec(x)'],
  description: 'Compute the secant of x in radians. Defined as 1/cos(x)',
  examples: ['sec(2)', '1 / cos(2)'],
  seealso: ['cot', 'csc', 'cos']
};

var cschDocs = {
  name: 'csch',
  category: 'Trigonometry',
  syntax: ['csch(x)'],
  description: 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  examples: ['csch(2)', '1 / sinh(2)'],
  seealso: ['sech', 'coth', 'sinh']
};

var cscDocs = {
  name: 'csc',
  category: 'Trigonometry',
  syntax: ['csc(x)'],
  description: 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  examples: ['csc(2)', '1 / sin(2)'],
  seealso: ['sec', 'cot', 'sin']
};

var cothDocs = {
  name: 'coth',
  category: 'Trigonometry',
  syntax: ['coth(x)'],
  description: 'Compute the hyperbolic cotangent of x in radians.',
  examples: ['coth(2)', '1 / tanh(2)'],
  seealso: ['sech', 'csch', 'tanh']
};

var cotDocs = {
  name: 'cot',
  category: 'Trigonometry',
  syntax: ['cot(x)'],
  description: 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  examples: ['cot(2)', '1 / tan(2)'],
  seealso: ['sec', 'csc', 'tan']
};

var coshDocs = {
  name: 'cosh',
  category: 'Trigonometry',
  syntax: ['cosh(x)'],
  description: 'Compute the hyperbolic cosine of x in radians.',
  examples: ['cosh(0.5)'],
  seealso: ['sinh', 'tanh', 'coth']
};

var cosDocs = {
  name: 'cos',
  category: 'Trigonometry',
  syntax: ['cos(x)'],
  description: 'Compute the cosine of x in radians.',
  examples: ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['acos', 'sin', 'tan']
};

var atan2Docs = {
  name: 'atan2',
  category: 'Trigonometry',
  syntax: ['atan2(y, x)'],
  description: 'Computes the principal value of the arc tangent of y/x in radians.',
  examples: ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
  seealso: ['sin', 'cos', 'tan']
};

var atanhDocs = {
  name: 'atanh',
  category: 'Trigonometry',
  syntax: ['atanh(x)'],
  description: 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  examples: ['atanh(0.5)'],
  seealso: ['acosh', 'asinh']
};

var atanDocs = {
  name: 'atan',
  category: 'Trigonometry',
  syntax: ['atan(x)'],
  description: 'Compute the inverse tangent of a value in radians.',
  examples: ['atan(0.5)', 'atan(tan(0.5))'],
  seealso: ['tan', 'acos', 'asin']
};

var asinhDocs = {
  name: 'asinh',
  category: 'Trigonometry',
  syntax: ['asinh(x)'],
  description: 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  examples: ['asinh(0.5)'],
  seealso: ['acosh', 'atanh']
};

var asinDocs = {
  name: 'asin',
  category: 'Trigonometry',
  syntax: ['asin(x)'],
  description: 'Compute the inverse sine of a value in radians.',
  examples: ['asin(0.5)', 'asin(sin(0.5))'],
  seealso: ['sin', 'acos', 'atan']
};

var asechDocs = {
  name: 'asech',
  category: 'Trigonometry',
  syntax: ['asech(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asech(0.5)'],
  seealso: ['acsch', 'acoth']
};

var asecDocs = {
  name: 'asec',
  category: 'Trigonometry',
  syntax: ['asec(x)'],
  description: 'Calculate the inverse secant of a value.',
  examples: ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
  seealso: ['acos', 'acot', 'acsc']
};

var acschDocs = {
  name: 'acsch',
  category: 'Trigonometry',
  syntax: ['acsch(x)'],
  description: 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  examples: ['acsch(0.5)'],
  seealso: ['asech', 'acoth']
};

var acscDocs = {
  name: 'acsc',
  category: 'Trigonometry',
  syntax: ['acsc(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
  seealso: ['csc', 'asin', 'asec']
};

var acothDocs = {
  name: 'acoth',
  category: 'Trigonometry',
  syntax: ['acoth(x)'],
  description: 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  examples: ['acoth(2)', 'acoth(0.5)'],
  seealso: ['acsch', 'asech']
};

var acotDocs = {
  name: 'acot',
  category: 'Trigonometry',
  syntax: ['acot(x)'],
  description: 'Calculate the inverse cotangent of a value.',
  examples: ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
  seealso: ['cot', 'atan']
};

var acoshDocs = {
  name: 'acosh',
  category: 'Trigonometry',
  syntax: ['acosh(x)'],
  description: 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  examples: ['acosh(1.5)'],
  seealso: ['cosh', 'asinh', 'atanh']
};

var acosDocs = {
  name: 'acos',
  category: 'Trigonometry',
  syntax: ['acos(x)'],
  description: 'Compute the inverse cosine of a value in radians.',
  examples: ['acos(0.5)', 'acos(cos(2.3))'],
  seealso: ['cos', 'atan', 'asin']
};

var sumDocs = {
  name: 'sum',
  category: 'Statistics',
  syntax: ['sum(a, b, c, ...)', 'sum(A)'],
  description: 'Compute the sum of all values.',
  examples: ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

var stdDocs = {
  name: 'std',
  category: 'Statistics',
  syntax: ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
  description: 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'sum', 'variance']
};

var quantileSeqDocs = {
  name: 'quantileSeq',
  category: 'Statistics',
  syntax: ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
  description: 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  examples: ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
  seealso: ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
};

var prodDocs = {
  name: 'prod',
  category: 'Statistics',
  syntax: ['prod(a, b, c, ...)', 'prod(A)'],
  description: 'Compute the product of all values.',
  examples: ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
};

var modeDocs = {
  name: 'mode',
  category: 'Statistics',
  syntax: ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
  description: 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  examples: ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
  seealso: ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
};

var minDocs = {
  name: 'min',
  category: 'Statistics',
  syntax: ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
  description: 'Compute the minimum value of a list of values.',
  examples: ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
};

var medianDocs = {
  name: 'median',
  category: 'Statistics',
  syntax: ['median(a, b, c, ...)', 'median(A)'],
  description: 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  examples: ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
  seealso: ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
};

var meanDocs = {
  name: 'mean',
  category: 'Statistics',
  syntax: ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
  description: 'Compute the arithmetic mean of a list of values.',
  examples: ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
  seealso: ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

var maxDocs = {
  name: 'max',
  category: 'Statistics',
  syntax: ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
  description: 'Compute the maximum value of a list of values.',
  examples: ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
  seealso: ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};

var madDocs = {
  name: 'mad',
  category: 'Statistics',
  syntax: ['mad(a, b, c, ...)', 'mad(A)'],
  description: 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  examples: ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
  seealso: ['mean', 'median', 'std', 'abs']
};

var erfDocs = {
  name: 'erf',
  category: 'Special',
  syntax: ['erf(x)'],
  description: 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  examples: ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
  seealso: []
};

var setUnionDocs = {
  name: 'setUnion',
  category: 'Set',
  syntax: ['setUnion(set1, set2)'],
  description: 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setIntersect', 'setDifference']
};

var setSymDifferenceDocs = {
  name: 'setSymDifference',
  category: 'Set',
  syntax: ['setSymDifference(set1, set2)'],
  description: 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

var setSizeDocs = {
  name: 'setSize',
  category: 'Set',
  syntax: ['setSize(set)', 'setSize(set, unique)'],
  description: 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

var setPowersetDocs = {
  name: 'setPowerset',
  category: 'Set',
  syntax: ['setPowerset(set)'],
  description: 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setPowerset([1, 2, 3])'],
  seealso: ['setCartesian']
};

var setMultiplicityDocs = {
  name: 'setMultiplicity',
  category: 'Set',
  syntax: ['setMultiplicity(element, set)'],
  description: 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
  seealso: ['setDistinct', 'setSize']
};

var setIsSubsetDocs = {
  name: 'setIsSubset',
  category: 'Set',
  syntax: ['setIsSubset(set1, set2)'],
  description: 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference']
};

var setIntersectDocs = {
  name: 'setIntersect',
  category: 'Set',
  syntax: ['setIntersect(set1, set2)'],
  description: 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setDifference']
};

var setDistinctDocs = {
  name: 'setDistinct',
  category: 'Set',
  syntax: ['setDistinct(set)'],
  description: 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  examples: ['setDistinct([1, 1, 1, 2, 2, 3])'],
  seealso: ['setMultiplicity']
};

var setDifferenceDocs = {
  name: 'setDifference',
  category: 'Set',
  syntax: ['setDifference(set1, set2)'],
  description: 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  seealso: ['setUnion', 'setIntersect', 'setSymDifference']
};

var setCartesianDocs = {
  name: 'setCartesian',
  category: 'Set',
  syntax: ['setCartesian(set1, set2)'],
  description: 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  examples: ['setCartesian([1, 2], [3, 4])'],
  seealso: ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
};

var unequalDocs = {
  name: 'unequal',
  category: 'Relational',
  syntax: ['x != y', 'unequal(x, y)'],
  description: 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  examples: ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
  seealso: ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
};

var smallerEqDocs = {
  name: 'smallerEq',
  category: 'Relational',
  syntax: ['x <= y', 'smallerEq(x, y)'],
  description: 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
  seealso: ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
};

var smallerDocs = {
  name: 'smaller',
  category: 'Relational',
  syntax: ['x < y', 'smaller(x, y)'],
  description: 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  examples: ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
  seealso: ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
};

var largerEqDocs = {
  name: 'largerEq',
  category: 'Relational',
  syntax: ['x >= y', 'largerEq(x, y)'],
  description: 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  examples: ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
  seealso: ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
};

var largerDocs = {
  name: 'larger',
  category: 'Relational',
  syntax: ['x > y', 'larger(x, y)'],
  description: 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  examples: ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
};

var equalTextDocs = {
  name: 'equalText',
  category: 'Relational',
  syntax: ['equalText(x, y)'],
  description: 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
  examples: ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural', 'compareText', 'equal']
};

var equalDocs = {
  name: 'equal',
  category: 'Relational',
  syntax: ['x == y', 'equal(x, y)'],
  description: 'Check equality of two values. Returns true if the values are equal, and false if not.',
  examples: ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
  seealso: ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
};

var deepEqualDocs = {
  name: 'deepEqual',
  category: 'Relational',
  syntax: ['deepEqual(x, y)'],
  description: 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  examples: ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
  seealso: ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
};

var compareTextDocs = {
  name: 'compareText',
  category: 'Relational',
  syntax: ['compareText(x, y)'],
  description: 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  seealso: ['compare', 'compareNatural']
};

var compareNaturalDocs = {
  name: 'compareNatural',
  category: 'Relational',
  syntax: ['compareNatural(x, y)'],
  description: 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
};

var compareDocs = {
  name: 'compare',
  category: 'Relational',
  syntax: ['compare(x, y)'],
  description: 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  examples: ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
  seealso: ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
};

var randomIntDocs = {
  name: 'randomInt',
  category: 'Probability',
  syntax: ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
  description: 'Return a random integer number',
  examples: ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
  seealso: ['pickRandom', 'random']
};

var randomDocs = {
  name: 'random',
  category: 'Probability',
  syntax: ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
  description: 'Return a random number.',
  examples: ['random()', 'random(10, 20)', 'random([2, 3])'],
  seealso: ['pickRandom', 'randomInt']
};

var pickRandomDocs = {
  name: 'pickRandom',
  category: 'Probability',
  syntax: ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
  description: 'Pick a random entry from a given array.',
  examples: ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
  seealso: ['random', 'randomInt']
};

var permutationsDocs = {
  name: 'permutations',
  category: 'Probability',
  syntax: ['permutations(n)', 'permutations(n, k)'],
  description: 'Compute the number of permutations of n items taken k at a time',
  examples: ['permutations(5)', 'permutations(5, 3)'],
  seealso: ['combinations', 'combinationsWithRep', 'factorial']
};

var multinomialDocs = {
  name: 'multinomial',
  category: 'Probability',
  syntax: ['multinomial(A)'],
  description: 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  examples: ['multinomial([1, 2, 1])'],
  seealso: ['combinations', 'factorial']
};

var kldivergenceDocs = {
  name: 'kldivergence',
  category: 'Probability',
  syntax: ['kldivergence(x, y)'],
  description: 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  examples: ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
  seealso: []
};

var gammaDocs = {
  name: 'gamma',
  category: 'Probability',
  syntax: ['gamma(n)'],
  description: 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  examples: ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
  seealso: ['factorial']
};

var factorialDocs = {
  name: 'factorial',
  category: 'Probability',
  syntax: ['n!', 'factorial(n)'],
  description: 'Compute the factorial of a value',
  examples: ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
  seealso: ['combinations', 'combinationsWithRep', 'permutations', 'gamma']
};

var combinationsDocs = {
  name: 'combinations',
  category: 'Probability',
  syntax: ['combinations(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time',
  examples: ['combinations(7, 5)'],
  seealso: ['combinationsWithRep', 'permutations', 'factorial']
};

var combinationsWithRepDocs = {
  name: 'combinationsWithRep',
  category: 'Probability',
  syntax: ['combinationsWithRep(n, k)'],
  description: 'Compute the number of combinations of n items taken k at a time with replacements.',
  examples: ['combinationsWithRep(7, 5)'],
  seealso: ['combinations', 'permutations', 'factorial']
};

var zerosDocs = {
  name: 'zeros',
  category: 'Matrix',
  syntax: ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
  description: 'Create a matrix containing zeros.',
  examples: ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
};

var transposeDocs = {
  name: 'transpose',
  category: 'Matrix',
  syntax: ['x\'', 'transpose(x)'],
  description: 'Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};

var traceDocs = {
  name: 'trace',
  category: 'Matrix',
  syntax: ['trace(A)'],
  description: 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  examples: ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
};

var subsetDocs = {
  name: 'subset',
  category: 'Matrix',
  syntax: ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
  description: 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
  examples: ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
};

var squeezeDocs = {
  name: 'squeeze',
  category: 'Matrix',
  syntax: ['squeeze(x)'],
  description: 'Remove inner and outer singleton dimensions from a matrix.',
  examples: ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
};

var sortDocs = {
  name: 'sort',
  category: 'Matrix',
  syntax: ['sort(x)', 'sort(x, compare)'],
  description: 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  examples: ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  seealso: ['map', 'filter', 'forEach']
};

var sizeDocs = {
  name: 'size',
  category: 'Matrix',
  syntax: ['size(x)'],
  description: 'Calculate the size of a matrix.',
  examples: ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var diffDocs = {
  name: 'diff',
  category: 'Matrix',
  syntax: ['diff(arr)', 'diff(arr, dim)'],
  description: ['Create a new matrix or array with the difference of the passed matrix or array.', 'Dim parameter is optional and used to indicant the dimension of the array/matrix to apply the difference', 'If no dimension parameter is passed it is assumed as dimension 0', 'Dimension is zero-based in javascript and one-based in the parser', 'Arrays must be \'rectangular\' meaning arrays like [1, 2]', 'If something is passed as a matrix it will be returned as a matrix but other than that all matrices are converted to arrays'],
  examples: ['diff([1, 2, 4, 7, 0])', 'diff([1, 2, 4, 7, 0], 0)', 'diff(matrix([1, 2, 4, 7, 0]))', 'diff([[1, 2], [3, 4]])', 'diff([[1, 2], [3, 4]], 0)', 'diff([[1, 2], [3, 4]], 1)', 'diff([[1, 2], [3, 4]], bignumber(1))', 'diff(matrix([[1, 2], [3, 4]]), 1)', 'diff([[1, 2], matrix([3, 4])], 1)'],
  seealso: ['subtract', 'partitionSelect']
};

var reshapeDocs = {
  name: 'reshape',
  category: 'Matrix',
  syntax: ['reshape(x, sizes)'],
  description: 'Reshape a multi dimensional array to fit the specified dimensions.',
  examples: ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
  seealso: ['size', 'squeeze', 'resize']
};

var resizeDocs = {
  name: 'resize',
  category: 'Matrix',
  syntax: ['resize(x, size)', 'resize(x, size, defaultValue)'],
  description: 'Resize a matrix.',
  examples: ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
  seealso: ['size', 'subset', 'squeeze', 'reshape']
};

var rangeDocs = {
  name: 'range',
  category: 'Type',
  syntax: ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
  description: 'Create a range. Lower bound of the range is included, upper bound is excluded.',
  examples: ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var partitionSelectDocs = {
  name: 'partitionSelect',
  category: 'Matrix',
  syntax: ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
  description: 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  examples: ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
  seealso: ['sort']
};

var onesDocs = {
  name: 'ones',
  category: 'Matrix',
  syntax: ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
  description: 'Create a matrix containing ones.',
  examples: ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var mapDocs = {
  name: 'map',
  category: 'Matrix',
  syntax: ['map(x, callback)'],
  description: 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  examples: ['map([1, 2, 3], square)'],
  seealso: ['filter', 'forEach']
};

var kronDocs = {
  name: 'kron',
  category: 'Matrix',
  syntax: ['kron(x, y)'],
  description: 'Calculates the kronecker product of 2 matrices or vectors.',
  examples: ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
  seealso: ['multiply', 'dot', 'cross']
};

var invDocs = {
  name: 'inv',
  category: 'Matrix',
  syntax: ['inv(x)'],
  description: 'Calculate the inverse of a matrix',
  examples: ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
  seealso: ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var forEachDocs = {
  name: 'forEach',
  category: 'Matrix',
  syntax: ['forEach(x, callback)'],
  description: 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  examples: ['forEach([1, 2, 3], function(val) { console.log(val) })'],
  seealso: ['map', 'sort', 'filter']
};

var flattenDocs = {
  name: 'flatten',
  category: 'Matrix',
  syntax: ['flatten(x)'],
  description: 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
  seealso: ['concat', 'resize', 'size', 'squeeze']
};

var filterDocs = {
  name: 'filter',
  category: 'Matrix',
  syntax: ['filter(x, test)'],
  description: 'Filter items in a matrix.',
  examples: ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
  seealso: ['sort', 'map', 'forEach']
};

var identityDocs = {
  name: 'identity',
  category: 'Matrix',
  syntax: ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
  description: 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  examples: ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
  seealso: ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var getMatrixDataTypeDocs = {
  name: 'getMatrixDataType',
  category: 'Matrix',
  syntax: ['getMatrixDataType(x)'],
  description: 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
  examples: ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
  seealso: ['matrix', 'sparse', 'typeOf']
};

var dotDocs = {
  name: 'dot',
  category: 'Matrix',
  syntax: ['dot(A, B)', 'A * B'],
  description: 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  examples: ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
  seealso: ['multiply', 'cross']
};

var diagDocs = {
  name: 'diag',
  category: 'Matrix',
  syntax: ['diag(x)', 'diag(x, k)'],
  description: 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  examples: ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
  seealso: ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var detDocs = {
  name: 'det',
  category: 'Matrix',
  syntax: ['det(x)'],
  description: 'Calculate the determinant of a matrix',
  examples: ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
  seealso: ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var ctransposeDocs = {
  name: 'ctranspose',
  category: 'Matrix',
  syntax: ['x\'', 'ctranspose(x)'],
  description: 'Complex Conjugate and Transpose a matrix',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
  seealso: ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};

var crossDocs = {
  name: 'cross',
  category: 'Matrix',
  syntax: ['cross(A, B)'],
  description: 'Calculate the cross product for two vectors in three dimensional space.',
  examples: ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
  seealso: ['multiply', 'dot']
};

var concatDocs = {
  name: 'concat',
  category: 'Matrix',
  syntax: ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
  description: 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  examples: ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
  seealso: ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};

var xorDocs = {
  name: 'xor',
  category: 'Logical',
  syntax: ['x xor y', 'xor(x, y)'],
  description: 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  examples: ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
  seealso: ['not', 'and', 'or']
};

var orDocs = {
  name: 'or',
  category: 'Logical',
  syntax: ['x or y', 'or(x, y)'],
  description: 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  examples: ['true or false', 'false or false', '0 or 4'],
  seealso: ['not', 'and', 'xor']
};

var notDocs = {
  name: 'not',
  category: 'Logical',
  syntax: ['not x', 'not(x)'],
  description: 'Logical not. Flips the boolean value of given argument.',
  examples: ['not true', 'not false', 'not 2', 'not 0'],
  seealso: ['and', 'or', 'xor']
};

var andDocs = {
  name: 'and',
  category: 'Logical',
  syntax: ['x and y', 'and(x, y)'],
  description: 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  examples: ['true and false', 'true and true', '2 and 4'],
  seealso: ['not', 'or', 'xor']
};

var intersectDocs = {
  name: 'intersect',
  category: 'Geometry',
  syntax: ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
  description: 'Computes the intersection point of lines and/or planes.',
  examples: ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
  seealso: []
};

var distanceDocs = {
  name: 'distance',
  category: 'Geometry',
  syntax: ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2]])'],
  description: 'Calculates the Euclidean distance between two points.',
  examples: ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
  seealso: []
};

var helpDocs = {
  name: 'help',
  category: 'Expression',
  syntax: ['help(object)', 'help(string)'],
  description: 'Display documentation on a function or data type.',
  examples: ['help(sqrt)', 'help("complex")'],
  seealso: []
};

var evaluateDocs = {
  name: 'evaluate',
  category: 'Expression',
  syntax: ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
  description: 'Evaluate an expression or an array with expressions.',
  examples: ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
  seealso: []
};

var imDocs = {
  name: 'im',
  category: 'Complex',
  syntax: ['im(x)'],
  description: 'Get the imaginary part of a complex number.',
  examples: ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
  seealso: ['re', 'conj', 'abs', 'arg']
};

var reDocs = {
  name: 're',
  category: 'Complex',
  syntax: ['re(x)'],
  description: 'Get the real part of a complex number.',
  examples: ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
  seealso: ['im', 'conj', 'abs', 'arg']
};

var conjDocs = {
  name: 'conj',
  category: 'Complex',
  syntax: ['conj(x)'],
  description: 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  examples: ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
  seealso: ['re', 'im', 'abs', 'arg']
};

var argDocs = {
  name: 'arg',
  category: 'Complex',
  syntax: ['arg(x)'],
  description: 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  examples: ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
  seealso: ['re', 'im', 'conj', 'abs']
};

var typedDocs = {
  name: 'typed',
  category: 'Core',
  syntax: ['typed(signatures)', 'typed(name, signatures)'],
  description: 'Create a typed function.',
  examples: ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
  seealso: []
};

var importDocs = {
  name: 'import',
  category: 'Core',
  syntax: ['import(functions)', 'import(functions, options)'],
  description: 'Import functions or constants from an object.',
  examples: ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
  seealso: []
};

var configDocs = {
  name: 'config',
  category: 'Core',
  syntax: ['config()', 'config(options)'],
  description: 'Get configuration or change configuration.',
  examples: ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
  seealso: []
};

var stirlingS2Docs = {
  name: 'stirlingS2',
  category: 'Combinatorics',
  syntax: ['stirlingS2(n, k)'],
  description: 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  examples: ['stirlingS2(5, 3)'],
  seealso: ['bellNumbers']
};

var compositionDocs = {
  name: 'composition',
  category: 'Combinatorics',
  syntax: ['composition(n, k)'],
  description: 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  examples: ['composition(5, 3)'],
  seealso: ['combinations']
};

var catalanDocs = {
  name: 'catalan',
  category: 'Combinatorics',
  syntax: ['catalan(n)'],
  description: 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['catalan(3)', 'catalan(8)'],
  seealso: ['bellNumbers']
};

var bellNumbersDocs = {
  name: 'bellNumbers',
  category: 'Combinatorics',
  syntax: ['bellNumbers(n)'],
  description: 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  examples: ['bellNumbers(3)', 'bellNumbers(8)'],
  seealso: ['stirlingS2']
};

var rightLogShiftDocs = {
  name: 'rightLogShift',
  category: 'Bitwise',
  syntax: ['x >>> y', 'rightLogShift(x, y)'],
  description: 'Bitwise right logical shift of a value x by y number of bits.',
  examples: ['8 >>> 1', '4 << 1', '-12 >>> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
};

var rightArithShiftDocs = {
  name: 'rightArithShift',
  category: 'Bitwise',
  syntax: ['x >> y', 'rightArithShift(x, y)'],
  description: 'Bitwise right arithmetic shift of a value x by y number of bits.',
  examples: ['8 >> 1', '4 << 1', '-12 >> 2'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
};

var leftShiftDocs = {
  name: 'leftShift',
  category: 'Bitwise',
  syntax: ['x << y', 'leftShift(x, y)'],
  description: 'Bitwise left logical shift of a value x by y number of bits.',
  examples: ['4 << 1', '8 >> 1'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
};

var bitXorDocs = {
  name: 'bitXor',
  category: 'Bitwise',
  syntax: ['bitXor(x, y)'],
  description: 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  examples: ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
};

var bitOrDocs = {
  name: 'bitOr',
  category: 'Bitwise',
  syntax: ['x | y', 'bitOr(x, y)'],
  description: 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  examples: ['5 | 3', 'bitOr([1, 2, 3], 4)'],
  seealso: ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

var bitNotDocs = {
  name: 'bitNot',
  category: 'Bitwise',
  syntax: ['~x', 'bitNot(x)'],
  description: 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  examples: ['~1', '~2', 'bitNot([2, -3, 4])'],
  seealso: ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

var bitAndDocs = {
  name: 'bitAnd',
  category: 'Bitwise',
  syntax: ['x & y', 'bitAnd(x, y)'],
  description: 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  examples: ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
  seealso: ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};

var xgcdDocs = {
  name: 'xgcd',
  category: 'Arithmetic',
  syntax: ['xgcd(a, b)'],
  description: 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  examples: ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
  seealso: ['gcd', 'lcm']
};

var unaryPlusDocs = {
  name: 'unaryPlus',
  category: 'Operators',
  syntax: ['+x', 'unaryPlus(x)'],
  description: 'Converts booleans and strings to numbers.',
  examples: ['+true', '+"2"'],
  seealso: ['add', 'subtract', 'unaryMinus']
};

var unaryMinusDocs = {
  name: 'unaryMinus',
  category: 'Operators',
  syntax: ['-x', 'unaryMinus(x)'],
  description: 'Inverse the sign of a value. Converts booleans and strings to numbers.',
  examples: ['-4.5', '-(-5.6)', '-"22"'],
  seealso: ['add', 'subtract', 'unaryPlus']
};

var squareDocs = {
  name: 'square',
  category: 'Arithmetic',
  syntax: ['square(x)'],
  description: 'Compute the square of a value. The square of x is x * x.',
  examples: ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
  seealso: ['multiply', 'pow', 'sqrt', 'cube']
};

var sqrtmDocs = {
  name: 'sqrtm',
  category: 'Arithmetic',
  syntax: ['sqrtm(x)'],
  description: 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
  examples: ['sqrtm([[1, 2], [3, 4]])'],
  seealso: ['sqrt', 'abs', 'square', 'multiply']
};

var sqrtDocs = {
  name: 'sqrt',
  category: 'Arithmetic',
  syntax: ['sqrt(x)'],
  description: 'Compute the square root value. If x = y * y, then y is the square root of x.',
  examples: ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
  seealso: ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
};

var signDocs = {
  name: 'sign',
  category: 'Arithmetic',
  syntax: ['sign(x)'],
  description: 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  examples: ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
  seealso: ['abs']
};

var roundDocs = {
  name: 'round',
  category: 'Arithmetic',
  syntax: ['round(x)', 'round(x, n)'],
  description: 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  examples: ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
  seealso: ['ceil', 'floor', 'fix']
};

var powDocs = {
  name: 'pow',
  category: 'Operators',
  syntax: ['x ^ y', 'pow(x, y)'],
  description: 'Calculates the power of x to y, x^y.',
  examples: ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
  seealso: ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
};

var nthRootsDocs = {
  name: 'nthRoots',
  category: 'Arithmetic',
  syntax: ['nthRoots(A)', 'nthRoots(A, root)'],
  description: '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
  examples: ['nthRoots(1)', 'nthRoots(1, 3)'],
  seealso: ['sqrt', 'pow', 'nthRoot']
};

var nthRootDocs = {
  name: 'nthRoot',
  category: 'Arithmetic',
  syntax: ['nthRoot(a)', 'nthRoot(a, root)'],
  description: 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
  examples: ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
  seealso: ['nthRoots', 'pow', 'sqrt']
};

var normDocs = {
  name: 'norm',
  category: 'Arithmetic',
  syntax: ['norm(x)', 'norm(x, p)'],
  description: 'Calculate the norm of a number, vector or matrix.',
  examples: ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
};

var multiplyDocs = {
  name: 'multiply',
  category: 'Operators',
  syntax: ['x * y', 'multiply(x, y)'],
  description: 'multiply two values.',
  examples: ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
  seealso: ['divide']
};

var modDocs = {
  name: 'mod',
  category: 'Operators',
  syntax: ['x % y', 'x mod y', 'mod(x, y)'],
  description: 'Calculates the modulus, the remainder of an integer division.',
  examples: ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
  seealso: ['divide']
};

var log10Docs = {
  name: 'log10',
  category: 'Arithmetic',
  syntax: ['log10(x)'],
  description: 'Compute the 10-base logarithm of a value.',
  examples: ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
  seealso: ['exp', 'log']
};

var log1pDocs = {
  name: 'log1p',
  category: 'Arithmetic',
  syntax: ['log1p(x)', 'log1p(x, base)'],
  description: 'Calculate the logarithm of a `value+1`',
  examples: ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
  seealso: ['exp', 'log', 'log2', 'log10']
};

var log2Docs = {
  name: 'log2',
  category: 'Arithmetic',
  syntax: ['log2(x)'],
  description: 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
  examples: ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
  seealso: ['exp', 'log1p', 'log', 'log10']
};

var logDocs = {
  name: 'log',
  category: 'Arithmetic',
  syntax: ['log(x)', 'log(x, base)'],
  description: 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  examples: ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
  seealso: ['exp', 'log1p', 'log2', 'log10']
};

var lcmDocs = {
  name: 'lcm',
  category: 'Arithmetic',
  syntax: ['lcm(x, y)'],
  description: 'Compute the least common multiple.',
  examples: ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
  seealso: ['gcd']
};

var hypotDocs = {
  name: 'hypot',
  category: 'Arithmetic',
  syntax: ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
  description: 'Calculate the hypotenusa of a list with values. ',
  examples: ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
  seealso: ['abs', 'norm']
};

var gcdDocs = {
  name: 'gcd',
  category: 'Arithmetic',
  syntax: ['gcd(a, b)', 'gcd(a, b, c, ...)'],
  description: 'Compute the greatest common divisor.',
  examples: ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
  seealso: ['lcm', 'xgcd']
};

var floorDocs = {
  name: 'floor',
  category: 'Arithmetic',
  syntax: ['floor(x)'],
  description: 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  examples: ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
  seealso: ['ceil', 'fix', 'round']
};

var fixDocs = {
  name: 'fix',
  category: 'Arithmetic',
  syntax: ['fix(x)'],
  description: 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  examples: ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
  seealso: ['ceil', 'floor', 'round']
};

var expm1Docs = {
  name: 'expm1',
  category: 'Arithmetic',
  syntax: ['expm1(x)'],
  description: 'Calculate the value of subtracting 1 from the exponential value.',
  examples: ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
  seealso: ['exp', 'pow', 'log']
};

var expmDocs = {
  name: 'expm',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
  examples: ['expm([[0,2],[0,0]])'],
  seealso: ['exp']
};

var eigsDocs = {
  name: 'eigs',
  category: 'Matrix',
  syntax: ['eigs(x)'],
  description: 'Calculate the eigenvalues and eigenvectors of a real symmetric matrix',
  examples: ['eigs([[5, 2.3], [2.3, 1]])'],
  seealso: ['inv']
};

var expDocs = {
  name: 'exp',
  category: 'Arithmetic',
  syntax: ['exp(x)'],
  description: 'Calculate the exponent of a value.',
  examples: ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
  seealso: ['expm', 'expm1', 'pow', 'log']
};

var dotMultiplyDocs = {
  name: 'dotMultiply',
  category: 'Operators',
  syntax: ['x .* y', 'dotMultiply(x, y)'],
  description: 'Multiply two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
  seealso: ['multiply', 'divide', 'dotDivide']
};

var dotDivideDocs = {
  name: 'dotDivide',
  category: 'Operators',
  syntax: ['x ./ y', 'dotDivide(x, y)'],
  description: 'Divide two values element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
  seealso: ['multiply', 'dotMultiply', 'divide']
};

var divideDocs = {
  name: 'divide',
  category: 'Operators',
  syntax: ['x / y', 'divide(x, y)'],
  description: 'Divide two values.',
  examples: ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
  seealso: ['multiply']
};

var cubeDocs = {
  name: 'cube',
  category: 'Arithmetic',
  syntax: ['cube(x)'],
  description: 'Compute the cube of a value. The cube of x is x * x * x.',
  examples: ['cube(2)', '2^3', '2 * 2 * 2'],
  seealso: ['multiply', 'square', 'pow']
};

var ceilDocs = {
  name: 'ceil',
  category: 'Arithmetic',
  syntax: ['ceil(x)'],
  description: 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  examples: ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
  seealso: ['floor', 'fix', 'round']
};

var cbrtDocs = {
  name: 'cbrt',
  category: 'Arithmetic',
  syntax: ['cbrt(x)', 'cbrt(x, allRoots)'],
  description: 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  examples: ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
  seealso: ['square', 'sqrt', 'cube', 'multiply']
};

var addDocs = {
  name: 'add',
  category: 'Operators',
  syntax: ['x + y', 'add(x, y)'],
  description: 'Add two values.',
  examples: ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
  seealso: ['subtract']
};

var absDocs = {
  name: 'abs',
  category: 'Arithmetic',
  syntax: ['abs(x)'],
  description: 'Compute the absolute value.',
  examples: ['abs(3.5)', 'abs(-4.2)'],
  seealso: ['sign']
};

var qrDocs = {
  name: 'qr',
  category: 'Algebra',
  syntax: ['qr(A)'],
  description: 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  examples: ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
  seealso: ['lup', 'slu', 'matrix']
};

var usolveDocs = {
  name: 'usolve',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds one solution of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolveAll', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};

var usolveAllDocs = {
  name: 'usolveAll',
  category: 'Algebra',
  syntax: ['x=usolve(U, b)'],
  description: 'Finds all solutions of the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  examples: ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  seealso: ['usolve', 'lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};

var sluDocs = {
  name: 'slu',
  category: 'Algebra',
  syntax: ['slu(A, order, threshold)'],
  description: 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  examples: ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
};

var rationalizeDocs = {
  name: 'rationalize',
  category: 'Algebra',
  syntax: ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
  description: 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  examples: ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  seealso: ['simplify']
};

var simplifyDocs = {
  name: 'simplify',
  category: 'Algebra',
  syntax: ['simplify(expr)', 'simplify(expr, rules)'],
  description: 'Simplify an expression tree.',
  examples: ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
  seealso: ['derivative', 'parse', 'evaluate']
};

var lupDocs = {
  name: 'lup',
  category: 'Algebra',
  syntax: ['lup(m)'],
  description: 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  examples: ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
  seealso: ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
};

var lsolveDocs = {
  name: 'lsolve',
  category: 'Algebra',
  syntax: ['x=lsolve(L, b)'],
  description: 'Finds one solution of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolveAll', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};

var lsolveAllDocs = {
  name: 'lsolveAll',
  category: 'Algebra',
  syntax: ['x=lsolveAll(L, b)'],
  description: 'Finds all solutions of the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  seealso: ['lsolve', 'lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};

var derivativeDocs = {
  name: 'derivative',
  category: 'Algebra',
  syntax: ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
  description: 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  examples: ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
  seealso: ['simplify', 'parse', 'evaluate']
};

var versionDocs = {
  name: 'version',
  category: 'Constants',
  syntax: ['version'],
  description: 'A string with the version number of math.js',
  examples: ['version'],
  seealso: []
};

var trueDocs = {
  name: 'true',
  category: 'Constants',
  syntax: ['true'],
  description: 'Boolean value true',
  examples: ['true'],
  seealso: ['false']
};

var tauDocs = {
  name: 'tau',
  category: 'Constants',
  syntax: ['tau'],
  description: 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  examples: ['tau', '2 * pi'],
  seealso: ['pi']
};

var SQRT2Docs = {
  name: 'SQRT2',
  category: 'Constants',
  syntax: ['SQRT2'],
  description: 'Returns the square root of 2, approximately equal to 1.414',
  examples: ['SQRT2', 'sqrt(2)'],
  seealso: []
};

var SQRT12Docs = {
  name: 'SQRT1_2',
  category: 'Constants',
  syntax: ['SQRT1_2'],
  description: 'Returns the square root of 1/2, approximately equal to 0.707',
  examples: ['SQRT1_2', 'sqrt(1/2)'],
  seealso: []
};

var phiDocs = {
  name: 'phi',
  category: 'Constants',
  syntax: ['phi'],
  description: 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  examples: ['phi'],
  seealso: []
};

var piDocs = {
  name: 'pi',
  category: 'Constants',
  syntax: ['pi'],
  description: 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  examples: ['pi', 'sin(pi/2)'],
  seealso: ['tau']
};

var nullDocs = {
  name: 'null',
  category: 'Constants',
  syntax: ['null'],
  description: 'Value null',
  examples: ['null'],
  seealso: ['true', 'false']
};

var NaNDocs = {
  name: 'NaN',
  category: 'Constants',
  syntax: ['NaN'],
  description: 'Not a number',
  examples: ['NaN', '0 / 0'],
  seealso: []
};

var LOG10EDocs = {
  name: 'LOG10E',
  category: 'Constants',
  syntax: ['LOG10E'],
  description: 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  examples: ['LOG10E', 'log(e, 10)'],
  seealso: []
};

var LOG2EDocs = {
  name: 'LOG2E',
  category: 'Constants',
  syntax: ['LOG2E'],
  description: 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  examples: ['LOG2E', 'log(e, 2)'],
  seealso: []
};

var LN10Docs = {
  name: 'LN10',
  category: 'Constants',
  syntax: ['LN10'],
  description: 'Returns the natural logarithm of 10, approximately equal to 2.302',
  examples: ['LN10', 'log(10)'],
  seealso: []
};

var LN2Docs = {
  name: 'LN2',
  category: 'Constants',
  syntax: ['LN2'],
  description: 'Returns the natural logarithm of 2, approximately equal to 0.693',
  examples: ['LN2', 'log(2)'],
  seealso: []
};

var InfinityDocs = {
  name: 'Infinity',
  category: 'Constants',
  syntax: ['Infinity'],
  description: 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  examples: ['Infinity', '1 / 0'],
  seealso: []
};

var iDocs = {
  name: 'i',
  category: 'Constants',
  syntax: ['i'],
  description: 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  examples: ['i', 'i * i', 'sqrt(-1)'],
  seealso: []
};

var falseDocs = {
  name: 'false',
  category: 'Constants',
  syntax: ['false'],
  description: 'Boolean value false',
  examples: ['false'],
  seealso: ['true']
};

var eDocs = {
  name: 'e',
  category: 'Constants',
  syntax: ['e'],
  description: 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  examples: ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
  seealso: ['exp']
};

var unitDocs = {
  name: 'unit',
  category: 'Construction',
  syntax: ['value unit', 'unit(value, unit)', 'unit(string)'],
  description: 'Create a unit.',
  examples: ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
};

var stringDocs = {
  name: 'string',
  category: 'Construction',
  syntax: ['"text"', 'string(x)'],
  description: 'Create a string or convert a value to a string',
  examples: ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
};

var splitUnitDocs = {
  name: 'splitUnit',
  category: 'Construction',
  syntax: ['splitUnit(unit: Unit, parts: Unit[])'],
  description: 'Split a unit in an array of units whose sum is equal to the original unit.',
  examples: ['splitUnit(1 m, ["feet", "inch"])'],
  seealso: ['unit', 'createUnit']
};

var sparseDocs = {
  name: 'sparse',
  category: 'Construction',
  syntax: ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  description: 'Create a sparse matrix.',
  examples: ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
};

var numberDocs = {
  name: 'number',
  category: 'Construction',
  syntax: ['x', 'number(x)', 'number(unit, valuelessUnit)'],
  description: 'Create a number or convert a string or boolean into a number.',
  examples: ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
  seealso: ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};

var matrixDocs = {
  name: 'matrix',
  category: 'Construction',
  syntax: ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
  description: 'Create a matrix.',
  examples: ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
};

var indexDocs = {
  name: 'index',
  category: 'Construction',
  syntax: ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
  description: 'Create an index to get or replace a subset of a matrix',
  examples: ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
  seealso: ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
};

var fractionDocs = {
  name: 'fraction',
  category: 'Construction',
  syntax: ['fraction(num)', 'fraction(num,den)'],
  description: 'Create a fraction from a number or from a numerator and denominator.',
  examples: ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
  seealso: ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
};

var createUnitDocs = {
  name: 'createUnit',
  category: 'Construction',
  syntax: ['createUnit(definitions)', 'createUnit(name, definition)'],
  description: 'Create a user-defined unit and register it with the Unit type.',
  examples: ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  seealso: ['unit', 'splitUnit']
};

var complexDocs = {
  name: 'complex',
  category: 'Construction',
  syntax: ['complex()', 'complex(re, im)', 'complex(string)'],
  description: 'Create a complex number.',
  examples: ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
  seealso: ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
};

var booleanDocs = {
  name: 'boolean',
  category: 'Construction',
  syntax: ['x', 'boolean(x)'],
  description: 'Convert a string or number into a boolean.',
  examples: ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
  seealso: ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
};

var dotPowDocs = {
  name: 'dotPow',
  category: 'Operators',
  syntax: ['x .^ y', 'dotPow(x, y)'],
  description: 'Calculates the power of x to y element wise.',
  examples: ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
  seealso: ['pow']
};

var lusolveDocs = {
  name: 'lusolve',
  category: 'Algebra',
  syntax: ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
  description: 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  examples: ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
  seealso: ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
};

var subtractDocs = {
  name: 'subtract',
  category: 'Operators',
  syntax: ['x - y', 'subtract(x, y)'],
  description: 'subtract two values.',
  examples: ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
  seealso: ['add']
};

var varianceDocs = {
  name: 'variance',
  category: 'Statistics',
  syntax: ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
  description: 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  examples: ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
  seealso: ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
};

var sinDocs = {
  name: 'sin',
  category: 'Trigonometry',
  syntax: ['sin(x)'],
  description: 'Compute the sine of x in radians.',
  examples: ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  seealso: ['asin', 'cos', 'tan']
};

var numericDocs = {
  name: 'numeric',
  category: 'Utils',
  syntax: ['numeric(x)'],
  description: 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
  examples: ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
  seealso: ['number', 'fraction', 'bignumber', 'string', 'format']
};

var columnDocs = {
  name: 'column',
  category: 'Matrix',
  syntax: ['column(x, index)'],
  description: 'Return a column from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
  seealso: ['row']
};

var rowDocs = {
  name: 'row',
  category: 'Matrix',
  syntax: ['row(x, index)'],
  description: 'Return a row from a matrix or array.',
  examples: ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
  seealso: ['column']
};

var rotationMatrixDocs = {
  name: 'rotationMatrix',
  category: 'Matrix',
  syntax: ['rotationMatrix(theta)', 'rotationMatrix(theta, v)', 'rotationMatrix(theta, v, format)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotationMatrix(pi / 2)', 'rotationMatrix(unit("45deg"), [0, 0, 1])', 'rotationMatrix(1, matrix([0, 0, 1]), "sparse")'],
  seealso: ['cos', 'sin']
};

var rotateDocs = {
  name: 'rotate',
  category: 'Matrix',
  syntax: ['rotate(w, theta)', 'rotate(w, theta, v)'],
  description: 'Returns a 2-D rotation matrix (2x2) for a given angle (in radians). ' + 'Returns a 2-D rotation matrix (3x3) of a given angle (in radians) around given axis.',
  examples: ['rotate([1, 0], math.pi / 2)', 'rotate(matrix([1, 0]), unit("35deg"))', 'rotate([1, 0, 0], unit("90deg"), [0, 0, 1])', 'rotate(matrix([1, 0, 0]), unit("90deg"), matrix([0, 0, 1]))'],
  seealso: ['matrix', 'rotationMatrix']
};

var embeddedDocs = {
  // construction functions
  bignumber: bignumberDocs,
  "boolean": booleanDocs,
  complex: complexDocs,
  createUnit: createUnitDocs,
  fraction: fractionDocs,
  index: indexDocs,
  matrix: matrixDocs,
  number: numberDocs,
  sparse: sparseDocs,
  splitUnit: splitUnitDocs,
  string: stringDocs,
  unit: unitDocs,
  // constants
  e: eDocs,
  E: eDocs,
  "false": falseDocs,
  i: iDocs,
  Infinity: InfinityDocs,
  LN2: LN2Docs,
  LN10: LN10Docs,
  LOG2E: LOG2EDocs,
  LOG10E: LOG10EDocs,
  NaN: NaNDocs,
  "null": nullDocs,
  pi: piDocs,
  PI: piDocs,
  phi: phiDocs,
  SQRT1_2: SQRT12Docs,
  SQRT2: SQRT2Docs,
  tau: tauDocs,
  "true": trueDocs,
  version: versionDocs,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: 'Speed of light in vacuum',
    examples: ['speedOfLight']
  },
  gravitationConstant: {
    description: 'Newtonian constant of gravitation',
    examples: ['gravitationConstant']
  },
  planckConstant: {
    description: 'Planck constant',
    examples: ['planckConstant']
  },
  reducedPlanckConstant: {
    description: 'Reduced Planck constant',
    examples: ['reducedPlanckConstant']
  },
  magneticConstant: {
    description: 'Magnetic constant (vacuum permeability)',
    examples: ['magneticConstant']
  },
  electricConstant: {
    description: 'Electric constant (vacuum permeability)',
    examples: ['electricConstant']
  },
  vacuumImpedance: {
    description: 'Characteristic impedance of vacuum',
    examples: ['vacuumImpedance']
  },
  coulomb: {
    description: 'Coulomb\'s constant',
    examples: ['coulomb']
  },
  elementaryCharge: {
    description: 'Elementary charge',
    examples: ['elementaryCharge']
  },
  bohrMagneton: {
    description: 'Borh magneton',
    examples: ['bohrMagneton']
  },
  conductanceQuantum: {
    description: 'Conductance quantum',
    examples: ['conductanceQuantum']
  },
  inverseConductanceQuantum: {
    description: 'Inverse conductance quantum',
    examples: ['inverseConductanceQuantum']
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: 'Magnetic flux quantum',
    examples: ['magneticFluxQuantum']
  },
  nuclearMagneton: {
    description: 'Nuclear magneton',
    examples: ['nuclearMagneton']
  },
  klitzing: {
    description: 'Von Klitzing constant',
    examples: ['klitzing']
  },
  bohrRadius: {
    description: 'Borh radius',
    examples: ['bohrRadius']
  },
  classicalElectronRadius: {
    description: 'Classical electron radius',
    examples: ['classicalElectronRadius']
  },
  electronMass: {
    description: 'Electron mass',
    examples: ['electronMass']
  },
  fermiCoupling: {
    description: 'Fermi coupling constant',
    examples: ['fermiCoupling']
  },
  fineStructure: {
    description: 'Fine-structure constant',
    examples: ['fineStructure']
  },
  hartreeEnergy: {
    description: 'Hartree energy',
    examples: ['hartreeEnergy']
  },
  protonMass: {
    description: 'Proton mass',
    examples: ['protonMass']
  },
  deuteronMass: {
    description: 'Deuteron Mass',
    examples: ['deuteronMass']
  },
  neutronMass: {
    description: 'Neutron mass',
    examples: ['neutronMass']
  },
  quantumOfCirculation: {
    description: 'Quantum of circulation',
    examples: ['quantumOfCirculation']
  },
  rydberg: {
    description: 'Rydberg constant',
    examples: ['rydberg']
  },
  thomsonCrossSection: {
    description: 'Thomson cross section',
    examples: ['thomsonCrossSection']
  },
  weakMixingAngle: {
    description: 'Weak mixing angle',
    examples: ['weakMixingAngle']
  },
  efimovFactor: {
    description: 'Efimov factor',
    examples: ['efimovFactor']
  },
  atomicMass: {
    description: 'Atomic mass constant',
    examples: ['atomicMass']
  },
  avogadro: {
    description: 'Avogadro\'s number',
    examples: ['avogadro']
  },
  boltzmann: {
    description: 'Boltzmann constant',
    examples: ['boltzmann']
  },
  faraday: {
    description: 'Faraday constant',
    examples: ['faraday']
  },
  firstRadiation: {
    description: 'First radiation constant',
    examples: ['firstRadiation']
  },
  loschmidt: {
    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
    examples: ['loschmidt']
  },
  gasConstant: {
    description: 'Gas constant',
    examples: ['gasConstant']
  },
  molarPlanckConstant: {
    description: 'Molar Planck constant',
    examples: ['molarPlanckConstant']
  },
  molarVolume: {
    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
    examples: ['molarVolume']
  },
  sackurTetrode: {
    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
    examples: ['sackurTetrode']
  },
  secondRadiation: {
    description: 'Second radiation constant',
    examples: ['secondRadiation']
  },
  stefanBoltzmann: {
    description: 'Stefan-Boltzmann constant',
    examples: ['stefanBoltzmann']
  },
  wienDisplacement: {
    description: 'Wien displacement law constant',
    examples: ['wienDisplacement']
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: 'Molar mass constant',
    examples: ['molarMass']
  },
  molarMassC12: {
    description: 'Molar mass constant of carbon-12',
    examples: ['molarMassC12']
  },
  gravity: {
    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
    examples: ['gravity']
  },
  planckLength: {
    description: 'Planck length',
    examples: ['planckLength']
  },
  planckMass: {
    description: 'Planck mass',
    examples: ['planckMass']
  },
  planckTime: {
    description: 'Planck time',
    examples: ['planckTime']
  },
  planckCharge: {
    description: 'Planck charge',
    examples: ['planckCharge']
  },
  planckTemperature: {
    description: 'Planck temperature',
    examples: ['planckTemperature']
  },
  // functions - algebra
  derivative: derivativeDocs,
  lsolve: lsolveDocs,
  lsolveAll: lsolveAllDocs,
  lup: lupDocs,
  lusolve: lusolveDocs,
  simplify: simplifyDocs,
  rationalize: rationalizeDocs,
  slu: sluDocs,
  usolve: usolveDocs,
  usolveAll: usolveAllDocs,
  qr: qrDocs,
  // functions - arithmetic
  abs: absDocs,
  add: addDocs,
  cbrt: cbrtDocs,
  ceil: ceilDocs,
  cube: cubeDocs,
  divide: divideDocs,
  dotDivide: dotDivideDocs,
  dotMultiply: dotMultiplyDocs,
  dotPow: dotPowDocs,
  exp: expDocs,
  expm: expmDocs,
  expm1: expm1Docs,
  fix: fixDocs,
  floor: floorDocs,
  gcd: gcdDocs,
  hypot: hypotDocs,
  lcm: lcmDocs,
  log: logDocs,
  log2: log2Docs,
  log1p: log1pDocs,
  log10: log10Docs,
  mod: modDocs,
  multiply: multiplyDocs,
  norm: normDocs,
  nthRoot: nthRootDocs,
  nthRoots: nthRootsDocs,
  pow: powDocs,
  round: roundDocs,
  sign: signDocs,
  sqrt: sqrtDocs,
  sqrtm: sqrtmDocs,
  square: squareDocs,
  subtract: subtractDocs,
  unaryMinus: unaryMinusDocs,
  unaryPlus: unaryPlusDocs,
  xgcd: xgcdDocs,
  // functions - bitwise
  bitAnd: bitAndDocs,
  bitNot: bitNotDocs,
  bitOr: bitOrDocs,
  bitXor: bitXorDocs,
  leftShift: leftShiftDocs,
  rightArithShift: rightArithShiftDocs,
  rightLogShift: rightLogShiftDocs,
  // functions - combinatorics
  bellNumbers: bellNumbersDocs,
  catalan: catalanDocs,
  composition: compositionDocs,
  stirlingS2: stirlingS2Docs,
  // functions - core
  config: configDocs,
  "import": importDocs,
  typed: typedDocs,
  // functions - complex
  arg: argDocs,
  conj: conjDocs,
  re: reDocs,
  im: imDocs,
  // functions - expression
  evaluate: evaluateDocs,
  help: helpDocs,
  // functions - geometry
  distance: distanceDocs,
  intersect: intersectDocs,
  // functions - logical
  and: andDocs,
  not: notDocs,
  or: orDocs,
  xor: xorDocs,
  // functions - matrix
  concat: concatDocs,
  cross: crossDocs,
  column: columnDocs,
  ctranspose: ctransposeDocs,
  det: detDocs,
  diag: diagDocs,
  diff: diffDocs,
  dot: dotDocs,
  getMatrixDataType: getMatrixDataTypeDocs,
  identity: identityDocs,
  filter: filterDocs,
  flatten: flattenDocs,
  forEach: forEachDocs,
  inv: invDocs,
  eigs: eigsDocs,
  kron: kronDocs,
  map: mapDocs,
  ones: onesDocs,
  partitionSelect: partitionSelectDocs,
  range: rangeDocs,
  resize: resizeDocs,
  reshape: reshapeDocs,
  rotate: rotateDocs,
  rotationMatrix: rotationMatrixDocs,
  row: rowDocs,
  size: sizeDocs,
  sort: sortDocs,
  squeeze: squeezeDocs,
  subset: subsetDocs,
  trace: traceDocs,
  transpose: transposeDocs,
  zeros: zerosDocs,
  // functions - probability
  combinations: combinationsDocs,
  combinationsWithRep: combinationsWithRepDocs,
  // distribution: distributionDocs,
  factorial: factorialDocs,
  gamma: gammaDocs,
  kldivergence: kldivergenceDocs,
  multinomial: multinomialDocs,
  permutations: permutationsDocs,
  pickRandom: pickRandomDocs,
  random: randomDocs,
  randomInt: randomIntDocs,
  // functions - relational
  compare: compareDocs,
  compareNatural: compareNaturalDocs,
  compareText: compareTextDocs,
  deepEqual: deepEqualDocs,
  equal: equalDocs,
  equalText: equalTextDocs,
  larger: largerDocs,
  largerEq: largerEqDocs,
  smaller: smallerDocs,
  smallerEq: smallerEqDocs,
  unequal: unequalDocs,
  // functions - set
  setCartesian: setCartesianDocs,
  setDifference: setDifferenceDocs,
  setDistinct: setDistinctDocs,
  setIntersect: setIntersectDocs,
  setIsSubset: setIsSubsetDocs,
  setMultiplicity: setMultiplicityDocs,
  setPowerset: setPowersetDocs,
  setSize: setSizeDocs,
  setSymDifference: setSymDifferenceDocs,
  setUnion: setUnionDocs,
  // functions - special
  erf: erfDocs,
  // functions - statistics
  mad: madDocs,
  max: maxDocs,
  mean: meanDocs,
  median: medianDocs,
  min: minDocs,
  mode: modeDocs,
  prod: prodDocs,
  quantileSeq: quantileSeqDocs,
  std: stdDocs,
  sum: sumDocs,
  variance: varianceDocs,
  // functions - trigonometry
  acos: acosDocs,
  acosh: acoshDocs,
  acot: acotDocs,
  acoth: acothDocs,
  acsc: acscDocs,
  acsch: acschDocs,
  asec: asecDocs,
  asech: asechDocs,
  asin: asinDocs,
  asinh: asinhDocs,
  atan: atanDocs,
  atanh: atanhDocs,
  atan2: atan2Docs,
  cos: cosDocs,
  cosh: coshDocs,
  cot: cotDocs,
  coth: cothDocs,
  csc: cscDocs,
  csch: cschDocs,
  sec: secDocs,
  sech: sechDocs,
  sin: sinDocs,
  sinh: sinhDocs,
  tan: tanDocs,
  tanh: tanhDocs,
  // functions - units
  to: toDocs,
  // functions - utils
  clone: cloneDocs,
  format: formatDocs,
  bin: binDocs,
  oct: octDocs,
  hex: hexDocs,
  isNaN: isNaNDocs,
  isInteger: isIntegerDocs,
  isNegative: isNegativeDocs,
  isNumeric: isNumericDocs,
  hasNumericValue: hasNumericValueDocs,
  isPositive: isPositiveDocs,
  isPrime: isPrimeDocs,
  isZero: isZeroDocs,
  // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
  typeOf: typeOfDocs,
  numeric: numericDocs
};

var name$U = 'help';
var dependencies$U = ['typed', 'mathWithTransform', 'Help'];
var createHelp = /* #__PURE__ */factory(name$U, dependencies$U, function (_ref) {
  var typed = _ref.typed,
    mathWithTransform = _ref.mathWithTransform,
    Help = _ref.Help;

  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed(name$U, {
    any: function any(search) {
      var prop;
      var searchName = search;
      if (typeof search !== 'string') {
        for (prop in mathWithTransform) {
          // search in functions and constants
          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {
            searchName = prop;
            break;
          }
        }
        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (hasOwnProperty(math, prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */
      }

      var doc = getSafeProperty(embeddedDocs, searchName);
      if (!doc) {
        var searchText = typeof searchName === 'function' ? searchName.name : searchName;
        throw new Error('No documentation found on "' + searchText + '"');
      }
      return new Help(doc);
    }
  });
});

var name$T = 'chain';
var dependencies$T = ['typed', 'Chain'];
var createChain = /* #__PURE__ */factory(name$T, dependencies$T, function (_ref) {
  var typed = _ref.typed,
    Chain = _ref.Chain;

  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */
  return typed(name$T, {
    '': function _() {
      return new Chain();
    },
    any: function any(value) {
      return new Chain(value);
    }
  });
});

var name$S = 'det';
var dependencies$S = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
var createDet = /* #__PURE__ */factory(name$S, dependencies$S, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    unaryMinus = _ref.unaryMinus,
    lup = _ref.lup;

  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  return typed(name$S, {
    any: function any(x) {
      return clone$2(x);
    },
    'Array | Matrix': function det(x) {
      var size;
      if (isMatrix(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }
      switch (size.length) {
        case 0:
          // scalar
          return clone$2(x);
        case 1:
          // vector
          if (size[0] === 1) {
            return clone$2(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
          }
        case 2:
          {
            // two dimensional array
            var rows = size[0];
            var cols = size[1];
            if (rows === cols) {
              return _det(x.clone().valueOf(), rows);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
            }
          }
        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$1(size) + ')');
      }
    }
  });
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows === 1) {
      // this is a 1 x 1 matrix
      return clone$2(matrix[0][0]);
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // Compute the LU decomposition
      var decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

      var det = decomp.U[0][0];
      for (var _i = 1; _i < rows; _i++) {
        det = multiply(det, decomp.U[_i][_i]);
      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
      // This can be determined by counting the cycles. This is roughly a linear time algorithm.

      var evenCycles = 0;
      var i = 0;
      var visited = [];
      while (true) {
        while (visited[i]) {
          i++;
        }
        if (i >= rows) break;
        var j = i;
        var cycleLen = 0;
        while (!visited[decomp.p[j]]) {
          visited[decomp.p[j]] = true;
          j = decomp.p[j];
          cycleLen++;
        }
        if (cycleLen % 2 === 0) {
          evenCycles++;
        }
      }
      return evenCycles % 2 === 0 ? det : unaryMinus(det);
    }
  }
});

var name$R = 'inv';
var dependencies$R = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
var createInv = /* #__PURE__ */factory(name$R, dependencies$R, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divideScalar = _ref.divideScalar,
    addScalar = _ref.addScalar,
    multiply = _ref.multiply,
    unaryMinus = _ref.unaryMinus,
    det = _ref.det,
    identity = _ref.identity,
    abs = _ref.abs;

  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  return typed(name$R, {
    'Array | Matrix': function ArrayMatrix(x) {
      var size = isMatrix(x) ? x.size() : arraySize(x);
      switch (size.length) {
        case 1:
          // vector
          if (size[0] === 1) {
            if (isMatrix(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
          }
        case 2:
          // two dimensional array
          {
            var rows = size[0];
            var cols = size[1];
            if (rows === cols) {
              if (isMatrix(x)) {
                return matrix(_inv(x.valueOf(), rows, cols), x.storage());
              } else {
                // return an Array
                return _inv(x, rows, cols);
              }
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
            }
          }
        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + format$1(size) + ')');
      }
    },
    any: function any(x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    var r, s, f, value, temp;
    if (rows === 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];
      if (value === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }
      return [[divideScalar(1, value)]];
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      var d = det(mat);
      if (d === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }
      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      https://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      var A = mat.concat();
      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse

      var B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

      for (var c = 0; c < cols; c++) {
        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
        var ABig = abs(A[c][c]);
        var rBig = c;
        r = c + 1;
        while (r < rows) {
          if (abs(A[r][c]) > ABig) {
            ABig = abs(A[r][c]);
            rBig = r;
          }
          r++;
        }
        if (ABig === 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }
        r = rBig;
        if (r !== c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c

        var Ac = A[c];
        var Bc = B[c];
        for (r = 0; r < rows; r++) {
          var Ar = A[r];
          var Br = B[r];
          if (r !== c) {
            // eliminate value at column c and row r
            if (Ar[c] !== 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }
              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];
            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }
            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }
      return B;
    }
  }
});

var name$Q = 'eigs';
var dependencies$Q = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];
var createEigs = /* #__PURE__ */factory(name$Q, dependencies$Q, function (_ref) {
  var config = _ref.config,
    typed = _ref.typed,
    matrix = _ref.matrix,
    addScalar = _ref.addScalar,
    subtract = _ref.subtract,
    equal = _ref.equal,
    abs = _ref.abs,
    atan = _ref.atan,
    cos = _ref.cos,
    sin = _ref.sin,
    multiplyScalar = _ref.multiplyScalar,
    inv = _ref.inv,
    bignumber = _ref.bignumber,
    multiply = _ref.multiply,
    add = _ref.add;

  /**
   * Compute eigenvalue and eigenvector of a real symmetric matrix.
   * Only applicable to two dimensional symmetric matrices. Uses Jacobi
   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')
   * of elements are not supported. Input matrix or 2D array should contain all elements
   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the
   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.
   * Eigenvectors are always of 'number' type.
   *
   * Syntax:
   *
   *     math.eigs(x)
   *
   * Examples:
   *
   *     const H = [[5, 2.3], [2.3, 1]]
   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}
   *     const E = ans.values
   *     const U = ans.vectors
   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))
   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation
   *     E[0] == UTxHxU[0][0]  // returns true
   * See also:
   *
   *     inv
   *
   * @param {Array | Matrix} x  Matrix to be diagonalized
   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).
   */
  return typed('eigs', {
    Array: function Array(x) {
      // check array size
      var mat = matrix(x);
      var size = mat.size();
      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
      } // use dense 2D matrix implementation

      var ans = checkAndSubmit(mat, size[0]);
      return {
        values: ans[0],
        vectors: ans[1]
      };
    },
    Matrix: function Matrix(x) {
      // use dense 2D array implementation
      // dense matrix
      var size = x.size();
      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
      }
      var ans = checkAndSubmit(x, size[0]);
      return {
        values: matrix(ans[0]),
        vectors: matrix(ans[1])
      };
    }
  }); // Is the matrix
  // symmetric ?

  function isSymmetric(x, n) {
    for (var i = 0; i < n; i++) {
      for (var j = i; j < n; j++) {
        // not symmtric
        if (!equal(x[i][j], x[j][i])) {
          throw new TypeError('Input matrix is not symmetric');
        }
      }
    }
  } // check input for possible problems
  // and perform diagonalization efficiently for
  // specific type of number

  function checkAndSubmit(x, n) {
    var type = x.datatype(); // type check

    if (type === undefined) {
      type = x.getDataType();
    }
    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {
      if (type === 'mixed') {
        throw new TypeError('Mixed matrix element type is not supported');
      } else {
        throw new TypeError('Matrix element type not supported (' + type + ')');
      }
    } else {
      isSymmetric(x.toArray(), n);
    } // perform efficient calculation for 'numbers'

    if (type === 'number') {
      return diag(x.toArray());
    } else if (type === 'Fraction') {
      var xArr = x.toArray(); // convert fraction to numbers

      for (var i = 0; i < n; i++) {
        for (var j = i; j < n; j++) {
          xArr[i][j] = xArr[i][j].valueOf();
          xArr[j][i] = xArr[i][j];
        }
      }
      return diag(x.toArray());
    } else if (type === 'BigNumber') {
      return diagBig(x.toArray());
    }
  } // diagonalization implementation for number (efficient)

  function diag(x) {
    var N = x.length;
    var e0 = Math.abs(config.epsilon / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error

    var Vab = getAij(x);
    while (Math.abs(Vab[1]) >= Math.abs(e0)) {
      var _i = Vab[0][0];
      var j = Vab[0][1];
      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);
      x = x1(x, psi, _i, j);
      Sij = Sij1(Sij, psi, _i, j);
      Vab = getAij(x);
    }
    var Ei = createArray(N, 0); // eigenvalues

    for (var _i2 = 0; _i2 < N; _i2++) {
      Ei[_i2] = x[_i2][_i2];
    }
    return sorting(clone$2(Ei), clone$2(Sij));
  } // diagonalization implementation for bigNumber

  function diagBig(x) {
    var N = x.length;
    var e0 = abs(config.epsilon / N);
    var psi;
    var Sij = new Array(N); // Sij is Identity Matrix

    for (var i = 0; i < N; i++) {
      Sij[i] = createArray(N, 0);
      Sij[i][i] = 1.0;
    } // initial error

    var Vab = getAijBig(x);
    while (abs(Vab[1]) >= abs(e0)) {
      var _i3 = Vab[0][0];
      var j = Vab[0][1];
      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);
      x = x1Big(x, psi, _i3, j);
      Sij = Sij1Big(Sij, psi, _i3, j);
      Vab = getAijBig(x);
    }
    var Ei = createArray(N, 0); // eigenvalues

    for (var _i4 = 0; _i4 < N; _i4++) {
      Ei[_i4] = x[_i4][_i4];
    } // return [clone(Ei), clone(Sij)]

    return sorting(clone$2(Ei), clone$2(Sij));
  } // get angle

  function getTheta(aii, ajj, aij) {
    var denom = ajj - aii;
    if (Math.abs(denom) <= config.epsilon) {
      return Math.PI / 4;
    } else {
      return 0.5 * Math.atan(2 * aij / (ajj - aii));
    }
  } // get angle

  function getThetaBig(aii, ajj, aij) {
    var denom = subtract(ajj, aii);
    if (abs(denom) <= config.epsilon) {
      return bignumber(-1).acos().div(4);
    } else {
      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));
    }
  } // update eigvec

  function Sij1(Sij, theta, i, j) {
    var N = Sij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var Ski = createArray(N, 0);
    var Skj = createArray(N, 0);
    for (var k = 0; k < N; k++) {
      Ski[k] = c * Sij[k][i] - s * Sij[k][j];
      Skj[k] = s * Sij[k][i] + c * Sij[k][j];
    }
    for (var _k = 0; _k < N; _k++) {
      Sij[_k][i] = Ski[_k];
      Sij[_k][j] = Skj[_k];
    }
    return Sij;
  } // update eigvec for overlap

  function Sij1Big(Sij, theta, i, j) {
    var N = Sij.length;
    var c = cos(theta);
    var s = sin(theta);
    var Ski = createArray(N, bignumber(0));
    var Skj = createArray(N, bignumber(0));
    for (var k = 0; k < N; k++) {
      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));
      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));
    }
    for (var _k2 = 0; _k2 < N; _k2++) {
      Sij[_k2][i] = Ski[_k2];
      Sij[_k2][j] = Skj[_k2];
    }
    return Sij;
  } // update matrix

  function x1Big(Hij, theta, i, j) {
    var N = Hij.length;
    var c = bignumber(cos(theta));
    var s = bignumber(sin(theta));
    var c2 = multiplyScalar(c, c);
    var s2 = multiplyScalar(s, s);
    var Aki = createArray(N, bignumber(0));
    var Akj = createArray(N, bignumber(0)); // 2cs Hij

    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii

    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));
    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));
      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));
    } // Modify Hij

    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = bignumber(0);
    Hij[j][i] = bignumber(0); // 0  to i

    for (var _k3 = 0; _k3 < N; _k3++) {
      if (_k3 !== i && _k3 !== j) {
        Hij[i][_k3] = Aki[_k3];
        Hij[_k3][i] = Aki[_k3];
        Hij[j][_k3] = Akj[_k3];
        Hij[_k3][j] = Akj[_k3];
      }
    }
    return Hij;
  } // update matrix

  function x1(Hij, theta, i, j) {
    var N = Hij.length;
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var c2 = c * c;
    var s2 = s * s;
    var Aki = createArray(N, 0);
    var Akj = createArray(N, 0); //  Aii

    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];
    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i

    for (var k = 0; k < N; k++) {
      Aki[k] = c * Hij[i][k] - s * Hij[j][k];
      Akj[k] = s * Hij[i][k] + c * Hij[j][k];
    } // Modify Hij

    Hij[i][i] = Aii;
    Hij[j][j] = Ajj;
    Hij[i][j] = 0;
    Hij[j][i] = 0; // 0  to i

    for (var _k4 = 0; _k4 < N; _k4++) {
      if (_k4 !== i && _k4 !== j) {
        Hij[i][_k4] = Aki[_k4];
        Hij[_k4][i] = Aki[_k4];
        Hij[j][_k4] = Akj[_k4];
        Hij[_k4][j] = Akj[_k4];
      }
    }
    return Hij;
  } // get max off-diagonal value from Upper Diagonal

  function getAij(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];
    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {
          maxMij = Math.abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }
    return [maxIJ, maxMij];
  } // get max off-diagonal value from Upper Diagonal

  function getAijBig(Mij) {
    var N = Mij.length;
    var maxMij = 0;
    var maxIJ = [0, 1];
    for (var i = 0; i < N; i++) {
      for (var j = i + 1; j < N; j++) {
        if (abs(maxMij) < abs(Mij[i][j])) {
          maxMij = abs(Mij[i][j]);
          maxIJ = [i, j];
        }
      }
    }
    return [maxIJ, maxMij];
  } // sort results

  function sorting(E, S) {
    var N = E.length;
    var Ef = Array(N);
    var Sf = Array(N);
    for (var k = 0; k < N; k++) {
      Sf[k] = Array(N);
    }
    for (var i = 0; i < N; i++) {
      var minID = 0;
      var minE = E[0];
      for (var j = 0; j < E.length; j++) {
        if (E[j] < minE) {
          minID = j;
          minE = E[minID];
        }
      }
      Ef[i] = E.splice(minID, 1)[0];
      for (var _k5 = 0; _k5 < N; _k5++) {
        Sf[_k5][i] = S[_k5][minID];
        S[_k5].splice(minID, 1);
      }
    }
    return [clone$2(Ef), clone$2(Sf)];
  }
  /**
   * Create an array of a certain size and fill all items with an initial value
   * @param {number} size
   * @param {number} value
   * @return {number[]}
   */

  function createArray(size, value) {
    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)
    var array = new Array(size);
    for (var i = 0; i < size; i++) {
      array[i] = value;
    }
    return array;
  }
});

var name$P = 'expm';
var dependencies$P = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
var createExpm = /* #__PURE__ */factory(name$P, dependencies$P, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    add = _ref.add,
    identity = _ref.identity,
    inv = _ref.inv,
    multiply = _ref.multiply;

  /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */
  return typed(name$P, {
    Matrix: function Matrix(A) {
      // Check matrix size
      var size = A.size();
      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
      }
      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
      // will be affected by round-off error)

      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A
      // are "large", so scale A by powers of two. Then compute the
      // exponential, and square the result repeatedly according to
      // the identity e^A = (e^(A/m))^m
      // Compute infinity-norm of A, ||A||, to see how "big" it is

      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
      // Padé approximant to reach the desired accuracy

      var params = findParams(infNorm, eps);
      var q = params.q;
      var j = params.j; // The Pade approximation to e^A is:
      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
      // where
      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
      // Scale A by 1 / 2^j

      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

      var N = identity(n);
      var D = identity(n); // Initialization (i=0)

      var factor = 1; // Initialization (i=1)

      var AposToI = Apos; // Cloning not necessary

      var alternate = -1;
      for (var i = 1; i <= q; i++) {
        if (i > 1) {
          AposToI = multiply(AposToI, Apos);
          alternate = -alternate;
        }
        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
        N = add(N, multiply(factor, AposToI));
        D = add(D, multiply(factor * alternate, AposToI));
      }
      var R = multiply(inv(D), N); // Square j times

      for (var _i = 0; _i < j; _i++) {
        R = multiply(R, R);
      }
      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;
    }
  });
  function infinityNorm(A) {
    var n = A.size()[0];
    var infNorm = 0;
    for (var i = 0; i < n; i++) {
      var rowSum = 0;
      for (var j = 0; j < n; j++) {
        rowSum += abs(A.get([i, j]));
      }
      infNorm = Math.max(rowSum, infNorm);
    }
    return infNorm;
  }
  /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */

  function findParams(infNorm, eps) {
    var maxSearchSize = 30;
    for (var k = 0; k < maxSearchSize; k++) {
      for (var q = 0; q <= k; q++) {
        var j = k - q;
        if (errorEstimate(infNorm, q, j) < eps) {
          return {
            q: q,
            j: j
          };
        }
      }
    }
    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
  }
  /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */

  function errorEstimate(infNorm, q, j) {
    var qfac = 1;
    for (var i = 2; i <= q; i++) {
      qfac *= i;
    }
    var twoqfac = qfac;
    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
      twoqfac *= _i2;
    }
    var twoqp1fac = twoqfac * (2 * q + 1);
    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
  }
});

var name$O = 'sqrtm';
var dependencies$O = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
var createSqrtm = /* #__PURE__ */factory(name$O, dependencies$O, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    add = _ref.add,
    multiply = _ref.multiply,
    sqrt = _ref.sqrt,
    subtract = _ref.subtract,
    inv = _ref.inv,
    size = _ref.size,
    max = _ref.max,
    identity = _ref.identity;
  var _maxIterations = 1e3;
  var _tolerance = 1e-6;
  /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */

  function _denmanBeavers(A) {
    var error;
    var iterations = 0;
    var Y = A;
    var Z = identity(size(A));
    do {
      var Yk = Y;
      Y = multiply(0.5, add(Yk, inv(Z)));
      Z = multiply(0.5, add(Z, inv(Yk)));
      error = max(abs(subtract(Y, Yk)));
      if (error > _tolerance && ++iterations > _maxIterations) {
        throw new Error('computing square root of matrix: iterative method could not converge');
      }
    } while (error > _tolerance);
    return Y;
  }
  /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */

  return typed(name$O, {
    'Array | Matrix': function ArrayMatrix(A) {
      var size = isMatrix(A) ? A.size() : arraySize(A);
      switch (size.length) {
        case 1:
          // Single element Array | Matrix
          if (size[0] === 1) {
            return sqrt(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
          }
        case 2:
          {
            // Two-dimensional Array | Matrix
            var rows = size[0];
            var cols = size[1];
            if (rows === cols) {
              return _denmanBeavers(A);
            } else {
              throw new RangeError('Matrix must be square ' + '(size: ' + format$1(size) + ')');
            }
          }
        default:
          // Multi dimensional array
          throw new RangeError('Matrix must be at most two dimensional ' + '(size: ' + format$1(size) + ')');
      }
    }
  });
});

var name$N = 'divide';
var dependencies$N = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
var createDivide = /* #__PURE__ */factory(name$N, dependencies$N, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    multiply = _ref.multiply,
    equalScalar = _ref.equalScalar,
    divideScalar = _ref.divideScalar,
    inv = _ref.inv;
  var algorithm11 = createAlgorithm11({
    typed: typed,
    equalScalar: equalScalar
  });
  var algorithm14 = createAlgorithm14({
    typed: typed
  });
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  return typed('divide', extend({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'DenseMatrix, any': function DenseMatrixAny(x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'SparseMatrix, any': function SparseMatrixAny(x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'Array, any': function ArrayAny(x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function anyArrayMatrix(x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
});

var name$M = 'distance';
var dependencies$M = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
var createDistance = /* #__PURE__ */factory(name$M, dependencies$M, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    subtract = _ref.subtract,
    multiplyScalar = _ref.multiplyScalar,
    divideScalar = _ref.divideScalar,
    unaryMinus = _ref.unaryMinus,
    sqrt = _ref.sqrt,
    abs = _ref.abs;

  /**
    * Calculates:
    *    The eucledian distance between two points in N-dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([x1, y1, ... , N1], [x2, y2, ... , N2])
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */
  return typed(name$M, {
    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length === 2 && y.length === 2 && z.length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }
        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }
        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }
        var m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
        var xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
        var yCoeff = unaryMinus(multiplyScalar(m, y[0]));
        var constant = x[1];
        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }
        if (!_2d(y)) {
          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
        }
        if (!_2d(z)) {
          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
        }
        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {
          var m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
          var xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
          var yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
          var constant = x.pointX;
          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function ArrayArray(x, y) {
      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length === 2 && y.length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }
        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }
        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }
        if (!_parametricLine(y)) {
          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
        }
        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === y.length && x.length > 0) {
        // Point to Point N-dimensions
        if (!_containsOnlyNumbers(x)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }
        if (!_containsOnlyNumbers(y)) {
          throw new TypeError('All values of an array should be numbers or BigNumbers');
        }
        return _euclideanDistance(x, y);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function ObjectObject(x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }
        if (!_3d(y)) {
          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
        }
        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {
          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
        }
        if (!_parametricLine(y)) {
          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
        }
        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {
          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
        }
        if (!_2d(y)) {
          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
        }
        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
        }
        if (!_3d(y)) {
          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
        }
        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {
          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    Array: function Array(arr) {
      if (!_pairwise(arr)) {
        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
      }
      return _distancePairwise(arr);
    }
  });
  function _isNumber(a) {
    // distance supports numbers and bignumbers
    return typeof a === 'number' || isBigNumber(a);
  }
  function _2d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return _isNumber(a[0]) && _isNumber(a[1]);
  }
  function _3d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
  }
  function _containsOnlyNumbers(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (!Array.isArray(a)) {
      a = _objectToArray(a);
    }
    return a.every(_isNumber);
  }
  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }
    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
  }
  function _objectToArray(o) {
    var keys = Object.keys(o);
    var a = [];
    for (var i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }
    return a;
  }
  function _pairwise(a) {
    // checks for valid arguments passed to _distancePairwise(Array)
    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
      if (a.some(function (aI) {
        return aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]);
      })) {
        return false;
      }
    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
      if (a.some(function (aI) {
        return aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]);
      })) {
        return false;
      }
    } else {
      return false;
    }
    return true;
  }
  function _distancePointLine2D(x, y, a, b, c) {
    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
    return divideScalar(num, den);
  }
  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
    return divideScalar(num, den);
  }
  function _euclideanDistance(x, y) {
    var vectorSize = x.length;
    var result = 0;
    var diff = 0;
    for (var i = 0; i < vectorSize; i++) {
      diff = subtract(x[i], y[i]);
      result = addScalar(multiplyScalar(diff, diff), result);
    }
    return sqrt(result);
  }
  function _distancePairwise(a) {
    var result = [];
    var pointA = [];
    var pointB = [];
    for (var i = 0; i < a.length - 1; i++) {
      for (var j = i + 1; j < a.length; j++) {
        if (a[0].length === 2) {
          pointA = [a[i][0], a[i][1]];
          pointB = [a[j][0], a[j][1]];
        } else if (a[0].length === 3) {
          pointA = [a[i][0], a[i][1], a[i][2]];
          pointB = [a[j][0], a[j][1], a[j][2]];
        }
        result.push(_euclideanDistance(pointA, pointB));
      }
    }
    return result;
  }
});

var name$L = 'intersect';
var dependencies$L = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];
var createIntersect = /* #__PURE__ */factory(name$L, dependencies$L, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    abs = _ref.abs,
    add = _ref.add,
    addScalar = _ref.addScalar,
    matrix = _ref.matrix,
    multiply = _ref.multiply,
    multiplyScalar = _ref.multiplyScalar,
    divideScalar = _ref.divideScalar,
    subtract = _ref.subtract,
    smaller = _ref.smaller,
    equalScalar = _ref.equalScalar;

  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  return typed('intersect', {
    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
      if (!_3d(x)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
      }
      if (!_3d(y)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
      }
      if (!_4d(plane)) {
        throw new TypeError('Array with 4 numbers expected as third argument');
      }
      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    },
    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
      if (w.length === 2) {
        if (!_2d(w)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }
        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }
        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
        }
        return _intersect2d(w, x, y, z);
      } else if (w.length === 3) {
        if (!_3d(w)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }
        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
        }
        if (!_3d(z)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
        }
        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
      } else {
        throw new TypeError('Arrays with two or thee dimensional points expected');
      }
    },
    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));
    },
    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
    }
  });
  function _isNumeric(a) {
    // intersect supports numbers and bignumbers
    return typeof a === 'number' || isBigNumber(a);
  }
  function _2d(x) {
    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
  }
  function _3d(x) {
    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
  }
  function _4d(x) {
    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
  }
  function _intersect2d(p1a, p1b, p2a, p2b) {
    var o1 = p1a;
    var o2 = p2a;
    var d1 = subtract(o1, p1b);
    var d2 = subtract(o2, p2b);
    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));
    if (smaller(abs(det), config.epsilon)) {
      return null;
    }
    var d20o11 = multiplyScalar(d2[0], o1[1]);
    var d21o10 = multiplyScalar(d2[1], o1[0]);
    var d20o21 = multiplyScalar(d2[0], o2[1]);
    var d21o20 = multiplyScalar(d2[1], o2[0]);
    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
    return add(multiply(d1, t), o1);
  }
  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));
    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));
    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));
    return addScalar(addScalar(add1, add2), add3);
  }
  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);
    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);
    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);
    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);
    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);
    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));
    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
      return [pax, pay, paz];
    } else {
      return null;
    }
  }
  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
    var x1x = multiplyScalar(x1, x);
    var x2x = multiplyScalar(x2, x);
    var y1y = multiplyScalar(y1, y);
    var y2y = multiplyScalar(y2, y);
    var z1z = multiplyScalar(z1, z);
    var z2z = multiplyScalar(z2, z);
    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));
    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }
});

var name$K = 'sum';
var dependencies$K = ['typed', 'config', 'add', 'numeric'];
var createSum = /* #__PURE__ */factory(name$K, dependencies$K, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    add = _ref.add,
    numeric = _ref.numeric;

  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  return typed(name$K, {
    // sum([a, b, c, d, ...])
    'Array | Matrix': _sum,
    // sum([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nsumDim,
    // sum(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function sum');
      }
      return _sum(args);
    }
  });
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array | Matrix} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    var sum;
    deepForEach(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
      } catch (err) {
        throw improveErrorMessage(err, 'sum', value);
      }
    }); // make sure returning numeric value: parse a string into a numeric value

    if (sum === undefined) {
      sum = numeric(0, config.number);
    }
    if (typeof sum === 'string') {
      sum = numeric(sum, config.number);
    }
    return sum;
  }
  function _nsumDim(array, dim) {
    try {
      var sum = reduce(array, dim, add);
      return sum;
    } catch (err) {
      throw improveErrorMessage(err, 'sum');
    }
  }
});

var name$J = 'mean';
var dependencies$J = ['typed', 'add', 'divide'];
var createMean = /* #__PURE__ */factory(name$J, dependencies$J, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    divide = _ref.divide;

  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  return typed(name$J, {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmeanDim,
    // mean(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }
      return _mean(args);
    }
  });
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmeanDim(array, dim) {
    try {
      var sum = reduce(array, dim, add);
      var s = Array.isArray(array) ? arraySize(array) : array.size();
      return divide(sum, s[dim]);
    } catch (err) {
      throw improveErrorMessage(err, 'mean');
    }
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */

  function _mean(array) {
    var sum;
    var num = 0;
    deepForEach(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw improveErrorMessage(err, 'mean', value);
      }
    });
    if (num === 0) {
      throw new Error('Cannot calculate the mean of an empty array');
    }
    return divide(sum, num);
  }
});

var name$I = 'median';
var dependencies$I = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
var createMedian = /* #__PURE__ */factory(name$I, dependencies$I, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    divide = _ref.divide,
    compare = _ref.compare,
    partitionSelect = _ref.partitionSelect;

  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */
  function _median(array) {
    try {
      array = flatten$1(array.valueOf());
      var num = array.length;
      if (num === 0) {
        throw new Error('Cannot calculate median of an empty array');
      }
      if (num % 2 === 0) {
        // even: return the average of the two middle values
        var mid = num / 2 - 1;
        var right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

        var left = array[mid];
        for (var i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }
        return middle2(left, right);
      } else {
        // odd: return the middle value
        var m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    } catch (err) {
      throw improveErrorMessage(err, 'median');
    }
  } // helper function to type check the middle value of the array

  var middle = typed({
    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  var middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
      return divide(add(left, right), 2);
    }
  });
  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */

  return typed(name$I, {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
    },

    // median(a, b, c, d, ...)
    '...': function _(args) {
      if (containsCollections(args)) {
        throw new TypeError('Scalar values expected in function median');
      }
      return _median(args);
    }
  });
});

var name$H = 'mad';
var dependencies$H = ['typed', 'abs', 'map', 'median', 'subtract'];
var createMad = /* #__PURE__ */factory(name$H, dependencies$H, function (_ref) {
  var typed = _ref.typed,
    abs = _ref.abs,
    map = _ref.map,
    median = _ref.median,
    subtract = _ref.subtract;

  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  return typed(name$H, {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function _(args) {
      return _mad(args);
    }
  });
  function _mad(array) {
    array = flatten$1(array.valueOf());
    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
    }
    try {
      var med = median(array);
      return median(map(array, function (value) {
        return abs(subtract(value, med));
      }));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
        throw new TypeError(err.message.replace('median', 'mad'));
      } else {
        throw improveErrorMessage(err, 'mad');
      }
    }
  }
});

var DEFAULT_NORMALIZATION = 'unbiased';
var name$G = 'variance';
var dependencies$G = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
var createVariance = /* #__PURE__ */factory(name$G, dependencies$G, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    divide = _ref.divide,
    apply = _ref.apply,
    isNaN = _ref.isNaN;

  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */
  return typed(name$G, {
    // variance([a, b, c, d, ...])
    'Array | Matrix': function ArrayMatrix(array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // variance([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
      return _varDim(array, dim, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _varDim,
    // variance(a, b, c, d, ...)
    '...': function _(args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    var sum;
    var num = 0;
    if (array.length === 0) {
      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements

    deepForEach(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
        num++;
      } catch (err) {
        throw improveErrorMessage(err, 'variance', value);
      }
    });
    if (num === 0) throw new Error('Cannot calculate variance of an empty array');
    var mean = divide(sum, num); // calculate the variance

    sum = undefined;
    deepForEach(array, function (value) {
      var diff = subtract(value, mean);
      sum = sum === undefined ? multiply(diff, diff) : add(sum, multiply(diff, diff));
    });
    if (isNaN(sum)) {
      return sum;
    }
    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);
      case 'biased':
        return divide(sum, num + 1);
      case 'unbiased':
        {
          var zero = isBigNumber(sum) ? sum.mul(0) : 0;
          return num === 1 ? zero : divide(sum, num - 1);
        }
      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }
  function _varDim(array, dim, normalization) {
    try {
      if (array.length === 0) {
        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
      }
      return apply(array, dim, function (x) {
        return _var(x, normalization);
      });
    } catch (err) {
      throw improveErrorMessage(err, 'variance');
    }
  }
});

var name$F = 'quantileSeq';
var dependencies$F = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
var createQuantileSeq = /* #__PURE__ */factory(name$F, dependencies$F, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    multiply = _ref.multiply,
    partitionSelect = _ref.partitionSelect,
    compare = _ref.compare;

  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    var probArr, dataArr, one;
    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }
    if (isCollection(data)) {
      sorted = sorted || false;
      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();
        if (isNumber(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }
          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }
          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!isInteger$1(probOrN)) {
              throw new Error('N must be a positive integer');
            }
            var nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);
            for (var i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }
            return probArr;
          }
        }
        if (isBigNumber(probOrN)) {
          var BigNumber = probOrN.constructor;
          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }
          one = new BigNumber(1);
          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
          }
          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed

            var intN = probOrN.toNumber();
            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }
            var _nPlusOne = new BigNumber(intN + 1);
            probArr = new Array(intN);
            for (var _i = 0; _i < intN;) {
              probArr[_i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++_i).div(_nPlusOne), sorted));
            }
            return probArr;
          }
        }
        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);
          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
            var currProb = probOrN[_i2];
            if (isNumber(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if (isBigNumber(currProb)) {
              one = new currProb.constructor(1);
              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
          }
          return probArr;
        }
        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */

  function _quantileSeq(array, prob, sorted) {
    var flat = flatten$1(array);
    var len = flat.length;
    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }
    if (isNumber(prob)) {
      var _index = prob * (len - 1);
      var _fracPart = _index % 1;
      if (_fracPart === 0) {
        var value = sorted ? flat[_index] : partitionSelect(flat, _index);
        validate(value);
        return value;
      }
      var _integerPart = Math.floor(_index);
      var _left;
      var _right;
      if (sorted) {
        _left = flat[_integerPart];
        _right = flat[_integerPart + 1];
      } else {
        _right = partitionSelect(flat, _integerPart + 1); // max of partition is kth largest

        _left = flat[_integerPart];
        for (var i = 0; i < _integerPart; ++i) {
          if (compare(flat[i], _left) > 0) {
            _left = flat[i];
          }
        }
      }
      validate(_left);
      validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(_left, 1 - _fracPart), multiply(_right, _fracPart));
    } // If prob is a BigNumber

    var index = prob.times(len - 1);
    if (index.isInteger()) {
      index = index.toNumber();
      var _value = sorted ? flat[index] : partitionSelect(flat, index);
      validate(_value);
      return _value;
    }
    var integerPart = index.floor();
    var fracPart = index.minus(integerPart);
    var integerPartNumber = integerPart.toNumber();
    var left;
    var right;
    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];
      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
        if (compare(flat[_i3], left) > 0) {
          left = flat[_i3];
        }
      }
    }
    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    var one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */

  var validate = typed({
    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
      return x;
    }
  });
  return quantileSeq;
});

var name$E = 'std';
var dependencies$E = ['typed', 'sqrt', 'variance'];
var createStd = /* #__PURE__ */factory(name$E, dependencies$E, function (_ref) {
  var typed = _ref.typed,
    sqrt = _ref.sqrt,
    variance = _ref.variance;

  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */
  return typed(name$E, {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': _std,
    // std([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _std,
    // std(a, b, c, d, ...)
    '...': function _(args) {
      return _std(args);
    }
  });
  function _std(array, normalization) {
    if (array.length === 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }
    try {
      return sqrt(variance.apply(null, arguments));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
        throw new TypeError(err.message.replace(' variance', ' std'));
      } else {
        throw err;
      }
    }
  }
});

var name$D = 'combinations';
var dependencies$D = ['typed'];
var createCombinations = /* #__PURE__ */factory(name$D, dependencies$D, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    combinationsWithRep, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  return typed(name$D, {
    'number, number': combinationsNumber,
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var nMinusk = n.minus(k);
      var one = new BigNumber(1);
      if (!isPositiveInteger$2(n) || !isPositiveInteger$2(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }
      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }
      result = one;
      if (k.lt(nMinusk)) {
        for (i = one; i.lte(nMinusk); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusk.plus(i)).dividedBy(i);
        }
      }
      return result;
    } // TODO: implement support for collection in combinations
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger$2(n) {
  return n.isInteger() && n.gte(0);
}

var name$C = 'combinationsWithRep';
var dependencies$C = ['typed'];
var createCombinationsWithRep = /* #__PURE__ */factory(name$C, dependencies$C, function (_ref) {
  var typed = _ref.typed;

  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities, allowing individual outcomes to be repeated more than once.
   *
   * CombinationsWithRep only takes integer arguments.
   * The following condition must be enforced: k <= n + k -1.
   *
   * Syntax:
   *
   *     math.combinationsWithRep(n, k)
   *
   * Examples:
   *
   *    math.combinationsWithRep(7, 5) // returns 462
   *
   * See also:
   *
   *    combinations, permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations with replacement.
   */
  return typed(name$C, {
    'number, number': function numberNumber(n, k) {
      if (!isInteger$1(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }
      if (!isInteger$1(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }
      if (n < 1) {
        throw new TypeError('k must be less than or equal to n + k - 1');
      }
      if (k < n - 1) {
        var _prodrange = product(n, n + k - 1);
        return _prodrange / product(1, k);
      }
      var prodrange = product(k + 1, n + k - 1);
      return prodrange / product(1, n - 1);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var BigNumber = n.constructor;
      var result, i;
      var one = new BigNumber(1);
      var nMinusOne = n.minus(one);
      if (!isPositiveInteger$1(n) || !isPositiveInteger$1(k)) {
        throw new TypeError('Positive integer value expected in function combinationsWithRep');
      }
      if (n.lt(one)) {
        throw new TypeError('k must be less than or equal to n + k - 1 in function combinationsWithRep');
      }
      result = one;
      if (k.lt(nMinusOne)) {
        for (i = one; i.lte(nMinusOne); i = i.plus(one)) {
          result = result.times(k.plus(i)).dividedBy(i);
        }
      } else {
        for (i = one; i.lte(k); i = i.plus(one)) {
          result = result.times(nMinusOne.plus(i)).dividedBy(i);
        }
      }
      return result;
    }
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger$1(n) {
  return n.isInteger() && n.gte(0);
}

var name$B = 'gamma';
var dependencies$B = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
var createGamma = /* #__PURE__ */factory(name$B, dependencies$B, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    multiplyScalar = _ref.multiplyScalar,
    pow = _ref.pow,
    _BigNumber = _ref.BigNumber,
    _Complex = _ref.Complex;

  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  return typed(name$B, {
    number: gammaNumber,
    Complex: function Complex(n) {
      if (n.im === 0) {
        return this(n.re);
      }
      n = new _Complex(n.re - 1, n.im);
      var x = new _Complex(gammaP[0], 0);
      for (var i = 1; i < gammaP.length; ++i) {
        var real = n.re + i; // x += p[i]/(n+i)

        var den = real * real + n.im * n.im;
        if (den !== 0) {
          x.re += gammaP[i] * real / den;
          x.im += -(gammaP[i] * n.im) / den;
        } else {
          x.re = gammaP[i] < 0 ? -Infinity : Infinity;
        }
      }
      var t = new _Complex(n.re + gammaG + 0.5, n.im);
      var twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      var result = pow(t, n);
      if (result.im === 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re === 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }
      var r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiplyScalar(multiplyScalar(result, t), x);
    },
    BigNumber: function BigNumber(n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));
      }
      if (!n.isFinite()) {
        return new _BigNumber(n.isNegative() ? NaN : Infinity);
      }
      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, this);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n < 8) {
      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);
    }
    var precision = config.precision + (Math.log(n.toNumber()) | 0);
    var Big = _BigNumber.clone({
      precision: precision
    });
    if (n % 2 === 1) {
      return n.times(bigFactorial(new _BigNumber(n - 1)));
    }
    var p = n;
    var prod = new Big(n);
    var sum = n.toNumber();
    while (p > 2) {
      p -= 2;
      sum += p;
      prod = prod.times(sum);
    }
    return new _BigNumber(prod.toPrecision(_BigNumber.precision));
  }
});

var name$A = 'factorial';
var dependencies$A = ['typed', 'gamma'];
var createFactorial = /* #__PURE__ */factory(name$A, dependencies$A, function (_ref) {
  var typed = _ref.typed,
    gamma = _ref.gamma;

  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, combinationsWithRep, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  return typed(name$A, {
    number: function number(n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }
      return gamma(n + 1);
    },
    BigNumber: function BigNumber(n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }
      return gamma(n.plus(1));
    },
    'Array | Matrix': function ArrayMatrix(n) {
      return deepMap(n, this);
    }
  });
});

var name$z = 'kldivergence';
var dependencies$z = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
var createKldivergence = /* #__PURE__ */factory(name$z, dependencies$z, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    divide = _ref.divide,
    sum = _ref.sum,
    multiply = _ref.multiply,
    dotDivide = _ref.dotDivide,
    log = _ref.log,
    isNumeric = _ref.isNumeric;

  /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
  return typed(name$z, {
    'Array, Array': function ArrayArray(q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function MatrixArray(q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function ArrayMatrix(q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function MatrixMatrix(q, p) {
      return _kldiv(q, p);
    }
  });
  function _kldiv(q, p) {
    var plength = p.size().length;
    var qlength = q.size().length;
    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }
    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }
    if (plength !== qlength) {
      throw new Error('Length of two vectors must be equal');
    } // Before calculation, apply normalization

    var sumq = sum(q);
    if (sumq === 0) {
      throw new Error('Sum of elements in first object must be non zero');
    }
    var sump = sum(p);
    if (sump === 0) {
      throw new Error('Sum of elements in second object must be non zero');
    }
    var qnorm = divide(q, sum(q));
    var pnorm = divide(p, sum(p));
    var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }
});

var name$y = 'multinomial';
var dependencies$y = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
var createMultinomial = /* #__PURE__ */factory(name$y, dependencies$y, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    divide = _ref.divide,
    multiply = _ref.multiply,
    factorial = _ref.factorial,
    isInteger = _ref.isInteger,
    isPositive = _ref.isPositive;

  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed(name$y, {
    'Array | Matrix': function ArrayMatrix(a) {
      var sum = 0;
      var denom = 1;
      deepForEach(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }
        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
});

var name$x = 'permutations';
var dependencies$x = ['typed', 'factorial'];
var createPermutations = /* #__PURE__ */factory(name$x, dependencies$x, function (_ref) {
  var typed = _ref.typed,
    factorial = _ref.factorial;

  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, combinationsWithRep, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  return typed(name$x, {
    'number | BigNumber': factorial,
    'number, number': function numberNumber(n, k) {
      if (!isInteger$1(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (!isInteger$1(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time

      return product(n - k + 1, n);
    },
    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
      var result, i;
      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }
      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }
      var one = n.mul(0).add(1);
      result = one;
      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }
      return result;
    } // TODO: implement support for collection in permutations
  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}

var seedRandom = {exports: {}};

seedRandom.exports;
(function (module) {

  var width = 256; // each RC4 output is 0 <= x < 256
  var chunks = 6; // at least six RC4 outputs for each double
  var digits = 52; // there are 52 significant digits in a double
  var pool = []; // pool: entropy pool starts empty
  var GLOBAL = typeof commonjsGlobal === 'undefined' ? window : commonjsGlobal;

  //
  // The following constants are related to IEEE 754 limits.
  //
  var startdenom = Math.pow(width, chunks),
    significance = Math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1;
  var oldRandom = Math.random;

  //
  // seedrandom()
  // This is the seedrandom function described above.
  //
  module.exports = function (seed, options) {
    if (options && options.global === true) {
      options.global = false;
      Math.random = module.exports(seed, options);
      options.global = true;
      return Math.random;
    }
    var use_entropy = options && options.entropy || false;
    var key = [];

    // Flatten the seed string or build one from local entropy if needed.
    mixkey(flatten(use_entropy ? [seed, tostring(pool)] : 0 in arguments ? seed : autoseed(), 3), key);

    // Use the seed to initialize an ARC4 generator.
    var arc4 = new ARC4(key);

    // Mix the randomness into accumulated entropy.
    mixkey(tostring(arc4.S), pool);

    // Override Math.random

    // This function returns a random double in [0, 1) that contains
    // randomness in every bit of the mantissa of the IEEE 754 value.

    return function () {
      // Closure to return a random double:
      var n = arc4.g(chunks),
        // Start with a numerator n < 2 ^ 48
        d = startdenom,
        //   and denominator d = 2 ^ 48.
        x = 0; //   and no 'extra last byte'.
      while (n < significance) {
        // Fill up all significant digits by
        n = (n + x) * width; //   shifting numerator and
        d *= width; //   denominator and generating a
        x = arc4.g(1); //   new least-significant-byte.
      }

      while (n >= overflow) {
        // To avoid rounding up, before adding
        n /= 2; //   last byte, shift everything
        d /= 2; //   right using integer Math until
        x >>>= 1; //   we have exactly the desired bits.
      }

      return (n + x) / d; // Form the number within [0, 1).
    };
  };

  module.exports.resetGlobal = function () {
    Math.random = oldRandom;
  };

  //
  // ARC4
  //
  // An ARC4 implementation.  The constructor takes a key in the form of
  // an array of at most (width) integers that should be 0 <= x < (width).
  //
  // The g(count) method returns a pseudorandom integer that concatenates
  // the next (count) outputs from ARC4.  Its return value is a number x
  // that is in the range 0 <= x < (width ^ count).
  //
  /** @constructor */
  function ARC4(key) {
    var t,
      keylen = key.length,
      me = this,
      i = 0,
      j = me.i = me.j = 0,
      s = me.S = [];

    // The empty key [] is treated as [0].
    if (!keylen) {
      key = [keylen++];
    }

    // Set up S using the standard key scheduling algorithm.
    while (i < width) {
      s[i] = i++;
    }
    for (i = 0; i < width; i++) {
      s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
      s[j] = t;
    }

    // The "g" method returns the next (count) outputs as one number.
    (me.g = function (count) {
      // Using instance members instead of closure state nearly doubles speed.
      var t,
        r = 0,
        i = me.i,
        j = me.j,
        s = me.S;
      while (count--) {
        t = s[i = mask & i + 1];
        r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
      }
      me.i = i;
      me.j = j;
      return r;
      // For robust unpredictability discard an initial batch of values.
      // See http://www.rsa.com/rsalabs/node.asp?id=2009
    })(width);
  }

  //
  // flatten()
  // Converts an object tree to nested arrays of strings.
  //
  function flatten(obj, depth) {
    var result = [],
      typ = _typeof$e(obj)[0],
      prop;
    if (depth && typ == 'o') {
      for (prop in obj) {
        try {
          result.push(flatten(obj[prop], depth - 1));
        } catch (e) {}
      }
    }
    return result.length ? result : typ == 's' ? obj : obj + '\0';
  }

  //
  // mixkey()
  // Mixes a string seed into a key that is an array of integers, and
  // returns a shortened string seed that is equivalent to the result key.
  //
  function mixkey(seed, key) {
    var stringseed = seed + '',
      smear,
      j = 0;
    while (j < stringseed.length) {
      key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
    }
    return tostring(key);
  }

  //
  // autoseed()
  // Returns an object for autoseeding, using window.crypto if available.
  //
  /** @param {Uint8Array=} seed */
  function autoseed(seed) {
    try {
      GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
      return tostring(seed);
    } catch (e) {
      return [+new Date(), GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins, GLOBAL.screen, tostring(pool)];
    }
  }

  //
  // tostring()
  // Converts an array of charcodes to a string
  //
  function tostring(a) {
    return String.fromCharCode.apply(0, a);
  }

  //
  // When seedrandom.js is loaded, we immediately mix a few bits
  // from the built-in RNG into the entropy pool.  Because we do
  // not want to intefere with determinstic PRNG state later,
  // seedrandom will not call Math.random on its own again after
  // initialization.
  //
  mixkey(Math.random(), pool);
})(seedRandom);
var seedRandomExports = seedRandom.exports;
var seedrandom = /*@__PURE__*/getDefaultExportFromCjs(seedRandomExports);

// create a random seed here to prevent an infinite loop from seed-random
// inside the factory. Reason is that math.random is defined as a getter/setter
// and seed-random generates a seed from the local entropy by reading every
// defined object including `math` itself. That means that whilst getting
// math.random, it tries to get math.random, etc... an infinite loop.
// See https://github.com/ForbesLindesay/seed-random/issues/6
var singletonRandom = /* #__PURE__ */seedrandom();
function createRng(randomSeed) {
  var random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : seedrandom(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed

  setSeed(randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  }
  return rng;
}

var name$w = 'pickRandom';
var dependencies$w = ['typed', 'config', '?on'];
var createPickRandom = /* #__PURE__ */factory(name$w, dependencies$w, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);
  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */

  return typed({
    'Array | Matrix': function ArrayMatrix(possibles) {
      return _pickRandom(possibles);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {
      return _pickRandom(possibles, number, undefined);
    },
    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {
      return _pickRandom(possibles, undefined, weights);
    },
    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {
      return _pickRandom(possibles, number, weights);
    },
    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {
      return _pickRandom(possibles, number, weights);
    }
  });
  function _pickRandom(possibles, number, weights) {
    var single = typeof number === 'undefined';
    if (single) {
      number = 1;
    }
    possibles = flatten$1(possibles.valueOf()).valueOf(); // get Array

    if (weights) {
      weights = weights.valueOf(); // get Array
    }

    var totalWeights = 0;
    if (typeof weights !== 'undefined') {
      if (weights.length !== possibles.length) {
        throw new Error('Weights must have the same length as possibles');
      }
      for (var i = 0, len = weights.length; i < len; i++) {
        if (!isNumber(weights[i]) || weights[i] < 0) {
          throw new Error('Weights must be an array of positive numbers');
        }
        totalWeights += weights[i];
      }
    }
    var length = possibles.length;
    if (length === 0) {
      return [];
    } else if (number >= length) {
      return number > 1 ? possibles : possibles[0];
    }
    var result = [];
    var pick;
    while (result.length < number) {
      if (typeof weights === 'undefined') {
        pick = possibles[Math.floor(rng() * length)];
      } else {
        var randKey = rng() * totalWeights;
        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
          randKey -= weights[_i];
          if (randKey < 0) {
            pick = possibles[_i];
            break;
          }
        }
      }
      if (result.indexOf(pick) === -1) {
        result.push(pick);
      }
    }
    return single ? result[0] : result; // TODO: return matrix when input was a matrix
    // TODO: add support for multi dimensional matrices
  }
});

/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */
function randomMatrix(size, random) {
  var data = [];
  size = size.slice(0);
  if (size.length > 1) {
    for (var i = 0, length = size.shift(); i < length; i++) {
      data.push(randomMatrix(size, random));
    }
  } else {
    for (var _i = 0, _length = size.shift(); _i < _length; _i++) {
      data.push(random());
    }
  }
  return data;
}

var name$v = 'random';
var dependencies$v = ['typed', 'config', '?on'];
var createRandom = /* #__PURE__ */factory(name$v, dependencies$v, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);
  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */

  return typed(name$v, {
    '': function _() {
      return _random(0, 1);
    },
    number: function number(max) {
      return _random(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _random(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomMatrix(size, min, max);
    }
  });
  function _randomMatrix(size, min, max) {
    var res = randomMatrix(size.valueOf(), function () {
      return _random(min, max);
    });
    return isMatrix(size) ? size.create(res) : res;
  }
  function _random(min, max) {
    return min + rng() * (max - min);
  }
}); // number only implementation of random, no matrix support

var name$u = 'randomInt';
var dependencies$u = ['typed', 'config', '?on'];
var createRandomInt = /* #__PURE__ */factory(name$u, dependencies$u, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    on = _ref.on;
  // seeded pseudo random number generator
  var rng = createRng(config.randomSeed);
  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = createRng(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */

  return typed(name$u, {
    '': function _() {
      return _randomInt(0, 1);
    },
    number: function number(max) {
      return _randomInt(0, max);
    },
    'number, number': function numberNumber(min, max) {
      return _randomInt(min, max);
    },
    'Array | Matrix': function ArrayMatrix(size) {
      return _randomIntMatrix(size, 0, 1);
    },
    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {
      return _randomIntMatrix(size, 0, max);
    },
    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {
      return _randomIntMatrix(size, min, max);
    }
  });
  function _randomIntMatrix(size, min, max) {
    var res = randomMatrix(size.valueOf(), function () {
      return _randomInt(min, max);
    });
    return isMatrix(size) ? size.create(res) : res;
  }
  function _randomInt(min, max) {
    return Math.floor(min + rng() * (max - min));
  }
});

var name$t = 'stirlingS2';
var dependencies$t = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
var createStirlingS2 = /* #__PURE__ */factory(name$t, dependencies$t, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    subtract = _ref.subtract,
    multiplyScalar = _ref.multiplyScalar,
    divideScalar = _ref.divideScalar,
    pow = _ref.pow,
    factorial = _ref.factorial,
    combinations = _ref.combinations,
    isNegative = _ref.isNegative,
    isInteger = _ref.isInteger,
    larger = _ref.larger;

  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  return typed(name$t, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]

      var kFactorial = factorial(k);
      var result = 0;
      for (var i = 0; i <= k; i++) {
        var negativeOne = pow(-1, subtract(k, i));
        var kChooseI = combinations(k, i);
        var iPower = pow(i, n);
        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
      }
      return divideScalar(result, kFactorial);
    }
  });
});

var name$s = 'bellNumbers';
var dependencies$s = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
var createBellNumbers = /* #__PURE__ */factory(name$s, dependencies$s, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    isNegative = _ref.isNegative,
    isInteger = _ref.isInteger,
    stirlingS2 = _ref.stirlingS2;

  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  return typed(name$s, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      } // Sum (k=0, n) S(n,k).

      var result = 0;
      for (var i = 0; i <= n; i++) {
        result = addScalar(result, stirlingS2(n, i));
      }
      return result;
    }
  });
});

var name$r = 'catalan';
var dependencies$r = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
var createCatalan = /* #__PURE__ */factory(name$r, dependencies$r, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    divideScalar = _ref.divideScalar,
    multiplyScalar = _ref.multiplyScalar,
    combinations = _ref.combinations,
    isNegative = _ref.isNegative,
    isInteger = _ref.isInteger;

  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  return typed(name$r, {
    'number | BigNumber': function numberBigNumber(n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }
      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
    }
  });
});

var name$q = 'composition';
var dependencies$q = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
var createComposition = /* #__PURE__ */factory(name$q, dependencies$q, function (_ref) {
  var typed = _ref.typed,
    addScalar = _ref.addScalar,
    combinations = _ref.combinations,
    isPositive = _ref.isPositive;
    _ref.isNegative;
    var isInteger = _ref.isInteger,
    larger = _ref.larger;

  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  return typed(name$q, {
    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }
      return combinations(addScalar(n, -1), addScalar(k, -1));
    }
  });
});

var name$p = 'simplifyUtil';
var dependencies$p = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
var createUtil = /* #__PURE__ */factory(name$p, dependencies$p, function (_ref) {
  var FunctionNode = _ref.FunctionNode,
    OperatorNode = _ref.OperatorNode,
    SymbolNode = _ref.SymbolNode;
  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  var commutative = {
    add: true,
    multiply: true
  };
  var associative = {
    add: true,
    multiply: true
  };
  function isCommutative(node, context) {
    if (!isOperatorNode(node)) {
      return true;
    }
    var name = node.fn.toString();
    if (context && hasOwnProperty(context, name) && hasOwnProperty(context[name], 'commutative')) {
      return context[name].commutative;
    }
    return commutative[name] || false;
  }
  function isAssociative(node, context) {
    if (!isOperatorNode(node)) {
      return false;
    }
    var name = node.fn.toString();
    if (context && hasOwnProperty(context, name) && hasOwnProperty(context[name], 'associative')) {
      return context[name].associative;
    }
    return associative[name] || false;
  }
  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */

  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }
    node.args = allChildren(node);
    for (var i = 0; i < node.args.length; i++) {
      flatten(node.args[i]);
    }
  }
  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */

  function allChildren(node) {
    var op;
    var children = [];
    var findChildren = function findChildren(node) {
      for (var i = 0; i < node.args.length; i++) {
        var child = node.args[i];
        if (isOperatorNode(child) && op === child.op) {
          findChildren(child);
        } else {
          children.push(child);
        }
      }
    };
    if (isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    } else {
      return node.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */

  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }
    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;
    for (var i = 0; i < l; i++) {
      unflattenr(node.args[i]);
    }
    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.pop();
      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }
      node.args = curnode.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */

  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }
    var makeNode = createMakeNodeFunction(node);
    var l = node.args.length;
    for (var i = 0; i < l; i++) {
      unflattenl(node.args[i]);
    }
    if (l > 2 && isAssociative(node)) {
      var curnode = node.args.shift();
      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }
      node.args = curnode.args;
    }
  }
  function createMakeNodeFunction(node) {
    if (isOperatorNode(node)) {
      return function (args) {
        try {
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } catch (err) {
          console.error(err);
          return [];
        }
      };
    } else {
      return function (args) {
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }
  return {
    createMakeNodeFunction: createMakeNodeFunction,
    isCommutative: isCommutative,
    isAssociative: isAssociative,
    flatten: flatten,
    allChildren: allChildren,
    unflattenr: unflattenr,
    unflattenl: unflattenl
  };
});

var name$o = 'simplifyCore';
var dependencies$o = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
var createSimplifyCore = /* #__PURE__ */factory(name$o, dependencies$o, function (_ref) {
  var equal = _ref.equal,
    isZero = _ref.isZero,
    add = _ref.add,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    divide = _ref.divide,
    pow = _ref.pow,
    ConstantNode = _ref.ConstantNode,
    OperatorNode = _ref.OperatorNode,
    FunctionNode = _ref.FunctionNode,
    ParenthesisNode = _ref.ParenthesisNode;
  var node0 = new ConstantNode(0);
  var node1 = new ConstantNode(1);
  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */

  function simplifyCore(node) {
    if (isOperatorNode(node) && node.isUnary()) {
      var a0 = simplifyCore(node.args[0]);
      if (node.op === '+') {
        // unary plus
        return a0;
      }
      if (node.op === '-') {
        // unary minus
        if (isOperatorNode(a0)) {
          if (a0.isUnary() && a0.op === '-') {
            return a0.args[0];
          } else if (a0.isBinary() && a0.fn === 'subtract') {
            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
          }
        }
        return new OperatorNode(node.op, node.fn, [a0]);
      }
    } else if (isOperatorNode(node) && node.isBinary()) {
      var _a = simplifyCore(node.args[0]);
      var a1 = simplifyCore(node.args[1]);
      if (node.op === '+') {
        if (isConstantNode(_a)) {
          if (isZero(_a.value)) {
            return a1;
          } else if (isConstantNode(a1)) {
            return new ConstantNode(add(_a.value, a1.value));
          }
        }
        if (isConstantNode(a1) && isZero(a1.value)) {
          return _a;
        }
        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
        }
        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
      } else if (node.op === '-') {
        if (isConstantNode(_a) && a1) {
          if (isConstantNode(a1)) {
            return new ConstantNode(subtract(_a.value, a1.value));
          } else if (isZero(_a.value)) {
            return new OperatorNode('-', 'unaryMinus', [a1]);
          }
        } // if (node.fn === "subtract" && node.args.length === 2) {

        if (node.fn === 'subtract') {
          if (isConstantNode(a1) && isZero(a1.value)) {
            return _a;
          }
          if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
          }
          return new OperatorNode(node.op, node.fn, [_a, a1]);
        }
      } else if (node.op === '*') {
        if (isConstantNode(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (equal(_a.value, 1)) {
            return a1;
          } else if (isConstantNode(a1)) {
            return new ConstantNode(multiply(_a.value, a1.value));
          }
        }
        if (isConstantNode(a1)) {
          if (isZero(a1.value)) {
            return node0;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === node.op) {
            var a00 = _a.args[0];
            if (isConstantNode(a00)) {
              var a00a1 = new ConstantNode(multiply(a00.value, a1.value));
              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
            }
          }

          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
        }

        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
      } else if (node.op === '/') {
        if (isConstantNode(_a)) {
          if (isZero(_a.value)) {
            return node0;
          } else if (isConstantNode(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
            return new ConstantNode(divide(_a.value, a1.value));
          }
        }
        return new OperatorNode(node.op, node.fn, [_a, a1]);
      } else if (node.op === '^') {
        if (isConstantNode(a1)) {
          if (isZero(a1.value)) {
            return node1;
          } else if (equal(a1.value, 1)) {
            return _a;
          } else {
            if (isConstantNode(_a)) {
              // fold constant
              return new ConstantNode(pow(_a.value, a1.value));
            } else if (isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
              var a01 = _a.args[1];
              if (isConstantNode(a01)) {
                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
              }
            }
          }
        }
        return new OperatorNode(node.op, node.fn, [_a, a1]);
      }
    } else if (isParenthesisNode(node)) {
      var c = simplifyCore(node.content);
      if (isParenthesisNode(c) || isSymbolNode(c) || isConstantNode(c)) {
        return c;
      }
      return new ParenthesisNode(c);
    } else if (isFunctionNode(node)) {
      var args = node.args.map(simplifyCore).map(function (arg) {
        return isParenthesisNode(arg) ? arg.content : arg;
      });
      return new FunctionNode(simplifyCore(node.fn), args);
    } else ;
    return node;
  }
  return simplifyCore;
});

// TODO this could be improved by simplifying seperated constants under associative and commutative operators
var name$n = 'simplifyConstant';
var dependencies$n = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
var createSimplifyConstant = /* #__PURE__ */factory(name$n, dependencies$n, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    mathWithTransform = _ref.mathWithTransform,
    fraction = _ref.fraction,
    bignumber = _ref.bignumber,
    ConstantNode = _ref.ConstantNode,
    OperatorNode = _ref.OperatorNode,
    FunctionNode = _ref.FunctionNode,
    SymbolNode = _ref.SymbolNode;
  var _createUtil = createUtil({
      FunctionNode: FunctionNode,
      OperatorNode: OperatorNode,
      SymbolNode: SymbolNode
    }),
    isCommutative = _createUtil.isCommutative,
    isAssociative = _createUtil.isAssociative,
    allChildren = _createUtil.allChildren,
    createMakeNodeFunction = _createUtil.createMakeNodeFunction;
  function simplifyConstant(expr, options) {
    var res = foldFraction(expr, options);
    return isNode(res) ? res : _toNode(res);
  }
  function _eval(fnname, args, options) {
    try {
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    } catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function (x) {
        if (isFraction(x)) {
          return x.valueOf();
        }
        return x;
      });
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    }
  }
  var _toNode = typed({
    Fraction: _fractionToNode,
    number: function number(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }
      return new ConstantNode(n);
    },
    BigNumber: function BigNumber(n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }
      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
    },

    Complex: function Complex(s) {
      throw new Error('Cannot convert Complex number to Node');
    }
  }); // convert a number to a fraction only if it can be expressed exactly

  function _exactFraction(n, options) {
    var exactFractions = options && options.exactFractions !== false;
    if (exactFractions && isFinite(n) && fraction) {
      var f = fraction(n);
      if (f.valueOf() === n) {
        return f;
      }
    }
    return n;
  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone

  var _toNumber = typed({
    'string, Object': function stringObject(s, options) {
      if (config.number === 'BigNumber') {
        if (bignumber === undefined) {
          noBignumber();
        }
        return bignumber(s);
      } else if (config.number === 'Fraction') {
        if (fraction === undefined) {
          noFraction();
        }
        return fraction(s);
      } else {
        var n = parseFloat(s);
        return _exactFraction(n, options);
      }
    },
    'Fraction, Object': function FractionObject(s, options) {
      return s;
    },
    // we don't need options here
    'BigNumber, Object': function BigNumberObject(s, options) {
      return s;
    },
    // we don't need options here
    'number, Object': function numberObject(s, options) {
      return _exactFraction(s, options);
    },
    'Complex, Object': function ComplexObject(s, options) {
      if (s.im !== 0) {
        return s;
      }
      return _exactFraction(s.re, options);
    }
  });
  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }
  function _fractionToNode(f) {
    var n;
    var vn = f.s * f.n;
    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
    } else {
      n = new ConstantNode(vn);
    }
    if (f.d === 1) {
      return n;
    }
    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }
  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */

  function foldOp(fn, args, makeNode, options) {
    return args.reduce(function (a, b) {
      if (!isNode(a) && !isNode(b)) {
        try {
          return _eval(fn, [a, b], options);
        } catch (ignoreandcontinue) {}
        a = _toNode(a);
        b = _toNode(b);
      } else if (!isNode(a)) {
        a = _toNode(a);
      } else if (!isNode(b)) {
        b = _toNode(b);
      }
      return makeNode([a, b]);
    });
  } // destroys the original node and returns a folded one

  function foldFraction(node, options) {
    switch (node.type) {
      case 'SymbolNode':
        return node;
      case 'ConstantNode':
        if (typeof node.value === 'number' || !isNaN(node.value)) {
          return _toNumber(node.value, options);
        }
        return node;
      case 'FunctionNode':
        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
          return node;
        }
        {
          // Process operators as OperatorNode
          var operatorFunctions = ['add', 'multiply'];
          if (operatorFunctions.indexOf(node.name) === -1) {
            var args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            }); // If all args are numbers

            if (!args.some(isNode)) {
              try {
                return _eval(node.name, args, options);
              } catch (ignoreandcontine) {}
            } // Convert all args to nodes and construct a symbolic function call

            args = args.map(function (arg) {
              return isNode(arg) ? arg : _toNode(arg);
            });
            return new FunctionNode(node.name, args);
          }
        }

      /* falls through */

      case 'OperatorNode':
        {
          var fn = node.fn.toString();
          var _args;
          var res;
          var makeNode = createMakeNodeFunction(node);
          if (isOperatorNode(node) && node.isUnary()) {
            _args = [foldFraction(node.args[0], options)];
            if (!isNode(_args[0])) {
              res = _eval(fn, _args, options);
            } else {
              res = makeNode(_args);
            }
          } else if (isAssociative(node)) {
            _args = allChildren(node);
            _args = _args.map(function (arg) {
              return foldFraction(arg, options);
            });
            if (isCommutative(fn)) {
              // commutative binary operator
              var consts = [];
              var vars = [];
              for (var i = 0; i < _args.length; i++) {
                if (!isNode(_args[i])) {
                  consts.push(_args[i]);
                } else {
                  vars.push(_args[i]);
                }
              }
              if (consts.length > 1) {
                res = foldOp(fn, consts, makeNode, options);
                vars.unshift(res);
                res = foldOp(fn, vars, makeNode, options);
              } else {
                // we won't change the children order since it's not neccessary
                res = foldOp(fn, _args, makeNode, options);
              }
            } else {
              // non-commutative binary operator
              res = foldOp(fn, _args, makeNode, options);
            }
          } else {
            // non-associative binary operator
            _args = node.args.map(function (arg) {
              return foldFraction(arg, options);
            });
            res = foldOp(fn, _args, makeNode, options);
          }
          return res;
        }
      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content, options);
      case 'AccessorNode':
      /* falls through */

      case 'ArrayNode':
      /* falls through */

      case 'AssignmentNode':
      /* falls through */

      case 'BlockNode':
      /* falls through */

      case 'FunctionAssignmentNode':
      /* falls through */

      case 'IndexNode':
      /* falls through */

      case 'ObjectNode':
      /* falls through */

      case 'RangeNode':
      /* falls through */

      case 'ConditionalNode':
      /* falls through */

      default:
        throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
    }
  }
  return simplifyConstant;
});

var name$m = 'resolve';
var dependencies$m = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
var createResolve = /* #__PURE__ */factory(name$m, dependencies$m, function (_ref) {
  var parse = _ref.parse,
    FunctionNode = _ref.FunctionNode,
    OperatorNode = _ref.OperatorNode,
    ParenthesisNode = _ref.ParenthesisNode;

  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
      return node;
    }
    if (isSymbolNode(node)) {
      var value = scope[node.name];
      if (isNode(value)) {
        return resolve(value, scope);
      } else if (typeof value === 'number') {
        return parse(String(value));
      }
    } else if (isOperatorNode(node)) {
      var args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new OperatorNode(node.op, node.fn, args, node.implicit);
    } else if (isParenthesisNode(node)) {
      return new ParenthesisNode(resolve(node.content, scope));
    } else if (isFunctionNode(node)) {
      var _args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new FunctionNode(node.name, _args);
    }
    return node;
  }
  return resolve;
});

function _typeof$1(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof$1 = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof$1(obj);
}
var name$l = 'simplify';
var dependencies$l = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createSimplify = /* #__PURE__ */factory(name$l, dependencies$l, function (_ref) {
  var config = _ref.config,
    typed = _ref.typed,
    parse = _ref.parse,
    add = _ref.add,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    divide = _ref.divide,
    pow = _ref.pow,
    isZero = _ref.isZero,
    equal = _ref.equal,
    fraction = _ref.fraction,
    bignumber = _ref.bignumber,
    mathWithTransform = _ref.mathWithTransform,
    ConstantNode = _ref.ConstantNode,
    FunctionNode = _ref.FunctionNode,
    OperatorNode = _ref.OperatorNode,
    ParenthesisNode = _ref.ParenthesisNode,
    SymbolNode = _ref.SymbolNode;
  var simplifyConstant = createSimplifyConstant({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = createSimplifyCore({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  var resolve = createResolve({
    parse: parse,
    FunctionNode: FunctionNode,
    OperatorNode: OperatorNode,
    ParenthesisNode: ParenthesisNode
  });
  var _createUtil = createUtil({
      FunctionNode: FunctionNode,
      OperatorNode: OperatorNode,
      SymbolNode: SymbolNode
    }),
    isCommutative = _createUtil.isCommutative,
    isAssociative = _createUtil.isAssociative,
    flatten = _createUtil.flatten,
    unflattenr = _createUtil.unflattenr,
    unflattenl = _createUtil.unflattenl,
    createMakeNodeFunction = _createUtil.createMakeNodeFunction;
  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available: `exactFractions`, a boolean which
   *  is `true` by default.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */

  var simplify = typed('simplify', {
    string: function string(expr) {
      return this(parse(expr), this.rules, {}, {});
    },
    'string, Object': function stringObject(expr, scope) {
      return this(parse(expr), this.rules, scope, {});
    },
    'string, Object, Object': function stringObjectObject(expr, scope, options) {
      return this(parse(expr), this.rules, scope, options);
    },
    'string, Array': function stringArray(expr, rules) {
      return this(parse(expr), rules, {}, {});
    },
    'string, Array, Object': function stringArrayObject(expr, rules, scope) {
      return this(parse(expr), rules, scope, {});
    },
    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {
      return this(parse(expr), rules, scope, options);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return this(expr, this.rules, scope, {});
    },
    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {
      return this(expr, this.rules, scope, options);
    },
    Node: function Node(expr) {
      return this(expr, this.rules, {}, {});
    },
    'Node, Array': function NodeArray(expr, rules) {
      return this(expr, rules, {}, {});
    },
    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
      return this(expr, rules, scope, {});
    },
    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
      rules = _buildRules(rules);
      var res = resolve(expr, scope);
      res = removeParens(res);
      var visited = {};
      var str = res.toString({
        parenthesis: 'all'
      });
      while (!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols

        for (var i = 0; i < rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res, options);
          } else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }
          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }

        str = res.toString({
          parenthesis: 'all'
        });
      }
      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;
  function removeParens(node) {
    return node.transform(function (node, path, parent) {
      return isParenthesisNode(node) ? removeParens(node.content) : node;
    });
  } // All constants that are allowed in rules

  var SUPPORTED_CONSTANTS = {
    "true": true,
    "false": true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true // null: false,
    // undefined: false,
    // version: false,
  }; // Array of strings, used to build the ruleSet.
  // Each l (left side) and r (right side) are parsed by
  // the expression parser into a node tree.
  // Left hand sides are matched to subtrees within the
  // expression to be parsed and replaced with the right
  // hand side.
  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
  // It is possible to get into an infinite loop with conflicting rules

  simplify.rules = [simplifyCore,
  // { l: 'n+0', r: 'n' },     // simplifyCore
  // { l: 'n^0', r: '1' },     // simplifyCore
  // { l: '0*n', r: '0' },     // simplifyCore
  // { l: 'n/n', r: '1'},      // simplifyCore
  // { l: 'n^1', r: 'n' },     // simplifyCore
  // { l: '+n1', r:'n1' },     // simplifyCore
  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
  {
    l: 'log(e)',
    r: '1'
  },
  // temporary rules
  {
    l: 'n-n1',
    r: 'n+-n1'
  },
  // temporarily replace 'subtract' so we can further flatten the 'add' operator
  {
    l: '-(c*v)',
    r: '(-c) * v'
  },
  // make non-constant terms positive
  {
    l: '-v',
    r: '(-1) * v'
  }, {
    l: 'n/n1^n2',
    r: 'n*n1^-n2'
  },
  // temporarily replace 'divide' so we can further flatten the 'multiply' operator
  {
    l: 'n/n1',
    r: 'n*n1^-1'
  },
  // expand nested exponentiation
  {
    l: '(n ^ n1) ^ n2',
    r: 'n ^ (n1 * n2)'
  },
  // collect like factors
  {
    l: 'n*n',
    r: 'n^2'
  }, {
    l: 'n * n^n1',
    r: 'n^(n1+1)'
  }, {
    l: 'n^n1 * n^n2',
    r: 'n^(n1+n2)'
  },
  // collect like terms
  {
    l: 'n+n',
    r: '2*n'
  }, {
    l: 'n+-n',
    r: '0'
  }, {
    l: 'n1*n2 + n2',
    r: '(n1+1)*n2'
  }, {
    l: 'n1*n3 + n2*n3',
    r: '(n1+n2)*n3'
  },
  // remove parenthesis in the case of negating a quantitiy
  {
    l: 'n1 + -1 * (n2 + n3)',
    r: 'n1 + -1 * n2 + -1 * n3'
  }, simplifyConstant, {
    l: '(-n)*n1',
    r: '-(n*n1)'
  },
  // make factors positive (and undo 'make non-constant terms positive')
  // ordering of constants
  {
    l: 'c+v',
    r: 'v+c',
    context: {
      add: {
        commutative: false
      }
    }
  }, {
    l: 'v*c',
    r: 'c*v',
    context: {
      multiply: {
        commutative: false
      }
    }
  },
  // undo temporary rules
  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
  {
    l: 'n+-n1',
    r: 'n-n1'
  },
  // undo replace 'subtract'
  {
    l: 'n*(n1^-1)',
    r: 'n/n1'
  },
  // undo replace 'divide'
  {
    l: 'n*n1^-n2',
    r: 'n/n1^n2'
  }, {
    l: 'n1^-1',
    r: '1/n1'
  }, {
    l: 'n*(n1/n2)',
    r: '(n*n1)/n2'
  },
  // '*' before '/'
  {
    l: 'n-(n1+n2)',
    r: 'n-n1-n2'
  },
  // '-' before '+'
  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
  {
    l: '1*n',
    r: 'n'
  },
  // this pattern can be produced by simplifyConstant
  {
    l: 'n1/(n2/n3)',
    r: '(n1*n3)/n2'
  }];
  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */

  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    var ruleSet = [];
    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var newRule = void 0;
      var ruleType = _typeof$1(rule);
      switch (ruleType) {
        case 'string':
          {
            var lr = rule.split('->');
            if (lr.length === 2) {
              rule = {
                l: lr[0],
                r: lr[1]
              };
            } else {
              throw SyntaxError('Could not parse rule: ' + rule);
            }
          }

        /* falls through */

        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r))
          };
          if (rule.context) {
            newRule.evaluate = rule.context;
          }
          if (rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }
          if (isAssociative(newRule.l)) {
            var makeNode = createMakeNodeFunction(newRule.l);
            var expandsym = _getExpandPlaceholderSymbol();
            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.

            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }
          break;
        case 'function':
          newRule = rule;
          break;
        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      } // console.log('Adding rule: ' + rules[i])
      // console.log(newRule)

      ruleSet.push(newRule);
    }
    return ruleSet;
  }
  var _lastsym = 0;
  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }
  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */

  var applyRule = typed('applyRule', {
    'Node, Object': function NodeObject(node, rule) {
      // console.log('Entering applyRule(' + node.toString() + ')')
      // Do not clone node unless we find a match
      var res = node; // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged

      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for (var i = 0; i < res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      } else if (res instanceof ParenthesisNode) {
        if (res.content) {
          res.content = applyRule(res.content, rule);
        }
      } // Try to match a rule against this node

      var repl = rule.r;
      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.

      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }
      if (matches) {
        // const before = res.toString({parenthesis: 'all'})
        // Create a new node by cloning the rhs of the matched rule
        // we keep any implicit multiplication state if relevant
        var implicit = res.implicit;
        res = repl.clone();
        if (implicit && 'implicit' in repl) {
          res.implicit = true;
        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes

        res = res.transform(function (node) {
          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {
            return matches.placeholders[node.name].clone();
          } else {
            return node;
          }
        }); // const after = res.toString({parenthesis: 'all'})
        // console.log('Simplified ' + before + ' to ' + after)
      }

      return res;
    }
  });
  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */

  function getSplits(node, context) {
    var res = [];
    var right, rightArgs;
    var makeNode = createMakeNodeFunction(node);
    if (isCommutative(node, context)) {
      for (var i = 0; i < node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    } else {
      rightArgs = node.args.slice(1);
      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }
    return res;
  }
  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */

  function mergeMatch(match1, match2) {
    var res = {
      placeholders: {}
    }; // Some matches may not have placeholders; this is OK

    if (!match1.placeholders && !match2.placeholders) {
      return res;
    } else if (!match1.placeholders) {
      return match2;
    } else if (!match2.placeholders) {
      return match1;
    } // Placeholders with the same key must match exactly

    for (var key in match1.placeholders) {
      if (hasOwnProperty(match1.placeholders, key)) {
        res.placeholders[key] = match1.placeholders[key];
        if (hasOwnProperty(match2.placeholders, key)) {
          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
            return null;
          }
        }
      }
    }
    for (var _key in match2.placeholders) {
      if (hasOwnProperty(match2.placeholders, _key)) {
        res.placeholders[_key] = match2.placeholders[_key];
      }
    }
    return res;
  }
  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */

  function combineChildMatches(list1, list2) {
    var res = [];
    if (list1.length === 0 || list2.length === 0) {
      return res;
    }
    var merged;
    for (var i1 = 0; i1 < list1.length; i1++) {
      for (var i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);
        if (merged) {
          res.push(merged);
        }
      }
    }
    return res;
  }
  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */

  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }
    var sets = childMatches.reduce(combineChildMatches);
    var uniqueSets = [];
    var unique = {};
    for (var i = 0; i < sets.length; i++) {
      var s = JSON.stringify(sets[i]);
      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }
    return uniqueSets;
  }
  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */

  function _ruleMatch(rule, node, isSplit) {
    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
    //    console.log('rule = ' + rule)
    //    console.log('node = ' + node)
    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
    var res = [{
      placeholders: {}
    }];
    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      } else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      } // rule and node match. Search the children of rule and node.

      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
        // Expect non-associative operators to match exactly
        var childMatches = [];
        for (var i = 0; i < rule.args.length; i++) {
          var childMatch = _ruleMatch(rule.args[i], node.args[i]);
          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          } // The child matched, so add the information returned from the child to our result

          childMatches.push(childMatch);
        }
        res = mergeChildMatches(childMatches);
      } else if (node.args.length >= 2 && rule.args.length === 2) {
        // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        var splits = getSplits(node, rule.context);
        var splitMatches = [];
        for (var _i = 0; _i < splits.length; _i++) {
          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here

          splitMatches = splitMatches.concat(matchSet);
        }
        return splitMatches;
      } else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      } else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    } else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }
      if (SUPPORTED_CONSTANTS[rule.name]) {
        // built-in constant must match exactly
        if (rule.name !== node.name) {
          return [];
        }
      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      } else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if (!isConstantNode(node)) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      } else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if (node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      } else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    } else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if (!equal(rule.value, node.value)) {
        return [];
      }
    } else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    } // It's a match!
    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')

    return res;
  }
  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */

  function _exactMatch(p, q) {
    if (p instanceof ConstantNode && q instanceof ConstantNode) {
      if (!equal(p.value, q.value)) {
        return false;
      }
    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
      if (p.name !== q.name) {
        return false;
      }
    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      } else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }
      if (p.args.length !== q.args.length) {
        return false;
      }
      for (var i = 0; i < p.args.length; i++) {
        if (!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  return simplify;
});

var name$k = 'derivative';
var dependencies$k = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
var createDerivative = /* #__PURE__ */factory(name$k, dependencies$k, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    parse = _ref.parse,
    simplify = _ref.simplify,
    equal = _ref.equal,
    isZero = _ref.isZero,
    numeric = _ref.numeric,
    ConstantNode = _ref.ConstantNode,
    FunctionNode = _ref.FunctionNode,
    OperatorNode = _ref.OperatorNode,
    ParenthesisNode = _ref.ParenthesisNode,
    SymbolNode = _ref.SymbolNode;

  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  var derivative = typed('derivative', {
    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
      var constNodes = {};
      constTag(constNodes, expr, variable.name);
      var res = _derivative(expr, constNodes);
      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
      return this(expr, variable, {
        simplify: true
      });
    },
    'string, SymbolNode': function stringSymbolNode(expr, variable) {
      return this(parse(expr), variable);
    },
    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
      return this(parse(expr), variable, options);
    },
    'string, string': function stringString(expr, variable) {
      return this(parse(expr), parse(variable));
    },
    'string, string, Object': function stringStringObject(expr, variable, options) {
      return this(parse(expr), parse(variable), options);
    },
    'Node, string': function NodeString(expr, variable) {
      return this(expr, parse(variable));
    },
    'Node, string, Object': function NodeStringObject(expr, variable, options) {
      return this(expr, parse(variable), options);
    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */
  });

  derivative._simplify = true;
  derivative.toTex = function (deriv) {
    return _derivTex.apply(null, deriv.args);
  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
  // NOTE: the optional "order" parameter here is currently unused

  var _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
      if (isConstantNode(expr) && typeOf$1(expr.value) === 'string') {
        return _derivTex(parse(expr.value).toString(), x.toString(), 1);
      } else {
        return _derivTex(expr.toString(), x.toString(), 1);
      }
    },
    'Node, ConstantNode': function NodeConstantNode(expr, x) {
      if (typeOf$1(x.value) === 'string') {
        return _derivTex(expr, parse(x.value));
      } else {
        throw new Error("The second parameter to 'derivative' is a non-string constant");
      }
    },
    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function stringStringNumber(expr, x, order) {
      var d;
      if (order === 1) {
        d = '{d\\over d' + x + '}';
      } else {
        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
      }
      return d + "\\left[".concat(expr, "\\right]");
    }
  });
  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?

  var constTag = typed('constTag', {
    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
      constNodes[node] = true;
      return true;
    },
    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name !== varName) {
        constNodes[node] = true;
        return true;
      }
      return false;
    },
    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },
    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
      if (node.params.indexOf(varName) === -1) {
        constNodes[node] = true;
        return true;
      }
      return constTag(constNodes, node.expr, varName);
    },
    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
      if (node.args.length > 0) {
        var isConst = constTag(constNodes, node.args[0], varName);
        for (var i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }
        if (isConst) {
          constNodes[node] = true;
          return true;
        }
      }
      return false;
    }
  });
  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */

  var _derivative = typed('_derivative', {
    'ConstantNode, Object': function ConstantNodeObject(node) {
      return createConstantNode(0);
    },
    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }
      return createConstantNode(1);
    },
    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },
    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }
      return _derivative(node.expr, constNodes);
    },
    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
      if (node.args.length !== 1) {
        funcArgsCheck(node);
      }
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }
      var arg0 = node.args[0];
      var arg1;
      var div = false; // is output a fraction?

      var negative = false; // is output negative?

      var funcDerivative;
      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
          break;
        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length === 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
          } else if (node.args.length === 2) {
            // Rearrange from nthRoot(x, a) -> x^(1/a)
            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

            constNodes[arg1] = constNodes[node.args[1]];
            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
          }
          break;
        case 'log10':
          arg1 = createConstantNode(10);

        /* fall through! */

        case 'log':
          if (!arg1 && node.args.length === 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg0.clone();
            div = true;
          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
            div = true;
          } else if (node.args.length === 2) {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
          }
          break;
        case 'pow':
          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);
        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg0.clone()]);
          break;
        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg0.clone()]);
          break;
        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
          break;
        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
          break;
        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
          break;
        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
          break;
        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
          break;
        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;
        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;
        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;
        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;
        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;
        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;
        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
          break;
        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
          break;
        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
          break;
        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
          break;
        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
          break;
        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
          break;
        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;
        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;
        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;
        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
          break;
        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;
        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;
        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
          break;
        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

        default:
          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }
      var op, func;
      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }
      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */

      var chainDerivative = _derivative(arg0, constNodes);
      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }
      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },
    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }
      if (node.op === '+') {
        // d/dx(sum(f(x)) = sum(f'(x))
        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
          return _derivative(arg, constNodes);
        }));
      }
      if (node.op === '-') {
        // d/dx(+/-f(x)) = +/-f'(x)
        if (node.isUnary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)

        if (node.isBinary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
        }
      }
      if (node.op === '*') {
        // d/dx(c*f(x)) = c*f'(x)
        var constantTerms = node.args.filter(function (arg) {
          return constNodes[arg] !== undefined;
        });
        if (constantTerms.length > 0) {
          var nonConstantTerms = node.args.filter(function (arg) {
            return constNodes[arg] === undefined;
          });
          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
          return new OperatorNode('*', 'multiply', newArgs);
        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)

        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
          }));
        }));
      }
      if (node.op === '/' && node.isBinary()) {
        var arg0 = node.args[0];
        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

        if (constNodes[arg1] !== undefined) {
          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)

        if (constNodes[arg0] !== undefined) {
          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2

        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
      }
      if (node.op === '^' && node.isBinary()) {
        var _arg = node.args[0];
        var _arg2 = node.args[1];
        if (constNodes[_arg] !== undefined) {
          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {
            return createConstantNode(0);
          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)

          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
        }
        if (constNodes[_arg2] !== undefined) {
          if (isConstantNode(_arg2)) {
            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
            if (isZero(_arg2.value)) {
              return createConstantNode(0);
            } // Ignore exponent; f(x)^1 = f(x)

            if (equal(_arg2.value, 1)) {
              return _derivative(_arg, constNodes);
            }
          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)

          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);
          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]

        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);
      }
      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */

  function funcArgsCheck(node) {
    // TODO add min, max etc
    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
      return;
    } // There should be an incorrect number of arguments if we reach here
    // Change all args to constants to avoid unidentified
    // symbol error when compiling function

    for (var i = 0; i < node.args.length; ++i) {
      node.args[i] = createConstantNode(0);
    }
    node.compile().evaluate();
    throw new Error('Expected TypeError, but none found');
  }
  /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */

  function createConstantNode(value, valueType) {
    return new ConstantNode(numeric(value, valueType || config.number));
  }
  return derivative;
});

var name$j = 'rationalize';
var dependencies$j = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
var createRationalize = /* #__PURE__ */factory(name$j, dependencies$j, function (_ref) {
  var config = _ref.config,
    typed = _ref.typed,
    equal = _ref.equal,
    isZero = _ref.isZero,
    add = _ref.add,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    divide = _ref.divide,
    pow = _ref.pow,
    parse = _ref.parse,
    simplify = _ref.simplify,
    fraction = _ref.fraction,
    bignumber = _ref.bignumber,
    mathWithTransform = _ref.mathWithTransform,
    ConstantNode = _ref.ConstantNode,
    OperatorNode = _ref.OperatorNode,
    FunctionNode = _ref.FunctionNode,
    SymbolNode = _ref.SymbolNode,
    ParenthesisNode = _ref.ParenthesisNode;
  var simplifyConstant = createSimplifyConstant({
    typed: typed,
    config: config,
    mathWithTransform: mathWithTransform,
    fraction: fraction,
    bignumber: bignumber,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    SymbolNode: SymbolNode
  });
  var simplifyCore = createSimplifyCore({
    equal: equal,
    isZero: isZero,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    ConstantNode: ConstantNode,
    OperatorNode: OperatorNode,
    FunctionNode: FunctionNode,
    ParenthesisNode: ParenthesisNode
  });
  /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */

  return typed(name$j, {
    string: function string(expr) {
      return this(parse(expr), {}, false);
    },
    'string, boolean': function stringBoolean(expr, detailed) {
      return this(parse(expr), {}, detailed);
    },
    'string, Object': function stringObject(expr, scope) {
      return this(parse(expr), scope, false);
    },
    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
      return this(parse(expr), scope, detailed);
    },
    Node: function Node(expr) {
      return this(expr, {}, false);
    },
    'Node, boolean': function NodeBoolean(expr, detailed) {
      return this(expr, {}, detailed);
    },
    'Node, Object': function NodeObject(expr, scope) {
      return this(expr, scope, false);
    },
    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

      var nVars = polyRet.variables.length;
      expr = polyRet.expression;
      if (nVars >= 1) {
        // If expression in not a constant
        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

        var sBefore; // Previous expression

        var rules;
        var eDistrDiv = true;
        var redoInic = false;
        expr = simplify(expr, setRules.firstRules, {}, {
          exactFractions: false
        }); // Apply the initial rules, including succ div rules

        var s;
        while (true) {
          // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
          expr = simplify(expr, rules); // until no more changes

          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

          s = expr.toString();
          if (s === sBefore) {
            break; // No changes : end of the loop
          }

          redoInic = true;
          sBefore = s;
        }
        if (redoInic) {
          // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr, setRules.firstRulesAgain, {}, {
            exactFractions: false
          });
        }
        expr = simplify(expr, setRules.finalRules, {}, {
          exactFractions: false
        }); // Apply final rules
      } // NVars >= 1

      var coefficients = [];
      var retRationalize = {};
      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
        // Separate numerator from denominator
        if (nVars === 1) {
          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
          expr.args[1] = polyToCanonical(expr.args[1]);
        }
        if (detailed) {
          retRationalize.numerator = expr.args[0];
          retRationalize.denominator = expr.args[1];
        }
      } else {
        if (nVars === 1) {
          expr = polyToCanonical(expr, coefficients);
        }
        if (detailed) {
          retRationalize.numerator = expr;
          retRationalize.denominator = null;
        }
      } // nVars

      if (!detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    } // ^^^^^^^ end of rationalize ^^^^^^^^
  }); // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */

  function polynomial(expr, scope, extended, rules) {
    var variables = [];
    var node = simplify(expr, rules, scope, {
      exactFractions: false
    }); // Resolves any variables and functions with all defined parameters

    extended = !!extended;
    var oper = '+-*' + (extended ? '/' : '');
    recPoly(node);
    var retFunc = {};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; // -------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */

    function recPoly(node) {
      var tp = node.type; // node type

      if (tp === 'FunctionNode') {
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        if (node.op === '^') {
          // TODO: handle negative exponents like in '1/x^(-2)'
          if (node.args[1].type !== 'ConstantNode' || !isInteger$1(parseFloat(node.args[1].value))) {
            throw new Error('There is a non-integer exponent');
          } else {
            recPoly(node.args[0]);
          }
        } else {
          if (oper.indexOf(node.op) === -1) {
            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
          }
          for (var i = 0; i < node.args.length; i++) {
            recPoly(node.args[i]);
          }
        } // type of operator
      } else if (tp === 'SymbolNode') {
        var _name = node.name; // variable name

        var pos = variables.indexOf(_name);
        if (pos === -1) {
          // new variable in expression
          variables.push(_name);
        }
      } else if (tp === 'ParenthesisNode') {
        recPoly(node.content);
      } else if (tp !== 'ConstantNode') {
        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
      }
    } // end of recPoly
  } // end of polynomial
  // ---------------------------------------------------------------------------------------

  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */

  function rulesRationalize() {
    var oldRules = [simplifyCore,
    // sCore
    {
      l: 'n+n',
      r: '2*n'
    }, {
      l: 'n+-n',
      r: '0'
    }, simplifyConstant,
    // sConstant
    {
      l: 'n*(n1^-1)',
      r: 'n/n1'
    }, {
      l: 'n*n1^-n2',
      r: 'n/n1^n2'
    }, {
      l: 'n1^-1',
      r: '1/n1'
    }, {
      l: 'n*(n1/n2)',
      r: '(n*n1)/n2'
    }, {
      l: '1*n',
      r: 'n'
    }];
    var rulesFirst = [{
      l: '(-n1)/(-n2)',
      r: 'n1/n2'
    },
    // Unary division
    {
      l: '(-n1)*(-n2)',
      r: 'n1*n2'
    },
    // Unary multiplication
    {
      l: 'n1--n2',
      r: 'n1+n2'
    },
    // '--' elimination
    {
      l: 'n1-n2',
      r: 'n1+(-n2)'
    },
    // Subtraction turn into add with un�ry minus
    {
      l: '(n1+n2)*n3',
      r: '(n1*n3 + n2*n3)'
    },
    // Distributive 1
    {
      l: 'n1*(n2+n3)',
      r: '(n1*n2+n1*n3)'
    },
    // Distributive 2
    {
      l: 'c1*n + c2*n',
      r: '(c1+c2)*n'
    },
    // Joining constants
    {
      l: 'c1*n + n',
      r: '(c1+1)*n'
    },
    // Joining constants
    {
      l: 'c1*n - c2*n',
      r: '(c1-c2)*n'
    },
    // Joining constants
    {
      l: 'c1*n - n',
      r: '(c1-1)*n'
    },
    // Joining constants
    {
      l: 'v/c',
      r: '(1/c)*v'
    },
    // variable/constant (new!)
    {
      l: 'v/-c',
      r: '-(1/c)*v'
    },
    // variable/constant (new!)
    {
      l: '-v*-c',
      r: 'c*v'
    },
    // Inversion constant and variable 1
    {
      l: '-v*c',
      r: '-c*v'
    },
    // Inversion constant and variable 2
    {
      l: 'v*-c',
      r: '-c*v'
    },
    // Inversion constant and variable 3
    {
      l: 'v*c',
      r: 'c*v'
    },
    // Inversion constant and variable 4
    {
      l: '-(-n1*n2)',
      r: '(n1*n2)'
    },
    // Unary propagation
    {
      l: '-(n1*n2)',
      r: '(-n1*n2)'
    },
    // Unary propagation
    {
      l: '-(-n1+n2)',
      r: '(n1-n2)'
    },
    // Unary propagation
    {
      l: '-(n1+n2)',
      r: '(-n1-n2)'
    },
    // Unary propagation
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    },
    // Power to Power
    {
      l: '-(-n1/n2)',
      r: '(n1/n2)'
    },
    // Division and Unary
    {
      l: '-(n1/n2)',
      r: '(-n1/n2)'
    }]; // Divisao and Unary

    var rulesDistrDiv = [{
      l: '(n1/n2 + n3/n4)',
      r: '((n1*n4 + n3*n2)/(n2*n4))'
    },
    // Sum of fractions
    {
      l: '(n1/n2 + n3)',
      r: '((n1 + n3*n2)/n2)'
    },
    // Sum fraction with number 1
    {
      l: '(n1 + n2/n3)',
      r: '((n1*n3 + n2)/n3)'
    }]; // Sum fraction with number 1

    var rulesSucDiv = [{
      l: '(n1/(n2/n3))',
      r: '((n1*n3)/n2)'
    },
    // Division simplification
    {
      l: '(n1/n2/n3)',
      r: '(n1/(n2*n3))'
    }];
    var setRules = {}; // rules set in 4 steps.
    // All rules => infinite loop
    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
    // Division simplification
    // Second rule set.
    // There is no aggregate expression with parentesis, but the only variable can be scattered.

    setRules.finalRules = [simplifyCore,
    // simplify.rules[0]
    {
      l: 'n*-n',
      r: '-n^2'
    },
    // Joining multiply with power 1
    {
      l: 'n*n',
      r: 'n^2'
    },
    // Joining multiply with power 2
    simplifyConstant,
    // simplify.rules[14] old 3rd index in oldRules
    {
      l: 'n*-n^n1',
      r: '-n^(n1+1)'
    },
    // Joining multiply with power 3
    {
      l: 'n*n^n1',
      r: 'n^(n1+1)'
    },
    // Joining multiply with power 4
    {
      l: 'n^n1*-n^n2',
      r: '-n^(n1+n2)'
    },
    // Joining multiply with power 5
    {
      l: 'n^n1*n^n2',
      r: 'n^(n1+n2)'
    },
    // Joining multiply with power 6
    {
      l: 'n^n1*-n',
      r: '-n^(n1+1)'
    },
    // Joining multiply with power 7
    {
      l: 'n^n1*n',
      r: 'n^(n1+1)'
    },
    // Joining multiply with power 8
    {
      l: 'n^n1/-n',
      r: '-n^(n1-1)'
    },
    // Joining multiply with power 8
    {
      l: 'n^n1/n',
      r: 'n^(n1-1)'
    },
    // Joining division with power 1
    {
      l: 'n/-n^n1',
      r: '-n^(1-n1)'
    },
    // Joining division with power 2
    {
      l: 'n/n^n1',
      r: 'n^(1-n1)'
    },
    // Joining division with power 3
    {
      l: 'n^n1/-n^n2',
      r: 'n^(n1-n2)'
    },
    // Joining division with power 4
    {
      l: 'n^n1/n^n2',
      r: 'n^(n1-n2)'
    },
    // Joining division with power 5
    {
      l: 'n1+(-n2*n3)',
      r: 'n1-n2*n3'
    },
    // Solving useless parenthesis 1
    {
      l: 'v*(-c)',
      r: '-c*v'
    },
    // Solving useless unary 2
    {
      l: 'n1+-n2',
      r: 'n1-n2'
    },
    // Solving +- together (new!)
    {
      l: 'v*c',
      r: 'c*v'
    },
    // inversion constant with variable
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    } // Power to Power
    ];

    return setRules;
  } // End rulesRationalize
  // ---------------------------------------------------------------------------------------

  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */

  function expandPower(node, parent, indParent) {
    var tp = node.type;
    var internal = arguments.length > 1; // TRUE in internal calls

    if (tp === 'OperatorNode' && node.isBinary()) {
      var does = false;
      var val;
      if (node.op === '^') {
        // First operator: Parenthesis or UnaryMinus
        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
          // Second operator: Constant
          val = parseFloat(node.args[1].value);
          does = val >= 2 && isInteger$1(val);
        }
      }
      if (does) {
        // Exponent >= 2
        // Before:
        //            operator A --> Subtree
        // parent pow
        //            constant
        //
        if (val > 2) {
          // Exponent > 2,
          // AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  *
          //                 deep clone (operator A --> Subtree
          //             pow
          //                 constant - 1
          //
          var nEsqTopo = node.args[0];
          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else {
          // Expo = 2 - no power
          // AFTER:  (exponent =  2)
          //             operator A --> Subtree
          // parent   oper
          //            deep clone (operator A --> Subtree)
          //
          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        }
        if (internal) {
          // Change parent references in internal recursive calls
          if (indParent === 'content') {
            parent.content = node;
          } else {
            parent.args[indParent] = node;
          }
        }
      } // does
    } // binary OperatorNode

    if (tp === 'ParenthesisNode') {
      // Recursion
      expandPower(node.content, node, 'content');
    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
      for (var i = 0; i < node.args.length; i++) {
        expandPower(node.args[i], node, i);
      }
    }
    if (!internal) {
      // return the root node
      return node;
    }
  } // End expandPower
  // ---------------------------------------------------------------------------------------

  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */

  function polyToCanonical(node, coefficients) {
    if (coefficients === undefined) {
      coefficients = [];
    } // coefficients.

    coefficients[0] = 0; // index is the exponent

    var o = {};
    o.cte = 1;
    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
    //       It is used to deduce the exponent: 1 for *, 0 for "".

    o.fire = '';
    var maxExpo = 0; // maximum exponent

    var varname = ''; // variable name

    recurPol(node, null, o);
    maxExpo = coefficients.length - 1;
    var first = true;
    var no;
    for (var i = maxExpo; i >= 0; i--) {
      if (coefficients[i] === 0) continue;
      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
      var op = coefficients[i] < 0 ? '-' : '+';
      if (i > 0) {
        // Is not a constant without variable
        var n2 = new SymbolNode(varname);
        if (i > 1) {
          var n3 = new ConstantNode(i);
          n2 = new OperatorNode('^', 'pow', [n2, n3]);
        }
        if (coefficients[i] === -1 && first) {
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);
        } else if (Math.abs(coefficients[i]) === 1) {
          n1 = n2;
        } else {
          n1 = new OperatorNode('*', 'multiply', [n1, n2]);
        }
      }
      if (first) {
        no = n1;
      } else if (op === '+') {
        no = new OperatorNode('+', 'add', [no, n1]);
      } else {
        no = new OperatorNode('-', 'subtract', [no, n1]);
      }
      first = false;
    } // for

    if (first) {
      return new ConstantNode(0);
    } else {
      return no;
    }
    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */

    function recurPol(node, noPai, o) {
      var tp = node.type;
      if (tp === 'FunctionNode') {
        // ***** FunctionName *****
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');
        if (noPai !== null) {
          // -(unary),^  : children of *,+,-
          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+,* : children of +,-

          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+ : first child

          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
            throw new Error('Invalid ' + node.op + ' placing');
          }
        } // Has parent
        // Firers: ^,*       Old:   ^,&,-(unary): firers

        if (node.op === '^' || node.op === '*') {
          o.fire = node.op;
        }
        for (var _i = 0; _i < node.args.length; _i++) {
          // +,-: reset fire
          if (node.fn === 'unaryMinus') o.oper = '-';
          if (node.op === '+' || node.fn === 'subtract') {
            o.fire = '';
            o.cte = 1; // default if there is no constant

            o.oper = _i === 0 ? '+' : node.op;
          }
          o.noFil = _i; // number of son

          recurPol(node.args[_i], node, o);
        } // for in children
      } else if (tp === 'SymbolNode') {
        // ***** SymbolName *****
        if (node.name !== varname && varname !== '') {
          throw new Error('There is more than one variable');
        }
        varname = node.name;
        if (noPai === null) {
          coefficients[1] = 1;
          return;
        } // ^: Symbol is First child

        if (noPai.op === '^' && o.noFil !== 0) {
          throw new Error('In power the variable should be the first parameter');
        } // *: Symbol is Second child

        if (noPai.op === '*' && o.noFil !== 1) {
          throw new Error('In multiply the variable should be the second parameter');
        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)

        if (o.fire === '' || o.fire === '*') {
          if (maxExpo < 1) coefficients[1] = 0;
          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(1, maxExpo);
        }
      } else if (tp === 'ConstantNode') {
        var valor = parseFloat(node.value);
        if (noPai === null) {
          coefficients[0] = valor;
          return;
        }
        if (noPai.op === '^') {
          // cte: second  child of power
          if (o.noFil !== 1) throw new Error('Constant cannot be powered');
          if (!isInteger$1(valor) || valor <= 0) {
            throw new Error('Non-integer exponent is not allowed');
          }
          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
            coefficients[_i2] = 0;
          }
          if (valor > maxExpo) coefficients[valor] = 0;
          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(valor, maxExpo);
          return;
        }
        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

        if (o.fire === '') {
          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
        }
      } else {
        throw new Error('Type ' + tp + ' is not allowed');
      }
    } // End of recurPol
  } // End of polyToCanonical
});

var name$i = 'reviver';
var dependencies$i = ['classes'];
var createReviver = /* #__PURE__ */factory(name$i, dependencies$i, function (_ref) {
  var classes = _ref.classes;

  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    var constructor = classes[value && value.mathjs];
    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }
    return value;
  };
});

var name$h = 'replacer';
var dependencies$h = [];
var createReplacer = /* #__PURE__ */factory(name$h, dependencies$h, function () {
  /**
   * Stringify data types into their JSON representation.
   * Most data types can be serialized using their `.toJSON` method,
   * but not all, for example the number `Infinity`. For these cases you have
   * to use the replacer. Example usage:
   *
   *     JSON.stringify([2, Infinity], math.replacer)
   *
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the replaced object
   */
  return function replacer(key, value) {
    // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
    if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
      return {
        mathjs: 'number',
        value: String(value)
      };
    }
    return value;
  };
});

var version$1 = '7.6.0'; // Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.

var createTrue = /* #__PURE__ */factory('true', [], function () {
  return true;
});
var createFalse = /* #__PURE__ */factory('false', [], function () {
  return false;
});
var createNull = /* #__PURE__ */factory('null', [], function () {
  return null;
});
var createInfinity = /* #__PURE__ */recreateFactory('Infinity', ['config', '?BigNumber'], function (_ref) {
  var config = _ref.config,
    BigNumber = _ref.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity;
});
var createNaN = /* #__PURE__ */recreateFactory('NaN', ['config', '?BigNumber'], function (_ref2) {
  var config = _ref2.config,
    BigNumber = _ref2.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(NaN) : NaN;
});
var createPi = /* #__PURE__ */recreateFactory('pi', ['config', '?BigNumber'], function (_ref3) {
  var config = _ref3.config,
    BigNumber = _ref3.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberPi(BigNumber) : pi$1;
});
var createTau = /* #__PURE__ */recreateFactory('tau', ['config', '?BigNumber'], function (_ref4) {
  var config = _ref4.config,
    BigNumber = _ref4.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberTau(BigNumber) : tau$1;
});
var createE = /* #__PURE__ */recreateFactory('e', ['config', '?BigNumber'], function (_ref5) {
  var config = _ref5.config,
    BigNumber = _ref5.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberE(BigNumber) : e$1;
}); // golden ratio, (1+sqrt(5))/2

var createPhi = /* #__PURE__ */recreateFactory('phi', ['config', '?BigNumber'], function (_ref6) {
  var config = _ref6.config,
    BigNumber = _ref6.BigNumber;
  return config.number === 'BigNumber' ? createBigNumberPhi(BigNumber) : phi$1;
});
var createLN2 = /* #__PURE__ */recreateFactory('LN2', ['config', '?BigNumber'], function (_ref7) {
  var config = _ref7.config,
    BigNumber = _ref7.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2;
});
var createLN10 = /* #__PURE__ */recreateFactory('LN10', ['config', '?BigNumber'], function (_ref8) {
  var config = _ref8.config,
    BigNumber = _ref8.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10;
});
var createLOG2E = /* #__PURE__ */recreateFactory('LOG2E', ['config', '?BigNumber'], function (_ref9) {
  var config = _ref9.config,
    BigNumber = _ref9.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E;
});
var createLOG10E = /* #__PURE__ */recreateFactory('LOG10E', ['config', '?BigNumber'], function (_ref10) {
  var config = _ref10.config,
    BigNumber = _ref10.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E;
});
var createSQRT1_2 = /* #__PURE__ */recreateFactory(
// eslint-disable-line camelcase
'SQRT1_2', ['config', '?BigNumber'], function (_ref11) {
  var config = _ref11.config,
    BigNumber = _ref11.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2;
});
var createSQRT2 = /* #__PURE__ */recreateFactory('SQRT2', ['config', '?BigNumber'], function (_ref12) {
  var config = _ref12.config,
    BigNumber = _ref12.BigNumber;
  return config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2;
});
var createI = /* #__PURE__ */recreateFactory('i', ['Complex'], function (_ref13) {
  var Complex = _ref13.Complex;
  return Complex.I;
}); // for backward compatibility with v5

var createUppercasePi = /* #__PURE__ */factory('PI', ['pi'], function (_ref14) {
  var pi = _ref14.pi;
  return pi;
});
var createUppercaseE = /* #__PURE__ */factory('E', ['e'], function (_ref15) {
  var e = _ref15.e;
  return e;
});
var createVersion = /* #__PURE__ */factory('version', [], function () {
  return version$1;
}); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?

function recreateFactory(name, dependencies, create) {
  return factory(name, dependencies, create, {
    recreateOnConfigChange: true
  });
}

// Universal constants

var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');
var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');
var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');
var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');
var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');
// Atomic and nuclear constants

var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');
var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');
var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');
var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');
var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');
var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');
var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');
var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');
var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); 

var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');
var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
// Natural units

var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');
var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');
var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');
var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');
var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration

function unitFactory(name, valueStr, unitStr) {
  var dependencies = ['config', 'Unit', 'BigNumber'];
  return factory(name, dependencies, function (_ref) {
    var config = _ref.config,
      Unit = _ref.Unit,
      BigNumber = _ref.BigNumber;
    // Note that we can parse into number or BigNumber.
    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
    // Therefore we dont use Unit.parse()
    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
    var unit = new Unit(value, unitStr);
    unit.fixPrefix = true;
    return unit;
  });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration

function numberFactory(name, value) {
  var dependencies = ['config', 'BigNumber'];
  return factory(name, dependencies, function (_ref2) {
    var config = _ref2.config,
      BigNumber = _ref2.BigNumber;
    return config.number === 'BigNumber' ? new BigNumber(value) : value;
  });
}

var name$g = 'apply';
var dependencies$g = ['typed', 'isInteger'];
/**
 * Attach a transform function to math.apply
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function apply
 * from one-based to zero based
 */

var createApplyTransform = /* #__PURE__ */factory(name$g, dependencies$g, function (_ref) {
  var typed = _ref.typed,
    isInteger = _ref.isInteger;
  var apply = createApply({
    typed: typed,
    isInteger: isInteger
  }); // @see: comment of concat itself

  return typed('apply', {
    '...any': function any(args) {
      // change dim from one-based to zero-based
      var dim = args[1];
      if (isNumber(dim)) {
        args[1] = dim - 1;
      } else if (isBigNumber(dim)) {
        args[1] = dim.minus(1);
      }
      try {
        return apply.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$f = 'column';
var dependencies$f = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createColumnTransform = /* #__PURE__ */factory(name$f, dependencies$f, function (_ref) {
  var typed = _ref.typed,
    Index = _ref.Index,
    matrix = _ref.matrix,
    range = _ref.range;
  var column = createColumn({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of column itself

  return typed('column', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (isNumber(last)) {
        args[lastIndex] = last - 1;
      }
      try {
        return column.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */

function compileInlineExpression(expression, math, scope) {
  // find an undefined symbol
  var symbol = expression.filter(function (node) {
    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);
  })[0];
  if (!symbol) {
    throw new Error('No undefined variable found in inline expression "' + expression + '"');
  } // create a test function for this equation

  var name = symbol.name; // variable name

  var subScope = Object.create(scope);
  var eq = expression.compile();
  return function inlineExpression(x) {
    subScope[name] = x;
    return eq.evaluate(subScope);
  };
}

var name$e = 'filter';
var dependencies$e = ['typed'];
var createFilterTransform = /* #__PURE__ */factory(name$e, dependencies$e, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */
  function filterTransform(args, math, scope) {
    var x, callback;
    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }
    if (args[1]) {
      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }
    return filter(x, callback);
  }
  filterTransform.rawArgs = true; // one based version of function filter

  var filter = typed('filter', {
    'Array, function': _filter,
    'Matrix, function': function MatrixFunction(x, test) {
      return x.create(_filter(x.toArray(), test));
    },
    'Array, RegExp': filterRegExp,
    'Matrix, RegExp': function MatrixRegExp(x, test) {
      return x.create(filterRegExp(x.toArray(), test));
    }
  });
  return filterTransform;
}, {
  isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

function _filter(x, callback) {
  // figure out what number of arguments the callback function expects
  var args = maxArgumentCount(callback);
  return filter$1(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index + 1]);
    } else {
      // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}

var name$d = 'forEach';
var dependencies$d = ['typed'];
var createForEachTransform = /* #__PURE__ */factory(name$d, dependencies$d, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function forEachTransform(args, math, scope) {
    var x, callback;
    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }
    if (args[1]) {
      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = compileInlineExpression(args[1], math, scope);
      }
    }
    return _forEach(x, callback);
  }
  forEachTransform.rawArgs = true; // one-based version of forEach

  var _forEach = typed('forEach', {
    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
      // figure out what number of arguments the callback function expects
      var args = maxArgumentCount(callback);
      var recurse = function recurse(value, index) {
        if (Array.isArray(value)) {
          forEach$1(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };
      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}, {
  isTransformFunction: true
});

var name$c = 'index';
var dependencies$c = ['Index'];
var createIndexTransform = /* #__PURE__ */factory(name$c, dependencies$c, function (_ref) {
  var Index = _ref.Index;

  /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  return function indexTransform() {
    var args = [];
    for (var i = 0, ii = arguments.length; i < ii; i++) {
      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

      if (isRange(arg)) {
        arg.start--;
        arg.end -= arg.step > 0 ? 0 : 2;
      } else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if (isArray(arg) || isMatrix(arg)) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if (isNumber(arg)) {
        arg--;
      } else if (isBigNumber(arg)) {
        arg = arg.toNumber() - 1;
      } else if (typeof arg === 'string') ; else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }
      args[i] = arg;
    }
    var res = new Index();
    Index.apply(res, args);
    return res;
  };
}, {
  isTransformFunction: true
});

var name$b = 'map';
var dependencies$b = ['typed'];
var createMapTransform = /* #__PURE__ */factory(name$b, dependencies$b, function (_ref) {
  var typed = _ref.typed;

  /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function mapTransform(args, math, scope) {
    var x, callback;
    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }
    if (args[1]) {
      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = compileInlineExpression(args[1], math, scope);
      }
    }
    return map(x, callback);
  }
  mapTransform.rawArgs = true; // one-based version of map function

  var map = typed('map', {
    'Array, function': function ArrayFunction(x, callback) {
      return _map(x, callback, x);
    },
    'Matrix, function': function MatrixFunction(x, callback) {
      return x.create(_map(x.valueOf(), callback, x));
    }
  });
  return mapTransform;
}, {
  isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */

function _map(array, callback, orig) {
  // figure out what number of arguments the callback function expects
  var argsCount = maxArgumentCount(callback);
  function recurse(value, index) {
    if (Array.isArray(value)) {
      return map$1(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    } else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      } else if (argsCount === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, orig);
      }
    }
  }
  return recurse(array, []);
}

var name$a = 'max';
var dependencies$a = ['typed', 'config', 'numeric', 'larger'];
var createMaxTransform = /* #__PURE__ */factory(name$a, dependencies$a, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    numeric = _ref.numeric,
    larger = _ref.larger;
  var max = createMax({
    typed: typed,
    config: config,
    numeric: numeric,
    larger: larger
  });
  /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */

  return typed('max', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return max.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$9 = 'mean';
var dependencies$9 = ['typed', 'add', 'divide'];
var createMeanTransform = /* #__PURE__ */factory(name$9, dependencies$9, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    divide = _ref.divide;
  var mean = createMean({
    typed: typed,
    add: add,
    divide: divide
  });
  /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */

  return typed('mean', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return mean.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$8 = 'min';
var dependencies$8 = ['typed', 'config', 'numeric', 'smaller'];
var createMinTransform = /* #__PURE__ */factory(name$8, dependencies$8, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    numeric = _ref.numeric,
    smaller = _ref.smaller;
  var min = createMin({
    typed: typed,
    config: config,
    numeric: numeric,
    smaller: smaller
  });
  /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */

  return typed('min', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return min.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$7 = 'range';
var dependencies$7 = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
var createRangeTransform = /* #__PURE__ */factory(name$7, dependencies$7, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    matrix = _ref.matrix,
    bignumber = _ref.bignumber,
    smaller = _ref.smaller,
    smallerEq = _ref.smallerEq,
    larger = _ref.larger,
    largerEq = _ref.largerEq;
  var range = createRange({
    typed: typed,
    config: config,
    matrix: matrix,
    bignumber: bignumber,
    smaller: smaller,
    smallerEq: smallerEq,
    larger: larger,
    largerEq: largerEq
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('range', {
    '...any': function any(args) {
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }
      return range.apply(null, args);
    }
  });
}, {
  isTransformFunction: true
});

var name$6 = 'row';
var dependencies$6 = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

var createRowTransform = /* #__PURE__ */factory(name$6, dependencies$6, function (_ref) {
  var typed = _ref.typed,
    Index = _ref.Index,
    matrix = _ref.matrix,
    range = _ref.range;
  var row = createRow({
    typed: typed,
    Index: Index,
    matrix: matrix,
    range: range
  }); // @see: comment of row itself

  return typed('row', {
    '...any': function any(args) {
      // change last argument from zero-based to one-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (isNumber(last)) {
        args[lastIndex] = last - 1;
      }
      try {
        return row.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$5 = 'subset';
var dependencies$5 = ['typed', 'matrix'];
var createSubsetTransform = /* #__PURE__ */factory(name$5, dependencies$5, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix;
  var subset = createSubset({
    typed: typed,
    matrix: matrix
  });
  /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('subset', {
    '...any': function any(args) {
      try {
        return subset.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$4 = 'concat';
var dependencies$4 = ['typed', 'matrix', 'isInteger'];
var createConcatTransform = /* #__PURE__ */factory(name$4, dependencies$4, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    isInteger = _ref.isInteger;
  var concat = createConcat({
    typed: typed,
    matrix: matrix,
    isInteger: isInteger
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */

  return typed('concat', {
    '...any': function any(args) {
      // change last argument from one-based to zero-based
      var lastIndex = args.length - 1;
      var last = args[lastIndex];
      if (isNumber(last)) {
        args[lastIndex] = last - 1;
      } else if (isBigNumber(last)) {
        args[lastIndex] = last.minus(1);
      }
      try {
        return concat.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$3 = 'diff';
var dependencies$3 = ['typed', 'matrix', 'subtract', 'number', 'bignumber'];
var createDiffTransform = /* #__PURE__ */factory(name$3, dependencies$3, function (_ref) {
  var typed = _ref.typed,
    matrix = _ref.matrix,
    subtract = _ref.subtract,
    number = _ref.number,
    bignumber = _ref.bignumber;
  var diff = createDiff({
    typed: typed,
    matrix: matrix,
    subtract: subtract,
    number: number,
    bignumber: bignumber
  });
  /**
   * Attach a transform function to math.diff
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed(name$3, {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return diff.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name$2 = 'std';
var dependencies$2 = ['typed', 'sqrt', 'variance'];
/**
 * Attach a transform function to math.std
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function std
 * from one-based to zero based
 */

var createStdTransform = /* #__PURE__ */factory(name$2, dependencies$2, function (_ref) {
  var typed = _ref.typed,
    sqrt = _ref.sqrt,
    variance = _ref.variance;
  var std = createStd({
    typed: typed,
    sqrt: sqrt,
    variance: variance
  });
  return typed('std', {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return std.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */

var name$1 = 'sum';
var dependencies$1 = ['typed', 'config', 'add', 'numeric'];
var createSumTransform = /* #__PURE__ */factory(name$1, dependencies$1, function (_ref) {
  var typed = _ref.typed,
    config = _ref.config,
    add = _ref.add,
    numeric = _ref.numeric;
  var sum = createSum({
    typed: typed,
    config: config,
    add: add,
    numeric: numeric
  });
  return typed(name$1, {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return sum.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var name = 'variance';
var dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
/**
 * Attach a transform function to math.var
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function var
 * from one-based to zero based
 */

var createVarianceTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {
  var typed = _ref.typed,
    add = _ref.add,
    subtract = _ref.subtract,
    multiply = _ref.multiply,
    divide = _ref.divide,
    apply = _ref.apply,
    isNaN = _ref.isNaN;
  var variance = createVariance({
    typed: typed,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    apply: apply,
    isNaN: isNaN
  });
  return typed(name, {
    '...any': function any(args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && isCollection(args[0])) {
        var dim = args[1];
        if (isNumber(dim)) {
          args[1] = dim - 1;
        } else if (isBigNumber(dim)) {
          args[1] = dim.minus(1);
        }
      }
      try {
        return variance.apply(null, args);
      } catch (err) {
        throw errorTransform(err);
      }
    }
  });
}, {
  isTransformFunction: true
});

var allFactories = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAbs: createAbs,
  createAccessorNode: createAccessorNode,
  createAcos: createAcos,
  createAcosh: createAcosh,
  createAcot: createAcot,
  createAcoth: createAcoth,
  createAcsc: createAcsc,
  createAcsch: createAcsch,
  createAdd: createAdd,
  createAddScalar: createAddScalar,
  createAnd: createAnd,
  createApply: createApply,
  createApplyTransform: createApplyTransform,
  createArg: createArg,
  createArrayNode: createArrayNode,
  createAsec: createAsec,
  createAsech: createAsech,
  createAsin: createAsin,
  createAsinh: createAsinh,
  createAssignmentNode: createAssignmentNode,
  createAtan: createAtan,
  createAtan2: createAtan2,
  createAtanh: createAtanh,
  createAtomicMass: createAtomicMass,
  createAvogadro: createAvogadro,
  createBellNumbers: createBellNumbers,
  createBigNumberClass: createBigNumberClass,
  createBignumber: createBignumber,
  createBin: createBin,
  createBitAnd: createBitAnd,
  createBitNot: createBitNot,
  createBitOr: createBitOr,
  createBitXor: createBitXor,
  createBlockNode: createBlockNode,
  createBohrMagneton: createBohrMagneton,
  createBohrRadius: createBohrRadius,
  createBoltzmann: createBoltzmann,
  createBoolean: createBoolean,
  createCatalan: createCatalan,
  createCbrt: createCbrt,
  createCeil: createCeil,
  createChain: createChain,
  createChainClass: createChainClass,
  createClassicalElectronRadius: createClassicalElectronRadius,
  createClone: createClone,
  createColumn: createColumn,
  createColumnTransform: createColumnTransform,
  createCombinations: createCombinations,
  createCombinationsWithRep: createCombinationsWithRep,
  createCompare: createCompare,
  createCompareNatural: createCompareNatural,
  createCompareText: createCompareText,
  createCompile: createCompile,
  createComplex: createComplex,
  createComplexClass: createComplexClass,
  createComposition: createComposition,
  createConcat: createConcat,
  createConcatTransform: createConcatTransform,
  createConditionalNode: createConditionalNode,
  createConductanceQuantum: createConductanceQuantum,
  createConj: createConj,
  createConstantNode: createConstantNode,
  createCos: createCos,
  createCosh: createCosh,
  createCot: createCot,
  createCoth: createCoth,
  createCoulomb: createCoulomb,
  createCreateUnit: createCreateUnit,
  createCross: createCross,
  createCsc: createCsc,
  createCsch: createCsch,
  createCtranspose: createCtranspose,
  createCube: createCube,
  createDeepEqual: createDeepEqual,
  createDenseMatrixClass: createDenseMatrixClass,
  createDerivative: createDerivative,
  createDet: createDet,
  createDeuteronMass: createDeuteronMass,
  createDiag: createDiag,
  createDiff: createDiff,
  createDiffTransform: createDiffTransform,
  createDistance: createDistance,
  createDivide: createDivide,
  createDivideScalar: createDivideScalar,
  createDot: createDot,
  createDotDivide: createDotDivide,
  createDotMultiply: createDotMultiply,
  createDotPow: createDotPow,
  createE: createE,
  createEfimovFactor: createEfimovFactor,
  createEigs: createEigs,
  createElectricConstant: createElectricConstant,
  createElectronMass: createElectronMass,
  createElementaryCharge: createElementaryCharge,
  createEqual: createEqual,
  createEqualScalar: createEqualScalar,
  createEqualText: createEqualText,
  createErf: createErf,
  createEvaluate: createEvaluate,
  createExp: createExp,
  createExpm: createExpm,
  createExpm1: createExpm1,
  createFactorial: createFactorial,
  createFalse: createFalse,
  createFaraday: createFaraday,
  createFermiCoupling: createFermiCoupling,
  createFibonacciHeapClass: createFibonacciHeapClass,
  createFilter: createFilter,
  createFilterTransform: createFilterTransform,
  createFineStructure: createFineStructure,
  createFirstRadiation: createFirstRadiation,
  createFix: createFix,
  createFlatten: createFlatten,
  createFloor: createFloor,
  createForEach: createForEach,
  createForEachTransform: createForEachTransform,
  createFormat: createFormat,
  createFraction: createFraction,
  createFractionClass: createFractionClass,
  createFunctionAssignmentNode: createFunctionAssignmentNode,
  createFunctionNode: createFunctionNode,
  createGamma: createGamma,
  createGasConstant: createGasConstant,
  createGcd: createGcd,
  createGetMatrixDataType: createGetMatrixDataType,
  createGravitationConstant: createGravitationConstant,
  createGravity: createGravity,
  createHartreeEnergy: createHartreeEnergy,
  createHasNumericValue: createHasNumericValue,
  createHelp: createHelp,
  createHelpClass: createHelpClass,
  createHex: createHex,
  createHypot: createHypot,
  createI: createI,
  createIdentity: createIdentity,
  createIm: createIm,
  createImmutableDenseMatrixClass: createImmutableDenseMatrixClass,
  createIndex: createIndex,
  createIndexClass: createIndexClass,
  createIndexNode: createIndexNode,
  createIndexTransform: createIndexTransform,
  createInfinity: createInfinity,
  createIntersect: createIntersect,
  createInv: createInv,
  createInverseConductanceQuantum: createInverseConductanceQuantum,
  createIsInteger: createIsInteger,
  createIsNaN: createIsNaN,
  createIsNegative: createIsNegative,
  createIsNumeric: createIsNumeric,
  createIsPositive: createIsPositive,
  createIsPrime: createIsPrime,
  createIsZero: createIsZero,
  createKldivergence: createKldivergence,
  createKlitzing: createKlitzing,
  createKron: createKron,
  createLN10: createLN10,
  createLN2: createLN2,
  createLOG10E: createLOG10E,
  createLOG2E: createLOG2E,
  createLarger: createLarger,
  createLargerEq: createLargerEq,
  createLcm: createLcm,
  createLeftShift: createLeftShift,
  createLog: createLog,
  createLog10: createLog10,
  createLog1p: createLog1p,
  createLog2: createLog2,
  createLoschmidt: createLoschmidt,
  createLsolve: createLsolve,
  createLsolveAll: createLsolveAll,
  createLup: createLup,
  createLusolve: createLusolve,
  createMad: createMad,
  createMagneticConstant: createMagneticConstant,
  createMagneticFluxQuantum: createMagneticFluxQuantum,
  createMap: createMap,
  createMapTransform: createMapTransform,
  createMatrix: createMatrix,
  createMatrixClass: createMatrixClass,
  createMax: createMax,
  createMaxTransform: createMaxTransform,
  createMean: createMean,
  createMeanTransform: createMeanTransform,
  createMedian: createMedian,
  createMin: createMin,
  createMinTransform: createMinTransform,
  createMod: createMod,
  createMode: createMode,
  createMolarMass: createMolarMass,
  createMolarMassC12: createMolarMassC12,
  createMolarPlanckConstant: createMolarPlanckConstant,
  createMolarVolume: createMolarVolume,
  createMultinomial: createMultinomial,
  createMultiply: createMultiply,
  createMultiplyScalar: createMultiplyScalar,
  createNaN: createNaN,
  createNeutronMass: createNeutronMass,
  createNode: createNode,
  createNorm: createNorm,
  createNot: createNot,
  createNthRoot: createNthRoot,
  createNthRoots: createNthRoots,
  createNuclearMagneton: createNuclearMagneton,
  createNull: createNull,
  createNumber: createNumber,
  createNumeric: createNumeric,
  createObjectNode: createObjectNode,
  createOct: createOct,
  createOnes: createOnes,
  createOperatorNode: createOperatorNode,
  createOr: createOr,
  createParenthesisNode: createParenthesisNode,
  createParse: createParse,
  createParser: createParser,
  createParserClass: createParserClass,
  createPartitionSelect: createPartitionSelect,
  createPermutations: createPermutations,
  createPhi: createPhi,
  createPi: createPi,
  createPickRandom: createPickRandom,
  createPlanckCharge: createPlanckCharge,
  createPlanckConstant: createPlanckConstant,
  createPlanckLength: createPlanckLength,
  createPlanckMass: createPlanckMass,
  createPlanckTemperature: createPlanckTemperature,
  createPlanckTime: createPlanckTime,
  createPow: createPow,
  createPrint: createPrint,
  createProd: createProd,
  createProtonMass: createProtonMass,
  createQr: createQr,
  createQuantileSeq: createQuantileSeq,
  createQuantumOfCirculation: createQuantumOfCirculation,
  createRandom: createRandom,
  createRandomInt: createRandomInt,
  createRange: createRange,
  createRangeClass: createRangeClass,
  createRangeNode: createRangeNode,
  createRangeTransform: createRangeTransform,
  createRationalize: createRationalize,
  createRe: createRe,
  createReducedPlanckConstant: createReducedPlanckConstant,
  createRelationalNode: createRelationalNode,
  createReplacer: createReplacer,
  createReshape: createReshape,
  createResize: createResize,
  createResultSet: createResultSet,
  createReviver: createReviver,
  createRightArithShift: createRightArithShift,
  createRightLogShift: createRightLogShift,
  createRotate: createRotate,
  createRotationMatrix: createRotationMatrix,
  createRound: createRound,
  createRow: createRow,
  createRowTransform: createRowTransform,
  createRydberg: createRydberg,
  createSQRT1_2: createSQRT1_2,
  createSQRT2: createSQRT2,
  createSackurTetrode: createSackurTetrode,
  createSec: createSec,
  createSech: createSech,
  createSecondRadiation: createSecondRadiation,
  createSetCartesian: createSetCartesian,
  createSetDifference: createSetDifference,
  createSetDistinct: createSetDistinct,
  createSetIntersect: createSetIntersect,
  createSetIsSubset: createSetIsSubset,
  createSetMultiplicity: createSetMultiplicity,
  createSetPowerset: createSetPowerset,
  createSetSize: createSetSize,
  createSetSymDifference: createSetSymDifference,
  createSetUnion: createSetUnion,
  createSign: createSign,
  createSimplify: createSimplify,
  createSin: createSin,
  createSinh: createSinh,
  createSize: createSize,
  createSlu: createSlu,
  createSmaller: createSmaller,
  createSmallerEq: createSmallerEq,
  createSort: createSort,
  createSpaClass: createSpaClass,
  createSparse: createSparse,
  createSparseMatrixClass: createSparseMatrixClass,
  createSpeedOfLight: createSpeedOfLight,
  createSplitUnit: createSplitUnit,
  createSqrt: createSqrt,
  createSqrtm: createSqrtm,
  createSquare: createSquare,
  createSqueeze: createSqueeze,
  createStd: createStd,
  createStdTransform: createStdTransform,
  createStefanBoltzmann: createStefanBoltzmann,
  createStirlingS2: createStirlingS2,
  createString: createString,
  createSubset: createSubset,
  createSubsetTransform: createSubsetTransform,
  createSubtract: createSubtract,
  createSum: createSum,
  createSumTransform: createSumTransform,
  createSymbolNode: createSymbolNode,
  createTan: createTan,
  createTanh: createTanh,
  createTau: createTau,
  createThomsonCrossSection: createThomsonCrossSection,
  createTo: createTo,
  createTrace: createTrace,
  createTranspose: createTranspose,
  createTrue: createTrue,
  createTypeOf: createTypeOf,
  createTyped: createTyped,
  createUnaryMinus: createUnaryMinus,
  createUnaryPlus: createUnaryPlus,
  createUnequal: createUnequal,
  createUnitClass: createUnitClass,
  createUnitFunction: createUnitFunction,
  createUppercaseE: createUppercaseE,
  createUppercasePi: createUppercasePi,
  createUsolve: createUsolve,
  createUsolveAll: createUsolveAll,
  createVacuumImpedance: createVacuumImpedance,
  createVariance: createVariance,
  createVarianceTransform: createVarianceTransform,
  createVersion: createVersion,
  createWeakMixingAngle: createWeakMixingAngle,
  createWienDisplacement: createWienDisplacement,
  createXgcd: createXgcd,
  createXor: createXor,
  createZeros: createZeros
});

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ResultSet = /* #__PURE__ */createResultSet({});
var Complex = /* #__PURE__ */createComplexClass({});
var Range = /* #__PURE__ */createRangeClass({});
var _false = /* #__PURE__ */createFalse({});
var _null = /* #__PURE__ */createNull({});
var _true = /* #__PURE__ */createTrue({});
var BigNumber = /* #__PURE__ */createBigNumberClass({
  config: config$1
});
var Matrix = /* #__PURE__ */createMatrixClass({});
var replacer = /* #__PURE__ */createReplacer({});
var i = /* #__PURE__ */createI({
  Complex: Complex
});
var LN10 = /* #__PURE__ */createLN10({
  BigNumber: BigNumber,
  config: config$1
});
var LOG10E = /* #__PURE__ */createLOG10E({
  BigNumber: BigNumber,
  config: config$1
});
var _NaN = /* #__PURE__ */createNaN({
  BigNumber: BigNumber,
  config: config$1
});
var pi = /* #__PURE__ */createPi({
  BigNumber: BigNumber,
  config: config$1
});
var SQRT1_2 = /* #__PURE__ */createSQRT1_2({
  BigNumber: BigNumber,
  config: config$1
});
var tau = /* #__PURE__ */createTau({
  BigNumber: BigNumber,
  config: config$1
});
var efimovFactor = /* #__PURE__ */createEfimovFactor({
  BigNumber: BigNumber,
  config: config$1
});
var fineStructure = /* #__PURE__ */createFineStructure({
  BigNumber: BigNumber,
  config: config$1
});
var sackurTetrode = /* #__PURE__ */createSackurTetrode({
  BigNumber: BigNumber,
  config: config$1
});
var weakMixingAngle = /* #__PURE__ */createWeakMixingAngle({
  BigNumber: BigNumber,
  config: config$1
});
var Fraction = /* #__PURE__ */createFractionClass({});
var e = /* #__PURE__ */createE({
  BigNumber: BigNumber,
  config: config$1
});
var _Infinity = /* #__PURE__ */createInfinity({
  BigNumber: BigNumber,
  config: config$1
});
var LOG2E = /* #__PURE__ */createLOG2E({
  BigNumber: BigNumber,
  config: config$1
});
var version = /* #__PURE__ */createVersion({});
var DenseMatrix = /* #__PURE__ */createDenseMatrixClass({
  Matrix: Matrix
});
var phi = /* #__PURE__ */createPhi({
  BigNumber: BigNumber,
  config: config$1
});
var typed = /* #__PURE__ */createTyped({
  BigNumber: BigNumber,
  Complex: Complex,
  DenseMatrix: DenseMatrix,
  Fraction: Fraction
});
var isInteger = /* #__PURE__ */createIsInteger({
  typed: typed
});
var isNumeric = /* #__PURE__ */createIsNumeric({
  typed: typed
});
var isPositive = /* #__PURE__ */createIsPositive({
  typed: typed
});
var isNaN$1 = /* #__PURE__ */createIsNaN({
  typed: typed
});
var equalScalar = /* #__PURE__ */createEqualScalar({
  config: config$1,
  typed: typed
});
var number = /* #__PURE__ */createNumber({
  typed: typed
});
var _boolean = /* #__PURE__ */createBoolean({
  typed: typed
});
var complex = /* #__PURE__ */createComplex({
  Complex: Complex,
  typed: typed
});
var splitUnit = /* #__PURE__ */createSplitUnit({
  typed: typed
});
var unaryPlus = /* #__PURE__ */createUnaryPlus({
  BigNumber: BigNumber,
  config: config$1,
  typed: typed
});
var apply = /* #__PURE__ */createApply({
  isInteger: isInteger,
  typed: typed
});
var cube = /* #__PURE__ */createCube({
  typed: typed
});
var expm1 = /* #__PURE__ */createExpm1({
  Complex: Complex,
  typed: typed
});
var log10 = /* #__PURE__ */createLog10({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var multiplyScalar = /* #__PURE__ */createMultiplyScalar({
  typed: typed
});
var sign = /* #__PURE__ */createSign({
  BigNumber: BigNumber,
  Fraction: Fraction,
  complex: complex,
  typed: typed
});
var square = /* #__PURE__ */createSquare({
  typed: typed
});
var bitNot = /* #__PURE__ */createBitNot({
  typed: typed
});
var arg = /* #__PURE__ */createArg({
  typed: typed
});
var im = /* #__PURE__ */createIm({
  typed: typed
});
var not = /* #__PURE__ */createNot({
  typed: typed
});
var filter = /* #__PURE__ */createFilter({
  typed: typed
});
var forEach = /* #__PURE__ */createForEach({
  typed: typed
});
var map = /* #__PURE__ */createMap({
  typed: typed
});
var erf = /* #__PURE__ */createErf({
  typed: typed
});
var format = /* #__PURE__ */createFormat({
  typed: typed
});
var oct = /* #__PURE__ */createOct({
  typed: typed
});
var print = /* #__PURE__ */createPrint({
  typed: typed
});
var isPrime = /* #__PURE__ */createIsPrime({
  typed: typed
});
var acos = /* #__PURE__ */createAcos({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var acot = /* #__PURE__ */createAcot({
  BigNumber: BigNumber,
  typed: typed
});
var acsc = /* #__PURE__ */createAcsc({
  BigNumber: BigNumber,
  Complex: Complex,
  config: config$1,
  typed: typed
});
var asec = /* #__PURE__ */createAsec({
  BigNumber: BigNumber,
  Complex: Complex,
  config: config$1,
  typed: typed
});
var asin = /* #__PURE__ */createAsin({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var atan = /* #__PURE__ */createAtan({
  typed: typed
});
var atanh = /* #__PURE__ */createAtanh({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var cosh = /* #__PURE__ */createCosh({
  typed: typed
});
var coth = /* #__PURE__ */createCoth({
  BigNumber: BigNumber,
  typed: typed
});
var csch = /* #__PURE__ */createCsch({
  BigNumber: BigNumber,
  typed: typed
});
var sech = /* #__PURE__ */createSech({
  BigNumber: BigNumber,
  typed: typed
});
var sinh = /* #__PURE__ */createSinh({
  typed: typed
});
var tanh = /* #__PURE__ */createTanh({
  typed: typed
});
var combinations = /* #__PURE__ */createCombinations({
  typed: typed
});
var pickRandom = /* #__PURE__ */createPickRandom({
  config: config$1,
  typed: typed
});
var randomInt = /* #__PURE__ */createRandomInt({
  config: config$1,
  typed: typed
});
var LN2 = /* #__PURE__ */createLN2({
  BigNumber: BigNumber,
  config: config$1
});
var clone = /* #__PURE__ */createClone({
  typed: typed
});
var hasNumericValue = /* #__PURE__ */createHasNumericValue({
  isNumeric: isNumeric,
  typed: typed
});
var typeOf = /* #__PURE__ */createTypeOf({
  typed: typed
});
var string = /* #__PURE__ */createString({
  typed: typed
});
var fraction = /* #__PURE__ */createFraction({
  Fraction: Fraction,
  typed: typed
});
var unaryMinus = /* #__PURE__ */createUnaryMinus({
  typed: typed
});
var addScalar = /* #__PURE__ */createAddScalar({
  typed: typed
});
var exp = /* #__PURE__ */createExp({
  typed: typed
});
var log2 = /* #__PURE__ */createLog2({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var sqrt = /* #__PURE__ */createSqrt({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var conj = /* #__PURE__ */createConj({
  typed: typed
});
var getMatrixDataType = /* #__PURE__ */createGetMatrixDataType({
  typed: typed
});
var mode = /* #__PURE__ */createMode({
  isNaN: isNaN$1,
  isNumeric: isNumeric,
  typed: typed
});
var bin = /* #__PURE__ */createBin({
  typed: typed
});
var acosh = /* #__PURE__ */createAcosh({
  Complex: Complex,
  config: config$1,
  typed: typed
});
var acsch = /* #__PURE__ */createAcsch({
  BigNumber: BigNumber,
  typed: typed
});
var asinh = /* #__PURE__ */createAsinh({
  typed: typed
});
var cos = /* #__PURE__ */createCos({
  typed: typed
});
var csc = /* #__PURE__ */createCsc({
  BigNumber: BigNumber,
  typed: typed
});
var sin = /* #__PURE__ */createSin({
  typed: typed
});
var combinationsWithRep = /* #__PURE__ */createCombinationsWithRep({
  typed: typed
});
var random = /* #__PURE__ */createRandom({
  config: config$1,
  typed: typed
});
var SQRT2 = /* #__PURE__ */createSQRT2({
  BigNumber: BigNumber,
  config: config$1
});
var isNegative = /* #__PURE__ */createIsNegative({
  typed: typed
});
var SparseMatrix = /* #__PURE__ */createSparseMatrixClass({
  Matrix: Matrix,
  equalScalar: equalScalar,
  typed: typed
});
var matrix = /* #__PURE__ */createMatrix({
  DenseMatrix: DenseMatrix,
  Matrix: Matrix,
  SparseMatrix: SparseMatrix,
  typed: typed
});
var cbrt = /* #__PURE__ */createCbrt({
  BigNumber: BigNumber,
  Complex: Complex,
  Fraction: Fraction,
  config: config$1,
  isNegative: isNegative,
  matrix: matrix,
  typed: typed,
  unaryMinus: unaryMinus
});
var gcd = /* #__PURE__ */createGcd({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var mod = /* #__PURE__ */createMod({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var nthRoot = /* #__PURE__ */createNthRoot({
  BigNumber: BigNumber,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var xgcd = /* #__PURE__ */createXgcd({
  BigNumber: BigNumber,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var bitAnd = /* #__PURE__ */createBitAnd({
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var bitXor = /* #__PURE__ */createBitXor({
  DenseMatrix: DenseMatrix,
  matrix: matrix,
  typed: typed
});
var or = /* #__PURE__ */createOr({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var concat = /* #__PURE__ */createConcat({
  isInteger: isInteger,
  matrix: matrix,
  typed: typed
});
var diag = /* #__PURE__ */createDiag({
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  matrix: matrix,
  typed: typed
});
var identity = /* #__PURE__ */createIdentity({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var ones = /* #__PURE__ */createOnes({
  BigNumber: BigNumber,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var reshape = /* #__PURE__ */createReshape({
  isInteger: isInteger,
  matrix: matrix,
  typed: typed
});
var size = /* #__PURE__ */createSize({
  matrix: matrix,
  config: config$1,
  typed: typed
});
var subset = /* #__PURE__ */createSubset({
  matrix: matrix,
  typed: typed
});
var zeros = /* #__PURE__ */createZeros({
  BigNumber: BigNumber,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var hex = /* #__PURE__ */createHex({
  typed: typed
});
var round = /* #__PURE__ */createRound({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
var leftShift = /* #__PURE__ */createLeftShift({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
var rightLogShift = /* #__PURE__ */createRightLogShift({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
var compare = /* #__PURE__ */createCompare({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  Fraction: Fraction,
  config: config$1,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var compareText = /* #__PURE__ */createCompareText({
  matrix: matrix,
  typed: typed
});
var smaller = /* #__PURE__ */createSmaller({
  DenseMatrix: DenseMatrix,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var larger = /* #__PURE__ */createLarger({
  DenseMatrix: DenseMatrix,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var unequal = /* #__PURE__ */createUnequal({
  DenseMatrix: DenseMatrix,
  config: config$1,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var ImmutableDenseMatrix = /* #__PURE__ */createImmutableDenseMatrixClass({
  DenseMatrix: DenseMatrix,
  smaller: smaller
});
var FibonacciHeap = /* #__PURE__ */createFibonacciHeapClass({
  larger: larger,
  smaller: smaller
});
var sparse = /* #__PURE__ */createSparse({
  SparseMatrix: SparseMatrix,
  typed: typed
});
var acoth = /* #__PURE__ */createAcoth({
  BigNumber: BigNumber,
  Complex: Complex,
  config: config$1,
  typed: typed
});
var atan2 = /* #__PURE__ */createAtan2({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var sec = /* #__PURE__ */createSec({
  BigNumber: BigNumber,
  typed: typed
});
var add = /* #__PURE__ */createAdd({
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  addScalar: addScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var dot = /* #__PURE__ */createDot({
  addScalar: addScalar,
  conj: conj,
  multiplyScalar: multiplyScalar,
  size: size,
  typed: typed
});
var composition = /* #__PURE__ */createComposition({
  addScalar: addScalar,
  combinations: combinations,
  isInteger: isInteger,
  isNegative: isNegative,
  isPositive: isPositive,
  larger: larger,
  typed: typed
});
var isZero = /* #__PURE__ */createIsZero({
  typed: typed
});
var abs = /* #__PURE__ */createAbs({
  typed: typed
});
var floor = /* #__PURE__ */createFloor({
  config: config$1,
  equalScalar: equalScalar,
  matrix: matrix,
  round: round,
  typed: typed
});
var multiply = /* #__PURE__ */createMultiply({
  addScalar: addScalar,
  dot: dot,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
var dotMultiply = /* #__PURE__ */createDotMultiply({
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
var re = /* #__PURE__ */createRe({
  typed: typed
});
var flatten = /* #__PURE__ */createFlatten({
  matrix: matrix,
  typed: typed
});
var resize = /* #__PURE__ */createResize({
  config: config$1,
  matrix: matrix
});
var squeeze = /* #__PURE__ */createSqueeze({
  matrix: matrix,
  typed: typed
});
var to = /* #__PURE__ */createTo({
  matrix: matrix,
  typed: typed
});
var pow = /* #__PURE__ */createPow({
  Complex: Complex,
  config: config$1,
  fraction: fraction,
  identity: identity,
  matrix: matrix,
  multiply: multiply,
  number: number,
  typed: typed
});
var dotPow = /* #__PURE__ */createDotPow({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  pow: pow,
  typed: typed
});
var rightArithShift = /* #__PURE__ */createRightArithShift({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  zeros: zeros
});
var compareNatural = /* #__PURE__ */createCompareNatural({
  compare: compare,
  typed: typed
});
var equalText = /* #__PURE__ */createEqualText({
  compareText: compareText,
  isZero: isZero,
  typed: typed
});
var largerEq = /* #__PURE__ */createLargerEq({
  DenseMatrix: DenseMatrix,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var partitionSelect = /* #__PURE__ */createPartitionSelect({
  compare: compare,
  isNaN: isNaN$1,
  isNumeric: isNumeric,
  typed: typed
});
var Index = /* #__PURE__ */createIndexClass({
  ImmutableDenseMatrix: ImmutableDenseMatrix
});
var asech = /* #__PURE__ */createAsech({
  BigNumber: BigNumber,
  Complex: Complex,
  config: config$1,
  typed: typed
});
var tan = /* #__PURE__ */createTan({
  typed: typed
});
var setDifference = /* #__PURE__ */createSetDifference({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var setIntersect = /* #__PURE__ */createSetIntersect({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var setMultiplicity = /* #__PURE__ */createSetMultiplicity({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var setSize = /* #__PURE__ */createSetSize({
  compareNatural: compareNatural,
  typed: typed
});
var trace = /* #__PURE__ */createTrace({
  add: add,
  matrix: matrix,
  typed: typed
});
var quantileSeq = /* #__PURE__ */createQuantileSeq({
  add: add,
  compare: compare,
  multiply: multiply,
  partitionSelect: partitionSelect,
  typed: typed
});
var gamma = /* #__PURE__ */createGamma({
  BigNumber: BigNumber,
  Complex: Complex,
  config: config$1,
  multiplyScalar: multiplyScalar,
  pow: pow,
  typed: typed
});
var bignumber = /* #__PURE__ */createBignumber({
  BigNumber: BigNumber,
  typed: typed
});
var lcm = /* #__PURE__ */createLcm({
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var bitOr = /* #__PURE__ */createBitOr({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var kron = /* #__PURE__ */createKron({
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  typed: typed
});
var transpose = /* #__PURE__ */createTranspose({
  matrix: matrix,
  typed: typed
});
var numeric = /* #__PURE__ */createNumeric({
  bignumber: bignumber,
  fraction: fraction,
  number: number
});
var and = /* #__PURE__ */createAnd({
  equalScalar: equalScalar,
  matrix: matrix,
  not: not,
  typed: typed,
  zeros: zeros
});
var smallerEq = /* #__PURE__ */createSmallerEq({
  DenseMatrix: DenseMatrix,
  config: config$1,
  matrix: matrix,
  typed: typed
});
var sort = /* #__PURE__ */createSort({
  compare: compare,
  compareNatural: compareNatural,
  matrix: matrix,
  typed: typed
});
var min = /* #__PURE__ */createMin({
  config: config$1,
  numeric: numeric,
  smaller: smaller,
  typed: typed
});
var cot = /* #__PURE__ */createCot({
  BigNumber: BigNumber,
  typed: typed
});
var setDistinct = /* #__PURE__ */createSetDistinct({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var setPowerset = /* #__PURE__ */createSetPowerset({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var index$1 = /* #__PURE__ */createIndex({
  Index: Index,
  typed: typed
});
var sum = /* #__PURE__ */createSum({
  add: add,
  config: config$1,
  numeric: numeric,
  typed: typed
});
var factorial = /* #__PURE__ */createFactorial({
  gamma: gamma,
  typed: typed
});
var permutations = /* #__PURE__ */createPermutations({
  factorial: factorial,
  typed: typed
});
var ceil = /* #__PURE__ */createCeil({
  config: config$1,
  equalScalar: equalScalar,
  matrix: matrix,
  round: round,
  typed: typed
});
var subtract = /* #__PURE__ */createSubtract({
  DenseMatrix: DenseMatrix,
  addScalar: addScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed,
  unaryMinus: unaryMinus
});
var cross$1 = /* #__PURE__ */createCross({
  matrix: matrix,
  multiply: multiply,
  subtract: subtract,
  typed: typed
});
var range = /* #__PURE__ */createRange({
  bignumber: bignumber,
  matrix: matrix,
  config: config$1,
  larger: larger,
  largerEq: largerEq,
  smaller: smaller,
  smallerEq: smallerEq,
  typed: typed
});
var row = /* #__PURE__ */createRow({
  Index: Index,
  matrix: matrix,
  range: range,
  typed: typed
});
var prod = /* #__PURE__ */createProd({
  config: config$1,
  multiplyScalar: multiplyScalar,
  numeric: numeric,
  typed: typed
});
var equal = /* #__PURE__ */createEqual({
  DenseMatrix: DenseMatrix,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var max = /* #__PURE__ */createMax({
  config: config$1,
  larger: larger,
  numeric: numeric,
  typed: typed
});
var setCartesian = /* #__PURE__ */createSetCartesian({
  DenseMatrix: DenseMatrix,
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var setSymDifference = /* #__PURE__ */createSetSymDifference({
  Index: Index,
  concat: concat,
  setDifference: setDifference,
  size: size,
  subset: subset,
  typed: typed
});
var fix = /* #__PURE__ */createFix({
  Complex: Complex,
  ceil: ceil,
  floor: floor,
  matrix: matrix,
  typed: typed
});
var column = /* #__PURE__ */createColumn({
  Index: Index,
  matrix: matrix,
  range: range,
  typed: typed
});
var ctranspose = /* #__PURE__ */createCtranspose({
  conj: conj,
  transpose: transpose,
  typed: typed
});
var deepEqual = /* #__PURE__ */createDeepEqual({
  equal: equal,
  typed: typed
});
var setIsSubset = /* #__PURE__ */createSetIsSubset({
  Index: Index,
  compareNatural: compareNatural,
  size: size,
  subset: subset,
  typed: typed
});
var xor = /* #__PURE__ */createXor({
  DenseMatrix: DenseMatrix,
  matrix: matrix,
  typed: typed
});
var divideScalar = /* #__PURE__ */createDivideScalar({
  numeric: numeric,
  typed: typed
});
var nthRoots = /* #__PURE__ */createNthRoots({
  Complex: Complex,
  config: config$1,
  divideScalar: divideScalar,
  typed: typed
});
var lsolve = /* #__PURE__ */createLsolve({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
var lsolveAll = /* #__PURE__ */createLsolveAll({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
var Spa = /* #__PURE__ */createSpaClass({
  FibonacciHeap: FibonacciHeap,
  addScalar: addScalar,
  equalScalar: equalScalar
});
var setUnion = /* #__PURE__ */createSetUnion({
  Index: Index,
  concat: concat,
  setIntersect: setIntersect,
  setSymDifference: setSymDifference,
  size: size,
  subset: subset,
  typed: typed
});
var lup = /* #__PURE__ */createLup({
  DenseMatrix: DenseMatrix,
  Spa: Spa,
  SparseMatrix: SparseMatrix,
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  larger: larger,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
var slu = /* #__PURE__ */createSlu({
  SparseMatrix: SparseMatrix,
  abs: abs,
  add: add,
  divideScalar: divideScalar,
  larger: larger,
  largerEq: largerEq,
  multiply: multiply,
  subtract: subtract,
  transpose: transpose,
  typed: typed
});
var det = /* #__PURE__ */createDet({
  lup: lup,
  matrix: matrix,
  multiply: multiply,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
var distance = /* #__PURE__ */createDistance({
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  multiplyScalar: multiplyScalar,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus
});
var stirlingS2 = /* #__PURE__ */createStirlingS2({
  addScalar: addScalar,
  combinations: combinations,
  divideScalar: divideScalar,
  factorial: factorial,
  isInteger: isInteger,
  isNegative: isNegative,
  larger: larger,
  multiplyScalar: multiplyScalar,
  pow: pow,
  subtract: subtract,
  typed: typed
});
var catalan = /* #__PURE__ */createCatalan({
  addScalar: addScalar,
  combinations: combinations,
  divideScalar: divideScalar,
  isInteger: isInteger,
  isNegative: isNegative,
  multiplyScalar: multiplyScalar,
  typed: typed
});
var diff = /* #__PURE__ */createDiff({
  matrix: matrix,
  number: number,
  subtract: subtract,
  typed: typed
});
var log = /* #__PURE__ */createLog({
  Complex: Complex,
  config: config$1,
  divideScalar: divideScalar,
  typed: typed
});
var dotDivide = /* #__PURE__ */createDotDivide({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  typed: typed
});
var usolveAll = /* #__PURE__ */createUsolveAll({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
var hypot = /* #__PURE__ */createHypot({
  abs: abs,
  addScalar: addScalar,
  divideScalar: divideScalar,
  isPositive: isPositive,
  multiplyScalar: multiplyScalar,
  smaller: smaller,
  sqrt: sqrt,
  typed: typed
});
var qr = /* #__PURE__ */createQr({
  addScalar: addScalar,
  complex: complex,
  conj: conj,
  divideScalar: divideScalar,
  equal: equal,
  identity: identity,
  isZero: isZero,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  sign: sign,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed,
  unaryMinus: unaryMinus,
  zeros: zeros
});
var inv = /* #__PURE__ */createInv({
  abs: abs,
  addScalar: addScalar,
  det: det,
  divideScalar: divideScalar,
  identity: identity,
  matrix: matrix,
  multiply: multiply,
  typed: typed,
  unaryMinus: unaryMinus
});
var expm = /* #__PURE__ */createExpm({
  abs: abs,
  add: add,
  identity: identity,
  inv: inv,
  multiply: multiply,
  typed: typed
});
var divide = /* #__PURE__ */createDivide({
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  inv: inv,
  matrix: matrix,
  multiply: multiply,
  typed: typed
});
var mean = /* #__PURE__ */createMean({
  add: add,
  divide: divide,
  typed: typed
});
var variance = /* #__PURE__ */createVariance({
  add: add,
  apply: apply,
  divide: divide,
  isNaN: isNaN$1,
  multiply: multiply,
  subtract: subtract,
  typed: typed
});
var kldivergence = /* #__PURE__ */createKldivergence({
  divide: divide,
  dotDivide: dotDivide,
  isNumeric: isNumeric,
  log: log,
  matrix: matrix,
  multiply: multiply,
  sum: sum,
  typed: typed
});
var bellNumbers = /* #__PURE__ */createBellNumbers({
  addScalar: addScalar,
  isInteger: isInteger,
  isNegative: isNegative,
  stirlingS2: stirlingS2,
  typed: typed
});
var log1p = /* #__PURE__ */createLog1p({
  Complex: Complex,
  config: config$1,
  divideScalar: divideScalar,
  log: log,
  typed: typed
});
var Unit = /* #__PURE__ */createUnitClass({
  BigNumber: BigNumber,
  Complex: Complex,
  Fraction: Fraction,
  abs: abs,
  addScalar: addScalar,
  config: config$1,
  divideScalar: divideScalar,
  equal: equal,
  fix: fix,
  format: format,
  isNumeric: isNumeric,
  multiplyScalar: multiplyScalar,
  number: number,
  pow: pow,
  round: round,
  subtract: subtract
});
var createUnit = /* #__PURE__ */createCreateUnit({
  Unit: Unit,
  typed: typed
});
var eigs = /* #__PURE__ */createEigs({
  abs: abs,
  add: add,
  addScalar: addScalar,
  atan: atan,
  bignumber: bignumber,
  config: config$1,
  cos: cos,
  equal: equal,
  inv: inv,
  matrix: matrix,
  multiply: multiply,
  multiplyScalar: multiplyScalar,
  sin: sin,
  subtract: subtract,
  typed: typed
});
var intersect = /* #__PURE__ */createIntersect({
  abs: abs,
  add: add,
  addScalar: addScalar,
  config: config$1,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiply: multiply,
  multiplyScalar: multiplyScalar,
  smaller: smaller,
  subtract: subtract,
  typed: typed
});
var std = /* #__PURE__ */createStd({
  sqrt: sqrt,
  typed: typed,
  variance: variance
});
var atomicMass = /* #__PURE__ */createAtomicMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var bohrMagneton = /* #__PURE__ */createBohrMagneton({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var boltzmann = /* #__PURE__ */createBoltzmann({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var conductanceQuantum = /* #__PURE__ */createConductanceQuantum({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var deuteronMass = /* #__PURE__ */createDeuteronMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var electronMass = /* #__PURE__ */createElectronMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var faraday = /* #__PURE__ */createFaraday({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var firstRadiation = /* #__PURE__ */createFirstRadiation({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var gravitationConstant = /* #__PURE__ */createGravitationConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var hartreeEnergy = /* #__PURE__ */createHartreeEnergy({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var klitzing = /* #__PURE__ */createKlitzing({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var magneticConstant = /* #__PURE__ */createMagneticConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var molarMass = /* #__PURE__ */createMolarMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var molarPlanckConstant = /* #__PURE__ */createMolarPlanckConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var neutronMass = /* #__PURE__ */createNeutronMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckCharge = /* #__PURE__ */createPlanckCharge({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckLength = /* #__PURE__ */createPlanckLength({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckTemperature = /* #__PURE__ */createPlanckTemperature({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var protonMass = /* #__PURE__ */createProtonMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var reducedPlanckConstant = /* #__PURE__ */createReducedPlanckConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var secondRadiation = /* #__PURE__ */createSecondRadiation({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var stefanBoltzmann = /* #__PURE__ */createStefanBoltzmann({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var vacuumImpedance = /* #__PURE__ */createVacuumImpedance({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var usolve = /* #__PURE__ */createUsolve({
  DenseMatrix: DenseMatrix,
  divideScalar: divideScalar,
  equalScalar: equalScalar,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  subtract: subtract,
  typed: typed
});
var norm$1 = /* #__PURE__ */createNorm({
  abs: abs,
  add: add,
  conj: conj,
  ctranspose: ctranspose,
  eigs: eigs,
  equalScalar: equalScalar,
  larger: larger,
  matrix: matrix,
  multiply: multiply,
  pow: pow,
  smaller: smaller,
  sqrt: sqrt,
  typed: typed
});
var lusolve = /* #__PURE__ */createLusolve({
  DenseMatrix: DenseMatrix,
  lsolve: lsolve,
  lup: lup,
  matrix: matrix,
  slu: slu,
  typed: typed,
  usolve: usolve
});
var sqrtm = /* #__PURE__ */createSqrtm({
  abs: abs,
  add: add,
  identity: identity,
  inv: inv,
  max: max,
  multiply: multiply,
  size: size,
  sqrt: sqrt,
  subtract: subtract,
  typed: typed
});
var multinomial = /* #__PURE__ */createMultinomial({
  add: add,
  divide: divide,
  factorial: factorial,
  isInteger: isInteger,
  isPositive: isPositive,
  multiply: multiply,
  typed: typed
});
var avogadro = /* #__PURE__ */createAvogadro({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var classicalElectronRadius = /* #__PURE__ */createClassicalElectronRadius({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var electricConstant = /* #__PURE__ */createElectricConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var fermiCoupling = /* #__PURE__ */createFermiCoupling({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var gravity = /* #__PURE__ */createGravity({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var loschmidt = /* #__PURE__ */createLoschmidt({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var molarMassC12 = /* #__PURE__ */createMolarMassC12({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var nuclearMagneton = /* #__PURE__ */createNuclearMagneton({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckMass = /* #__PURE__ */createPlanckMass({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var quantumOfCirculation = /* #__PURE__ */createQuantumOfCirculation({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var speedOfLight = /* #__PURE__ */createSpeedOfLight({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var wienDisplacement = /* #__PURE__ */createWienDisplacement({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var rotationMatrix = /* #__PURE__ */createRotationMatrix({
  BigNumber: BigNumber,
  DenseMatrix: DenseMatrix,
  SparseMatrix: SparseMatrix,
  addScalar: addScalar,
  config: config$1,
  cos: cos,
  matrix: matrix,
  multiplyScalar: multiplyScalar,
  norm: norm$1,
  sin: sin,
  typed: typed,
  unaryMinus: unaryMinus
});
var median = /* #__PURE__ */createMedian({
  add: add,
  compare: compare,
  divide: divide,
  partitionSelect: partitionSelect,
  typed: typed
});
var bohrRadius = /* #__PURE__ */createBohrRadius({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var elementaryCharge = /* #__PURE__ */createElementaryCharge({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var inverseConductanceQuantum = /* #__PURE__ */createInverseConductanceQuantum({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var molarVolume = /* #__PURE__ */createMolarVolume({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckTime = /* #__PURE__ */createPlanckTime({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var thomsonCrossSection = /* #__PURE__ */createThomsonCrossSection({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var rotate = /* #__PURE__ */createRotate({
  multiply: multiply,
  rotationMatrix: rotationMatrix,
  typed: typed
});
var mad = /* #__PURE__ */createMad({
  abs: abs,
  map: map,
  median: median,
  subtract: subtract,
  typed: typed
});
var coulomb = /* #__PURE__ */createCoulomb({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var magneticFluxQuantum = /* #__PURE__ */createMagneticFluxQuantum({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var rydberg = /* #__PURE__ */createRydberg({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var unit$1 = /* #__PURE__ */createUnitFunction({
  Unit: Unit,
  typed: typed
});
var gasConstant = /* #__PURE__ */createGasConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});
var planckConstant = /* #__PURE__ */createPlanckConstant({
  BigNumber: BigNumber,
  Unit: Unit,
  config: config$1
});

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var math = {}; // NOT pure!

var mathWithTransform = {}; // NOT pure!

var classes = {}; // NOT pure!

var Node = createNode({
  mathWithTransform: mathWithTransform
});
var ArrayNode = createArrayNode({
  Node: Node
});
var BlockNode = createBlockNode({
  Node: Node,
  ResultSet: ResultSet
});
var ConstantNode = createConstantNode({
  Node: Node
});
var ObjectNode = createObjectNode({
  Node: Node
});
var ParenthesisNode = createParenthesisNode({
  Node: Node
});
var RelationalNode = createRelationalNode({
  Node: Node
});
var Chain = createChainClass({
  math: math
});
var reviver = createReviver({
  classes: classes
});
var ConditionalNode = createConditionalNode({
  Node: Node
});
var OperatorNode = createOperatorNode({
  Node: Node
});
var RangeNode = createRangeNode({
  Node: Node
});
var FunctionAssignmentNode = createFunctionAssignmentNode({
  Node: Node,
  typed: typed
});
var chain = createChain({
  Chain: Chain,
  typed: typed
});
var AccessorNode = createAccessorNode({
  Node: Node,
  subset: subset
});
var IndexNode = createIndexNode({
  Node: Node,
  Range: Range,
  size: size
});
var AssignmentNode = createAssignmentNode({
  matrix: matrix,
  Node: Node,
  subset: subset
});
var SymbolNode = createSymbolNode({
  Unit: Unit,
  Node: Node,
  math: math
});
var FunctionNode = createFunctionNode({
  Node: Node,
  SymbolNode: SymbolNode,
  math: math
});
var parse = createParse({
  AccessorNode: AccessorNode,
  ArrayNode: ArrayNode,
  AssignmentNode: AssignmentNode,
  BlockNode: BlockNode,
  ConditionalNode: ConditionalNode,
  ConstantNode: ConstantNode,
  FunctionAssignmentNode: FunctionAssignmentNode,
  FunctionNode: FunctionNode,
  IndexNode: IndexNode,
  ObjectNode: ObjectNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  RangeNode: RangeNode,
  RelationalNode: RelationalNode,
  SymbolNode: SymbolNode,
  config: config$1,
  numeric: numeric,
  typed: typed
});
var evaluate = createEvaluate({
  parse: parse,
  typed: typed
});
var Help = createHelpClass({
  parse: parse
});
var Parser = createParserClass({
  parse: parse
});
var help = createHelp({
  Help: Help,
  mathWithTransform: mathWithTransform,
  typed: typed
});
var compile = createCompile({
  parse: parse,
  typed: typed
});
var simplify = createSimplify({
  bignumber: bignumber,
  fraction: fraction,
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  add: add,
  config: config$1,
  divide: divide,
  equal: equal,
  isZero: isZero,
  mathWithTransform: mathWithTransform,
  multiply: multiply,
  parse: parse,
  pow: pow,
  subtract: subtract,
  typed: typed
});
var rationalize = createRationalize({
  bignumber: bignumber,
  fraction: fraction,
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  add: add,
  config: config$1,
  divide: divide,
  equal: equal,
  isZero: isZero,
  mathWithTransform: mathWithTransform,
  multiply: multiply,
  parse: parse,
  pow: pow,
  simplify: simplify,
  subtract: subtract,
  typed: typed
});
var parser$1 = createParser({
  Parser: Parser,
  typed: typed
});
var derivative = createDerivative({
  ConstantNode: ConstantNode,
  FunctionNode: FunctionNode,
  OperatorNode: OperatorNode,
  ParenthesisNode: ParenthesisNode,
  SymbolNode: SymbolNode,
  config: config$1,
  equal: equal,
  isZero: isZero,
  numeric: numeric,
  parse: parse,
  simplify: simplify,
  typed: typed
});
_extends$1(math, {
  reviver: reviver,
  "false": _false,
  "null": _null,
  "true": _true,
  replacer: replacer,
  i: i,
  LN10: LN10,
  LOG10E: LOG10E,
  NaN: _NaN,
  pi: pi,
  SQRT1_2: SQRT1_2,
  tau: tau,
  efimovFactor: efimovFactor,
  fineStructure: fineStructure,
  sackurTetrode: sackurTetrode,
  weakMixingAngle: weakMixingAngle,
  e: e,
  Infinity: _Infinity,
  LOG2E: LOG2E,
  'PI': pi,
  version: version,
  'E': e,
  phi: phi,
  typed: typed,
  isInteger: isInteger,
  isNumeric: isNumeric,
  isPositive: isPositive,
  isNaN: isNaN$1,
  equalScalar: equalScalar,
  number: number,
  "boolean": _boolean,
  complex: complex,
  splitUnit: splitUnit,
  unaryPlus: unaryPlus,
  apply: apply,
  cube: cube,
  expm1: expm1,
  log10: log10,
  multiplyScalar: multiplyScalar,
  sign: sign,
  square: square,
  bitNot: bitNot,
  arg: arg,
  im: im,
  not: not,
  filter: filter,
  forEach: forEach,
  map: map,
  erf: erf,
  format: format,
  oct: oct,
  print: print,
  isPrime: isPrime,
  acos: acos,
  acot: acot,
  acsc: acsc,
  asec: asec,
  asin: asin,
  atan: atan,
  atanh: atanh,
  cosh: cosh,
  coth: coth,
  csch: csch,
  sech: sech,
  sinh: sinh,
  tanh: tanh,
  chain: chain,
  combinations: combinations,
  pickRandom: pickRandom,
  randomInt: randomInt,
  LN2: LN2,
  clone: clone,
  hasNumericValue: hasNumericValue,
  typeOf: typeOf,
  string: string,
  fraction: fraction,
  unaryMinus: unaryMinus,
  addScalar: addScalar,
  exp: exp,
  log2: log2,
  sqrt: sqrt,
  conj: conj,
  getMatrixDataType: getMatrixDataType,
  mode: mode,
  bin: bin,
  acosh: acosh,
  acsch: acsch,
  asinh: asinh,
  cos: cos,
  csc: csc,
  sin: sin,
  combinationsWithRep: combinationsWithRep,
  random: random,
  SQRT2: SQRT2,
  isNegative: isNegative,
  matrix: matrix,
  cbrt: cbrt,
  gcd: gcd,
  mod: mod,
  nthRoot: nthRoot,
  xgcd: xgcd,
  bitAnd: bitAnd,
  bitXor: bitXor,
  or: or,
  concat: concat,
  diag: diag,
  identity: identity,
  ones: ones,
  reshape: reshape,
  size: size,
  subset: subset,
  zeros: zeros,
  hex: hex,
  round: round,
  leftShift: leftShift,
  rightLogShift: rightLogShift,
  compare: compare,
  compareText: compareText,
  smaller: smaller,
  larger: larger,
  unequal: unequal,
  sparse: sparse,
  acoth: acoth,
  atan2: atan2,
  sec: sec,
  add: add,
  dot: dot,
  composition: composition,
  isZero: isZero,
  abs: abs,
  floor: floor,
  multiply: multiply,
  dotMultiply: dotMultiply,
  re: re,
  flatten: flatten,
  resize: resize,
  squeeze: squeeze,
  to: to,
  pow: pow,
  dotPow: dotPow,
  rightArithShift: rightArithShift,
  compareNatural: compareNatural,
  equalText: equalText,
  largerEq: largerEq,
  partitionSelect: partitionSelect,
  asech: asech,
  tan: tan,
  setDifference: setDifference,
  setIntersect: setIntersect,
  setMultiplicity: setMultiplicity,
  setSize: setSize,
  trace: trace,
  quantileSeq: quantileSeq,
  gamma: gamma,
  bignumber: bignumber,
  lcm: lcm,
  bitOr: bitOr,
  kron: kron,
  transpose: transpose,
  numeric: numeric,
  and: and,
  smallerEq: smallerEq,
  sort: sort,
  min: min,
  cot: cot,
  setDistinct: setDistinct,
  setPowerset: setPowerset,
  index: index$1,
  sum: sum,
  factorial: factorial,
  permutations: permutations,
  ceil: ceil,
  subtract: subtract,
  cross: cross$1,
  range: range,
  row: row,
  prod: prod,
  equal: equal,
  max: max,
  setCartesian: setCartesian,
  setSymDifference: setSymDifference,
  fix: fix,
  column: column,
  ctranspose: ctranspose,
  deepEqual: deepEqual,
  setIsSubset: setIsSubset,
  xor: xor,
  divideScalar: divideScalar,
  nthRoots: nthRoots,
  lsolve: lsolve,
  lsolveAll: lsolveAll,
  setUnion: setUnion,
  lup: lup,
  slu: slu,
  det: det,
  distance: distance,
  stirlingS2: stirlingS2,
  catalan: catalan,
  diff: diff,
  log: log,
  dotDivide: dotDivide,
  usolveAll: usolveAll,
  hypot: hypot,
  qr: qr,
  inv: inv,
  expm: expm,
  divide: divide,
  mean: mean,
  variance: variance,
  kldivergence: kldivergence,
  bellNumbers: bellNumbers,
  log1p: log1p,
  createUnit: createUnit,
  eigs: eigs,
  intersect: intersect,
  std: std,
  atomicMass: atomicMass,
  bohrMagneton: bohrMagneton,
  boltzmann: boltzmann,
  conductanceQuantum: conductanceQuantum,
  deuteronMass: deuteronMass,
  electronMass: electronMass,
  faraday: faraday,
  firstRadiation: firstRadiation,
  gravitationConstant: gravitationConstant,
  hartreeEnergy: hartreeEnergy,
  klitzing: klitzing,
  magneticConstant: magneticConstant,
  molarMass: molarMass,
  molarPlanckConstant: molarPlanckConstant,
  neutronMass: neutronMass,
  planckCharge: planckCharge,
  planckLength: planckLength,
  planckTemperature: planckTemperature,
  protonMass: protonMass,
  reducedPlanckConstant: reducedPlanckConstant,
  secondRadiation: secondRadiation,
  stefanBoltzmann: stefanBoltzmann,
  vacuumImpedance: vacuumImpedance,
  usolve: usolve,
  norm: norm$1,
  lusolve: lusolve,
  sqrtm: sqrtm,
  multinomial: multinomial,
  avogadro: avogadro,
  classicalElectronRadius: classicalElectronRadius,
  electricConstant: electricConstant,
  fermiCoupling: fermiCoupling,
  gravity: gravity,
  loschmidt: loschmidt,
  molarMassC12: molarMassC12,
  nuclearMagneton: nuclearMagneton,
  planckMass: planckMass,
  quantumOfCirculation: quantumOfCirculation,
  speedOfLight: speedOfLight,
  wienDisplacement: wienDisplacement,
  rotationMatrix: rotationMatrix,
  median: median,
  bohrRadius: bohrRadius,
  elementaryCharge: elementaryCharge,
  inverseConductanceQuantum: inverseConductanceQuantum,
  molarVolume: molarVolume,
  planckTime: planckTime,
  thomsonCrossSection: thomsonCrossSection,
  rotate: rotate,
  parse: parse,
  evaluate: evaluate,
  mad: mad,
  coulomb: coulomb,
  magneticFluxQuantum: magneticFluxQuantum,
  rydberg: rydberg,
  unit: unit$1,
  help: help,
  gasConstant: gasConstant,
  compile: compile,
  simplify: simplify,
  rationalize: rationalize,
  parser: parser$1,
  planckConstant: planckConstant,
  derivative: derivative,
  config: config$1
});
_extends$1(mathWithTransform, math, {
  apply: createApplyTransform({
    isInteger: isInteger,
    typed: typed
  }),
  filter: createFilterTransform({
    typed: typed
  }),
  map: createMapTransform({
    typed: typed
  }),
  forEach: createForEachTransform({
    typed: typed
  }),
  subset: createSubsetTransform({
    matrix: matrix,
    typed: typed
  }),
  index: createIndexTransform({
    Index: Index
  }),
  concat: createConcatTransform({
    isInteger: isInteger,
    matrix: matrix,
    typed: typed
  }),
  max: createMaxTransform({
    config: config$1,
    larger: larger,
    numeric: numeric,
    typed: typed
  }),
  min: createMinTransform({
    config: config$1,
    numeric: numeric,
    smaller: smaller,
    typed: typed
  }),
  sum: createSumTransform({
    add: add,
    config: config$1,
    numeric: numeric,
    typed: typed
  }),
  column: createColumnTransform({
    Index: Index,
    matrix: matrix,
    range: range,
    typed: typed
  }),
  range: createRangeTransform({
    bignumber: bignumber,
    matrix: matrix,
    config: config$1,
    larger: larger,
    largerEq: largerEq,
    smaller: smaller,
    smallerEq: smallerEq,
    typed: typed
  }),
  diff: createDiffTransform({
    bignumber: bignumber,
    matrix: matrix,
    number: number,
    subtract: subtract,
    typed: typed
  }),
  row: createRowTransform({
    Index: Index,
    matrix: matrix,
    range: range,
    typed: typed
  }),
  mean: createMeanTransform({
    add: add,
    divide: divide,
    typed: typed
  }),
  variance: createVarianceTransform({
    add: add,
    apply: apply,
    divide: divide,
    isNaN: isNaN$1,
    multiply: multiply,
    subtract: subtract,
    typed: typed
  }),
  std: createStdTransform({
    sqrt: sqrt,
    typed: typed,
    variance: variance
  })
});
_extends$1(classes, {
  ResultSet: ResultSet,
  Complex: Complex,
  Range: Range,
  Node: Node,
  ArrayNode: ArrayNode,
  BlockNode: BlockNode,
  ConstantNode: ConstantNode,
  ObjectNode: ObjectNode,
  ParenthesisNode: ParenthesisNode,
  RelationalNode: RelationalNode,
  Chain: Chain,
  BigNumber: BigNumber,
  Matrix: Matrix,
  ConditionalNode: ConditionalNode,
  OperatorNode: OperatorNode,
  Fraction: Fraction,
  RangeNode: RangeNode,
  DenseMatrix: DenseMatrix,
  FunctionAssignmentNode: FunctionAssignmentNode,
  SparseMatrix: SparseMatrix,
  ImmutableDenseMatrix: ImmutableDenseMatrix,
  FibonacciHeap: FibonacciHeap,
  AccessorNode: AccessorNode,
  IndexNode: IndexNode,
  Index: Index,
  AssignmentNode: AssignmentNode,
  Spa: Spa,
  Unit: Unit,
  SymbolNode: SymbolNode,
  FunctionNode: FunctionNode,
  Help: Help,
  Parser: Parser
});
Chain.createProxy(math);

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var BigNumberDependencies = {
  createBigNumberClass: createBigNumberClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ComplexDependencies = {
  createComplexClass: createComplexClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var MatrixDependencies = {
  createMatrixClass: createMatrixClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var DenseMatrixDependencies = {
  MatrixDependencies: MatrixDependencies,
  createDenseMatrixClass: createDenseMatrixClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FractionDependencies = {
  createFractionClass: createFractionClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var typedDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  FractionDependencies: FractionDependencies,
  createTyped: createTyped
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ResultSetDependencies = {
  createResultSet: createResultSet
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RangeDependencies = {
  createRangeClass: createRangeClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cloneDependencies = {
  typedDependencies: typedDependencies,
  createClone: createClone
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isIntegerDependencies = {
  typedDependencies: typedDependencies,
  createIsInteger: createIsInteger
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNegativeDependencies = {
  typedDependencies: typedDependencies,
  createIsNegative: createIsNegative
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNumericDependencies = {
  typedDependencies: typedDependencies,
  createIsNumeric: createIsNumeric
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hasNumericValueDependencies = {
  isNumericDependencies: isNumericDependencies,
  typedDependencies: typedDependencies,
  createHasNumericValue: createHasNumericValue
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isPositiveDependencies = {
  typedDependencies: typedDependencies,
  createIsPositive: createIsPositive
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isZeroDependencies = {
  typedDependencies: typedDependencies,
  createIsZero: createIsZero
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isNaNDependencies = {
  typedDependencies: typedDependencies,
  createIsNaN: createIsNaN
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var typeOfDependencies = {
  typedDependencies: typedDependencies,
  createTypeOf: createTypeOf
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalScalarDependencies = {
  typedDependencies: typedDependencies,
  createEqualScalar: createEqualScalar
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SparseMatrixDependencies = {
  MatrixDependencies: MatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  typedDependencies: typedDependencies,
  createSparseMatrixClass: createSparseMatrixClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var numberDependencies = {
  typedDependencies: typedDependencies,
  createNumber: createNumber
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stringDependencies = {
  typedDependencies: typedDependencies,
  createString: createString
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var booleanDependencies = {
  typedDependencies: typedDependencies,
  createBoolean: createBoolean
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bignumberDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createBignumber: createBignumber
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var complexDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createComplex: createComplex
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fractionDependencies = {
  FractionDependencies: FractionDependencies,
  typedDependencies: typedDependencies,
  createFraction: createFraction
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var matrixDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  MatrixDependencies: MatrixDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  typedDependencies: typedDependencies,
  createMatrix: createMatrix
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var splitUnitDependencies = {
  typedDependencies: typedDependencies,
  createSplitUnit: createSplitUnit
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unaryMinusDependencies = {
  typedDependencies: typedDependencies,
  createUnaryMinus: createUnaryMinus
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unaryPlusDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createUnaryPlus: createUnaryPlus
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var absDependencies = {
  typedDependencies: typedDependencies,
  createAbs: createAbs
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var applyDependencies = {
  isIntegerDependencies: isIntegerDependencies,
  typedDependencies: typedDependencies,
  createApply: createApply
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var addScalarDependencies = {
  typedDependencies: typedDependencies,
  createAddScalar: createAddScalar
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cbrtDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  FractionDependencies: FractionDependencies,
  isNegativeDependencies: isNegativeDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createCbrt: createCbrt
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var zerosDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createZeros: createZeros
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var roundDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  zerosDependencies: zerosDependencies,
  createRound: createRound
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ceilDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  roundDependencies: roundDependencies,
  typedDependencies: typedDependencies,
  createCeil: createCeil
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cubeDependencies = {
  typedDependencies: typedDependencies,
  createCube: createCube
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expDependencies = {
  typedDependencies: typedDependencies,
  createExp: createExp
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expm1Dependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createExpm1: createExpm1
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var floorDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  roundDependencies: roundDependencies,
  typedDependencies: typedDependencies,
  createFloor: createFloor
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fixDependencies = {
  ComplexDependencies: ComplexDependencies,
  ceilDependencies: ceilDependencies,
  floorDependencies: floorDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createFix: createFix
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gcdDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createGcd: createGcd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lcmDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createLcm: createLcm
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log10Dependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createLog10: createLog10
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log2Dependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createLog2: createLog2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var modDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createMod: createMod
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multiplyScalarDependencies = {
  typedDependencies: typedDependencies,
  createMultiplyScalar: createMultiplyScalar
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var conjDependencies = {
  typedDependencies: typedDependencies,
  createConj: createConj
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sizeDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSize: createSize
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotDependencies = {
  addScalarDependencies: addScalarDependencies,
  conjDependencies: conjDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  sizeDependencies: sizeDependencies,
  typedDependencies: typedDependencies,
  createDot: createDot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multiplyDependencies = {
  addScalarDependencies: addScalarDependencies,
  dotDependencies: dotDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  typedDependencies: typedDependencies,
  createMultiply: createMultiply
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nthRootDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createNthRoot: createNthRoot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var signDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  FractionDependencies: FractionDependencies,
  complexDependencies: complexDependencies,
  typedDependencies: typedDependencies,
  createSign: createSign
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sqrtDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createSqrt: createSqrt
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var squareDependencies = {
  typedDependencies: typedDependencies,
  createSquare: createSquare
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subtractDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  addScalarDependencies: addScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createSubtract: createSubtract
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var xgcdDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createXgcd: createXgcd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotMultiplyDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  typedDependencies: typedDependencies,
  createDotMultiply: createDotMultiply
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitAndDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createBitAnd: createBitAnd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitNotDependencies = {
  typedDependencies: typedDependencies,
  createBitNot: createBitNot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitOrDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createBitOr: createBitOr
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bitXorDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createBitXor: createBitXor
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var argDependencies = {
  typedDependencies: typedDependencies,
  createArg: createArg
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var imDependencies = {
  typedDependencies: typedDependencies,
  createIm: createIm
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reDependencies = {
  typedDependencies: typedDependencies,
  createRe: createRe
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var notDependencies = {
  typedDependencies: typedDependencies,
  createNot: createNot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var orDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createOr: createOr
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var xorDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createXor: createXor
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var concatDependencies = {
  isIntegerDependencies: isIntegerDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createConcat: createConcat
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var smallerDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSmaller: createSmaller
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ImmutableDenseMatrixDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  smallerDependencies: smallerDependencies,
  createImmutableDenseMatrixClass: createImmutableDenseMatrixClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var IndexDependencies = {
  ImmutableDenseMatrixDependencies: ImmutableDenseMatrixDependencies,
  createIndexClass: createIndexClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var largerDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createLarger: createLarger
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var largerEqDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createLargerEq: createLargerEq
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var smallerEqDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSmallerEq: createSmallerEq
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rangeDependencies = {
  bignumberDependencies: bignumberDependencies,
  matrixDependencies: matrixDependencies,
  largerDependencies: largerDependencies,
  largerEqDependencies: largerEqDependencies,
  smallerDependencies: smallerDependencies,
  smallerEqDependencies: smallerEqDependencies,
  typedDependencies: typedDependencies,
  createRange: createRange
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var columnDependencies = {
  IndexDependencies: IndexDependencies,
  matrixDependencies: matrixDependencies,
  rangeDependencies: rangeDependencies,
  typedDependencies: typedDependencies,
  createColumn: createColumn
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var crossDependencies = {
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createCross: createCross
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diagDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createDiag: createDiag
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var filterDependencies = {
  typedDependencies: typedDependencies,
  createFilter: createFilter
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var flattenDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createFlatten: createFlatten
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var forEachDependencies = {
  typedDependencies: typedDependencies,
  createForEach: createForEach
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var getMatrixDataTypeDependencies = {
  typedDependencies: typedDependencies,
  createGetMatrixDataType: createGetMatrixDataType
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var identityDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createIdentity: createIdentity
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var kronDependencies = {
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  typedDependencies: typedDependencies,
  createKron: createKron
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var mapDependencies = {
  typedDependencies: typedDependencies,
  createMap: createMap
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diffDependencies = {
  matrixDependencies: matrixDependencies,
  numberDependencies: numberDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createDiff: createDiff
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var onesDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createOnes: createOnes
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reshapeDependencies = {
  isIntegerDependencies: isIntegerDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createReshape: createReshape
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var resizeDependencies = {
  matrixDependencies: matrixDependencies,
  createResize: createResize
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cosDependencies = {
  typedDependencies: typedDependencies,
  createCos: createCos
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var addDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  addScalarDependencies: addScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createAdd: createAdd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var transposeDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createTranspose: createTranspose
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ctransposeDependencies = {
  conjDependencies: conjDependencies,
  transposeDependencies: transposeDependencies,
  typedDependencies: typedDependencies,
  createCtranspose: createCtranspose
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atanDependencies = {
  typedDependencies: typedDependencies,
  createAtan: createAtan
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createEqual: createEqual
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FibonacciHeapDependencies = {
  largerDependencies: largerDependencies,
  smallerDependencies: smallerDependencies,
  createFibonacciHeapClass: createFibonacciHeapClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SpaDependencies = {
  FibonacciHeapDependencies: FibonacciHeapDependencies,
  addScalarDependencies: addScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  createSpaClass: createSpaClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var numericDependencies = {
  bignumberDependencies: bignumberDependencies,
  fractionDependencies: fractionDependencies,
  numberDependencies: numberDependencies,
  createNumeric: createNumeric
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var divideScalarDependencies = {
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createDivideScalar: createDivideScalar
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lupDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  SpaDependencies: SpaDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  absDependencies: absDependencies,
  addScalarDependencies: addScalarDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  largerDependencies: largerDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createLup: createLup
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var detDependencies = {
  lupDependencies: lupDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createDet: createDet
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var invDependencies = {
  absDependencies: absDependencies,
  addScalarDependencies: addScalarDependencies,
  detDependencies: detDependencies,
  divideScalarDependencies: divideScalarDependencies,
  identityDependencies: identityDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createInv: createInv
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sinDependencies = {
  typedDependencies: typedDependencies,
  createSin: createSin
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var eigsDependencies = {
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  addScalarDependencies: addScalarDependencies,
  atanDependencies: atanDependencies,
  bignumberDependencies: bignumberDependencies,
  cosDependencies: cosDependencies,
  equalDependencies: equalDependencies,
  invDependencies: invDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  sinDependencies: sinDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createEigs: createEigs
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var powDependencies = {
  ComplexDependencies: ComplexDependencies,
  fractionDependencies: fractionDependencies,
  identityDependencies: identityDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  numberDependencies: numberDependencies,
  typedDependencies: typedDependencies,
  createPow: createPow
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var normDependencies = {
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  conjDependencies: conjDependencies,
  ctransposeDependencies: ctransposeDependencies,
  eigsDependencies: eigsDependencies,
  equalScalarDependencies: equalScalarDependencies,
  largerDependencies: largerDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  powDependencies: powDependencies,
  smallerDependencies: smallerDependencies,
  sqrtDependencies: sqrtDependencies,
  typedDependencies: typedDependencies,
  createNorm: createNorm
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rotationMatrixDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  SparseMatrixDependencies: SparseMatrixDependencies,
  addScalarDependencies: addScalarDependencies,
  cosDependencies: cosDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  normDependencies: normDependencies,
  sinDependencies: sinDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createRotationMatrix: createRotationMatrix
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rotateDependencies = {
  multiplyDependencies: multiplyDependencies,
  rotationMatrixDependencies: rotationMatrixDependencies,
  typedDependencies: typedDependencies,
  createRotate: createRotate
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rowDependencies = {
  IndexDependencies: IndexDependencies,
  matrixDependencies: matrixDependencies,
  rangeDependencies: rangeDependencies,
  typedDependencies: typedDependencies,
  createRow: createRow
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var squeezeDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSqueeze: createSqueeze
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subsetDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSubset: createSubset
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var erfDependencies = {
  typedDependencies: typedDependencies,
  createErf: createErf
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var modeDependencies = {
  isNaNDependencies: isNaNDependencies,
  isNumericDependencies: isNumericDependencies,
  typedDependencies: typedDependencies,
  createMode: createMode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var prodDependencies = {
  multiplyScalarDependencies: multiplyScalarDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createProd: createProd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var formatDependencies = {
  typedDependencies: typedDependencies,
  createFormat: createFormat
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var binDependencies = {
  typedDependencies: typedDependencies,
  createBin: createBin
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var octDependencies = {
  typedDependencies: typedDependencies,
  createOct: createOct
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hexDependencies = {
  typedDependencies: typedDependencies,
  createHex: createHex
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var printDependencies = {
  typedDependencies: typedDependencies,
  createPrint: createPrint
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var toDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createTo: createTo
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var isPrimeDependencies = {
  typedDependencies: typedDependencies,
  createIsPrime: createIsPrime
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var logDependencies = {
  ComplexDependencies: ComplexDependencies,
  divideScalarDependencies: divideScalarDependencies,
  typedDependencies: typedDependencies,
  createLog: createLog
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var log1pDependencies = {
  ComplexDependencies: ComplexDependencies,
  divideScalarDependencies: divideScalarDependencies,
  logDependencies: logDependencies,
  typedDependencies: typedDependencies,
  createLog1p: createLog1p
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nthRootsDependencies = {
  ComplexDependencies: ComplexDependencies,
  divideScalarDependencies: divideScalarDependencies,
  typedDependencies: typedDependencies,
  createNthRoots: createNthRoots
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotPowDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  powDependencies: powDependencies,
  typedDependencies: typedDependencies,
  createDotPow: createDotPow
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var dotDivideDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createDotDivide: createDotDivide
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lsolveDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createLsolve: createLsolve
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var usolveDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createUsolve: createUsolve
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lsolveAllDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createLsolveAll: createLsolveAll
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var usolveAllDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createUsolveAll: createUsolveAll
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var leftShiftDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  zerosDependencies: zerosDependencies,
  createLeftShift: createLeftShift
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rightArithShiftDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  zerosDependencies: zerosDependencies,
  createRightArithShift: createRightArithShift
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rightLogShiftDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  zerosDependencies: zerosDependencies,
  createRightLogShift: createRightLogShift
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var andDependencies = {
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  notDependencies: notDependencies,
  typedDependencies: typedDependencies,
  zerosDependencies: zerosDependencies,
  createAnd: createAnd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  FractionDependencies: FractionDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createCompare: createCompare
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareNaturalDependencies = {
  compareDependencies: compareDependencies,
  typedDependencies: typedDependencies,
  createCompareNatural: createCompareNatural
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compareTextDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createCompareText: createCompareText
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var equalTextDependencies = {
  compareTextDependencies: compareTextDependencies,
  isZeroDependencies: isZeroDependencies,
  typedDependencies: typedDependencies,
  createEqualText: createEqualText
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var deepEqualDependencies = {
  equalDependencies: equalDependencies,
  typedDependencies: typedDependencies,
  createDeepEqual: createDeepEqual
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unequalDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createUnequal: createUnequal
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var partitionSelectDependencies = {
  compareDependencies: compareDependencies,
  isNaNDependencies: isNaNDependencies,
  isNumericDependencies: isNumericDependencies,
  typedDependencies: typedDependencies,
  createPartitionSelect: createPartitionSelect
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sortDependencies = {
  compareDependencies: compareDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSort: createSort
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var maxDependencies = {
  largerDependencies: largerDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createMax: createMax
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var minDependencies = {
  numericDependencies: numericDependencies,
  smallerDependencies: smallerDependencies,
  typedDependencies: typedDependencies,
  createMin: createMin
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var UnitDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  FractionDependencies: FractionDependencies,
  absDependencies: absDependencies,
  addScalarDependencies: addScalarDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalDependencies: equalDependencies,
  fixDependencies: fixDependencies,
  formatDependencies: formatDependencies,
  isNumericDependencies: isNumericDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  numberDependencies: numberDependencies,
  powDependencies: powDependencies,
  roundDependencies: roundDependencies,
  subtractDependencies: subtractDependencies,
  createUnitClass: createUnitClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var unitDependencies = {
  UnitDependencies: UnitDependencies,
  typedDependencies: typedDependencies,
  createUnitFunction: createUnitFunction
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sparseDependencies = {
  SparseMatrixDependencies: SparseMatrixDependencies,
  typedDependencies: typedDependencies,
  createSparse: createSparse
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var createUnitDependencies = {
  UnitDependencies: UnitDependencies,
  typedDependencies: typedDependencies,
  createCreateUnit: createCreateUnit
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acosDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAcos: createAcos
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acoshDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAcosh: createAcosh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acotDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createAcot: createAcot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acothDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAcoth: createAcoth
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acscDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAcsc: createAcsc
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var acschDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createAcsch: createAcsch
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asecDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAsec: createAsec
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asechDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAsech: createAsech
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asinDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAsin: createAsin
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var asinhDependencies = {
  typedDependencies: typedDependencies,
  createAsinh: createAsinh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atan2Dependencies = {
  BigNumberDependencies: BigNumberDependencies,
  DenseMatrixDependencies: DenseMatrixDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createAtan2: createAtan2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atanhDependencies = {
  ComplexDependencies: ComplexDependencies,
  typedDependencies: typedDependencies,
  createAtanh: createAtanh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var coshDependencies = {
  typedDependencies: typedDependencies,
  createCosh: createCosh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cotDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createCot: createCot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cothDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createCoth: createCoth
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cscDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createCsc: createCsc
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var cschDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createCsch: createCsch
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var secDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createSec: createSec
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sechDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  typedDependencies: typedDependencies,
  createSech: createSech
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sinhDependencies = {
  typedDependencies: typedDependencies,
  createSinh: createSinh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tanDependencies = {
  typedDependencies: typedDependencies,
  createTan: createTan
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tanhDependencies = {
  typedDependencies: typedDependencies,
  createTanh: createTanh
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setCartesianDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetCartesian: createSetCartesian
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setDifferenceDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetDifference: createSetDifference
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setDistinctDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetDistinct: createSetDistinct
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setIntersectDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetIntersect: createSetIntersect
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setIsSubsetDependencies = {
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetIsSubset: createSetIsSubset
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setMultiplicityDependencies = {
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetMultiplicity: createSetMultiplicity
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setPowersetDependencies = {
  IndexDependencies: IndexDependencies,
  compareNaturalDependencies: compareNaturalDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetPowerset: createSetPowerset
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setSizeDependencies = {
  compareNaturalDependencies: compareNaturalDependencies,
  typedDependencies: typedDependencies,
  createSetSize: createSetSize
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setSymDifferenceDependencies = {
  IndexDependencies: IndexDependencies,
  concatDependencies: concatDependencies,
  setDifferenceDependencies: setDifferenceDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetSymDifference: createSetSymDifference
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var setUnionDependencies = {
  IndexDependencies: IndexDependencies,
  concatDependencies: concatDependencies,
  setIntersectDependencies: setIntersectDependencies,
  setSymDifferenceDependencies: setSymDifferenceDependencies,
  sizeDependencies: sizeDependencies,
  subsetDependencies: subsetDependencies,
  typedDependencies: typedDependencies,
  createSetUnion: createSetUnion
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hypotDependencies = {
  absDependencies: absDependencies,
  addScalarDependencies: addScalarDependencies,
  divideScalarDependencies: divideScalarDependencies,
  isPositiveDependencies: isPositiveDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  smallerDependencies: smallerDependencies,
  sqrtDependencies: sqrtDependencies,
  typedDependencies: typedDependencies,
  createHypot: createHypot
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var traceDependencies = {
  addDependencies: addDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createTrace: createTrace
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var indexDependencies = {
  IndexDependencies: IndexDependencies,
  typedDependencies: typedDependencies,
  createIndex: createIndex
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var NodeDependencies = {
  createNode: createNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var AccessorNodeDependencies = {
  NodeDependencies: NodeDependencies,
  subsetDependencies: subsetDependencies,
  createAccessorNode: createAccessorNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ArrayNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createArrayNode: createArrayNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var AssignmentNodeDependencies = {
  matrixDependencies: matrixDependencies,
  NodeDependencies: NodeDependencies,
  subsetDependencies: subsetDependencies,
  createAssignmentNode: createAssignmentNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var BlockNodeDependencies = {
  NodeDependencies: NodeDependencies,
  ResultSetDependencies: ResultSetDependencies,
  createBlockNode: createBlockNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ConditionalNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createConditionalNode: createConditionalNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ConstantNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createConstantNode: createConstantNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FunctionAssignmentNodeDependencies = {
  NodeDependencies: NodeDependencies,
  typedDependencies: typedDependencies,
  createFunctionAssignmentNode: createFunctionAssignmentNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var IndexNodeDependencies = {
  NodeDependencies: NodeDependencies,
  RangeDependencies: RangeDependencies,
  sizeDependencies: sizeDependencies,
  createIndexNode: createIndexNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ObjectNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createObjectNode: createObjectNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var OperatorNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createOperatorNode: createOperatorNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ParenthesisNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createParenthesisNode: createParenthesisNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RangeNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createRangeNode: createRangeNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var RelationalNodeDependencies = {
  NodeDependencies: NodeDependencies,
  createRelationalNode: createRelationalNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SymbolNodeDependencies = {
  UnitDependencies: UnitDependencies,
  NodeDependencies: NodeDependencies,
  createSymbolNode: createSymbolNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var FunctionNodeDependencies = {
  NodeDependencies: NodeDependencies,
  SymbolNodeDependencies: SymbolNodeDependencies,
  createFunctionNode: createFunctionNode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var parseDependencies = {
  AccessorNodeDependencies: AccessorNodeDependencies,
  ArrayNodeDependencies: ArrayNodeDependencies,
  AssignmentNodeDependencies: AssignmentNodeDependencies,
  BlockNodeDependencies: BlockNodeDependencies,
  ConditionalNodeDependencies: ConditionalNodeDependencies,
  ConstantNodeDependencies: ConstantNodeDependencies,
  FunctionAssignmentNodeDependencies: FunctionAssignmentNodeDependencies,
  FunctionNodeDependencies: FunctionNodeDependencies,
  IndexNodeDependencies: IndexNodeDependencies,
  ObjectNodeDependencies: ObjectNodeDependencies,
  OperatorNodeDependencies: OperatorNodeDependencies,
  ParenthesisNodeDependencies: ParenthesisNodeDependencies,
  RangeNodeDependencies: RangeNodeDependencies,
  RelationalNodeDependencies: RelationalNodeDependencies,
  SymbolNodeDependencies: SymbolNodeDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createParse: createParse
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compileDependencies = {
  parseDependencies: parseDependencies,
  typedDependencies: typedDependencies,
  createCompile: createCompile
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var evaluateDependencies = {
  parseDependencies: parseDependencies,
  typedDependencies: typedDependencies,
  createEvaluate: createEvaluate
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ParserDependencies = {
  parseDependencies: parseDependencies,
  createParserClass: createParserClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var parserDependencies = {
  ParserDependencies: ParserDependencies,
  typedDependencies: typedDependencies,
  createParser: createParser
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var qrDependencies = {
  addScalarDependencies: addScalarDependencies,
  complexDependencies: complexDependencies,
  conjDependencies: conjDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalDependencies: equalDependencies,
  identityDependencies: identityDependencies,
  isZeroDependencies: isZeroDependencies,
  matrixDependencies: matrixDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  signDependencies: signDependencies,
  sqrtDependencies: sqrtDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  zerosDependencies: zerosDependencies,
  createQr: createQr
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sluDependencies = {
  SparseMatrixDependencies: SparseMatrixDependencies,
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  divideScalarDependencies: divideScalarDependencies,
  largerDependencies: largerDependencies,
  largerEqDependencies: largerEqDependencies,
  multiplyDependencies: multiplyDependencies,
  subtractDependencies: subtractDependencies,
  transposeDependencies: transposeDependencies,
  typedDependencies: typedDependencies,
  createSlu: createSlu
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var lusolveDependencies = {
  DenseMatrixDependencies: DenseMatrixDependencies,
  lsolveDependencies: lsolveDependencies,
  lupDependencies: lupDependencies,
  matrixDependencies: matrixDependencies,
  sluDependencies: sluDependencies,
  typedDependencies: typedDependencies,
  usolveDependencies: usolveDependencies,
  createLusolve: createLusolve
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var HelpDependencies = {
  parseDependencies: parseDependencies,
  createHelpClass: createHelpClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var ChainDependencies = {
  createChainClass: createChainClass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var helpDependencies = {
  HelpDependencies: HelpDependencies,
  typedDependencies: typedDependencies,
  createHelp: createHelp
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var chainDependencies = {
  ChainDependencies: ChainDependencies,
  typedDependencies: typedDependencies,
  createChain: createChain
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var expmDependencies = {
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  identityDependencies: identityDependencies,
  invDependencies: invDependencies,
  multiplyDependencies: multiplyDependencies,
  typedDependencies: typedDependencies,
  createExpm: createExpm
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sqrtmDependencies = {
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  identityDependencies: identityDependencies,
  invDependencies: invDependencies,
  maxDependencies: maxDependencies,
  multiplyDependencies: multiplyDependencies,
  sizeDependencies: sizeDependencies,
  sqrtDependencies: sqrtDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createSqrtm: createSqrtm
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var divideDependencies = {
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  invDependencies: invDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  typedDependencies: typedDependencies,
  createDivide: createDivide
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var distanceDependencies = {
  absDependencies: absDependencies,
  addScalarDependencies: addScalarDependencies,
  divideScalarDependencies: divideScalarDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  sqrtDependencies: sqrtDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  unaryMinusDependencies: unaryMinusDependencies,
  createDistance: createDistance
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var intersectDependencies = {
  absDependencies: absDependencies,
  addDependencies: addDependencies,
  addScalarDependencies: addScalarDependencies,
  divideScalarDependencies: divideScalarDependencies,
  equalScalarDependencies: equalScalarDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  smallerDependencies: smallerDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createIntersect: createIntersect
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sumDependencies = {
  addDependencies: addDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createSum: createSum
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var meanDependencies = {
  addDependencies: addDependencies,
  divideDependencies: divideDependencies,
  typedDependencies: typedDependencies,
  createMean: createMean
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var medianDependencies = {
  addDependencies: addDependencies,
  compareDependencies: compareDependencies,
  divideDependencies: divideDependencies,
  partitionSelectDependencies: partitionSelectDependencies,
  typedDependencies: typedDependencies,
  createMedian: createMedian
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var madDependencies = {
  absDependencies: absDependencies,
  mapDependencies: mapDependencies,
  medianDependencies: medianDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createMad: createMad
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var varianceDependencies = {
  addDependencies: addDependencies,
  applyDependencies: applyDependencies,
  divideDependencies: divideDependencies,
  isNaNDependencies: isNaNDependencies,
  multiplyDependencies: multiplyDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createVariance: createVariance
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var quantileSeqDependencies = {
  addDependencies: addDependencies,
  compareDependencies: compareDependencies,
  multiplyDependencies: multiplyDependencies,
  partitionSelectDependencies: partitionSelectDependencies,
  typedDependencies: typedDependencies,
  createQuantileSeq: createQuantileSeq
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stdDependencies = {
  sqrtDependencies: sqrtDependencies,
  typedDependencies: typedDependencies,
  varianceDependencies: varianceDependencies,
  createStd: createStd
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var combinationsDependencies = {
  typedDependencies: typedDependencies,
  createCombinations: createCombinations
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var combinationsWithRepDependencies = {
  typedDependencies: typedDependencies,
  createCombinationsWithRep: createCombinationsWithRep
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gammaDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  ComplexDependencies: ComplexDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  powDependencies: powDependencies,
  typedDependencies: typedDependencies,
  createGamma: createGamma
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var factorialDependencies = {
  gammaDependencies: gammaDependencies,
  typedDependencies: typedDependencies,
  createFactorial: createFactorial
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var kldivergenceDependencies = {
  divideDependencies: divideDependencies,
  dotDivideDependencies: dotDivideDependencies,
  isNumericDependencies: isNumericDependencies,
  logDependencies: logDependencies,
  matrixDependencies: matrixDependencies,
  multiplyDependencies: multiplyDependencies,
  sumDependencies: sumDependencies,
  typedDependencies: typedDependencies,
  createKldivergence: createKldivergence
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var multinomialDependencies = {
  addDependencies: addDependencies,
  divideDependencies: divideDependencies,
  factorialDependencies: factorialDependencies,
  isIntegerDependencies: isIntegerDependencies,
  isPositiveDependencies: isPositiveDependencies,
  multiplyDependencies: multiplyDependencies,
  typedDependencies: typedDependencies,
  createMultinomial: createMultinomial
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var permutationsDependencies = {
  factorialDependencies: factorialDependencies,
  typedDependencies: typedDependencies,
  createPermutations: createPermutations
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var pickRandomDependencies = {
  typedDependencies: typedDependencies,
  createPickRandom: createPickRandom
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var randomDependencies = {
  typedDependencies: typedDependencies,
  createRandom: createRandom
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var randomIntDependencies = {
  typedDependencies: typedDependencies,
  createRandomInt: createRandomInt
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stirlingS2Dependencies = {
  addScalarDependencies: addScalarDependencies,
  combinationsDependencies: combinationsDependencies,
  divideScalarDependencies: divideScalarDependencies,
  factorialDependencies: factorialDependencies,
  isIntegerDependencies: isIntegerDependencies,
  isNegativeDependencies: isNegativeDependencies,
  largerDependencies: largerDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  powDependencies: powDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createStirlingS2: createStirlingS2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bellNumbersDependencies = {
  addScalarDependencies: addScalarDependencies,
  isIntegerDependencies: isIntegerDependencies,
  isNegativeDependencies: isNegativeDependencies,
  stirlingS2Dependencies: stirlingS2Dependencies,
  typedDependencies: typedDependencies,
  createBellNumbers: createBellNumbers
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var catalanDependencies = {
  addScalarDependencies: addScalarDependencies,
  combinationsDependencies: combinationsDependencies,
  divideScalarDependencies: divideScalarDependencies,
  isIntegerDependencies: isIntegerDependencies,
  isNegativeDependencies: isNegativeDependencies,
  multiplyScalarDependencies: multiplyScalarDependencies,
  typedDependencies: typedDependencies,
  createCatalan: createCatalan
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var compositionDependencies = {
  addScalarDependencies: addScalarDependencies,
  combinationsDependencies: combinationsDependencies,
  isIntegerDependencies: isIntegerDependencies,
  isNegativeDependencies: isNegativeDependencies,
  isPositiveDependencies: isPositiveDependencies,
  largerDependencies: largerDependencies,
  typedDependencies: typedDependencies,
  createComposition: createComposition
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var simplifyDependencies = {
  bignumberDependencies: bignumberDependencies,
  fractionDependencies: fractionDependencies,
  ConstantNodeDependencies: ConstantNodeDependencies,
  FunctionNodeDependencies: FunctionNodeDependencies,
  OperatorNodeDependencies: OperatorNodeDependencies,
  ParenthesisNodeDependencies: ParenthesisNodeDependencies,
  SymbolNodeDependencies: SymbolNodeDependencies,
  addDependencies: addDependencies,
  divideDependencies: divideDependencies,
  equalDependencies: equalDependencies,
  isZeroDependencies: isZeroDependencies,
  multiplyDependencies: multiplyDependencies,
  parseDependencies: parseDependencies,
  powDependencies: powDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createSimplify: createSimplify
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var derivativeDependencies = {
  ConstantNodeDependencies: ConstantNodeDependencies,
  FunctionNodeDependencies: FunctionNodeDependencies,
  OperatorNodeDependencies: OperatorNodeDependencies,
  ParenthesisNodeDependencies: ParenthesisNodeDependencies,
  SymbolNodeDependencies: SymbolNodeDependencies,
  equalDependencies: equalDependencies,
  isZeroDependencies: isZeroDependencies,
  numericDependencies: numericDependencies,
  parseDependencies: parseDependencies,
  simplifyDependencies: simplifyDependencies,
  typedDependencies: typedDependencies,
  createDerivative: createDerivative
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rationalizeDependencies = {
  bignumberDependencies: bignumberDependencies,
  fractionDependencies: fractionDependencies,
  ConstantNodeDependencies: ConstantNodeDependencies,
  FunctionNodeDependencies: FunctionNodeDependencies,
  OperatorNodeDependencies: OperatorNodeDependencies,
  ParenthesisNodeDependencies: ParenthesisNodeDependencies,
  SymbolNodeDependencies: SymbolNodeDependencies,
  addDependencies: addDependencies,
  divideDependencies: divideDependencies,
  equalDependencies: equalDependencies,
  isZeroDependencies: isZeroDependencies,
  multiplyDependencies: multiplyDependencies,
  parseDependencies: parseDependencies,
  powDependencies: powDependencies,
  simplifyDependencies: simplifyDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createRationalize: createRationalize
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reviverDependencies = {
  createReviver: createReviver
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var replacerDependencies = {
  createReplacer: createReplacer
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var eDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createE: createE
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var EDependencies = {
  eDependencies: eDependencies,
  createUppercaseE: createUppercaseE
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var falseDependencies = {
  createFalse: createFalse
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var iDependencies = {
  ComplexDependencies: ComplexDependencies,
  createI: createI
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var InfinityDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createInfinity: createInfinity
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LN10Dependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createLN10: createLN10
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LN2Dependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createLN2: createLN2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LOG10EDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createLOG10E: createLOG10E
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var LOG2EDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createLOG2E: createLOG2E
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var NaNDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createNaN: createNaN
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nullDependencies = {
  createNull: createNull
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var phiDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createPhi: createPhi
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var piDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createPi: createPi
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var PIDependencies = {
  piDependencies: piDependencies,
  createUppercasePi: createUppercasePi
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */

var SQRT1_2Dependencies = {
  // eslint-disable-line camelcase
  BigNumberDependencies: BigNumberDependencies,
  createSQRT1_2: createSQRT1_2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var SQRT2Dependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createSQRT2: createSQRT2
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var tauDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createTau: createTau
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var trueDependencies = {
  createTrue: createTrue
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var versionDependencies = {
  createVersion: createVersion
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var atomicMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createAtomicMass: createAtomicMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var avogadroDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createAvogadro: createAvogadro
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bohrMagnetonDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createBohrMagneton: createBohrMagneton
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var bohrRadiusDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createBohrRadius: createBohrRadius
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var boltzmannDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createBoltzmann: createBoltzmann
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var classicalElectronRadiusDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createClassicalElectronRadius: createClassicalElectronRadius
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var conductanceQuantumDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createConductanceQuantum: createConductanceQuantum
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var coulombDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createCoulomb: createCoulomb
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var deuteronMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createDeuteronMass: createDeuteronMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var efimovFactorDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createEfimovFactor: createEfimovFactor
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var electricConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createElectricConstant: createElectricConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var electronMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createElectronMass: createElectronMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var elementaryChargeDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createElementaryCharge: createElementaryCharge
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var faradayDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createFaraday: createFaraday
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fermiCouplingDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createFermiCoupling: createFermiCoupling
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var fineStructureDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createFineStructure: createFineStructure
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var firstRadiationDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createFirstRadiation: createFirstRadiation
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gasConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createGasConstant: createGasConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gravitationConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createGravitationConstant: createGravitationConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var gravityDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createGravity: createGravity
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var hartreeEnergyDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createHartreeEnergy: createHartreeEnergy
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var inverseConductanceQuantumDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createInverseConductanceQuantum: createInverseConductanceQuantum
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var klitzingDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createKlitzing: createKlitzing
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var loschmidtDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createLoschmidt: createLoschmidt
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var magneticConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMagneticConstant: createMagneticConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var magneticFluxQuantumDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMagneticFluxQuantum: createMagneticFluxQuantum
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMolarMass: createMolarMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarMassC12Dependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMolarMassC12: createMolarMassC12
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarPlanckConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMolarPlanckConstant: createMolarPlanckConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var molarVolumeDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createMolarVolume: createMolarVolume
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var neutronMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createNeutronMass: createNeutronMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var nuclearMagnetonDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createNuclearMagneton: createNuclearMagneton
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckChargeDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckCharge: createPlanckCharge
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckConstant: createPlanckConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckLengthDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckLength: createPlanckLength
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckMass: createPlanckMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckTemperatureDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckTemperature: createPlanckTemperature
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var planckTimeDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createPlanckTime: createPlanckTime
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var protonMassDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createProtonMass: createProtonMass
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var quantumOfCirculationDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createQuantumOfCirculation: createQuantumOfCirculation
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var reducedPlanckConstantDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createReducedPlanckConstant: createReducedPlanckConstant
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rydbergDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createRydberg: createRydberg
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sackurTetrodeDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createSackurTetrode: createSackurTetrode
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var secondRadiationDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createSecondRadiation: createSecondRadiation
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var speedOfLightDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createSpeedOfLight: createSpeedOfLight
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stefanBoltzmannDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createStefanBoltzmann: createStefanBoltzmann
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var thomsonCrossSectionDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createThomsonCrossSection: createThomsonCrossSection
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var vacuumImpedanceDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createVacuumImpedance: createVacuumImpedance
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var weakMixingAngleDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  createWeakMixingAngle: createWeakMixingAngle
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var wienDisplacementDependencies = {
  BigNumberDependencies: BigNumberDependencies,
  UnitDependencies: UnitDependencies,
  createWienDisplacement: createWienDisplacement
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var applyTransformDependencies = {
  isIntegerDependencies: isIntegerDependencies,
  typedDependencies: typedDependencies,
  createApplyTransform: createApplyTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var columnTransformDependencies = {
  IndexDependencies: IndexDependencies,
  matrixDependencies: matrixDependencies,
  rangeDependencies: rangeDependencies,
  typedDependencies: typedDependencies,
  createColumnTransform: createColumnTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var filterTransformDependencies = {
  typedDependencies: typedDependencies,
  createFilterTransform: createFilterTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var forEachTransformDependencies = {
  typedDependencies: typedDependencies,
  createForEachTransform: createForEachTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var indexTransformDependencies = {
  IndexDependencies: IndexDependencies,
  createIndexTransform: createIndexTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var mapTransformDependencies = {
  typedDependencies: typedDependencies,
  createMapTransform: createMapTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var maxTransformDependencies = {
  largerDependencies: largerDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createMaxTransform: createMaxTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var meanTransformDependencies = {
  addDependencies: addDependencies,
  divideDependencies: divideDependencies,
  typedDependencies: typedDependencies,
  createMeanTransform: createMeanTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var minTransformDependencies = {
  numericDependencies: numericDependencies,
  smallerDependencies: smallerDependencies,
  typedDependencies: typedDependencies,
  createMinTransform: createMinTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rangeTransformDependencies = {
  bignumberDependencies: bignumberDependencies,
  matrixDependencies: matrixDependencies,
  largerDependencies: largerDependencies,
  largerEqDependencies: largerEqDependencies,
  smallerDependencies: smallerDependencies,
  smallerEqDependencies: smallerEqDependencies,
  typedDependencies: typedDependencies,
  createRangeTransform: createRangeTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var rowTransformDependencies = {
  IndexDependencies: IndexDependencies,
  matrixDependencies: matrixDependencies,
  rangeDependencies: rangeDependencies,
  typedDependencies: typedDependencies,
  createRowTransform: createRowTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var subsetTransformDependencies = {
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createSubsetTransform: createSubsetTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var concatTransformDependencies = {
  isIntegerDependencies: isIntegerDependencies,
  matrixDependencies: matrixDependencies,
  typedDependencies: typedDependencies,
  createConcatTransform: createConcatTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var diffTransformDependencies = {
  bignumberDependencies: bignumberDependencies,
  matrixDependencies: matrixDependencies,
  numberDependencies: numberDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createDiffTransform: createDiffTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var stdTransformDependencies = {
  sqrtDependencies: sqrtDependencies,
  typedDependencies: typedDependencies,
  varianceDependencies: varianceDependencies,
  createStdTransform: createStdTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var sumTransformDependencies = {
  addDependencies: addDependencies,
  numericDependencies: numericDependencies,
  typedDependencies: typedDependencies,
  createSumTransform: createSumTransform
};

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
var varianceTransformDependencies = {
  addDependencies: addDependencies,
  applyDependencies: applyDependencies,
  divideDependencies: divideDependencies,
  isNaNDependencies: isNaNDependencies,
  multiplyDependencies: multiplyDependencies,
  subtractDependencies: subtractDependencies,
  typedDependencies: typedDependencies,
  createVarianceTransform: createVarianceTransform
};

// creating all factories here in a separate file is needed to get tree-shaking working
var all = allFactories;

var tinyEmitter = {exports: {}};

function E() {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}
E.prototype = {
  on: function on(name, callback, ctx) {
    var e = this.e || (this.e = {});
    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });
    return this;
  },
  once: function once(name, callback, ctx) {
    var self = this;
    function listener() {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },
  emit: function emit(name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;
    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }
    return this;
  },
  off: function off(name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];
    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    liveEvents.length ? e[name] = liveEvents : delete e[name];
    return this;
  }
};
tinyEmitter.exports = E;
tinyEmitter.exports.TinyEmitter = E;
var tinyEmitterExports = tinyEmitter.exports;
var Emitter = /*@__PURE__*/getDefaultExportFromCjs(tinyEmitterExports);

/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */

function mixin(obj) {
  // create event emitter
  var emitter = new Emitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)

  obj.on = emitter.on.bind(emitter);
  obj.off = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);
  return obj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function importFactory(typed, load, math, importedFactories) {
  /**
   * Import functions from an object or a module.
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *    math.import(functions)
   *    math.import(functions, options)
   *
   * Where:
   *
   * - `functions: Object`
   *   An object with functions or factories to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    import { create, all } from 'mathjs'
   *    import * as numbers from 'numbers'
   *
   *    // create a mathjs instance
   *    const math = create(all)
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!'
   *      }
   *    })
   *
   *    // use the imported function and variable
   *    math.myvalue * 2               // 84
   *    math.hello('user')             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(numbers, {wrap: true})
   *
   *    math.fibonacci(7) // returns 13
   *
   * @param {Object | Array} functions  Object with functions to be imported.
   * @param {Object} [options]          Import options.
   */
  function mathImport(functions, options) {
    var num = arguments.length;
    if (num !== 1 && num !== 2) {
      throw new ArgumentsError('import', num, 1, 2);
    }
    if (!options) {
      options = {};
    }
    function flattenImports(flatValues, value, name) {
      if (Array.isArray(value)) {
        value.forEach(function (item) {
          return flattenImports(flatValues, item);
        });
      } else if (_typeof(value) === 'object') {
        for (var _name in value) {
          if (hasOwnProperty(value, _name)) {
            flattenImports(flatValues, value[_name], _name);
          }
        }
      } else if (isFactory(value) || name !== undefined) {
        var flatName = isFactory(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' :
        // TODO: this is ugly
        value.fn : name; // we allow importing the same function twice if it points to the same implementation

        if (hasOwnProperty(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {
          throw new Error('Cannot import "' + flatName + '" twice');
        }
        flatValues[flatName] = value;
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
    }
    var flatValues = {};
    flattenImports(flatValues, functions);
    for (var name in flatValues) {
      if (hasOwnProperty(flatValues, name)) {
        // console.log('import', name)
        var value = flatValues[name];
        if (isFactory(value)) {
          // we ignore name here and enforce the name of the factory
          // maybe at some point we do want to allow overriding it
          // in that case we can implement an option overrideFactoryNames: true
          _importFactory(value, options);
        } else if (isSupportedType(value)) {
          _import(name, value, options);
        } else {
          if (!options.silent) {
            throw new TypeError('Factory, Object, or Array expected');
          }
        }
      }
    }
  }
  /**
   * Add a property to the math namespace
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */

  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    } // turn a plain function with a typed-function signature into a typed-function

    if (hasTypedFunctionSignature(value)) {
      value = typed(name, _defineProperty({}, value.signature, value));
    }
    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      } else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }
      math[name] = value;
      delete importedFactories[name];
      _importTransform(name, value);
      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }
    if (math[name] === undefined || options.override) {
      math[name] = value;
      delete importedFactories[name];
      _importTransform(name, value);
      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }
    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }
  function _importTransform(name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;
      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform;
      }
    } else {
      // remove existing transform
      delete math.expression.transform[name];
      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value;
      }
    }
  }
  function _deleteTransform(name) {
    delete math.expression.transform[name];
    if (allowedInExpressions(name)) {
      math.expression.mathWithTransform[name] = math[name];
    } else {
      delete math.expression.mathWithTransform[name];
    }
  }
  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */

  function _wrap(fn) {
    var wrapper = function wrapper() {
      var args = [];
      for (var i = 0, len = arguments.length; i < len; i++) {
        var arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }
      return fn.apply(math, args);
    };
    if (fn.transform) {
      wrapper.transform = fn.transform;
    }
    return wrapper;
  }
  /**
   * Import an instance of a factory into math.js
   * @param {function(scope: object)} factory
   * @param {Object} options  See import for a description of the options
   * @param {string} [name=factory.name] Optional custom name
   * @private
   */

  function _importFactory(factory, options) {
    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : factory.fn;
    if (contains(name, '.')) {
      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));
    }
    var namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
    var existingTransform = (name in math.expression.transform);
    var existing = hasOwnProperty(namespace, name) ? namespace[name] : undefined;
    var resolver = function resolver() {
      // collect all dependencies, handle finding both functions and classes and other special cases
      var dependencies = {};
      factory.dependencies.map(stripOptionalNotation).forEach(function (dependency) {
        if (contains(dependency, '.')) {
          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));
        }
        if (dependency === 'math') {
          dependencies.math = math;
        } else if (dependency === 'mathWithTransform') {
          dependencies.mathWithTransform = math.expression.mathWithTransform;
        } else if (dependency === 'classes') {
          // special case for json reviver
          dependencies.classes = math;
        } else {
          dependencies[dependency] = math[dependency];
        }
      });
      var instance = /* #__PURE__ */factory(dependencies);
      if (instance && typeof instance.transform === 'function') {
        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
      }
      if (existing === undefined || options.override) {
        return instance;
      }
      if (isTypedFunction(existing) && isTypedFunction(instance)) {
        // merge the existing and new typed function
        return typed(existing, instance);
      }
      if (options.silent) {
        // keep existing, ignore imported function
        return existing;
      } else {
        throw new Error('Cannot import "' + name + '": already exists');
      }
    }; // TODO: add unit test with non-lazy factory

    if (!factory.meta || factory.meta.lazy !== false) {
      lazy(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          lazy(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } else {
      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          lazy(math.expression.mathWithTransform, name, function () {
            return namespace[name];
          });
        }
      }
    } // TODO: improve factories, store a list with imports instead which can be re-played

    importedFactories[name] = factory;
    math.emit('import', name, resolver);
  }
  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */

  function isSupportedType(object) {
    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || isUnit(object) || isComplex(object) || isBigNumber(object) || isFraction(object) || isMatrix(object) || Array.isArray(object);
  }
  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */

  function isTypedFunction(fn) {
    return typeof fn === 'function' && _typeof(fn.signatures) === 'object';
  }
  function hasTypedFunctionSignature(fn) {
    return typeof fn === 'function' && typeof fn.signature === 'string';
  }
  function allowedInExpressions(name) {
    return !hasOwnProperty(unsafe, name);
  }
  function factoryAllowedInExpressions(factory) {
    return factory.fn.indexOf('.') === -1 &&
    // FIXME: make checking on path redundant, check on meta data instead
    !hasOwnProperty(unsafe, factory.fn) && (!factory.meta || !factory.meta.isClass);
  }
  function isTransformFunctionFactory(factory) {
    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
  } // namespaces and functions not available in the parser for safety reasons

  var unsafe = {
    expression: true,
    type: true,
    docs: true,
    error: true,
    json: true,
    chain: true // chain method not supported. Note that there is a unit chain too.
  };

  return mathImport;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
/**
 * Create a mathjs instance from given factory functions and optionally config
 *
 * Usage:
 *
 *     const mathjs1 = create({ createAdd, createMultiply, ...})
 *     const config = { number: 'BigNumber' }
 *     const mathjs2 = create(all, config)
 *
 * @param {Object} [factories] An object with factory functions
 *                             The object can contain nested objects,
 *                             all nested objects will be flattened.
 * @param {Object} [config]    Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */

function create(factories, config) {
  var configInternal = _extends({}, DEFAULT_CONFIG, config); // simple test for ES5 support

  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
  } // create the mathjs instance

  var math = mixin({
    // only here for backward compatibility for legacy factory functions
    isNumber: isNumber,
    isComplex: isComplex,
    isBigNumber: isBigNumber,
    isFraction: isFraction,
    isUnit: isUnit,
    isString: isString,
    isArray: isArray,
    isMatrix: isMatrix,
    isCollection: isCollection,
    isDenseMatrix: isDenseMatrix,
    isSparseMatrix: isSparseMatrix,
    isRange: isRange,
    isIndex: isIndex,
    isBoolean: isBoolean,
    isResultSet: isResultSet,
    isHelp: isHelp,
    isFunction: isFunction,
    isDate: isDate,
    isRegExp: isRegExp,
    isObject: isObject,
    isNull: isNull,
    isUndefined: isUndefined,
    isAccessorNode: isAccessorNode,
    isArrayNode: isArrayNode,
    isAssignmentNode: isAssignmentNode,
    isBlockNode: isBlockNode,
    isConditionalNode: isConditionalNode,
    isConstantNode: isConstantNode,
    isFunctionAssignmentNode: isFunctionAssignmentNode,
    isFunctionNode: isFunctionNode,
    isIndexNode: isIndexNode,
    isNode: isNode,
    isObjectNode: isObjectNode,
    isOperatorNode: isOperatorNode,
    isParenthesisNode: isParenthesisNode,
    isRangeNode: isRangeNode,
    isSymbolNode: isSymbolNode,
    isChain: isChain
  }); // load config function and apply provided config

  math.config = configFactory(configInternal, math.emit);
  math.expression = {
    transform: {},
    mathWithTransform: {
      config: math.config
    }
  }; // cached factories and instances used by function load

  var legacyFactories = [];
  var legacyInstances = [];
  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {Function} factory
   * @returns {*}
   */

  function load(factory) {
    if (isFactory(factory)) {
      return factory(math);
    }
    var firstProperty = factory[Object.keys(factory)[0]];
    if (isFactory(firstProperty)) {
      return firstProperty(math);
    }
    if (!isLegacyFactory(factory)) {
      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }
    var index = legacyFactories.indexOf(factory);
    var instance;
    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, configInternal, load, math.typed, math);
      } else {
        instance = factory.factory(math.type, configInternal, load, math.typed);
      } // append to the cache

      legacyFactories.push(factory);
      legacyInstances.push(instance);
    } else {
      // already existing function, return the cached instance
      instance = legacyInstances[index];
    }
    return instance;
  }
  var importedFactories = {}; // load the import function

  function lazyTyped() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return math.typed.apply(math.typed, args);
  }
  var internalImport = importFactory(lazyTyped, load, math, importedFactories);
  math["import"] = internalImport; // listen for changes in config, import all functions again when changed
  // TODO: move this listener into the import function?

  math.on('config', function () {
    values(importedFactories).forEach(function (factory) {
      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {
        // FIXME: only re-create when the current instance is the same as was initially created
        // FIXME: delete the functions/constants before importing them again?
        internalImport(factory, {
          override: true
        });
      }
    });
  }); // the create function exposed on the mathjs instance is bound to
  // the factory functions passed before

  math.create = create.bind(null, factories); // export factory function

  math.factory = factory; // import the factory functions like createAdd as an array instead of object,
  // else they will get a different naming (`createAdd` instead of `add`).

  math["import"](values(deepFlatten(factories)));
  math.ArgumentsError = ArgumentsError;
  math.DimensionError = DimensionError;
  math.IndexError = IndexError;
  return math;
}

var esm = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AccessorNode: AccessorNode,
  AccessorNodeDependencies: AccessorNodeDependencies,
  ArgumentsError: ArgumentsError,
  ArrayNode: ArrayNode,
  ArrayNodeDependencies: ArrayNodeDependencies,
  AssignmentNode: AssignmentNode,
  AssignmentNodeDependencies: AssignmentNodeDependencies,
  BigNumber: BigNumber,
  BigNumberDependencies: BigNumberDependencies,
  BlockNode: BlockNode,
  BlockNodeDependencies: BlockNodeDependencies,
  Chain: Chain,
  ChainDependencies: ChainDependencies,
  Complex: Complex,
  ComplexDependencies: ComplexDependencies,
  ConditionalNode: ConditionalNode,
  ConditionalNodeDependencies: ConditionalNodeDependencies,
  ConstantNode: ConstantNode,
  ConstantNodeDependencies: ConstantNodeDependencies,
  DenseMatrix: DenseMatrix,
  DenseMatrixDependencies: DenseMatrixDependencies,
  DimensionError: DimensionError,
  EDependencies: EDependencies,
  FibonacciHeap: FibonacciHeap,
  FibonacciHeapDependencies: FibonacciHeapDependencies,
  Fraction: Fraction,
  FractionDependencies: FractionDependencies,
  FunctionAssignmentNode: FunctionAssignmentNode,
  FunctionAssignmentNodeDependencies: FunctionAssignmentNodeDependencies,
  FunctionNode: FunctionNode,
  FunctionNodeDependencies: FunctionNodeDependencies,
  Help: Help,
  HelpDependencies: HelpDependencies,
  ImmutableDenseMatrix: ImmutableDenseMatrix,
  ImmutableDenseMatrixDependencies: ImmutableDenseMatrixDependencies,
  Index: Index,
  IndexDependencies: IndexDependencies,
  IndexError: IndexError,
  IndexNode: IndexNode,
  IndexNodeDependencies: IndexNodeDependencies,
  InfinityDependencies: InfinityDependencies,
  LN10: LN10,
  LN10Dependencies: LN10Dependencies,
  LN2: LN2,
  LN2Dependencies: LN2Dependencies,
  LOG10E: LOG10E,
  LOG10EDependencies: LOG10EDependencies,
  LOG2E: LOG2E,
  LOG2EDependencies: LOG2EDependencies,
  Matrix: Matrix,
  MatrixDependencies: MatrixDependencies,
  NaNDependencies: NaNDependencies,
  Node: Node,
  NodeDependencies: NodeDependencies,
  ObjectNode: ObjectNode,
  ObjectNodeDependencies: ObjectNodeDependencies,
  OperatorNode: OperatorNode,
  OperatorNodeDependencies: OperatorNodeDependencies,
  PIDependencies: PIDependencies,
  ParenthesisNode: ParenthesisNode,
  ParenthesisNodeDependencies: ParenthesisNodeDependencies,
  Parser: Parser,
  ParserDependencies: ParserDependencies,
  Range: Range,
  RangeDependencies: RangeDependencies,
  RangeNode: RangeNode,
  RangeNodeDependencies: RangeNodeDependencies,
  RelationalNode: RelationalNode,
  RelationalNodeDependencies: RelationalNodeDependencies,
  ResultSet: ResultSet,
  ResultSetDependencies: ResultSetDependencies,
  SQRT1_2: SQRT1_2,
  SQRT1_2Dependencies: SQRT1_2Dependencies,
  SQRT2: SQRT2,
  SQRT2Dependencies: SQRT2Dependencies,
  Spa: Spa,
  SpaDependencies: SpaDependencies,
  SparseMatrix: SparseMatrix,
  SparseMatrixDependencies: SparseMatrixDependencies,
  SymbolNode: SymbolNode,
  SymbolNodeDependencies: SymbolNodeDependencies,
  Unit: Unit,
  UnitDependencies: UnitDependencies,
  _Infinity: _Infinity,
  _NaN: _NaN,
  _false: _false,
  _null: _null,
  _true: _true,
  abs: abs,
  absDependencies: absDependencies,
  acos: acos,
  acosDependencies: acosDependencies,
  acosh: acosh,
  acoshDependencies: acoshDependencies,
  acot: acot,
  acotDependencies: acotDependencies,
  acoth: acoth,
  acothDependencies: acothDependencies,
  acsc: acsc,
  acscDependencies: acscDependencies,
  acsch: acsch,
  acschDependencies: acschDependencies,
  add: add,
  addDependencies: addDependencies,
  addScalar: addScalar,
  addScalarDependencies: addScalarDependencies,
  all: all,
  and: and,
  andDependencies: andDependencies,
  apply: apply,
  applyDependencies: applyDependencies,
  applyTransformDependencies: applyTransformDependencies,
  arg: arg,
  argDependencies: argDependencies,
  asec: asec,
  asecDependencies: asecDependencies,
  asech: asech,
  asechDependencies: asechDependencies,
  asin: asin,
  asinDependencies: asinDependencies,
  asinh: asinh,
  asinhDependencies: asinhDependencies,
  atan: atan,
  atan2: atan2,
  atan2Dependencies: atan2Dependencies,
  atanDependencies: atanDependencies,
  atanh: atanh,
  atanhDependencies: atanhDependencies,
  atomicMass: atomicMass,
  atomicMassDependencies: atomicMassDependencies,
  avogadro: avogadro,
  avogadroDependencies: avogadroDependencies,
  bellNumbers: bellNumbers,
  bellNumbersDependencies: bellNumbersDependencies,
  bignumber: bignumber,
  bignumberDependencies: bignumberDependencies,
  bin: bin,
  binDependencies: binDependencies,
  bitAnd: bitAnd,
  bitAndDependencies: bitAndDependencies,
  bitNot: bitNot,
  bitNotDependencies: bitNotDependencies,
  bitOr: bitOr,
  bitOrDependencies: bitOrDependencies,
  bitXor: bitXor,
  bitXorDependencies: bitXorDependencies,
  bohrMagneton: bohrMagneton,
  bohrMagnetonDependencies: bohrMagnetonDependencies,
  bohrRadius: bohrRadius,
  bohrRadiusDependencies: bohrRadiusDependencies,
  boltzmann: boltzmann,
  boltzmannDependencies: boltzmannDependencies,
  boolean: _boolean,
  booleanDependencies: booleanDependencies,
  catalan: catalan,
  catalanDependencies: catalanDependencies,
  cbrt: cbrt,
  cbrtDependencies: cbrtDependencies,
  ceil: ceil,
  ceilDependencies: ceilDependencies,
  chain: chain,
  chainDependencies: chainDependencies,
  classicalElectronRadius: classicalElectronRadius,
  classicalElectronRadiusDependencies: classicalElectronRadiusDependencies,
  clone: clone,
  cloneDependencies: cloneDependencies,
  column: column,
  columnDependencies: columnDependencies,
  columnTransformDependencies: columnTransformDependencies,
  combinations: combinations,
  combinationsDependencies: combinationsDependencies,
  combinationsWithRep: combinationsWithRep,
  combinationsWithRepDependencies: combinationsWithRepDependencies,
  compare: compare,
  compareDependencies: compareDependencies,
  compareNatural: compareNatural,
  compareNaturalDependencies: compareNaturalDependencies,
  compareText: compareText,
  compareTextDependencies: compareTextDependencies,
  compile: compile,
  compileDependencies: compileDependencies,
  complex: complex,
  complexDependencies: complexDependencies,
  composition: composition,
  compositionDependencies: compositionDependencies,
  concat: concat,
  concatDependencies: concatDependencies,
  concatTransformDependencies: concatTransformDependencies,
  conductanceQuantum: conductanceQuantum,
  conductanceQuantumDependencies: conductanceQuantumDependencies,
  config: config$1,
  conj: conj,
  conjDependencies: conjDependencies,
  cos: cos,
  cosDependencies: cosDependencies,
  cosh: cosh,
  coshDependencies: coshDependencies,
  cot: cot,
  cotDependencies: cotDependencies,
  coth: coth,
  cothDependencies: cothDependencies,
  coulomb: coulomb,
  coulombDependencies: coulombDependencies,
  create: create,
  createAbs: createAbs,
  createAccessorNode: createAccessorNode,
  createAcos: createAcos,
  createAcosh: createAcosh,
  createAcot: createAcot,
  createAcoth: createAcoth,
  createAcsc: createAcsc,
  createAcsch: createAcsch,
  createAdd: createAdd,
  createAddScalar: createAddScalar,
  createAnd: createAnd,
  createApply: createApply,
  createApplyTransform: createApplyTransform,
  createArg: createArg,
  createArrayNode: createArrayNode,
  createAsec: createAsec,
  createAsech: createAsech,
  createAsin: createAsin,
  createAsinh: createAsinh,
  createAssignmentNode: createAssignmentNode,
  createAtan: createAtan,
  createAtan2: createAtan2,
  createAtanh: createAtanh,
  createAtomicMass: createAtomicMass,
  createAvogadro: createAvogadro,
  createBellNumbers: createBellNumbers,
  createBigNumberClass: createBigNumberClass,
  createBignumber: createBignumber,
  createBin: createBin,
  createBitAnd: createBitAnd,
  createBitNot: createBitNot,
  createBitOr: createBitOr,
  createBitXor: createBitXor,
  createBlockNode: createBlockNode,
  createBohrMagneton: createBohrMagneton,
  createBohrRadius: createBohrRadius,
  createBoltzmann: createBoltzmann,
  createBoolean: createBoolean,
  createCatalan: createCatalan,
  createCbrt: createCbrt,
  createCeil: createCeil,
  createChain: createChain,
  createChainClass: createChainClass,
  createClassicalElectronRadius: createClassicalElectronRadius,
  createClone: createClone,
  createColumn: createColumn,
  createColumnTransform: createColumnTransform,
  createCombinations: createCombinations,
  createCombinationsWithRep: createCombinationsWithRep,
  createCompare: createCompare,
  createCompareNatural: createCompareNatural,
  createCompareText: createCompareText,
  createCompile: createCompile,
  createComplex: createComplex,
  createComplexClass: createComplexClass,
  createComposition: createComposition,
  createConcat: createConcat,
  createConcatTransform: createConcatTransform,
  createConditionalNode: createConditionalNode,
  createConductanceQuantum: createConductanceQuantum,
  createConj: createConj,
  createConstantNode: createConstantNode,
  createCos: createCos,
  createCosh: createCosh,
  createCot: createCot,
  createCoth: createCoth,
  createCoulomb: createCoulomb,
  createCreateUnit: createCreateUnit,
  createCross: createCross,
  createCsc: createCsc,
  createCsch: createCsch,
  createCtranspose: createCtranspose,
  createCube: createCube,
  createDeepEqual: createDeepEqual,
  createDenseMatrixClass: createDenseMatrixClass,
  createDerivative: createDerivative,
  createDet: createDet,
  createDeuteronMass: createDeuteronMass,
  createDiag: createDiag,
  createDiff: createDiff,
  createDiffTransform: createDiffTransform,
  createDistance: createDistance,
  createDivide: createDivide,
  createDivideScalar: createDivideScalar,
  createDot: createDot,
  createDotDivide: createDotDivide,
  createDotMultiply: createDotMultiply,
  createDotPow: createDotPow,
  createE: createE,
  createEfimovFactor: createEfimovFactor,
  createEigs: createEigs,
  createElectricConstant: createElectricConstant,
  createElectronMass: createElectronMass,
  createElementaryCharge: createElementaryCharge,
  createEqual: createEqual,
  createEqualScalar: createEqualScalar,
  createEqualText: createEqualText,
  createErf: createErf,
  createEvaluate: createEvaluate,
  createExp: createExp,
  createExpm: createExpm,
  createExpm1: createExpm1,
  createFactorial: createFactorial,
  createFalse: createFalse,
  createFaraday: createFaraday,
  createFermiCoupling: createFermiCoupling,
  createFibonacciHeapClass: createFibonacciHeapClass,
  createFilter: createFilter,
  createFilterTransform: createFilterTransform,
  createFineStructure: createFineStructure,
  createFirstRadiation: createFirstRadiation,
  createFix: createFix,
  createFlatten: createFlatten,
  createFloor: createFloor,
  createForEach: createForEach,
  createForEachTransform: createForEachTransform,
  createFormat: createFormat,
  createFraction: createFraction,
  createFractionClass: createFractionClass,
  createFunctionAssignmentNode: createFunctionAssignmentNode,
  createFunctionNode: createFunctionNode,
  createGamma: createGamma,
  createGasConstant: createGasConstant,
  createGcd: createGcd,
  createGetMatrixDataType: createGetMatrixDataType,
  createGravitationConstant: createGravitationConstant,
  createGravity: createGravity,
  createHartreeEnergy: createHartreeEnergy,
  createHasNumericValue: createHasNumericValue,
  createHelp: createHelp,
  createHelpClass: createHelpClass,
  createHex: createHex,
  createHypot: createHypot,
  createI: createI,
  createIdentity: createIdentity,
  createIm: createIm,
  createImmutableDenseMatrixClass: createImmutableDenseMatrixClass,
  createIndex: createIndex,
  createIndexClass: createIndexClass,
  createIndexNode: createIndexNode,
  createIndexTransform: createIndexTransform,
  createInfinity: createInfinity,
  createIntersect: createIntersect,
  createInv: createInv,
  createInverseConductanceQuantum: createInverseConductanceQuantum,
  createIsInteger: createIsInteger,
  createIsNaN: createIsNaN,
  createIsNegative: createIsNegative,
  createIsNumeric: createIsNumeric,
  createIsPositive: createIsPositive,
  createIsPrime: createIsPrime,
  createIsZero: createIsZero,
  createKldivergence: createKldivergence,
  createKlitzing: createKlitzing,
  createKron: createKron,
  createLN10: createLN10,
  createLN2: createLN2,
  createLOG10E: createLOG10E,
  createLOG2E: createLOG2E,
  createLarger: createLarger,
  createLargerEq: createLargerEq,
  createLcm: createLcm,
  createLeftShift: createLeftShift,
  createLog: createLog,
  createLog10: createLog10,
  createLog1p: createLog1p,
  createLog2: createLog2,
  createLoschmidt: createLoschmidt,
  createLsolve: createLsolve,
  createLsolveAll: createLsolveAll,
  createLup: createLup,
  createLusolve: createLusolve,
  createMad: createMad,
  createMagneticConstant: createMagneticConstant,
  createMagneticFluxQuantum: createMagneticFluxQuantum,
  createMap: createMap,
  createMapTransform: createMapTransform,
  createMatrix: createMatrix,
  createMatrixClass: createMatrixClass,
  createMax: createMax,
  createMaxTransform: createMaxTransform,
  createMean: createMean,
  createMeanTransform: createMeanTransform,
  createMedian: createMedian,
  createMin: createMin,
  createMinTransform: createMinTransform,
  createMod: createMod,
  createMode: createMode,
  createMolarMass: createMolarMass,
  createMolarMassC12: createMolarMassC12,
  createMolarPlanckConstant: createMolarPlanckConstant,
  createMolarVolume: createMolarVolume,
  createMultinomial: createMultinomial,
  createMultiply: createMultiply,
  createMultiplyScalar: createMultiplyScalar,
  createNaN: createNaN,
  createNeutronMass: createNeutronMass,
  createNode: createNode,
  createNorm: createNorm,
  createNot: createNot,
  createNthRoot: createNthRoot,
  createNthRoots: createNthRoots,
  createNuclearMagneton: createNuclearMagneton,
  createNull: createNull,
  createNumber: createNumber,
  createNumeric: createNumeric,
  createObjectNode: createObjectNode,
  createOct: createOct,
  createOnes: createOnes,
  createOperatorNode: createOperatorNode,
  createOr: createOr,
  createParenthesisNode: createParenthesisNode,
  createParse: createParse,
  createParser: createParser,
  createParserClass: createParserClass,
  createPartitionSelect: createPartitionSelect,
  createPermutations: createPermutations,
  createPhi: createPhi,
  createPi: createPi,
  createPickRandom: createPickRandom,
  createPlanckCharge: createPlanckCharge,
  createPlanckConstant: createPlanckConstant,
  createPlanckLength: createPlanckLength,
  createPlanckMass: createPlanckMass,
  createPlanckTemperature: createPlanckTemperature,
  createPlanckTime: createPlanckTime,
  createPow: createPow,
  createPrint: createPrint,
  createProd: createProd,
  createProtonMass: createProtonMass,
  createQr: createQr,
  createQuantileSeq: createQuantileSeq,
  createQuantumOfCirculation: createQuantumOfCirculation,
  createRandom: createRandom,
  createRandomInt: createRandomInt,
  createRange: createRange,
  createRangeClass: createRangeClass,
  createRangeNode: createRangeNode,
  createRangeTransform: createRangeTransform,
  createRationalize: createRationalize,
  createRe: createRe,
  createReducedPlanckConstant: createReducedPlanckConstant,
  createRelationalNode: createRelationalNode,
  createReplacer: createReplacer,
  createReshape: createReshape,
  createResize: createResize,
  createResultSet: createResultSet,
  createReviver: createReviver,
  createRightArithShift: createRightArithShift,
  createRightLogShift: createRightLogShift,
  createRotate: createRotate,
  createRotationMatrix: createRotationMatrix,
  createRound: createRound,
  createRow: createRow,
  createRowTransform: createRowTransform,
  createRydberg: createRydberg,
  createSQRT1_2: createSQRT1_2,
  createSQRT2: createSQRT2,
  createSackurTetrode: createSackurTetrode,
  createSec: createSec,
  createSech: createSech,
  createSecondRadiation: createSecondRadiation,
  createSetCartesian: createSetCartesian,
  createSetDifference: createSetDifference,
  createSetDistinct: createSetDistinct,
  createSetIntersect: createSetIntersect,
  createSetIsSubset: createSetIsSubset,
  createSetMultiplicity: createSetMultiplicity,
  createSetPowerset: createSetPowerset,
  createSetSize: createSetSize,
  createSetSymDifference: createSetSymDifference,
  createSetUnion: createSetUnion,
  createSign: createSign,
  createSimplify: createSimplify,
  createSin: createSin,
  createSinh: createSinh,
  createSize: createSize,
  createSlu: createSlu,
  createSmaller: createSmaller,
  createSmallerEq: createSmallerEq,
  createSort: createSort,
  createSpaClass: createSpaClass,
  createSparse: createSparse,
  createSparseMatrixClass: createSparseMatrixClass,
  createSpeedOfLight: createSpeedOfLight,
  createSplitUnit: createSplitUnit,
  createSqrt: createSqrt,
  createSqrtm: createSqrtm,
  createSquare: createSquare,
  createSqueeze: createSqueeze,
  createStd: createStd,
  createStdTransform: createStdTransform,
  createStefanBoltzmann: createStefanBoltzmann,
  createStirlingS2: createStirlingS2,
  createString: createString,
  createSubset: createSubset,
  createSubsetTransform: createSubsetTransform,
  createSubtract: createSubtract,
  createSum: createSum,
  createSumTransform: createSumTransform,
  createSymbolNode: createSymbolNode,
  createTan: createTan,
  createTanh: createTanh,
  createTau: createTau,
  createThomsonCrossSection: createThomsonCrossSection,
  createTo: createTo,
  createTrace: createTrace,
  createTranspose: createTranspose,
  createTrue: createTrue,
  createTypeOf: createTypeOf,
  createTyped: createTyped,
  createUnaryMinus: createUnaryMinus,
  createUnaryPlus: createUnaryPlus,
  createUnequal: createUnequal,
  createUnit: createUnit,
  createUnitClass: createUnitClass,
  createUnitDependencies: createUnitDependencies,
  createUnitFunction: createUnitFunction,
  createUppercaseE: createUppercaseE,
  createUppercasePi: createUppercasePi,
  createUsolve: createUsolve,
  createUsolveAll: createUsolveAll,
  createVacuumImpedance: createVacuumImpedance,
  createVariance: createVariance,
  createVarianceTransform: createVarianceTransform,
  createVersion: createVersion,
  createWeakMixingAngle: createWeakMixingAngle,
  createWienDisplacement: createWienDisplacement,
  createXgcd: createXgcd,
  createXor: createXor,
  createZeros: createZeros,
  cross: cross$1,
  crossDependencies: crossDependencies,
  csc: csc,
  cscDependencies: cscDependencies,
  csch: csch,
  cschDependencies: cschDependencies,
  ctranspose: ctranspose,
  ctransposeDependencies: ctransposeDependencies,
  cube: cube,
  cubeDependencies: cubeDependencies,
  deepEqual: deepEqual,
  deepEqualDependencies: deepEqualDependencies,
  derivative: derivative,
  derivativeDependencies: derivativeDependencies,
  det: det,
  detDependencies: detDependencies,
  deuteronMass: deuteronMass,
  deuteronMassDependencies: deuteronMassDependencies,
  diag: diag,
  diagDependencies: diagDependencies,
  diff: diff,
  diffDependencies: diffDependencies,
  diffTransformDependencies: diffTransformDependencies,
  distance: distance,
  distanceDependencies: distanceDependencies,
  divide: divide,
  divideDependencies: divideDependencies,
  divideScalar: divideScalar,
  divideScalarDependencies: divideScalarDependencies,
  docs: embeddedDocs,
  dot: dot,
  dotDependencies: dotDependencies,
  dotDivide: dotDivide,
  dotDivideDependencies: dotDivideDependencies,
  dotMultiply: dotMultiply,
  dotMultiplyDependencies: dotMultiplyDependencies,
  dotPow: dotPow,
  dotPowDependencies: dotPowDependencies,
  e: e,
  eDependencies: eDependencies,
  efimovFactor: efimovFactor,
  efimovFactorDependencies: efimovFactorDependencies,
  eigs: eigs,
  eigsDependencies: eigsDependencies,
  electricConstant: electricConstant,
  electricConstantDependencies: electricConstantDependencies,
  electronMass: electronMass,
  electronMassDependencies: electronMassDependencies,
  elementaryCharge: elementaryCharge,
  elementaryChargeDependencies: elementaryChargeDependencies,
  equal: equal,
  equalDependencies: equalDependencies,
  equalScalar: equalScalar,
  equalScalarDependencies: equalScalarDependencies,
  equalText: equalText,
  equalTextDependencies: equalTextDependencies,
  erf: erf,
  erfDependencies: erfDependencies,
  evaluate: evaluate,
  evaluateDependencies: evaluateDependencies,
  exp: exp,
  expDependencies: expDependencies,
  expm: expm,
  expm1: expm1,
  expm1Dependencies: expm1Dependencies,
  expmDependencies: expmDependencies,
  factorial: factorial,
  factorialDependencies: factorialDependencies,
  factory: factory,
  falseDependencies: falseDependencies,
  faraday: faraday,
  faradayDependencies: faradayDependencies,
  fermiCoupling: fermiCoupling,
  fermiCouplingDependencies: fermiCouplingDependencies,
  filter: filter,
  filterDependencies: filterDependencies,
  filterTransformDependencies: filterTransformDependencies,
  fineStructure: fineStructure,
  fineStructureDependencies: fineStructureDependencies,
  firstRadiation: firstRadiation,
  firstRadiationDependencies: firstRadiationDependencies,
  fix: fix,
  fixDependencies: fixDependencies,
  flatten: flatten,
  flattenDependencies: flattenDependencies,
  floor: floor,
  floorDependencies: floorDependencies,
  forEach: forEach,
  forEachDependencies: forEachDependencies,
  forEachTransformDependencies: forEachTransformDependencies,
  format: format,
  formatDependencies: formatDependencies,
  fraction: fraction,
  fractionDependencies: fractionDependencies,
  gamma: gamma,
  gammaDependencies: gammaDependencies,
  gasConstant: gasConstant,
  gasConstantDependencies: gasConstantDependencies,
  gcd: gcd,
  gcdDependencies: gcdDependencies,
  getMatrixDataType: getMatrixDataType,
  getMatrixDataTypeDependencies: getMatrixDataTypeDependencies,
  gravitationConstant: gravitationConstant,
  gravitationConstantDependencies: gravitationConstantDependencies,
  gravity: gravity,
  gravityDependencies: gravityDependencies,
  hartreeEnergy: hartreeEnergy,
  hartreeEnergyDependencies: hartreeEnergyDependencies,
  hasNumericValue: hasNumericValue,
  hasNumericValueDependencies: hasNumericValueDependencies,
  help: help,
  helpDependencies: helpDependencies,
  hex: hex,
  hexDependencies: hexDependencies,
  hypot: hypot,
  hypotDependencies: hypotDependencies,
  i: i,
  iDependencies: iDependencies,
  identity: identity,
  identityDependencies: identityDependencies,
  im: im,
  imDependencies: imDependencies,
  index: index$1,
  indexDependencies: indexDependencies,
  indexTransformDependencies: indexTransformDependencies,
  intersect: intersect,
  intersectDependencies: intersectDependencies,
  inv: inv,
  invDependencies: invDependencies,
  inverseConductanceQuantum: inverseConductanceQuantum,
  inverseConductanceQuantumDependencies: inverseConductanceQuantumDependencies,
  isAccessorNode: isAccessorNode,
  isArray: isArray,
  isArrayNode: isArrayNode,
  isAssignmentNode: isAssignmentNode,
  isBigNumber: isBigNumber,
  isBlockNode: isBlockNode,
  isBoolean: isBoolean,
  isChain: isChain,
  isCollection: isCollection,
  isComplex: isComplex,
  isConditionalNode: isConditionalNode,
  isConstantNode: isConstantNode,
  isDate: isDate,
  isDenseMatrix: isDenseMatrix,
  isFraction: isFraction,
  isFunction: isFunction,
  isFunctionAssignmentNode: isFunctionAssignmentNode,
  isFunctionNode: isFunctionNode,
  isHelp: isHelp,
  isIndex: isIndex,
  isIndexNode: isIndexNode,
  isInteger: isInteger,
  isIntegerDependencies: isIntegerDependencies,
  isMatrix: isMatrix,
  isNaN: isNaN$1,
  isNaNDependencies: isNaNDependencies,
  isNegative: isNegative,
  isNegativeDependencies: isNegativeDependencies,
  isNode: isNode,
  isNull: isNull,
  isNumber: isNumber,
  isNumeric: isNumeric,
  isNumericDependencies: isNumericDependencies,
  isObject: isObject,
  isObjectNode: isObjectNode,
  isOperatorNode: isOperatorNode,
  isParenthesisNode: isParenthesisNode,
  isPositive: isPositive,
  isPositiveDependencies: isPositiveDependencies,
  isPrime: isPrime,
  isPrimeDependencies: isPrimeDependencies,
  isRange: isRange,
  isRangeNode: isRangeNode,
  isRegExp: isRegExp,
  isResultSet: isResultSet,
  isSparseMatrix: isSparseMatrix,
  isString: isString,
  isSymbolNode: isSymbolNode,
  isUndefined: isUndefined,
  isUnit: isUnit,
  isZero: isZero,
  isZeroDependencies: isZeroDependencies,
  kldivergence: kldivergence,
  kldivergenceDependencies: kldivergenceDependencies,
  klitzing: klitzing,
  klitzingDependencies: klitzingDependencies,
  kron: kron,
  kronDependencies: kronDependencies,
  larger: larger,
  largerDependencies: largerDependencies,
  largerEq: largerEq,
  largerEqDependencies: largerEqDependencies,
  lcm: lcm,
  lcmDependencies: lcmDependencies,
  leftShift: leftShift,
  leftShiftDependencies: leftShiftDependencies,
  log: log,
  log10: log10,
  log10Dependencies: log10Dependencies,
  log1p: log1p,
  log1pDependencies: log1pDependencies,
  log2: log2,
  log2Dependencies: log2Dependencies,
  logDependencies: logDependencies,
  loschmidt: loschmidt,
  loschmidtDependencies: loschmidtDependencies,
  lsolve: lsolve,
  lsolveAll: lsolveAll,
  lsolveAllDependencies: lsolveAllDependencies,
  lsolveDependencies: lsolveDependencies,
  lup: lup,
  lupDependencies: lupDependencies,
  lusolve: lusolve,
  lusolveDependencies: lusolveDependencies,
  mad: mad,
  madDependencies: madDependencies,
  magneticConstant: magneticConstant,
  magneticConstantDependencies: magneticConstantDependencies,
  magneticFluxQuantum: magneticFluxQuantum,
  magneticFluxQuantumDependencies: magneticFluxQuantumDependencies,
  map: map,
  mapDependencies: mapDependencies,
  mapTransformDependencies: mapTransformDependencies,
  matrix: matrix,
  matrixDependencies: matrixDependencies,
  max: max,
  maxDependencies: maxDependencies,
  maxTransformDependencies: maxTransformDependencies,
  mean: mean,
  meanDependencies: meanDependencies,
  meanTransformDependencies: meanTransformDependencies,
  median: median,
  medianDependencies: medianDependencies,
  min: min,
  minDependencies: minDependencies,
  minTransformDependencies: minTransformDependencies,
  mod: mod,
  modDependencies: modDependencies,
  mode: mode,
  modeDependencies: modeDependencies,
  molarMass: molarMass,
  molarMassC12: molarMassC12,
  molarMassC12Dependencies: molarMassC12Dependencies,
  molarMassDependencies: molarMassDependencies,
  molarPlanckConstant: molarPlanckConstant,
  molarPlanckConstantDependencies: molarPlanckConstantDependencies,
  molarVolume: molarVolume,
  molarVolumeDependencies: molarVolumeDependencies,
  multinomial: multinomial,
  multinomialDependencies: multinomialDependencies,
  multiply: multiply,
  multiplyDependencies: multiplyDependencies,
  multiplyScalar: multiplyScalar,
  multiplyScalarDependencies: multiplyScalarDependencies,
  neutronMass: neutronMass,
  neutronMassDependencies: neutronMassDependencies,
  norm: norm$1,
  normDependencies: normDependencies,
  not: not,
  notDependencies: notDependencies,
  nthRoot: nthRoot,
  nthRootDependencies: nthRootDependencies,
  nthRoots: nthRoots,
  nthRootsDependencies: nthRootsDependencies,
  nuclearMagneton: nuclearMagneton,
  nuclearMagnetonDependencies: nuclearMagnetonDependencies,
  nullDependencies: nullDependencies,
  number: number,
  numberDependencies: numberDependencies,
  numeric: numeric,
  numericDependencies: numericDependencies,
  oct: oct,
  octDependencies: octDependencies,
  ones: ones,
  onesDependencies: onesDependencies,
  or: or,
  orDependencies: orDependencies,
  parse: parse,
  parseDependencies: parseDependencies,
  parser: parser$1,
  parserDependencies: parserDependencies,
  partitionSelect: partitionSelect,
  partitionSelectDependencies: partitionSelectDependencies,
  permutations: permutations,
  permutationsDependencies: permutationsDependencies,
  phi: phi,
  phiDependencies: phiDependencies,
  pi: pi,
  piDependencies: piDependencies,
  pickRandom: pickRandom,
  pickRandomDependencies: pickRandomDependencies,
  planckCharge: planckCharge,
  planckChargeDependencies: planckChargeDependencies,
  planckConstant: planckConstant,
  planckConstantDependencies: planckConstantDependencies,
  planckLength: planckLength,
  planckLengthDependencies: planckLengthDependencies,
  planckMass: planckMass,
  planckMassDependencies: planckMassDependencies,
  planckTemperature: planckTemperature,
  planckTemperatureDependencies: planckTemperatureDependencies,
  planckTime: planckTime,
  planckTimeDependencies: planckTimeDependencies,
  pow: pow,
  powDependencies: powDependencies,
  print: print,
  printDependencies: printDependencies,
  prod: prod,
  prodDependencies: prodDependencies,
  protonMass: protonMass,
  protonMassDependencies: protonMassDependencies,
  qr: qr,
  qrDependencies: qrDependencies,
  quantileSeq: quantileSeq,
  quantileSeqDependencies: quantileSeqDependencies,
  quantumOfCirculation: quantumOfCirculation,
  quantumOfCirculationDependencies: quantumOfCirculationDependencies,
  random: random,
  randomDependencies: randomDependencies,
  randomInt: randomInt,
  randomIntDependencies: randomIntDependencies,
  range: range,
  rangeDependencies: rangeDependencies,
  rangeTransformDependencies: rangeTransformDependencies,
  rationalize: rationalize,
  rationalizeDependencies: rationalizeDependencies,
  re: re,
  reDependencies: reDependencies,
  reducedPlanckConstant: reducedPlanckConstant,
  reducedPlanckConstantDependencies: reducedPlanckConstantDependencies,
  replacer: replacer,
  replacerDependencies: replacerDependencies,
  reshape: reshape,
  reshapeDependencies: reshapeDependencies,
  resize: resize,
  resizeDependencies: resizeDependencies,
  reviver: reviver,
  reviverDependencies: reviverDependencies,
  rightArithShift: rightArithShift,
  rightArithShiftDependencies: rightArithShiftDependencies,
  rightLogShift: rightLogShift,
  rightLogShiftDependencies: rightLogShiftDependencies,
  rotate: rotate,
  rotateDependencies: rotateDependencies,
  rotationMatrix: rotationMatrix,
  rotationMatrixDependencies: rotationMatrixDependencies,
  round: round,
  roundDependencies: roundDependencies,
  row: row,
  rowDependencies: rowDependencies,
  rowTransformDependencies: rowTransformDependencies,
  rydberg: rydberg,
  rydbergDependencies: rydbergDependencies,
  sackurTetrode: sackurTetrode,
  sackurTetrodeDependencies: sackurTetrodeDependencies,
  sec: sec,
  secDependencies: secDependencies,
  sech: sech,
  sechDependencies: sechDependencies,
  secondRadiation: secondRadiation,
  secondRadiationDependencies: secondRadiationDependencies,
  setCartesian: setCartesian,
  setCartesianDependencies: setCartesianDependencies,
  setDifference: setDifference,
  setDifferenceDependencies: setDifferenceDependencies,
  setDistinct: setDistinct,
  setDistinctDependencies: setDistinctDependencies,
  setIntersect: setIntersect,
  setIntersectDependencies: setIntersectDependencies,
  setIsSubset: setIsSubset,
  setIsSubsetDependencies: setIsSubsetDependencies,
  setMultiplicity: setMultiplicity,
  setMultiplicityDependencies: setMultiplicityDependencies,
  setPowerset: setPowerset,
  setPowersetDependencies: setPowersetDependencies,
  setSize: setSize,
  setSizeDependencies: setSizeDependencies,
  setSymDifference: setSymDifference,
  setSymDifferenceDependencies: setSymDifferenceDependencies,
  setUnion: setUnion,
  setUnionDependencies: setUnionDependencies,
  sign: sign,
  signDependencies: signDependencies,
  simplify: simplify,
  simplifyDependencies: simplifyDependencies,
  sin: sin,
  sinDependencies: sinDependencies,
  sinh: sinh,
  sinhDependencies: sinhDependencies,
  size: size,
  sizeDependencies: sizeDependencies,
  slu: slu,
  sluDependencies: sluDependencies,
  smaller: smaller,
  smallerDependencies: smallerDependencies,
  smallerEq: smallerEq,
  smallerEqDependencies: smallerEqDependencies,
  sort: sort,
  sortDependencies: sortDependencies,
  sparse: sparse,
  sparseDependencies: sparseDependencies,
  speedOfLight: speedOfLight,
  speedOfLightDependencies: speedOfLightDependencies,
  splitUnit: splitUnit,
  splitUnitDependencies: splitUnitDependencies,
  sqrt: sqrt,
  sqrtDependencies: sqrtDependencies,
  sqrtm: sqrtm,
  sqrtmDependencies: sqrtmDependencies,
  square: square,
  squareDependencies: squareDependencies,
  squeeze: squeeze,
  squeezeDependencies: squeezeDependencies,
  std: std,
  stdDependencies: stdDependencies,
  stdTransformDependencies: stdTransformDependencies,
  stefanBoltzmann: stefanBoltzmann,
  stefanBoltzmannDependencies: stefanBoltzmannDependencies,
  stirlingS2: stirlingS2,
  stirlingS2Dependencies: stirlingS2Dependencies,
  string: string,
  stringDependencies: stringDependencies,
  subset: subset,
  subsetDependencies: subsetDependencies,
  subsetTransformDependencies: subsetTransformDependencies,
  subtract: subtract,
  subtractDependencies: subtractDependencies,
  sum: sum,
  sumDependencies: sumDependencies,
  sumTransformDependencies: sumTransformDependencies,
  tan: tan,
  tanDependencies: tanDependencies,
  tanh: tanh,
  tanhDependencies: tanhDependencies,
  tau: tau,
  tauDependencies: tauDependencies,
  thomsonCrossSection: thomsonCrossSection,
  thomsonCrossSectionDependencies: thomsonCrossSectionDependencies,
  to: to,
  toDependencies: toDependencies,
  trace: trace,
  traceDependencies: traceDependencies,
  transpose: transpose,
  transposeDependencies: transposeDependencies,
  trueDependencies: trueDependencies,
  typeOf: typeOf,
  typeOfDependencies: typeOfDependencies,
  typed: typed,
  typedDependencies: typedDependencies,
  unaryMinus: unaryMinus,
  unaryMinusDependencies: unaryMinusDependencies,
  unaryPlus: unaryPlus,
  unaryPlusDependencies: unaryPlusDependencies,
  unequal: unequal,
  unequalDependencies: unequalDependencies,
  unit: unit$1,
  unitDependencies: unitDependencies,
  usolve: usolve,
  usolveAll: usolveAll,
  usolveAllDependencies: usolveAllDependencies,
  usolveDependencies: usolveDependencies,
  vacuumImpedance: vacuumImpedance,
  vacuumImpedanceDependencies: vacuumImpedanceDependencies,
  variance: variance,
  varianceDependencies: varianceDependencies,
  varianceTransformDependencies: varianceTransformDependencies,
  version: version,
  versionDependencies: versionDependencies,
  weakMixingAngle: weakMixingAngle,
  weakMixingAngleDependencies: weakMixingAngleDependencies,
  wienDisplacement: wienDisplacement,
  wienDisplacementDependencies: wienDisplacementDependencies,
  xgcd: xgcd,
  xgcdDependencies: xgcdDependencies,
  xor: xor,
  xorDependencies: xorDependencies,
  zeros: zeros,
  zerosDependencies: zerosDependencies
});

var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(esm);

var H = {
	name: "hydrogen",
	symbol: "H",
	type: "other-nonmetal",
	number: 1,
	mass: 1.008,
	period: 1,
	group: 1,
	melting: 14.01,
	boiling: 20.28,
	density: 0.00008988,
	electronegativity: 2.2,
	radius: 25,
	valence: 1,
	specificheat: 14.304,
	comment: ""
};
var He = {
	name: "helium",
	symbol: "He",
	type: "noble-gas",
	number: 2,
	mass: 4.002602,
	period: 1,
	group: 18,
	melting: 0.95,
	boiling: 4.22,
	density: 0.0001785,
	electronegativity: "",
	radius: 31,
	valence: 2,
	specificheat: 5.193,
	comment: ""
};
var Li = {
	name: "lithium",
	symbol: "Li",
	type: "alkali-metal",
	number: 3,
	mass: 6.94,
	period: 2,
	group: 1,
	melting: 453.69,
	boiling: 1560,
	density: 0.534,
	electronegativity: 0.98,
	radius: 145,
	valence: 1,
	specificheat: 3.582,
	comment: ""
};
var Be = {
	name: "beryllium",
	symbol: "Be",
	type: "alkaline-earth",
	number: 4,
	mass: 9.012,
	period: 2,
	group: 2,
	melting: 1560,
	boiling: 2742,
	density: 1.85,
	electronegativity: 1.57,
	radius: 105,
	valence: 2,
	specificheat: 1.825,
	comment: ""
};
var B = {
	name: "boron",
	symbol: "B",
	type: "metalloid",
	number: 5,
	mass: 10.81,
	period: 2,
	group: 13,
	melting: 2349,
	boiling: 4200,
	density: 2.34,
	electronegativity: 2.04,
	radius: "",
	valence: "",
	specificheat: 1.026,
	comment: ""
};
var C = {
	name: "carbon",
	symbol: "C",
	type: "other-nonmetal",
	number: 6,
	mass: 12.011,
	period: 2,
	group: 14,
	melting: 3800,
	boiling: 4300,
	density: 2.267,
	electronegativity: 2.55,
	radius: "",
	valence: "",
	specificheat: 0.709,
	comment: ""
};
var N = {
	name: "nitrogen",
	symbol: "N",
	type: "other-nonmetal",
	number: 7,
	mass: 14.007,
	period: 2,
	group: 15,
	melting: 63.15,
	boiling: 77.36,
	density: 0.0012506,
	electronegativity: 3.04,
	radius: "",
	valence: "",
	specificheat: 1.04,
	comment: ""
};
var O = {
	name: "oxygen",
	symbol: "O",
	type: "other-nonmetal",
	number: 8,
	mass: 15.999,
	period: 2,
	group: 16,
	melting: 54.36,
	boiling: 90.2,
	density: 0.001429,
	electronegativity: 3.44,
	radius: "",
	valence: "",
	specificheat: 0.918,
	comment: ""
};
var F = {
	name: "fluorine",
	symbol: "F",
	type: "halogen",
	number: 9,
	mass: 18.998,
	period: 2,
	group: 17,
	melting: 53.53,
	boiling: 85.03,
	density: 0.001696,
	electronegativity: 3.98,
	radius: "",
	valence: "",
	specificheat: 0.824,
	comment: ""
};
var Ne = {
	name: "neon",
	symbol: "Ne",
	type: "noble-gas",
	number: 10,
	mass: 20.1797,
	period: 2,
	group: 18,
	melting: 24.56,
	boiling: 27.07,
	density: 0.0008999,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: 1.03,
	comment: ""
};
var Na = {
	name: "sodium",
	symbol: "Na",
	type: "alkali-metal",
	number: 11,
	mass: 22.989,
	period: 3,
	group: 1,
	melting: 370.87,
	boiling: 1156,
	density: 0.971,
	electronegativity: 0.93,
	radius: "",
	valence: "",
	specificheat: 1.228,
	comment: ""
};
var Mg = {
	name: "magnesium",
	symbol: "Mg",
	type: "alkaline-earth",
	number: 12,
	mass: 24.305,
	period: 3,
	group: 2,
	melting: 923,
	boiling: 1363,
	density: 1.738,
	electronegativity: 1.31,
	radius: "",
	valence: "",
	specificheat: 1.023,
	comment: ""
};
var Al = {
	name: "aluminium",
	symbol: "Al",
	type: "post-transition-metal",
	number: 13,
	mass: 26.982,
	period: 3,
	group: 13,
	melting: 933.47,
	boiling: 2792,
	density: 2.698,
	electronegativity: 1.61,
	radius: "",
	valence: "",
	specificheat: 0.897,
	comment: ""
};
var Si = {
	name: "silicon",
	symbol: "Si",
	type: "metalloid",
	number: 14,
	mass: 28.085,
	period: 3,
	group: 14,
	melting: 1687,
	boiling: 3538,
	density: 2.3296,
	electronegativity: 1.9,
	radius: "",
	valence: "",
	specificheat: 0.705,
	comment: ""
};
var P = {
	name: "phosphorus",
	symbol: "P",
	type: "other-nonmetal",
	number: 15,
	mass: 30.974,
	period: 3,
	group: 15,
	melting: 317.3,
	boiling: 550,
	density: 1.82,
	electronegativity: 2.19,
	radius: "",
	valence: "",
	specificheat: 0.769,
	comment: ""
};
var S = {
	name: "sulfur",
	symbol: "S",
	type: "other-nonmetal",
	number: 16,
	mass: 32.06,
	period: 3,
	group: 16,
	melting: 388.36,
	boiling: 717.87,
	density: 2.067,
	electronegativity: 2.58,
	radius: "",
	valence: "",
	specificheat: 0.71,
	comment: ""
};
var Cl = {
	name: "chlorine",
	symbol: "Cl",
	type: "halogen",
	number: 17,
	mass: 35.45,
	period: 3,
	group: 17,
	melting: 171.6,
	boiling: 239.11,
	density: 0.003214,
	electronegativity: 3.16,
	radius: "",
	valence: "",
	specificheat: 0.479,
	comment: ""
};
var Ar = {
	name: "argon",
	symbol: "Ar",
	type: "noble-gas",
	number: 18,
	mass: 39.948,
	period: 3,
	group: 18,
	melting: 83.8,
	boiling: 87.3,
	density: 0.0017837,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: 0.52,
	comment: ""
};
var K = {
	name: "potassium",
	symbol: "K",
	type: "alkali-metal",
	number: 19,
	mass: 39.0983,
	period: 4,
	group: 1,
	melting: 336.53,
	boiling: 1032,
	density: 0.862,
	electronegativity: 0.82,
	radius: "",
	valence: "",
	specificheat: 0.757,
	comment: ""
};
var Ca = {
	name: "calcium",
	symbol: "Ca",
	type: "alkaline-earth",
	number: 20,
	mass: 40.078,
	period: 4,
	group: 2,
	melting: 1115,
	boiling: 1757,
	density: 1.54,
	electronegativity: 1,
	radius: "",
	valence: "",
	specificheat: 0.647,
	comment: ""
};
var Sc = {
	name: "scandium",
	symbol: "Sc",
	type: "transition-metal",
	number: 21,
	mass: 44.956,
	period: 4,
	group: 3,
	melting: 1814,
	boiling: 3109,
	density: 2.989,
	electronegativity: 1.36,
	radius: "",
	valence: "",
	specificheat: 0.568,
	comment: ""
};
var Ti = {
	name: "titanium",
	symbol: "Ti",
	type: "transition-metal",
	number: 22,
	mass: 47.867,
	period: 4,
	group: 4,
	melting: 1941,
	boiling: 3560,
	density: 4.54,
	electronegativity: 1.54,
	radius: "",
	valence: "",
	specificheat: 0.523,
	comment: ""
};
var V = {
	name: "vandium",
	symbol: "V",
	type: "transition-metal",
	number: 23,
	mass: 50.9415,
	period: 4,
	group: 5,
	melting: 2183,
	boiling: 3680,
	density: 6.11,
	electronegativity: 1.63,
	radius: "",
	valence: "",
	specificheat: 0.489,
	comment: ""
};
var Cr = {
	name: "chromium",
	symbol: "Cr",
	type: "transition-metal",
	number: 24,
	mass: 51.9961,
	period: 4,
	group: 6,
	melting: 2180,
	boiling: 2944,
	density: 7.15,
	electronegativity: 1.66,
	radius: "",
	valence: "",
	specificheat: 0.449,
	comment: ""
};
var Mn = {
	name: "manganese",
	symbol: "Mn",
	type: "transition-metal",
	number: 25,
	mass: 54.938,
	period: 4,
	group: 7,
	melting: 1519,
	boiling: 2334,
	density: 7.44,
	electronegativity: 1.55,
	radius: "",
	valence: "",
	specificheat: 0.479,
	comment: ""
};
var Fe = {
	name: "iron",
	symbol: "Fe",
	type: "transition-metal",
	number: 26,
	mass: 55.845,
	period: 4,
	group: 8,
	melting: 1811,
	boiling: 3134,
	density: 7.874,
	electronegativity: 1.83,
	radius: "",
	valence: "",
	specificheat: 0.449,
	comment: ""
};
var Co = {
	name: "cobalt",
	symbol: "Co",
	type: "transition-metal",
	number: 27,
	mass: 58.933,
	period: 4,
	group: 9,
	melting: 1768,
	boiling: 3200,
	density: 8.86,
	electronegativity: 1.88,
	radius: "",
	valence: "",
	specificheat: 0.421,
	comment: ""
};
var Ni = {
	name: "nickel",
	symbol: "Ni",
	type: "transition-metal",
	number: 28,
	mass: 58.6934,
	period: 4,
	group: 10,
	melting: 1728,
	boiling: 3186,
	density: 8.912,
	electronegativity: 1.91,
	radius: "",
	valence: "",
	specificheat: 0.444,
	comment: ""
};
var Cu = {
	name: "copper",
	symbol: "Cu",
	type: "transition-metal",
	number: 29,
	mass: 63.546,
	period: 4,
	group: 11,
	melting: 1357.77,
	boiling: 2835,
	density: 8.96,
	electronegativity: 1.9,
	radius: "",
	valence: "",
	specificheat: 0.385,
	comment: ""
};
var Zn = {
	name: "zinc",
	symbol: "Zn",
	type: "transition-metal",
	number: 30,
	mass: 65.38,
	period: 4,
	group: 12,
	melting: 692.88,
	boiling: 1180,
	density: 7.134,
	electronegativity: 1.65,
	radius: "",
	valence: "",
	specificheat: 0.388,
	comment: ""
};
var Ga = {
	name: "gallium",
	symbol: "Ga",
	type: "post-transition-metal",
	number: 31,
	mass: 69.723,
	period: 4,
	group: 13,
	melting: 302.9146,
	boiling: 2477,
	density: 5.907,
	electronegativity: 1.81,
	radius: "",
	valence: "",
	specificheat: 0.371,
	comment: ""
};
var Ge = {
	name: "germanium",
	symbol: "Ge",
	type: "metalloid",
	number: 32,
	mass: 72.63,
	period: 4,
	group: 14,
	melting: 1211.4,
	boiling: 3106,
	density: 5.323,
	electronegativity: 2.01,
	radius: "",
	valence: "",
	specificheat: 0.32,
	comment: ""
};
var As = {
	name: "arsenic",
	symbol: "As",
	type: "metalloid",
	number: 33,
	mass: 74.921,
	period: 4,
	group: 15,
	melting: 1090,
	boiling: 887,
	density: 5.776,
	electronegativity: 2.18,
	radius: "",
	valence: "",
	specificheat: 0.329,
	comment: ""
};
var Se = {
	name: "selenium",
	symbol: "Se",
	type: "other-nonmetal",
	number: 34,
	mass: 78.971,
	period: 4,
	group: 16,
	melting: 453,
	boiling: 958,
	density: 4.809,
	electronegativity: 2.55,
	radius: "",
	valence: "",
	specificheat: 0.321,
	comment: ""
};
var Br = {
	name: "bromine",
	symbol: "Br",
	type: "halogen",
	number: 35,
	mass: 79.904,
	period: 4,
	group: 17,
	melting: 265.8,
	boiling: 332,
	density: 3.122,
	electronegativity: 2.96,
	radius: "",
	valence: "",
	specificheat: 0.474,
	comment: ""
};
var Kr = {
	name: "krypton",
	symbol: "Kr",
	type: "noble-gas",
	number: 36,
	mass: 83.798,
	period: 4,
	group: 18,
	melting: 115.79,
	boiling: 119.93,
	density: 0.003733,
	electronegativity: 3,
	radius: "",
	valence: "",
	specificheat: 0.248,
	comment: ""
};
var Rb = {
	name: "rubidium",
	symbol: "Rb",
	type: "alkali-metal",
	number: 37,
	mass: 85.4678,
	period: 5,
	group: 1,
	melting: 312.46,
	boiling: 961,
	density: 1.532,
	electronegativity: 0.82,
	radius: "",
	valence: "",
	specificheat: 0.363,
	comment: ""
};
var Sr = {
	name: "strontium",
	symbol: "Sr",
	type: "alkaline-earth",
	number: 38,
	mass: 87.62,
	period: 5,
	group: 2,
	melting: 1050,
	boiling: 1655,
	density: 2.64,
	electronegativity: 0.95,
	radius: "",
	valence: "",
	specificheat: 0.301,
	comment: ""
};
var Y = {
	name: "yttrium",
	symbol: "Y",
	type: "transition-metal",
	number: 39,
	mass: 88.906,
	period: 5,
	group: 3,
	melting: 1799,
	boiling: 3609,
	density: 4.469,
	electronegativity: 1.22,
	radius: "",
	valence: "",
	specificheat: 0.298,
	comment: ""
};
var Zr = {
	name: "zirconium",
	symbol: "Zr",
	type: "transition-metal",
	number: 40,
	mass: 91.224,
	period: 5,
	group: 4,
	melting: 2128,
	boiling: 4682,
	density: 6.506,
	electronegativity: 1.33,
	radius: "",
	valence: "",
	specificheat: 0.278,
	comment: ""
};
var Nb = {
	name: "niobium",
	symbol: "Nb",
	type: "transition-metal",
	number: 41,
	mass: 92.9064,
	period: 5,
	group: 5,
	melting: 2750,
	boiling: 5017,
	density: 8.57,
	electronegativity: 1.6,
	radius: "",
	valence: "",
	specificheat: 0.265,
	comment: ""
};
var Mo = {
	name: "molybdenum",
	symbol: "Mo",
	type: "transition-metal",
	number: 42,
	mass: 95.95,
	period: 5,
	group: 6,
	melting: 2896,
	boiling: 4912,
	density: 10.28,
	electronegativity: 2.16,
	radius: "",
	valence: "",
	specificheat: 0.251,
	comment: ""
};
var Tc = {
	name: "technetium",
	symbol: "Tc",
	type: "transition-metal",
	number: 43,
	mass: 97,
	period: 5,
	group: 7,
	melting: 2430,
	boiling: 4538,
	density: 11.5,
	electronegativity: 1.9,
	radius: "",
	valence: "",
	specificheat: 0.63,
	comment: ""
};
var Ru = {
	name: "ruthenium",
	symbol: "Ru",
	type: "transition-metal",
	number: 44,
	mass: 101.07,
	period: 5,
	group: 8,
	melting: 2607,
	boiling: 4423,
	density: 12.37,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: 0.238,
	comment: ""
};
var Rh = {
	name: "rhodium",
	symbol: "Rh",
	type: "transition-metal",
	number: 45,
	mass: 102.9055,
	period: 5,
	group: 9,
	melting: 2237,
	boiling: 3968,
	density: 12.41,
	electronegativity: 2.28,
	radius: "",
	valence: "",
	specificheat: 0.243,
	comment: ""
};
var Pd = {
	name: "palladium",
	symbol: "Pd",
	type: "transition-metal",
	number: 46,
	mass: 106.42,
	period: 5,
	group: 10,
	melting: 1828.05,
	boiling: 3236,
	density: 12.02,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: 0.244,
	comment: ""
};
var Ag = {
	name: "silver",
	symbol: "Ag",
	type: "transition-metal",
	number: 47,
	mass: 107.8682,
	period: 5,
	group: 11,
	melting: 1234.93,
	boiling: 2435,
	density: 10.501,
	electronegativity: 1.93,
	radius: "",
	valence: "",
	specificheat: 0.235,
	comment: ""
};
var Cd = {
	name: "cadmium",
	symbol: "Cd",
	type: "transition-metal",
	number: 48,
	mass: 112.414,
	period: 5,
	group: 12,
	melting: 594.22,
	boiling: 1040,
	density: 8.69,
	electronegativity: 1.69,
	radius: "",
	valence: "",
	specificheat: 0.232,
	comment: ""
};
var In = {
	name: "indium",
	symbol: "In",
	type: "post-transition-metal",
	number: 49,
	mass: 114.818,
	period: 5,
	group: 13,
	melting: 429.75,
	boiling: 2345,
	density: 7.31,
	electronegativity: 1.78,
	radius: "",
	valence: "",
	specificheat: 0.233,
	comment: ""
};
var Sn = {
	name: "tin",
	symbol: "Sn",
	type: "post-transition-metal",
	number: 50,
	mass: 118.71,
	period: 5,
	group: 14,
	melting: 505.08,
	boiling: 2875,
	density: 7.287,
	electronegativity: 1.96,
	radius: "",
	valence: "",
	specificheat: 0.228,
	comment: ""
};
var Sb = {
	name: "antimony",
	symbol: "Sb",
	type: "metalloid",
	number: 51,
	mass: 121.76,
	period: 5,
	group: 15,
	melting: 903.78,
	boiling: 1860,
	density: 6.685,
	electronegativity: 2.05,
	radius: "",
	valence: "",
	specificheat: 0.207,
	comment: ""
};
var Te = {
	name: "tellurium",
	symbol: "Te",
	type: "metalloid",
	number: 52,
	mass: 127.6,
	period: 5,
	group: 16,
	melting: 722.66,
	boiling: 1261,
	density: 6.232,
	electronegativity: 2.1,
	radius: "",
	valence: "",
	specificheat: 0.202,
	comment: ""
};
var I = {
	name: "iodine",
	symbol: "I",
	type: "halogen",
	number: 53,
	mass: 126.90447,
	period: 5,
	group: 17,
	melting: 386.85,
	boiling: 457.4,
	density: 4.93,
	electronegativity: 2.66,
	radius: "",
	valence: "",
	specificheat: 0.214,
	comment: ""
};
var Xe = {
	name: "xenon",
	symbol: "Xe",
	type: "noble-gas",
	number: 54,
	mass: 131.293,
	period: 5,
	group: 18,
	melting: 161.4,
	boiling: 165.03,
	density: 0.005887,
	electronegativity: 2.6,
	radius: "",
	valence: "",
	specificheat: 0.158,
	comment: ""
};
var Cs = {
	name: "caesium",
	symbol: "Cs",
	type: "alkali-metal",
	number: 55,
	mass: 132.9055,
	period: 6,
	group: 1,
	melting: 301.59,
	boiling: 944,
	density: 1.873,
	electronegativity: 0.79,
	radius: "",
	valence: "",
	specificheat: 0.242,
	comment: ""
};
var Ba = {
	name: "barium",
	symbol: "Ba",
	type: "alkaline-earth",
	number: 56,
	mass: 137.327,
	period: 6,
	group: 2,
	melting: 1000,
	boiling: 2170,
	density: 3.594,
	electronegativity: 0.89,
	radius: "",
	valence: "",
	specificheat: 0.204,
	comment: ""
};
var La = {
	name: "Lanthanum",
	symbol: "La",
	type: "lanthanoid",
	number: 57,
	mass: 138.9055,
	period: 6,
	group: "",
	melting: 1193,
	boiling: 3737,
	density: 6.145,
	electronegativity: 1.1,
	radius: "",
	valence: "",
	specificheat: 0.195,
	comment: ""
};
var Ce = {
	name: "cerium",
	symbol: "Ce",
	type: "lanthanoid",
	number: 58,
	mass: 140.116,
	period: 6,
	group: "",
	melting: 1068,
	boiling: 3716,
	density: 6.77,
	electronegativity: 1.12,
	radius: "",
	valence: "",
	specificheat: 0.192,
	comment: ""
};
var Pr = {
	name: "praseodymium",
	symbol: "Pr",
	type: "lanthanoid",
	number: 59,
	mass: 140.90766,
	period: 6,
	group: "",
	melting: 1208,
	boiling: 3793,
	density: 6.773,
	electronegativity: 1.13,
	radius: "",
	valence: "",
	specificheat: 0.193,
	comment: ""
};
var Nd = {
	name: "neodymium",
	symbol: "Nd",
	type: "lanthanoid",
	number: 60,
	mass: 144.242,
	period: 6,
	group: "",
	melting: 1297,
	boiling: 3347,
	density: 7.007,
	electronegativity: 1.14,
	radius: "",
	valence: "",
	specificheat: 0.19,
	comment: ""
};
var Pm = {
	name: "promethium",
	symbol: "Pm",
	type: "lanthanoid",
	number: 61,
	mass: 145,
	period: 6,
	group: "",
	melting: 1315,
	boiling: 3273,
	density: 7.26,
	electronegativity: 1.13,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Sm = {
	name: "samarium",
	symbol: "Sm",
	type: "lanthanoid",
	number: 62,
	mass: 150.36,
	period: 6,
	group: "",
	melting: 1345,
	boiling: 2067,
	density: 7.52,
	electronegativity: 1.17,
	radius: "",
	valence: "",
	specificheat: 0.197,
	comment: ""
};
var Eu = {
	name: "europium",
	symbol: "Eu",
	type: "lanthanoid",
	number: 63,
	mass: 151.964,
	period: 6,
	group: "",
	melting: 1099,
	boiling: 1802,
	density: 5.243,
	electronegativity: 1.2,
	radius: "",
	valence: "",
	specificheat: 0.182,
	comment: ""
};
var Gd = {
	name: "gadolinium",
	symbol: "Gd",
	type: "lanthanoid",
	number: 64,
	mass: 157.25,
	period: 6,
	group: "",
	melting: 1585,
	boiling: 3546,
	density: 7.895,
	electronegativity: 1.2,
	radius: "",
	valence: "",
	specificheat: 0.236,
	comment: ""
};
var Tb = {
	name: "terbium",
	symbol: "Tb",
	type: "lanthanoid",
	number: 65,
	mass: 158.92535,
	period: 6,
	group: "",
	melting: 1629,
	boiling: 3503,
	density: 8.229,
	electronegativity: 1.2,
	radius: "",
	valence: "",
	specificheat: 0.182,
	comment: ""
};
var Dy = {
	name: "dysprosium",
	symbol: "Dy",
	type: "lanthanoid",
	number: 66,
	mass: 162.5,
	period: 6,
	group: "",
	melting: 1680,
	boiling: 2840,
	density: 8.55,
	electronegativity: 1.22,
	radius: "",
	valence: "",
	specificheat: 0.17,
	comment: ""
};
var Ho = {
	name: "holmium",
	symbol: "Ho",
	type: "lanthanoid",
	number: 67,
	mass: 164.93033,
	period: 6,
	group: "",
	melting: 1734,
	boiling: 2993,
	density: 8.795,
	electronegativity: 1.23,
	radius: "",
	valence: "",
	specificheat: 0.165,
	comment: ""
};
var Er = {
	name: "erbium",
	symbol: "Er",
	type: "lanthanoid",
	number: 68,
	mass: 167.259,
	period: 6,
	group: "",
	melting: 1802,
	boiling: 3141,
	density: 9.066,
	electronegativity: 1.24,
	radius: "",
	valence: "",
	specificheat: 0.168,
	comment: ""
};
var Tm = {
	name: "thulium",
	symbol: "Tm",
	type: "lanthanoid",
	number: 69,
	mass: 168.9342,
	period: 6,
	group: "",
	melting: 1818,
	boiling: 2223,
	density: 9.321,
	electronegativity: 1.25,
	radius: "",
	valence: "",
	specificheat: 0.16,
	comment: ""
};
var Yb = {
	name: "ytterbium",
	symbol: "Yb",
	type: "lanthanoid",
	number: 70,
	mass: 173.045,
	period: 6,
	group: "",
	melting: 1097,
	boiling: 1469,
	density: 6.965,
	electronegativity: 1.1,
	radius: "",
	valence: "",
	specificheat: 0.155,
	comment: ""
};
var Lu = {
	name: "lutetium",
	symbol: "Lu",
	type: "lanthanoid",
	number: 71,
	mass: 174.9668,
	period: 6,
	group: 3,
	melting: 1925,
	boiling: 3675,
	density: 9.84,
	electronegativity: 1.27,
	radius: "",
	valence: "",
	specificheat: 0.154,
	comment: ""
};
var Hf = {
	name: "hafnium",
	symbol: "Hf",
	type: "transition-metal",
	number: 72,
	mass: 178.49,
	period: 6,
	group: 4,
	melting: 2506,
	boiling: 4876,
	density: 13.31,
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: 0.1444,
	comment: ""
};
var Ta = {
	name: "tantalum",
	symbol: "Ta",
	type: "transition-metal",
	number: 73,
	mass: 180.94788,
	period: 6,
	group: 5,
	melting: 3290,
	boiling: 5731,
	density: 16.654,
	electronegativity: 1.5,
	radius: "",
	valence: "",
	specificheat: 0.14,
	comment: ""
};
var W = {
	name: "tungsten",
	symbol: "W",
	type: "transition-metal",
	number: 74,
	mass: 183.84,
	period: 6,
	group: 6,
	melting: 3290,
	boiling: 5731,
	density: 16.654,
	electronegativity: 1.5,
	radius: "",
	valence: "",
	specificheat: 0.14,
	comment: ""
};
var Re = {
	name: "rhenium",
	symbol: "Re",
	type: "transition-metal",
	number: 75,
	mass: 186.207,
	period: 6,
	group: 7,
	melting: 3459,
	boiling: 5869,
	density: 21.02,
	electronegativity: 1.9,
	radius: "",
	valence: "",
	specificheat: 1.37,
	comment: ""
};
var Os = {
	name: "osmium",
	symbol: "Os",
	type: "transition-metal",
	number: 76,
	mass: 190.23,
	period: 6,
	group: 8,
	melting: 3306,
	boiling: 5285,
	density: 22.61,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: 0.13,
	comment: ""
};
var Ir = {
	name: "iridium",
	symbol: "Ir",
	type: "transition-metal",
	number: 77,
	mass: 192.217,
	period: 6,
	group: 9,
	melting: 2719,
	boiling: 4701,
	density: 22.56,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: 0.131,
	comment: ""
};
var Pt = {
	name: "platinum",
	symbol: "Pt",
	type: "transition-metal",
	number: 78,
	mass: 195.084,
	period: 6,
	group: 10,
	melting: 2041.4,
	boiling: 4098,
	density: 21.46,
	electronegativity: 2.28,
	radius: "",
	valence: "",
	specificheat: 0.133,
	comment: ""
};
var Au = {
	name: "gold",
	symbol: "Au",
	type: "transition-metal",
	number: 79,
	mass: 196.966569,
	period: 6,
	group: 11,
	melting: 1337.33,
	boiling: 3129,
	density: 19.282,
	electronegativity: 2.54,
	radius: "",
	valence: "",
	specificheat: 0.129,
	comment: ""
};
var Hg = {
	name: "mercury",
	symbol: "Hg",
	type: "transition-metal",
	number: 80,
	mass: 200.592,
	period: 6,
	group: 12,
	melting: 234.43,
	boiling: 629.88,
	density: 13.5336,
	electronegativity: 2,
	radius: "",
	valence: "",
	specificheat: 0.14,
	comment: ""
};
var Tl = {
	name: "thalium",
	symbol: "Tl",
	type: "post-transition-metal",
	number: 81,
	mass: 204.38,
	period: 6,
	group: 13,
	melting: 577,
	boiling: 1746,
	density: 11.85,
	electronegativity: 1.62,
	radius: "",
	valence: "",
	specificheat: 0.129,
	comment: ""
};
var Pb = {
	name: "lead",
	symbol: "Pb",
	type: "post-transition-metal",
	number: 82,
	mass: 207.2,
	period: 6,
	group: 14,
	melting: 600.61,
	boiling: 2022,
	density: 11.342,
	electronegativity: 1.87,
	radius: "",
	valence: "",
	specificheat: 0.129,
	comment: ""
};
var Bi = {
	name: "bismuth",
	symbol: "Bi",
	type: "post-transition-metal",
	number: 83,
	mass: 208.9804,
	period: 6,
	group: 15,
	melting: 544.7,
	boiling: 1837,
	density: 9.807,
	electronegativity: 2.02,
	radius: "",
	valence: "",
	specificheat: 0.122,
	comment: ""
};
var Po = {
	name: "polonium",
	symbol: "Po",
	type: "metalloid",
	number: 84,
	mass: 209,
	period: 6,
	group: 16,
	melting: 527,
	boiling: 1235,
	density: 9.32,
	electronegativity: 2,
	radius: "",
	valence: "",
	specificheat: 0.125,
	comment: ""
};
var At = {
	name: "astatine",
	symbol: "At",
	type: "halogen",
	number: 85,
	mass: 210,
	period: 6,
	group: 17,
	melting: 575,
	boiling: 610,
	density: 7,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Rn = {
	name: "radon",
	symbol: "Rn",
	type: "noble-gas",
	number: 86,
	mass: 222,
	period: 6,
	group: 18,
	melting: 202,
	boiling: 211.3,
	density: 0.00973,
	electronegativity: 2.2,
	radius: "",
	valence: "",
	specificheat: 0.094,
	comment: ""
};
var Fr = {
	name: "francium",
	symbol: "Fr",
	type: "alkali-metal",
	number: 87,
	mass: 223,
	period: 7,
	group: 1,
	melting: 300,
	boiling: 950,
	density: 1.87,
	electronegativity: 0.7,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Ra = {
	name: "radium",
	symbol: "Ra",
	type: "alkaline-earth",
	number: 88,
	mass: 226,
	period: 7,
	group: 2,
	melting: 973,
	boiling: 2010,
	density: 5.5,
	electronegativity: 0.9,
	radius: "",
	valence: "",
	specificheat: 0.094,
	comment: ""
};
var Ac = {
	name: "actinium",
	symbol: "Ac",
	type: "actinoid",
	number: 89,
	mass: 227,
	period: 7,
	group: "",
	melting: 1323,
	boiling: 3471,
	density: 10.07,
	electronegativity: 1.1,
	radius: "",
	valence: "",
	specificheat: 0.12,
	comment: ""
};
var Th = {
	name: "thorium",
	symbol: "Th",
	type: "actinoid",
	number: 90,
	mass: 232.0377,
	period: 7,
	group: "",
	melting: 2115,
	boiling: 5061,
	density: 11.72,
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: 0.113,
	comment: ""
};
var Pa = {
	name: "protactinium",
	symbol: "Pa",
	type: "actinoid",
	number: 91,
	mass: 231.03588,
	period: 7,
	group: "",
	melting: 1841,
	boiling: 4300,
	density: 15.37,
	electronegativity: 1.5,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var U = {
	name: "uranium",
	symbol: "U",
	type: "actinoid",
	number: 92,
	mass: 238.02891,
	period: 7,
	group: "",
	melting: 1405.3,
	boiling: 4404,
	density: 18.95,
	electronegativity: 1.38,
	radius: "",
	valence: "",
	specificheat: 0.116,
	comment: ""
};
var Np = {
	name: "neptunium",
	symbol: "Np",
	type: "actinoid",
	number: 93,
	mass: 237,
	period: 7,
	group: "",
	melting: 917,
	boiling: 4273,
	density: 20.45,
	electronegativity: 1.36,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Pu = {
	name: "plutonium",
	symbol: "Pu",
	type: "actinoid",
	number: 94,
	mass: 244,
	period: 7,
	group: "",
	melting: 912.5,
	boiling: 3501,
	density: 19.84,
	electronegativity: 1.28,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Am = {
	name: "americium",
	symbol: "Am",
	type: "actinoid",
	number: 95,
	mass: 243,
	period: 7,
	group: "",
	melting: 1449,
	boiling: 2880,
	density: 13.69,
	electronegativity: 1.13,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Cm = {
	name: "curium",
	symbol: "Cm",
	type: "actinoid",
	number: 96,
	mass: 247,
	period: 7,
	group: "",
	melting: 1613,
	boiling: 3383,
	density: 13.51,
	electronegativity: 1.28,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Bk = {
	name: "berkelium",
	symbol: "Bk",
	type: "actinoid",
	number: 97,
	mass: 247,
	period: 7,
	group: "",
	melting: 1259,
	boiling: 2900,
	density: 14.79,
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Cf = {
	name: "californium",
	symbol: "Cf",
	type: "actinoid",
	number: 98,
	mass: 251,
	period: 7,
	group: "",
	melting: 1173,
	boiling: 1743,
	density: 15.1,
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Es = {
	name: "einsteinium",
	symbol: "Es",
	type: "actinoid",
	number: 99,
	mass: 252,
	period: 7,
	group: "",
	melting: 1133,
	boiling: 1269,
	density: 8.84,
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Fm = {
	name: "fermium",
	symbol: "Fm",
	type: "actinoid",
	number: 100,
	mass: 257,
	period: 7,
	group: "",
	melting: 1125,
	boiling: "",
	density: "",
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Md = {
	name: "mendelevium",
	symbol: "Md",
	type: "actinoid",
	number: 101,
	mass: 258,
	period: 7,
	group: "",
	melting: 1100,
	boiling: "",
	density: "",
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var No = {
	name: "nobelium",
	symbol: "No",
	type: "actinoid",
	number: 102,
	mass: 259,
	period: 7,
	group: "",
	melting: 1100,
	boiling: "",
	density: "",
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Lr = {
	name: "lawrencium",
	symbol: "Lr",
	type: "actinoid",
	number: 103,
	mass: 262,
	period: 7,
	group: 3,
	melting: 1900,
	boiling: "",
	density: "",
	electronegativity: 1.3,
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Rf = {
	name: "rutherforium",
	symbol: "Rf",
	type: "transition-metal",
	number: 104,
	mass: 267,
	period: 7,
	group: 4,
	melting: 2400,
	boiling: 5800,
	density: 23.2,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Db = {
	name: "dubnium",
	symbol: "Db",
	type: "transition-metal",
	number: 105,
	mass: 270,
	period: 7,
	group: 5,
	melting: "",
	boiling: "",
	density: 29.3,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Sg = {
	name: "seaborgium",
	symbol: "Sg",
	type: "transition-metal",
	number: 106,
	mass: 269,
	period: 7,
	group: 6,
	melting: "",
	boiling: "",
	density: 35,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Bh = {
	name: "bohrium",
	symbol: "Bh",
	type: "transition-metal",
	number: 107,
	mass: 270,
	period: 7,
	group: 7,
	melting: "",
	boiling: "",
	density: 37.1,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Hs = {
	name: "hassium",
	symbol: "Hs",
	type: "transition-metal",
	number: 108,
	mass: 270,
	period: 7,
	group: 8,
	melting: "",
	boiling: "",
	density: 40.7,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Mt = {
	name: "meitnerium",
	symbol: "Mt",
	type: "transition-metal",
	number: 109,
	mass: 278,
	period: 7,
	group: 9,
	melting: "",
	boiling: "",
	density: 37.4,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Ds = {
	name: "darmstadtium",
	symbol: "Ds",
	type: "transition-metal",
	number: 110,
	mass: 281,
	period: 7,
	group: 10,
	melting: "",
	boiling: "",
	density: 34.8,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Rg = {
	name: "roentgenium",
	symbol: "Rg",
	type: "transition-metal",
	number: 111,
	mass: 281,
	period: 7,
	group: 11,
	melting: "",
	boiling: "",
	density: 28.7,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Cn = {
	name: "copernicium",
	symbol: "Cn",
	type: "transition-metal",
	number: 112,
	mass: 285,
	period: 7,
	group: 12,
	melting: "",
	boiling: 357,
	density: 23.7,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Nh = {
	name: "nihonium",
	symbol: "Nh",
	type: "post-transition-metal",
	number: 113,
	mass: 286,
	period: 7,
	group: 13,
	melting: 700,
	boiling: 1400,
	density: 16,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Fl = {
	name: "flerovium",
	symbol: "Fl",
	type: "post-transition-metal",
	number: 114,
	mass: 289,
	period: 7,
	group: 14,
	melting: 340,
	boiling: 420,
	density: 14,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Mc = {
	name: "moscovium",
	symbol: "Mc",
	type: "post-transition-metal",
	number: 115,
	mass: 289,
	period: 7,
	group: 15,
	melting: 700,
	boiling: 1400,
	density: 13.5,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Lv = {
	name: "livermorium",
	symbol: "Lv",
	type: "post-transition-metal",
	number: 116,
	mass: 293,
	period: 7,
	group: 16,
	melting: 708.5,
	boiling: 1085,
	density: 12.9,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Ts = {
	name: "tennessine",
	symbol: "Ts",
	type: "halogen",
	number: 117,
	mass: 293,
	period: 7,
	group: 17,
	melting: 673,
	boiling: 823,
	density: 7.2,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var Og = {
	name: "oganesson",
	symbol: "Og",
	type: "noble-gas",
	number: 118,
	mass: 294,
	period: 7,
	group: 18,
	melting: 258,
	boiling: 263,
	density: 5,
	electronegativity: "",
	radius: "",
	valence: "",
	specificheat: "",
	comment: ""
};
var require$$0$1 = {
	H: H,
	He: He,
	Li: Li,
	Be: Be,
	B: B,
	C: C,
	N: N,
	O: O,
	F: F,
	Ne: Ne,
	Na: Na,
	Mg: Mg,
	Al: Al,
	Si: Si,
	P: P,
	S: S,
	Cl: Cl,
	Ar: Ar,
	K: K,
	Ca: Ca,
	Sc: Sc,
	Ti: Ti,
	V: V,
	Cr: Cr,
	Mn: Mn,
	Fe: Fe,
	Co: Co,
	Ni: Ni,
	Cu: Cu,
	Zn: Zn,
	Ga: Ga,
	Ge: Ge,
	As: As,
	Se: Se,
	Br: Br,
	Kr: Kr,
	Rb: Rb,
	Sr: Sr,
	Y: Y,
	Zr: Zr,
	Nb: Nb,
	Mo: Mo,
	Tc: Tc,
	Ru: Ru,
	Rh: Rh,
	Pd: Pd,
	Ag: Ag,
	Cd: Cd,
	In: In,
	Sn: Sn,
	Sb: Sb,
	Te: Te,
	I: I,
	Xe: Xe,
	Cs: Cs,
	Ba: Ba,
	La: La,
	Ce: Ce,
	Pr: Pr,
	Nd: Nd,
	Pm: Pm,
	Sm: Sm,
	Eu: Eu,
	Gd: Gd,
	Tb: Tb,
	Dy: Dy,
	Ho: Ho,
	Er: Er,
	Tm: Tm,
	Yb: Yb,
	Lu: Lu,
	Hf: Hf,
	Ta: Ta,
	W: W,
	Re: Re,
	Os: Os,
	Ir: Ir,
	Pt: Pt,
	Au: Au,
	Hg: Hg,
	Tl: Tl,
	Pb: Pb,
	Bi: Bi,
	Po: Po,
	At: At,
	Rn: Rn,
	Fr: Fr,
	Ra: Ra,
	Ac: Ac,
	Th: Th,
	Pa: Pa,
	U: U,
	Np: Np,
	Pu: Pu,
	Am: Am,
	Cm: Cm,
	Bk: Bk,
	Cf: Cf,
	Es: Es,
	Fm: Fm,
	Md: Md,
	No: No,
	Lr: Lr,
	Rf: Rf,
	Db: Db,
	Sg: Sg,
	Bh: Bh,
	Hs: Hs,
	Mt: Mt,
	Ds: Ds,
	Rg: Rg,
	Cn: Cn,
	Nh: Nh,
	Fl: Fl,
	Mc: Mc,
	Lv: Lv,
	Ts: Ts,
	Og: Og
};

var elements$1 = require$$0$1;
var Compound$1 = /*#__PURE__*/function () {
  function Compound(element_list) {
    _classCallCheck(this, Compound);
    this.elements = {};
    this.elementsList = [];
    if (element_list) {
      for (var element in element_list) {
        var quantity = element_list[element];
        this.add(element, quantity);
      }
    }
  }
  _createClass(Compound, [{
    key: "add",
    value: function add(element, quantity) {
      quantity = quantity || 1;
      if (!elements$1[element]) {
        return false;
      }
      if (this.elements[element]) {
        this.elements[element] += quantity;
      } else {
        this.elements[element] = quantity;
        this.elementsList.push(element);
      }
      return true;
    }
  }, {
    key: "remove",
    value: function remove(element, quantity) {
      quantity = quantity || 1;
      if (!elements$1[element] || !this.elements[element]) {
        return false;
      }
      var elementCount = this.elements[element];
      if (quantity >= elementCount) {
        delete this.elements[element];
        this.elementsList.splice(this.elementsList.indexOf(element), 1);
      } else {
        this.elements[element] -= quantity;
      }
      return true;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.elements = {};
      this.elementsList = [];
    }
  }, {
    key: "getMass",
    value: function getMass() {
      var mass = 0;
      // Okay okay, if I have time i'll find better names, this is getting nuts.
      for (var element in this.elements) {
        mass += this.elements[element] * elements$1[element].mass;
      }
      return mass;
    }
  }, {
    key: "getPercentages",
    value: function getPercentages() {
      var self = this;
      var mass = this.getMass();
      var percentages = this.elementsList.map(function (el) {
        return {
          element: el,
          percentage: self.elements[el] * elements$1[el].mass / mass
        };
      });
      return percentages;
    }
  }, {
    key: "toHTML",
    value: function toHTML() {
      var html = '';
      for (var element in this.elements) {
        var quantity = this.elements[element];
        html += element;
        html += quantity <= 1 ? '' : '<sub>' + quantity + '</sub>';
      }
      return html;
    }
  }]);
  return Compound;
}();
var Compound_1 = Compound$1;

var elements = require$$0$1;
var PeriodicTable$2 = /*#__PURE__*/function () {
  function PeriodicTable() {
    _classCallCheck(this, PeriodicTable);
  }
  _createClass(PeriodicTable, null, [{
    key: "getElement",
    value: function getElement(el) {
      if (elements[el]) {
        return elements[el];
      } else {
        return null;
      }
    }
  }, {
    key: "getAtomic",
    value: function getAtomic(atomicNumber) {
      var results = filterElements(function (v) {
        return elements[v].number == atomicNumber;
      });
      return results[0] || null;
    }
  }, {
    key: "getGroup",
    value: function getGroup(group) {
      var results = filterElements(function (v) {
        return elements[v].group == group;
      });
      if (results.length <= 0) {
        return null;
      }
      return results || null;
    }
  }, {
    key: "getPeriod",
    value: function getPeriod(period) {
      var results = filterElements(function (v) {
        return elements[v].period == period;
      });
      if (results.length <= 0) {
        return null;
      }
      return results || null;
    }
  }, {
    key: "getType",
    value: function getType(type) {
      var results = filterElements(function (v) {
        return elements[v].type == type;
      });
      if (results.length <= 0) {
        return null;
      }
      return results || null;
    }
  }]);
  return PeriodicTable;
}();
function filterElements(filter) {
  var results = Object.keys(elements).filter(filter).map(function (v) {
    return elements[v];
  });
  return results;
}
var PeriodicTable_1 = PeriodicTable$2;

var PeriodicTable$1 = PeriodicTable_1;
var Utility$1 = /*#__PURE__*/function () {
  function Utility() {
    _classCallCheck(this, Utility);
  }
  _createClass(Utility, null, [{
    key: "stringToElementList",
    value: function stringToElementList(str) {
      var list = {};
      var matches = str.match(/(([A-Z]{1}[a-z]*)([0-9]*))/g);
      for (var i in matches) {
        var fragment = matches[i];
        var element = fragment.match(/([A-Z]{1}[a-z]*)/g);
        if (PeriodicTable$1.getElement(element) === null) {
          return null;
        }
        var quantity = fragment.match(/([0-9]+)/g) || 1;
        list[element] = parseInt(quantity) + (list[element] || 0);
      }
      return list;
    }
  }]);
  return Utility;
}();
var Utility_1 = Utility$1;

var Compound = Compound_1;
var PeriodicTable = PeriodicTable_1;
var Utility = Utility_1;
var mendeleev = {
  Compound: Compound,
  PeriodicTable: PeriodicTable,
  Utility: Utility
};

var utils$1 = {};

/* Utility functions */

/**
 *  Deep clone an object
 *  @param  {Object}    obj     Object to clone
 *  @return {Object}            Clone 
 */
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}
utils$1.deepClone = deepClone;

/**
 *  Cross product of two vectors of 3 elements
 *  @param  {Array} v1  
 *  @param  {Array} v2
 *  @return {Array}     v1 X v2
 */
function cross(v1, v2) {
  return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]];
}
utils$1.cross = cross;

/** Norm of a vector v
 *  @param  {Array}  v   
 *  @return {Number}    Norm of v
 */
function norm(v) {
  return Math.sqrt(v.reduce(function (s, x) {
    return s + x * x;
  }, 0));
}
utils$1.norm = norm;

/**
 *  Returns the unit vector version of v
 *  @param  {Array} v
 *  @return {Array}     Unit vector
 */
function unit(v) {
  var n = norm(v);
  return v.map(function (x) {
    return x / n;
  });
}
utils$1.unit = unit;

/**
 * Reduce a vector to modulo 1 (interval [0,1]). Meant for fractional 
 * coordinates
 * @param  {Array} v 
 * @return {Array}      Reduced vector
 */
function mod1(v) {
  return v.map(function (x) {
    x = x % 1;
    return x >= 0 ? x : x + 1;
  });
}
utils$1.mod1 = mod1;
var _deg2rad = Math.PI / 180.0;
/**
 *  Convert degrees to radians
 *  @param  {number}    deg     Angle in degrees
 *  @return {number}            Angle in radians
 */
function degToRad(deg) {
  return deg * _deg2rad;
}
utils$1.degToRad = degToRad;

/**
 *  Convert radians to degrees
 *  @param  {number}    rad     Angle in radians
 *  @return {number}            Angle in degrees
 */
function radToDeg(rad) {
  return rad / _deg2rad;
}
utils$1.radToDeg = radToDeg;

/**
 *  Check if an array includes multiple elements
 *  @param  {Array}     arr     Array to check
 *  @param  {Array}     elems   Elements to search in arr
 *  @return {bool}              Whether the check was successful
 */
function includesAll(arr, elems) {
  var ans = true;
  for (var i = 0; i < elems.length; ++i) {
    ans = ans && arr.includes(elems[i]);
  }
  return ans;
}
utils$1.includesAll = includesAll;

/**
 * Shortest periodic length of a distance in fractional coordinates
 * @param  {Array} fx Fractional coordinates vector (p2-p1)
 * @return {Number}   Shortest length including periodic boundary conditions
 */
function shortestPeriodicLength(fx) {
  var r = norm(fx);
  for (var dx = -1; dx < 2; ++dx) {
    for (var dy = -1; dy < 2; ++dy) {
      for (var dz = -1; dz < 2; ++dz) {
        if (dx == 0 && dy == 0 && dz == 0) continue;
        var df = [fx[0] + dx, fx[1] + dy, fx[2] + dz];
        r = Math.min(r, norm(df));
      }
    }
  }
  return r;
}
utils$1.shortestPeriodicLength = shortestPeriodicLength;

var symmetry$1 = {};

var require$$0 = {
	"1": {
	pointgroup_international: "C1",
	schoenflies: "C1^1",
	pointgroup_schoenflies: "1",
	international_short: "P1",
	translations: [
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 1,
	choice: "",
	international_full: "P 1",
	hall_symbol: "P 1",
	international: "P 1",
	arithmetic_crystal_class_number: 1,
	arithmetic_crystal_class_symbol: "1P"
},
	"2": {
	pointgroup_international: "Ci",
	schoenflies: "Ci^1",
	pointgroup_schoenflies: "-1",
	international_short: "P-1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 2,
	choice: "",
	international_full: "P -1",
	hall_symbol: "-P 1",
	international: "P -1",
	arithmetic_crystal_class_number: 2,
	arithmetic_crystal_class_symbol: "-1P"
},
	"3": {
	pointgroup_international: "C2",
	schoenflies: "C2^1",
	pointgroup_schoenflies: "2",
	international_short: "P2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 3,
	choice: "b",
	international_full: "P 1 2 1",
	hall_symbol: "P 2y",
	international: "P 2 = P 1 2 1",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"4": {
	pointgroup_international: "C2",
	schoenflies: "C2^1",
	pointgroup_schoenflies: "2",
	international_short: "P2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 3,
	choice: "c",
	international_full: "P 1 1 2",
	hall_symbol: "P 2",
	international: "P 2 = P 1 1 2",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"5": {
	pointgroup_international: "C2",
	schoenflies: "C2^1",
	pointgroup_schoenflies: "2",
	international_short: "P2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 3,
	choice: "a",
	international_full: "P 2 1 1",
	hall_symbol: "P 2x",
	international: "P 2 = P 2 1 1",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"6": {
	pointgroup_international: "C2",
	schoenflies: "C2^2",
	pointgroup_schoenflies: "2",
	international_short: "P2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 4,
	choice: "b",
	international_full: "P 1 2_1 1",
	hall_symbol: "P 2yb",
	international: "P 2_1 = P 1 2_1 1",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"7": {
	pointgroup_international: "C2",
	schoenflies: "C2^2",
	pointgroup_schoenflies: "2",
	international_short: "P2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 4,
	choice: "c",
	international_full: "P 1 1 2_1",
	hall_symbol: "P 2c",
	international: "P 2_1 = P 1 1 2_1",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"8": {
	pointgroup_international: "C2",
	schoenflies: "C2^2",
	pointgroup_schoenflies: "2",
	international_short: "P2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 4,
	choice: "a",
	international_full: "P 2_1 1 1",
	hall_symbol: "P 2xa",
	international: "P 2_1 = P 2_1 1 1",
	arithmetic_crystal_class_number: 3,
	arithmetic_crystal_class_symbol: "2P"
},
	"9": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "b1",
	international_full: "C 1 2 1",
	hall_symbol: "C 2y",
	international: "C 2 = C 1 2 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"10": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "b2",
	international_full: "A 1 2 1",
	hall_symbol: "A 2y",
	international: "C 2 = A 1 2 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"11": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "b3",
	international_full: "I 1 2 1",
	hall_symbol: "I 2y",
	international: "C 2 = I 1 2 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"12": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 5,
	choice: "c1",
	international_full: "A 1 1 2",
	hall_symbol: "A 2",
	international: "C 2 = A 1 1 2",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"13": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 5,
	choice: "c2",
	international_full: "B 1 1 2",
	hall_symbol: "B 2",
	international: "C 2 = B 1 1 2 = B 2",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"14": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 5,
	choice: "c3",
	international_full: "I 1 1 2",
	hall_symbol: "I 2",
	international: "C 2 = I 1 1 2",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"15": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "a1",
	international_full: "B 2 1 1",
	hall_symbol: "B 2x",
	international: "C 2 = B 2 1 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"16": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "a2",
	international_full: "C 2 1 1",
	hall_symbol: "C 2x",
	international: "C 2 = C 2 1 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"17": {
	pointgroup_international: "C2",
	schoenflies: "C2^3",
	pointgroup_schoenflies: "2",
	international_short: "C2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 5,
	choice: "a3",
	international_full: "I 2 1 1",
	hall_symbol: "I 2x",
	international: "C 2 = I 2 1 1",
	arithmetic_crystal_class_number: 4,
	arithmetic_crystal_class_symbol: "2C"
},
	"18": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^1",
	pointgroup_schoenflies: "m",
	international_short: "Pm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 6,
	choice: "b",
	international_full: "P 1 m 1",
	hall_symbol: "P -2y",
	international: "P m = P 1 m 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"19": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^1",
	pointgroup_schoenflies: "m",
	international_short: "Pm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 6,
	choice: "c",
	international_full: "P 1 1 m",
	hall_symbol: "P -2",
	international: "P m = P 1 1 m",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"20": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^1",
	pointgroup_schoenflies: "m",
	international_short: "Pm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 6,
	choice: "a",
	international_full: "P m 1 1",
	hall_symbol: "P -2x",
	international: "P m = P m 1 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"21": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "b1",
	international_full: "P 1 c 1",
	hall_symbol: "P -2yc",
	international: "P c = P 1 c 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"22": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "b2",
	international_full: "P 1 n 1",
	hall_symbol: "P -2yac",
	international: "P c = P 1 n 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"23": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "b3",
	international_full: "P 1 a 1",
	hall_symbol: "P -2ya",
	international: "P c = P 1 a 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"24": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 7,
	choice: "c1",
	international_full: "P 1 1 a",
	hall_symbol: "P -2a",
	international: "P c = P 1 1 a",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"25": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 7,
	choice: "c2",
	international_full: "P 1 1 n",
	hall_symbol: "P -2ab",
	international: "P c = P 1 1 n",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"26": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 7,
	choice: "c3",
	international_full: "P 1 1 b",
	hall_symbol: "P -2b",
	international: "P c = P 1 1 b = P b",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"27": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "a1",
	international_full: "P b 1 1",
	hall_symbol: "P -2xb",
	international: "P c = P b 1 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"28": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "a2",
	international_full: "P n 1 1",
	hall_symbol: "P -2xbc",
	international: "P c = P n 1 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"29": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^2",
	pointgroup_schoenflies: "m",
	international_short: "Pc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 7,
	choice: "a3",
	international_full: "P c 1 1",
	hall_symbol: "P -2xc",
	international: "P c = P c 1 1",
	arithmetic_crystal_class_number: 5,
	arithmetic_crystal_class_symbol: "mP"
},
	"30": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "b1",
	international_full: "C 1 m 1",
	hall_symbol: "C -2y",
	international: "C m = C 1 m 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"31": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "b2",
	international_full: "A 1 m 1",
	hall_symbol: "A -2y",
	international: "C m = A 1 m 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"32": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "b3",
	international_full: "I 1 m 1",
	hall_symbol: "I -2y",
	international: "C m = I 1 m 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"33": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 8,
	choice: "c1",
	international_full: "A 1 1 m",
	hall_symbol: "A -2",
	international: "C m = A 1 1 m",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"34": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 8,
	choice: "c2",
	international_full: "B 1 1 m",
	hall_symbol: "B -2",
	international: "C m = B 1 1 m = B m",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"35": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 8,
	choice: "c3",
	international_full: "I 1 1 m",
	hall_symbol: "I -2",
	international: "C m = I 1 1 m",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"36": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "a1",
	international_full: "B m 1 1",
	hall_symbol: "B -2x",
	international: "C m = B m 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"37": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "a2",
	international_full: "C m 1 1",
	hall_symbol: "C -2x",
	international: "C m = C m 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"38": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^3",
	pointgroup_schoenflies: "m",
	international_short: "Cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 8,
	choice: "a3",
	international_full: "I m 1 1",
	hall_symbol: "I -2x",
	international: "C m = I m 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"39": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "b1",
	international_full: "C 1 c 1",
	hall_symbol: "C -2yc",
	international: "C c = C 1 c 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"40": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "b2",
	international_full: "A 1 n 1",
	hall_symbol: "A -2yac",
	international: "C c = A 1 n 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"41": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "b3",
	international_full: "I 1 a 1",
	hall_symbol: "I -2ya",
	international: "C c = I 1 a 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"42": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-b1",
	international_full: "A 1 a 1",
	hall_symbol: "A -2ya",
	international: "C c = A 1 a 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"43": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-b2",
	international_full: "C 1 n 1",
	hall_symbol: "C -2ybc",
	international: "C c = C 1 n 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"44": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-b3",
	international_full: "I 1 c 1",
	hall_symbol: "I -2yc",
	international: "C c = I 1 c 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"45": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "c1",
	international_full: "A 1 1 a",
	hall_symbol: "A -2a",
	international: "C c = A 1 1 a",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"46": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "c2",
	international_full: "B 1 1 n",
	hall_symbol: "B -2bc",
	international: "C c = B 1 1 n",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"47": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "c3",
	international_full: "I 1 1 b",
	hall_symbol: "I -2b",
	international: "C c = I 1 1 b",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"48": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "-c1",
	international_full: "B 1 1 b",
	hall_symbol: "B -2b",
	international: "C c = B 1 1 b = B b",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"49": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "-c2",
	international_full: "A 1 1 n",
	hall_symbol: "A -2ac",
	international: "C c = A 1 1 n",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"50": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 9,
	choice: "-c3",
	international_full: "I 1 1 a",
	hall_symbol: "I -2a",
	international: "C c = I 1 1 a",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"51": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "a1",
	international_full: "B b 1 1",
	hall_symbol: "B -2xb",
	international: "C c = B b 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"52": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "a2",
	international_full: "C n 1 1",
	hall_symbol: "C -2xbc",
	international: "C c = C n 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"53": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "a3",
	international_full: "I c 1 1",
	hall_symbol: "I -2xc",
	international: "C c = I c 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"54": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-a1",
	international_full: "C c 1 1",
	hall_symbol: "C -2xc",
	international: "C c = C c 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"55": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-a2",
	international_full: "B n 1 1",
	hall_symbol: "B -2xbc",
	international: "C c = B n 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"56": {
	pointgroup_international: "Cs",
	schoenflies: "Cs^4",
	pointgroup_schoenflies: "m",
	international_short: "Cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 9,
	choice: "-a3",
	international_full: "I b 1 1",
	hall_symbol: "I -2xb",
	international: "C c = I b 1 1",
	arithmetic_crystal_class_number: 6,
	arithmetic_crystal_class_symbol: "mC"
},
	"57": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^1",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 10,
	choice: "b",
	international_full: "P 1 2/m 1",
	hall_symbol: "-P 2y",
	international: "P 2/m = P 1 2/m 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"58": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^1",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 10,
	choice: "c",
	international_full: "P 1 1 2/m",
	hall_symbol: "-P 2",
	international: "P 2/m = P 1 1 2/m",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"59": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^1",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 10,
	choice: "a",
	international_full: "P 2/m 1 1",
	hall_symbol: "-P 2x",
	international: "P 2/m = P 2/m 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"60": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^2",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 11,
	choice: "b",
	international_full: "P 1 2_1/m 1",
	hall_symbol: "-P 2yb",
	international: "P 2_1/m = P 1 2_1/m 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"61": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^2",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 11,
	choice: "c",
	international_full: "P 1 1 2_1/m",
	hall_symbol: "-P 2c",
	international: "P 2_1/m = P 1 1 2_1/m",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"62": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^2",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 11,
	choice: "a",
	international_full: "P 2_1/m 1 1",
	hall_symbol: "-P 2xa",
	international: "P 2_1/m = P 2_1/m 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"63": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "b1",
	international_full: "C 1 2/m 1",
	hall_symbol: "-C 2y",
	international: "C 2/m = C 1 2/m 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"64": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "b2",
	international_full: "A 1 2/m 1",
	hall_symbol: "-A 2y",
	international: "C 2/m = A 1 2/m 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"65": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "b3",
	international_full: "I 1 2/m 1",
	hall_symbol: "-I 2y",
	international: "C 2/m = I 1 2/m 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"66": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 12,
	choice: "c1",
	international_full: "A 1 1 2/m",
	hall_symbol: "-A 2",
	international: "C 2/m = A 1 1 2/m",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"67": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 12,
	choice: "c2",
	international_full: "B 1 1 2/m",
	hall_symbol: "-B 2",
	international: "C 2/m = B 1 1 2/m = B 2/m",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"68": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 12,
	choice: "c3",
	international_full: "I 1 1 2/m",
	hall_symbol: "-I 2",
	international: "C 2/m = I 1 1 2/m",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"69": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "a1",
	international_full: "B 2/m 1 1",
	hall_symbol: "-B 2x",
	international: "C 2/m = B 2/m 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"70": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "a2",
	international_full: "C 2/m 1 1",
	hall_symbol: "-C 2x",
	international: "C 2/m = C 2/m 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"71": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^3",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 12,
	choice: "a3",
	international_full: "I 2/m 1 1",
	hall_symbol: "-I 2x",
	international: "C 2/m = I 2/m 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"72": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "b1",
	international_full: "P 1 2/c 1",
	hall_symbol: "-P 2yc",
	international: "P 2/c = P 1 2/c 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"73": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "b2",
	international_full: "P 1 2/n 1",
	hall_symbol: "-P 2yac",
	international: "P 2/c = P 1 2/n 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"74": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "b3",
	international_full: "P 1 2/a 1",
	hall_symbol: "-P 2ya",
	international: "P 2/c = P 1 2/a 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"75": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 13,
	choice: "c1",
	international_full: "P 1 1 2/a",
	hall_symbol: "-P 2a",
	international: "P 2/c = P 1 1 2/a",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"76": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 13,
	choice: "c2",
	international_full: "P 1 1 2/n",
	hall_symbol: "-P 2ab",
	international: "P 2/c = P 1 1 2/n",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"77": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 13,
	choice: "c3",
	international_full: "P 1 1 2/b",
	hall_symbol: "-P 2b",
	international: "P 2/c = P 1 1 2/b = P 2/b",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"78": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "a1",
	international_full: "P 2/b 1 1",
	hall_symbol: "-P 2xb",
	international: "P 2/c = P 2/b 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"79": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "a2",
	international_full: "P 2/n 1 1",
	hall_symbol: "-P 2xbc",
	international: "P 2/c = P 2/n 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"80": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^4",
	pointgroup_schoenflies: "2/m",
	international_short: "P2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 13,
	choice: "a3",
	international_full: "P 2/c 1 1",
	hall_symbol: "-P 2xc",
	international: "P 2/c = P 2/c 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"81": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "b1",
	international_full: "P 1 2_1/c 1",
	hall_symbol: "-P 2ybc",
	international: "P 2_1/c = P 1 2_1/c 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"82": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "b2",
	international_full: "P 1 2_1/n 1",
	hall_symbol: "-P 2yn",
	international: "P 2_1/c = P 1 2_1/n 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"83": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "b3",
	international_full: "P 1 2_1/a 1",
	hall_symbol: "-P 2yab",
	international: "P 2_1/c = P 1 2_1/a 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"84": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 14,
	choice: "c1",
	international_full: "P 1 1 2_1/a",
	hall_symbol: "-P 2ac",
	international: "P 2_1/c = P 1 1 2_1/a",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"85": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 14,
	choice: "c2",
	international_full: "P 1 1 2_1/n",
	hall_symbol: "-P 2n",
	international: "P 2_1/c = P 1 1 2_1/n",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"86": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 14,
	choice: "c3",
	international_full: "P 1 1 2_1/b",
	hall_symbol: "-P 2bc",
	international: "P 2_1/c = P 1 1 2_1/b = P 2_1/b",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"87": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "a1",
	international_full: "P 2_1/b 1 1",
	hall_symbol: "-P 2xab",
	international: "P 2_1/c = P 2_1/b 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"88": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "a2",
	international_full: "P 2_1/n 1 1",
	hall_symbol: "-P 2xn",
	international: "P 2_1/c = P 2_1/n 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"89": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^5",
	pointgroup_schoenflies: "2/m",
	international_short: "P2_1/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 14,
	choice: "a3",
	international_full: "P 2_1/c 1 1",
	hall_symbol: "-P 2xac",
	international: "P 2_1/c = P 2_1/c 1 1",
	arithmetic_crystal_class_number: 7,
	arithmetic_crystal_class_symbol: "2/mP"
},
	"90": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "b1",
	international_full: "C 1 2/c 1",
	hall_symbol: "-C 2yc",
	international: "C 2/c = C 1 2/c 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"91": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "b2",
	international_full: "A 1 2/n 1",
	hall_symbol: "-A 2yac",
	international: "C 2/c = A 1 2/n 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"92": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "b3",
	international_full: "I 1 2/a 1",
	hall_symbol: "-I 2ya",
	international: "C 2/c = I 1 2/a 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"93": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-b1",
	international_full: "A 1 2/a 1",
	hall_symbol: "-A 2ya",
	international: "C 2/c = A 1 2/a 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"94": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-b2",
	international_full: "C 1 2/n 1",
	hall_symbol: "-C 2ybc",
	international: "C 2/c = C 1 2/n 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"95": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-b3",
	international_full: "I 1 2/c 1",
	hall_symbol: "-I 2yc",
	international: "C 2/c = I 1 2/c 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"96": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "c1",
	international_full: "A 1 1 2/a",
	hall_symbol: "-A 2a",
	international: "C 2/c = A 1 1 2/a",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"97": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "c2",
	international_full: "B 1 1 2/n",
	hall_symbol: "-B 2bc",
	international: "C 2/c = B 1 1 2/n",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"98": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "c3",
	international_full: "I 1 1 2/b",
	hall_symbol: "-I 2b",
	international: "C 2/c = I 1 1 2/b",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"99": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "-c1",
	international_full: "B 1 1 2/b",
	hall_symbol: "-B 2b",
	international: "C 2/c = B 1 1 2/b = B 2/b",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"100": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "-c2",
	international_full: "A 1 1 2/n",
	hall_symbol: "-A 2ac",
	international: "C 2/c = A 1 1 2/n",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"101": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 15,
	choice: "-c3",
	international_full: "I 1 1 2/a",
	hall_symbol: "-I 2a",
	international: "C 2/c = I 1 1 2/a",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"102": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "a1",
	international_full: "B 2/b 1 1",
	hall_symbol: "-B 2xb",
	international: "C 2/c = B 2/b 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"103": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "a2",
	international_full: "C 2/n 1 1",
	hall_symbol: "-C 2xbc",
	international: "C 2/c = C 2/n 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"104": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "a3",
	international_full: "I 2/c 1 1",
	hall_symbol: "-I 2xc",
	international: "C 2/c = I 2/c 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"105": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-a1",
	international_full: "C 2/c 1 1",
	hall_symbol: "-C 2xc",
	international: "C 2/c = C 2/c 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"106": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-a2",
	international_full: "B 2/n 1 1",
	hall_symbol: "-B 2xbc",
	international: "C 2/c = B 2/n 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"107": {
	pointgroup_international: "C2h",
	schoenflies: "C2h^6",
	pointgroup_schoenflies: "2/m",
	international_short: "C2/c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 15,
	choice: "-a3",
	international_full: "I 2/b 1 1",
	hall_symbol: "-I 2xb",
	international: "C 2/c = I 2/b 1 1",
	arithmetic_crystal_class_number: 8,
	arithmetic_crystal_class_symbol: "2/mC"
},
	"108": {
	pointgroup_international: "D2",
	schoenflies: "D2^1",
	pointgroup_schoenflies: "222",
	international_short: "P222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 16,
	choice: "",
	international_full: "P 2 2 2",
	hall_symbol: "P 2 2",
	international: "P 2 2 2",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"109": {
	pointgroup_international: "D2",
	schoenflies: "D2^2",
	pointgroup_schoenflies: "222",
	international_short: "P222_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 17,
	choice: "",
	international_full: "P 2 2 2_1",
	hall_symbol: "P 2c 2",
	international: "P 2 2 2_1",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"110": {
	pointgroup_international: "D2",
	schoenflies: "D2^2",
	pointgroup_schoenflies: "222",
	international_short: "P2_122",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 17,
	choice: "cab",
	international_full: "P 2_1 2 2",
	hall_symbol: "P 2a 2a",
	international: "P 2_1 2 2",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"111": {
	pointgroup_international: "D2",
	schoenflies: "D2^2",
	pointgroup_schoenflies: "222",
	international_short: "P22_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 17,
	choice: "bca",
	international_full: "P 2 2_1 2",
	hall_symbol: "P 2 2b",
	international: "P 2 2_1 2",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"112": {
	pointgroup_international: "D2",
	schoenflies: "D2^3",
	pointgroup_schoenflies: "222",
	international_short: "P2_12_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 18,
	choice: "",
	international_full: "P 2_1 2_1 2",
	hall_symbol: "P 2 2ab",
	international: "P 2_1 2_1 2",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"113": {
	pointgroup_international: "D2",
	schoenflies: "D2^3",
	pointgroup_schoenflies: "222",
	international_short: "P22_12_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 18,
	choice: "cab",
	international_full: "P 2 2_1 2_1",
	hall_symbol: "P 2bc 2",
	international: "P 2 2_1 2_1",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"114": {
	pointgroup_international: "D2",
	schoenflies: "D2^3",
	pointgroup_schoenflies: "222",
	international_short: "P2_122_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 18,
	choice: "bca",
	international_full: "P 2_1 2 2_1",
	hall_symbol: "P 2ac 2ac",
	international: "P 2_1 2 2_1",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"115": {
	pointgroup_international: "D2",
	schoenflies: "D2^4",
	pointgroup_schoenflies: "222",
	international_short: "P2_12_12_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 19,
	choice: "",
	international_full: "P 2_1 2_1 2_1",
	hall_symbol: "P 2ac 2ab",
	international: "P 2_1 2_1 2_1",
	arithmetic_crystal_class_number: 9,
	arithmetic_crystal_class_symbol: "222P"
},
	"116": {
	pointgroup_international: "D2",
	schoenflies: "D2^5",
	pointgroup_schoenflies: "222",
	international_short: "C222_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 20,
	choice: "",
	international_full: "C 2 2 2_1",
	hall_symbol: "C 2c 2",
	international: "C 2 2 2_1",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"117": {
	pointgroup_international: "D2",
	schoenflies: "D2^5",
	pointgroup_schoenflies: "222",
	international_short: "A2_122",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 20,
	choice: "cab",
	international_full: "A 2_1 2 2",
	hall_symbol: "A 2a 2a",
	international: "A 2_1 2 2",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"118": {
	pointgroup_international: "D2",
	schoenflies: "D2^5",
	pointgroup_schoenflies: "222",
	international_short: "B22_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 20,
	choice: "bca",
	international_full: "B 2 2_1 2",
	hall_symbol: "B 2 2b",
	international: "B 2 2_1 2",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"119": {
	pointgroup_international: "D2",
	schoenflies: "D2^6",
	pointgroup_schoenflies: "222",
	international_short: "C222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 21,
	choice: "",
	international_full: "C 2 2 2",
	hall_symbol: "C 2 2",
	international: "C 2 2 2",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"120": {
	pointgroup_international: "D2",
	schoenflies: "D2^6",
	pointgroup_schoenflies: "222",
	international_short: "A222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 21,
	choice: "cab",
	international_full: "A 2 2 2",
	hall_symbol: "A 2 2",
	international: "A 2 2 2",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"121": {
	pointgroup_international: "D2",
	schoenflies: "D2^6",
	pointgroup_schoenflies: "222",
	international_short: "B222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 21,
	choice: "bca",
	international_full: "B 2 2 2",
	hall_symbol: "B 2 2",
	international: "B 2 2 2",
	arithmetic_crystal_class_number: 10,
	arithmetic_crystal_class_symbol: "222C"
},
	"122": {
	pointgroup_international: "D2",
	schoenflies: "D2^7",
	pointgroup_schoenflies: "222",
	international_short: "F222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 22,
	choice: "",
	international_full: "F 2 2 2",
	hall_symbol: "F 2 2",
	international: "F 2 2 2",
	arithmetic_crystal_class_number: 11,
	arithmetic_crystal_class_symbol: "222F"
},
	"123": {
	pointgroup_international: "D2",
	schoenflies: "D2^8",
	pointgroup_schoenflies: "222",
	international_short: "I222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 23,
	choice: "",
	international_full: "I 2 2 2",
	hall_symbol: "I 2 2",
	international: "I 2 2 2",
	arithmetic_crystal_class_number: 12,
	arithmetic_crystal_class_symbol: "222I"
},
	"124": {
	pointgroup_international: "D2",
	schoenflies: "D2^9",
	pointgroup_schoenflies: "222",
	international_short: "I2_12_12_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 24,
	choice: "",
	international_full: "I 2_1 2_1 2_1",
	hall_symbol: "I 2b 2c",
	international: "I 2_1 2_1 2_1",
	arithmetic_crystal_class_number: 12,
	arithmetic_crystal_class_symbol: "222I"
},
	"125": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^1",
	pointgroup_schoenflies: "mm2",
	international_short: "Pmm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 25,
	choice: "",
	international_full: "P m m 2",
	hall_symbol: "P 2 -2",
	international: "P m m 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"126": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^1",
	pointgroup_schoenflies: "mm2",
	international_short: "P2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 25,
	choice: "cab",
	international_full: "P 2 m m",
	hall_symbol: "P -2 2",
	international: "P 2 m m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"127": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^1",
	pointgroup_schoenflies: "mm2",
	international_short: "Pm2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 25,
	choice: "bca",
	international_full: "P m 2 m",
	hall_symbol: "P -2 -2",
	international: "P m 2 m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"128": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "Pmc2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 26,
	choice: "",
	international_full: "P m c 2_1",
	hall_symbol: "P 2c -2",
	international: "P m c 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"129": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "Pcm2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 26,
	choice: "ba-c",
	international_full: "P c m 2_1",
	hall_symbol: "P 2c -2c",
	international: "P c m 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"130": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1ma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 26,
	choice: "cab",
	international_full: "P 2_1 m a",
	hall_symbol: "P -2a 2a",
	international: "P 2_1 m a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"131": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1am",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 26,
	choice: "-cba",
	international_full: "P 2_1 a m",
	hall_symbol: "P -2 2a",
	international: "P 2_1 a m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"132": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "Pb2_1m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 26,
	choice: "bca",
	international_full: "P b 2_1 m",
	hall_symbol: "P -2 -2b",
	international: "P b 2_1 m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"133": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^2",
	pointgroup_schoenflies: "mm2",
	international_short: "Pm2_1b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 26,
	choice: "a-cb",
	international_full: "P m 2_1 b",
	hall_symbol: "P -2b -2",
	international: "P m 2_1 b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"134": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^3",
	pointgroup_schoenflies: "mm2",
	international_short: "Pcc2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 27,
	choice: "",
	international_full: "P c c 2",
	hall_symbol: "P 2 -2c",
	international: "P c c 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"135": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^3",
	pointgroup_schoenflies: "mm2",
	international_short: "P2aa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 27,
	choice: "cab",
	international_full: "P 2 a a",
	hall_symbol: "P -2a 2",
	international: "P 2 a a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"136": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^3",
	pointgroup_schoenflies: "mm2",
	international_short: "Pb2b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 27,
	choice: "bca",
	international_full: "P b 2 b",
	hall_symbol: "P -2b -2b",
	international: "P b 2 b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"137": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "Pma2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 28,
	choice: "",
	international_full: "P m a 2",
	hall_symbol: "P 2 -2a",
	international: "P m a 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"138": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "Pbm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 28,
	choice: "ba-c",
	international_full: "P b m 2",
	hall_symbol: "P 2 -2b",
	international: "P b m 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"139": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "P2mb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 28,
	choice: "cab",
	international_full: "P 2 m b",
	hall_symbol: "P -2b 2",
	international: "P 2 m b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"140": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "P2cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 28,
	choice: "-cba",
	international_full: "P 2 c m",
	hall_symbol: "P -2c 2",
	international: "P 2 c m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"141": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "Pc2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 28,
	choice: "bca",
	international_full: "P c 2 m",
	hall_symbol: "P -2c -2c",
	international: "P c 2 m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"142": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^4",
	pointgroup_schoenflies: "mm2",
	international_short: "Pm2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 28,
	choice: "a-cb",
	international_full: "P m 2 a",
	hall_symbol: "P -2a -2a",
	international: "P m 2 a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"143": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "Pca2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 29,
	choice: "",
	international_full: "P c a 2_1",
	hall_symbol: "P 2c -2ac",
	international: "P c a 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"144": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "Pbc2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 29,
	choice: "ba-c",
	international_full: "P b c 2_1",
	hall_symbol: "P 2c -2b",
	international: "P b c 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"145": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1ab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 29,
	choice: "cab",
	international_full: "P 2_1 a b",
	hall_symbol: "P -2b 2a",
	international: "P 2_1 a b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"146": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1ca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 29,
	choice: "-cba",
	international_full: "P 2_1 c a",
	hall_symbol: "P -2ac 2a",
	international: "P 2_1 c a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"147": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "Pc2_1b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 29,
	choice: "bca",
	international_full: "P c 2_1 b",
	hall_symbol: "P -2bc -2c",
	international: "P c 2_1 b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"148": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^5",
	pointgroup_schoenflies: "mm2",
	international_short: "Pb2_1a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 29,
	choice: "a-cb",
	international_full: "P b 2_1 a",
	hall_symbol: "P -2a -2ab",
	international: "P b 2_1 a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"149": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "Pnc2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 30,
	choice: "",
	international_full: "P n c 2",
	hall_symbol: "P 2 -2bc",
	international: "P n c 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"150": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "Pcn2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 30,
	choice: "ba-c",
	international_full: "P c n 2",
	hall_symbol: "P 2 -2ac",
	international: "P c n 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"151": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "P2na",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 30,
	choice: "cab",
	international_full: "P 2 n a",
	hall_symbol: "P -2ac 2",
	international: "P 2 n a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"152": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "P2an",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 30,
	choice: "-cba",
	international_full: "P 2 a n",
	hall_symbol: "P -2ab 2",
	international: "P 2 a n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"153": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "Pb2n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 30,
	choice: "bca",
	international_full: "P b 2 n",
	hall_symbol: "P -2ab -2ab",
	international: "P b 2 n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"154": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^6",
	pointgroup_schoenflies: "mm2",
	international_short: "Pn2b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 30,
	choice: "a-cb",
	international_full: "P n 2 b",
	hall_symbol: "P -2bc -2bc",
	international: "P n 2 b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"155": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "Pmn2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 31,
	choice: "",
	international_full: "P m n 2_1",
	hall_symbol: "P 2ac -2",
	international: "P m n 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"156": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "Pnm2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 31,
	choice: "ba-c",
	international_full: "P n m 2_1",
	hall_symbol: "P 2bc -2bc",
	international: "P n m 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"157": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1mn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 31,
	choice: "cab",
	international_full: "P 2_1 m n",
	hall_symbol: "P -2ab 2ab",
	international: "P 2_1 m n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"158": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1nm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 31,
	choice: "-cba",
	international_full: "P 2_1 n m",
	hall_symbol: "P -2 2ac",
	international: "P 2_1 n m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"159": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "Pn2_1m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 31,
	choice: "bca",
	international_full: "P n 2_1 m",
	hall_symbol: "P -2 -2bc",
	international: "P n 2_1 m",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"160": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^7",
	pointgroup_schoenflies: "mm2",
	international_short: "Pm2_1n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 31,
	choice: "a-cb",
	international_full: "P m 2_1 n",
	hall_symbol: "P -2ab -2",
	international: "P m 2_1 n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"161": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^8",
	pointgroup_schoenflies: "mm2",
	international_short: "Pba2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 32,
	choice: "",
	international_full: "P b a 2",
	hall_symbol: "P 2 -2ab",
	international: "P b a 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"162": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^8",
	pointgroup_schoenflies: "mm2",
	international_short: "P2cb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 32,
	choice: "cab",
	international_full: "P 2 c b",
	hall_symbol: "P -2bc 2",
	international: "P 2 c b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"163": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^8",
	pointgroup_schoenflies: "mm2",
	international_short: "Pc2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 32,
	choice: "bca",
	international_full: "P c 2 a",
	hall_symbol: "P -2ac -2ac",
	international: "P c 2 a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"164": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "Pna2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 33,
	choice: "",
	international_full: "P n a 2_1",
	hall_symbol: "P 2c -2n",
	international: "P n a 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"165": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "Pbn2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 33,
	choice: "ba-c",
	international_full: "P b n 2_1",
	hall_symbol: "P 2c -2ab",
	international: "P b n 2_1",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"166": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1nb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 33,
	choice: "cab",
	international_full: "P 2_1 n b",
	hall_symbol: "P -2bc 2a",
	international: "P 2_1 n b",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"167": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "P2_1cn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 33,
	choice: "-cba",
	international_full: "P 2_1 c n",
	hall_symbol: "P -2n 2a",
	international: "P 2_1 c n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"168": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "Pc2_1n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 33,
	choice: "bca",
	international_full: "P c 2_1 n",
	hall_symbol: "P -2n -2ac",
	international: "P c 2_1 n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"169": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^9",
	pointgroup_schoenflies: "mm2",
	international_short: "Pn2_1a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 33,
	choice: "a-cb",
	international_full: "P n 2_1 a",
	hall_symbol: "P -2ac -2n",
	international: "P n 2_1 a",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"170": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^10",
	pointgroup_schoenflies: "mm2",
	international_short: "Pnn2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 34,
	choice: "",
	international_full: "P n n 2",
	hall_symbol: "P 2 -2n",
	international: "P n n 2",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"171": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^10",
	pointgroup_schoenflies: "mm2",
	international_short: "P2nn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 34,
	choice: "cab",
	international_full: "P 2 n n",
	hall_symbol: "P -2n 2",
	international: "P 2 n n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"172": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^10",
	pointgroup_schoenflies: "mm2",
	international_short: "Pn2n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 34,
	choice: "bca",
	international_full: "P n 2 n",
	hall_symbol: "P -2n -2n",
	international: "P n 2 n",
	arithmetic_crystal_class_number: 13,
	arithmetic_crystal_class_symbol: "mm2P"
},
	"173": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^11",
	pointgroup_schoenflies: "mm2",
	international_short: "Cmm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 35,
	choice: "",
	international_full: "C m m 2",
	hall_symbol: "C 2 -2",
	international: "C m m 2",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"174": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^11",
	pointgroup_schoenflies: "mm2",
	international_short: "A2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 35,
	choice: "cab",
	international_full: "A 2 m m",
	hall_symbol: "A -2 2",
	international: "A 2 m m",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"175": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^11",
	pointgroup_schoenflies: "mm2",
	international_short: "Bm2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 35,
	choice: "bca",
	international_full: "B m 2 m",
	hall_symbol: "B -2 -2",
	international: "B m 2 m",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"176": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "Cmc2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 36,
	choice: "",
	international_full: "C m c 2_1",
	hall_symbol: "C 2c -2",
	international: "C m c 2_1",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"177": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "Ccm2_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 36,
	choice: "ba-c",
	international_full: "C c m 2_1",
	hall_symbol: "C 2c -2c",
	international: "C c m 2_1",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"178": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "A2_1ma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 36,
	choice: "cab",
	international_full: "A 2_1 m a",
	hall_symbol: "A -2a 2a",
	international: "A 2_1 m a",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"179": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "A2_1am",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 36,
	choice: "-cba",
	international_full: "A 2_1 a m",
	hall_symbol: "A -2 2a",
	international: "A 2_1 a m",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"180": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "Bb2_1m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 36,
	choice: "bca",
	international_full: "B b 2_1 m",
	hall_symbol: "B -2 -2b",
	international: "B b 2_1 m",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"181": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^12",
	pointgroup_schoenflies: "mm2",
	international_short: "Bm2_1b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 36,
	choice: "a-cb",
	international_full: "B m 2_1 b",
	hall_symbol: "B -2b -2",
	international: "B m 2_1 b",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"182": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^13",
	pointgroup_schoenflies: "mm2",
	international_short: "Ccc2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 37,
	choice: "",
	international_full: "C c c 2",
	hall_symbol: "C 2 -2c",
	international: "C c c 2",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"183": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^13",
	pointgroup_schoenflies: "mm2",
	international_short: "A2aa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 37,
	choice: "cab",
	international_full: "A 2 a a",
	hall_symbol: "A -2a 2",
	international: "A 2 a a",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"184": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^13",
	pointgroup_schoenflies: "mm2",
	international_short: "Bb2b",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 37,
	choice: "bca",
	international_full: "B b 2 b",
	hall_symbol: "B -2b -2b",
	international: "B b 2 b",
	arithmetic_crystal_class_number: 14,
	arithmetic_crystal_class_symbol: "mm2C"
},
	"185": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "Amm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 38,
	choice: "",
	international_full: "A m m 2",
	hall_symbol: "A 2 -2",
	international: "A m m 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"186": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "Bmm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 38,
	choice: "ba-c",
	international_full: "B m m 2",
	hall_symbol: "B 2 -2",
	international: "B m m 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"187": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "B2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 38,
	choice: "cab",
	international_full: "B 2 m m",
	hall_symbol: "B -2 2",
	international: "B 2 m m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"188": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "C2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 38,
	choice: "-cba",
	international_full: "C 2 m m",
	hall_symbol: "C -2 2",
	international: "C 2 m m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"189": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "Cm2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 38,
	choice: "bca",
	international_full: "C m 2 m",
	hall_symbol: "C -2 -2",
	international: "C m 2 m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"190": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^14",
	pointgroup_schoenflies: "mm2",
	international_short: "Am2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 38,
	choice: "a-cb",
	international_full: "A m 2 m",
	hall_symbol: "A -2 -2",
	international: "A m 2 m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"191": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "Aem2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 39,
	choice: "",
	international_full: "A e m 2",
	hall_symbol: "A 2 -2c",
	international: "A e m 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"192": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "Bme2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 39,
	choice: "ba-c",
	international_full: "B m e 2",
	hall_symbol: "B 2 -2c",
	international: "B m e 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"193": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "B2em",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 39,
	choice: "cab",
	international_full: "B 2 e m",
	hall_symbol: "B -2c 2",
	international: "B 2 e m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"194": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "C2me",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 39,
	choice: "-cba",
	international_full: "C 2 m e",
	hall_symbol: "C -2b 2",
	international: "C 2 m e",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"195": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "Cm2e",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 39,
	choice: "bca",
	international_full: "C m 2 e",
	hall_symbol: "C -2b -2b",
	international: "C m 2 e",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"196": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^15",
	pointgroup_schoenflies: "mm2",
	international_short: "Ae2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 39,
	choice: "a-cb",
	international_full: "A e 2 m",
	hall_symbol: "A -2c -2c",
	international: "A e 2 m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"197": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "Ama2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 40,
	choice: "",
	international_full: "A m a 2",
	hall_symbol: "A 2 -2a",
	international: "A m a 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"198": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "Bbm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 40,
	choice: "ba-c",
	international_full: "B b m 2",
	hall_symbol: "B 2 -2b",
	international: "B b m 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"199": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "B2mb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 40,
	choice: "cab",
	international_full: "B 2 m b",
	hall_symbol: "B -2b 2",
	international: "B 2 m b",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"200": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "C2cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 40,
	choice: "-cba",
	international_full: "C 2 c m",
	hall_symbol: "C -2c 2",
	international: "C 2 c m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"201": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "Cc2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 40,
	choice: "bca",
	international_full: "C c 2 m",
	hall_symbol: "C -2c -2c",
	international: "C c 2 m",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"202": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^16",
	pointgroup_schoenflies: "mm2",
	international_short: "Am2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 40,
	choice: "a-cb",
	international_full: "A m 2 a",
	hall_symbol: "A -2a -2a",
	international: "A m 2 a",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"203": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "Aea2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 41,
	choice: "",
	international_full: "A e a 2",
	hall_symbol: "A 2 -2ac",
	international: "A e a 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"204": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "Bbe2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 41,
	choice: "ba-c",
	international_full: "B b e 2",
	hall_symbol: "B 2 -2bc",
	international: "B b e 2",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"205": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "B2eb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 41,
	choice: "cab",
	international_full: "B 2 e b",
	hall_symbol: "B -2bc 2",
	international: "B 2 e b",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"206": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "C2ce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 41,
	choice: "-cba",
	international_full: "C 2 c e",
	hall_symbol: "C -2bc 2",
	international: "C 2 c e",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"207": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "Cc2e",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 41,
	choice: "bca",
	international_full: "C c 2 e",
	hall_symbol: "C -2bc -2bc",
	international: "C c 2 e",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"208": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^17",
	pointgroup_schoenflies: "mm2",
	international_short: "Ae2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 41,
	choice: "a-cb",
	international_full: "A e 2 a",
	hall_symbol: "A -2ac -2ac",
	international: "A e 2 a",
	arithmetic_crystal_class_number: 15,
	arithmetic_crystal_class_symbol: "2mmC"
},
	"209": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^18",
	pointgroup_schoenflies: "mm2",
	international_short: "Fmm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 42,
	choice: "",
	international_full: "F m m 2",
	hall_symbol: "F 2 -2",
	international: "F m m 2",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"210": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^18",
	pointgroup_schoenflies: "mm2",
	international_short: "F2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 42,
	choice: "cab",
	international_full: "F 2 m m",
	hall_symbol: "F -2 2",
	international: "F 2 m m",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"211": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^18",
	pointgroup_schoenflies: "mm2",
	international_short: "Fm2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 42,
	choice: "bca",
	international_full: "F m 2 m",
	hall_symbol: "F -2 -2",
	international: "F m 2 m",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"212": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^19",
	pointgroup_schoenflies: "mm2",
	international_short: "Fdd2",
	translations: [
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 43,
	choice: "",
	international_full: "F d d 2",
	hall_symbol: "F 2 -2d",
	international: "F d d 2",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"213": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^19",
	pointgroup_schoenflies: "mm2",
	international_short: "F2dd",
	translations: [
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 43,
	choice: "cab",
	international_full: "F 2 d d",
	hall_symbol: "F -2d 2",
	international: "F 2 d d",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"214": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^19",
	pointgroup_schoenflies: "mm2",
	international_short: "Fd2d",
	translations: [
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 43,
	choice: "bca",
	international_full: "F d 2 d",
	hall_symbol: "F -2d -2d",
	international: "F d 2 d",
	arithmetic_crystal_class_number: 16,
	arithmetic_crystal_class_symbol: "mm2F"
},
	"215": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^20",
	pointgroup_schoenflies: "mm2",
	international_short: "Imm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 44,
	choice: "",
	international_full: "I m m 2",
	hall_symbol: "I 2 -2",
	international: "I m m 2",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"216": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^20",
	pointgroup_schoenflies: "mm2",
	international_short: "I2mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 44,
	choice: "cab",
	international_full: "I 2 m m",
	hall_symbol: "I -2 2",
	international: "I 2 m m",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"217": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^20",
	pointgroup_schoenflies: "mm2",
	international_short: "Im2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 44,
	choice: "bca",
	international_full: "I m 2 m",
	hall_symbol: "I -2 -2",
	international: "I m 2 m",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"218": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^21",
	pointgroup_schoenflies: "mm2",
	international_short: "Iba2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 45,
	choice: "",
	international_full: "I b a 2",
	hall_symbol: "I 2 -2c",
	international: "I b a 2",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"219": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^21",
	pointgroup_schoenflies: "mm2",
	international_short: "I2cb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 45,
	choice: "cab",
	international_full: "I 2 c b",
	hall_symbol: "I -2a 2",
	international: "I 2 c b",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"220": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^21",
	pointgroup_schoenflies: "mm2",
	international_short: "Ic2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 45,
	choice: "bca",
	international_full: "I c 2 a",
	hall_symbol: "I -2b -2b",
	international: "I c 2 a",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"221": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "Ima2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 46,
	choice: "",
	international_full: "I m a 2",
	hall_symbol: "I 2 -2a",
	international: "I m a 2",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"222": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "Ibm2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 46,
	choice: "ba-c",
	international_full: "I b m 2",
	hall_symbol: "I 2 -2b",
	international: "I b m 2",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"223": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "I2mb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 46,
	choice: "cab",
	international_full: "I 2 m b",
	hall_symbol: "I -2b 2",
	international: "I 2 m b",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"224": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "I2cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 46,
	choice: "-cba",
	international_full: "I 2 c m",
	hall_symbol: "I -2c 2",
	international: "I 2 c m",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"225": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "Ic2m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 46,
	choice: "bca",
	international_full: "I c 2 m",
	hall_symbol: "I -2c -2c",
	international: "I c 2 m",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"226": {
	pointgroup_international: "C2v",
	schoenflies: "C2v^22",
	pointgroup_schoenflies: "mm2",
	international_short: "Im2a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 46,
	choice: "a-cb",
	international_full: "I m 2 a",
	hall_symbol: "I -2a -2a",
	international: "I m 2 a",
	arithmetic_crystal_class_number: 17,
	arithmetic_crystal_class_symbol: "mm2I"
},
	"227": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^1",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 47,
	choice: "",
	international_full: "P 2/m 2/m 2/m",
	hall_symbol: "-P 2 2",
	international: "P m m m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"228": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^2",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnnn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 48,
	choice: "1",
	international_full: "P 2/n 2/n 2/n",
	hall_symbol: "P 2 2 -1n",
	international: "P n n n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"229": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^2",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnnn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 48,
	choice: "2",
	international_full: "P 2/n 2/n 2/n",
	hall_symbol: "-P 2ab 2bc",
	international: "P n n n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"230": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^3",
	pointgroup_schoenflies: "mmm",
	international_short: "Pccm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 49,
	choice: "",
	international_full: "P 2/c 2/c 2/m",
	hall_symbol: "-P 2 2c",
	international: "P c c m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"231": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^3",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 49,
	choice: "cab",
	international_full: "P 2/m 2/a 2/a",
	hall_symbol: "-P 2a 2",
	international: "P m a a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"232": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^3",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 49,
	choice: "bca",
	international_full: "P 2/b 2/m 2/b",
	hall_symbol: "-P 2b 2b",
	international: "P b m b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"233": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pban",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "1",
	international_full: "P 2/b 2/a 2/n",
	hall_symbol: "P 2 2 -1ab",
	international: "P b a n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"234": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pban",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "2",
	international_full: "P 2/b 2/a 2/n",
	hall_symbol: "-P 2ab 2b",
	international: "P b a n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"235": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pncb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "1cab",
	international_full: "P 2/n 2/c 2/b",
	hall_symbol: "P 2 2 -1bc",
	international: "P n c b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"236": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pncb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "2cab",
	international_full: "P 2/n 2/c 2/b",
	hall_symbol: "-P 2b 2bc",
	international: "P n c b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"237": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcna",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "1bca",
	international_full: "P 2/c 2/n 2/a",
	hall_symbol: "P 2 2 -1ac",
	international: "P c n a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"238": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^4",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcna",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 50,
	choice: "2bca",
	international_full: "P 2/c 2/n 2/a",
	hall_symbol: "-P 2a 2c",
	international: "P c n a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"239": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "",
	international_full: "P 2_1/m 2/m 2/a",
	hall_symbol: "-P 2a 2a",
	international: "P m m a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"240": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "ba-c",
	international_full: "P 2/m 2_1/m 2/b",
	hall_symbol: "-P 2b 2",
	international: "P m m b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"241": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "cab",
	international_full: "P 2/b 2_1/m 2/m",
	hall_symbol: "-P 2 2b",
	international: "P b m m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"242": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "-cba",
	international_full: "P 2/c 2/m 2_1/m",
	hall_symbol: "-P 2c 2c",
	international: "P c m m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"243": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "bca",
	international_full: "P 2/m 2/c 2_1/m",
	hall_symbol: "-P 2c 2",
	international: "P m c m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"244": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^5",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 51,
	choice: "a-cb",
	international_full: "P 2_1/m 2/a 2/m",
	hall_symbol: "-P 2 2a",
	international: "P m a m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"245": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnna",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "",
	international_full: "P 2/n 2_1/n 2/a",
	hall_symbol: "-P 2a 2bc",
	international: "P n n a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"246": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnnb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "ba-c",
	international_full: "P 2_1/n 2/n 2/b",
	hall_symbol: "-P 2b 2n",
	international: "P n n b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"247": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbnn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "cab",
	international_full: "P 2/b 2/n 2_1/n",
	hall_symbol: "-P 2n 2b",
	international: "P b n n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"248": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcnn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "-cba",
	international_full: "P 2/c 2_1/n 2/n",
	hall_symbol: "-P 2ab 2c",
	international: "P c n n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"249": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pncn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "bca",
	international_full: "P 2_1/n 2/c 2/n",
	hall_symbol: "-P 2ab 2n",
	international: "P n c n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"250": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^6",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnan",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 52,
	choice: "a-cb",
	international_full: "P 2/n 2/a 2_1/n",
	hall_symbol: "-P 2n 2bc",
	international: "P n a n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"251": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmna",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "",
	international_full: "P 2/m 2/n 2_1/a",
	hall_symbol: "-P 2ac 2",
	international: "P m n a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"252": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "ba-c",
	international_full: "P 2/n 2/m 2_1/b",
	hall_symbol: "-P 2bc 2bc",
	international: "P n m b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"253": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbmn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "cab",
	international_full: "P 2_1/b 2/m 2/n",
	hall_symbol: "-P 2ab 2ab",
	international: "P b m n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"254": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "-cba",
	international_full: "P 2_1/c 2/n 2/m",
	hall_symbol: "-P 2 2ac",
	international: "P c n m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"255": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pncm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "bca",
	international_full: "P 2/n 2_1/c 2/m",
	hall_symbol: "-P 2 2bc",
	international: "P n c m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"256": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^7",
	pointgroup_schoenflies: "mmm",
	international_short: "Pman",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 53,
	choice: "a-cb",
	international_full: "P 2/m 2_1/a 2/n",
	hall_symbol: "-P 2ab 2",
	international: "P m a n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"257": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "",
	international_full: "P 2_1/c 2/c 2/a",
	hall_symbol: "-P 2a 2ac",
	international: "P c c a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"258": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pccb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "ba-c",
	international_full: "P 2/c 2_1/c 2/b",
	hall_symbol: "-P 2b 2c",
	international: "P c c b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"259": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "cab",
	international_full: "P 2/b 2_1/a 2/a",
	hall_symbol: "-P 2a 2b",
	international: "P b a a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"260": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "-cba",
	international_full: "P 2/c 2/a 2_1/a",
	hall_symbol: "-P 2ac 2c",
	international: "P c a a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"261": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbcb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "bca",
	international_full: "P 2/b 2/c 2_1/b",
	hall_symbol: "-P 2bc 2b",
	international: "P b c b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"262": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^8",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 54,
	choice: "a-cb",
	international_full: "P 2_1/b 2/a 2/b",
	hall_symbol: "-P 2b 2ab",
	international: "P b a b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"263": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^9",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 55,
	choice: "",
	international_full: "P 2_1/b 2_1/a 2/m",
	hall_symbol: "-P 2 2ab",
	international: "P b a m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"264": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^9",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmcb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 55,
	choice: "cab",
	international_full: "P 2/m 2_1/c 2_1/b",
	hall_symbol: "-P 2bc 2",
	international: "P m c b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"265": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^9",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 55,
	choice: "bca",
	international_full: "P 2_1/c 2/m 2_1/a",
	hall_symbol: "-P 2ac 2ac",
	international: "P c m a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"266": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^10",
	pointgroup_schoenflies: "mmm",
	international_short: "Pccn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 56,
	choice: "",
	international_full: "P 2_1/c 2_1/c 2/n",
	hall_symbol: "-P 2ab 2ac",
	international: "P c c n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"267": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^10",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 56,
	choice: "cab",
	international_full: "P 2/n 2_1/a 2_1/a",
	hall_symbol: "-P 2ac 2bc",
	international: "P n a a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"268": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^10",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbnb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 56,
	choice: "bca",
	international_full: "P 2_1/b 2/n 2_1/b",
	hall_symbol: "-P 2bc 2ab",
	international: "P b n b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"269": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "",
	international_full: "P 2/b 2_1/c 2_1/m",
	hall_symbol: "-P 2c 2b",
	international: "P b c m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"270": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "ba-c",
	international_full: "P 2_1/c 2/a 2_1/m",
	hall_symbol: "-P 2c 2ac",
	international: "P c a m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"271": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "cab",
	international_full: "P 2_1/m 2/c 2_1/a",
	hall_symbol: "-P 2ac 2a",
	international: "P m c a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"272": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "-cba",
	international_full: "P 2_1/m 2_1/a 2/b",
	hall_symbol: "-P 2b 2a",
	international: "P m a b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"273": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "bca",
	international_full: "P 2_1/b 2_1/m 2/a",
	hall_symbol: "-P 2a 2ab",
	international: "P b m a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"274": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^11",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 57,
	choice: "a-cb",
	international_full: "P 2/c 2_1/m 2_1/b",
	hall_symbol: "-P 2bc 2c",
	international: "P c m b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"275": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^12",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 58,
	choice: "",
	international_full: "P 2_1/n 2_1/n 2/m",
	hall_symbol: "-P 2 2n",
	international: "P n n m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"276": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^12",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmnn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 58,
	choice: "cab",
	international_full: "P 2/m 2_1/n 2_1/n",
	hall_symbol: "-P 2n 2",
	international: "P m n n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"277": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^12",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnmn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 58,
	choice: "bca",
	international_full: "P 2_1/n 2/m 2_1/n",
	hall_symbol: "-P 2n 2n",
	international: "P n m n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"278": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmmn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "1",
	international_full: "P 2_1/m 2_1/m 2/n",
	hall_symbol: "P 2 2ab -1ab",
	international: "P m m n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"279": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmmn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "2",
	international_full: "P 2_1/m 2_1/m 2/n",
	hall_symbol: "-P 2ab 2a",
	international: "P m m n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"280": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "1cab",
	international_full: "P 2/n 2_1/m 2_1/m",
	hall_symbol: "P 2bc 2 -1bc",
	international: "P n m m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"281": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "2cab",
	international_full: "P 2/n 2_1/m 2_1/m",
	hall_symbol: "-P 2c 2bc",
	international: "P n m m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"282": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "1bca",
	international_full: "P 2_1/m 2/n 2_1/m",
	hall_symbol: "P 2ac 2ac -1ac",
	international: "P m n m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"283": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^13",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 59,
	choice: "2bca",
	international_full: "P 2_1/m 2/n 2_1/m",
	hall_symbol: "-P 2c 2a",
	international: "P m n m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"284": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbcn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "",
	international_full: "P 2_1/b 2/c 2_1/n",
	hall_symbol: "-P 2n 2ab",
	international: "P b c n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"285": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcan",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "ba-c",
	international_full: "P 2/c 2_1/a 2_1/n",
	hall_symbol: "-P 2n 2c",
	international: "P c a n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"286": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "cab",
	international_full: "P 2_1/n 2_1/c 2/a",
	hall_symbol: "-P 2a 2n",
	international: "P n c a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"287": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "-cba",
	international_full: "P 2_1/n 2/a 2_1/b",
	hall_symbol: "-P 2bc 2n",
	international: "P n a b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"288": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbna",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "bca",
	international_full: "P 2/b 2_1/n 2_1/a",
	hall_symbol: "-P 2ac 2b",
	international: "P b n a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"289": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^14",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcnb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 60,
	choice: "a-cb",
	international_full: "P 2_1/c 2_1/n 2/b",
	hall_symbol: "-P 2b 2ac",
	international: "P c n b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"290": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^15",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 61,
	choice: "",
	international_full: "P 2_1/b 2_1/c 2_1/a",
	hall_symbol: "-P 2ac 2ab",
	international: "P b c a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"291": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^15",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 61,
	choice: "ba-c",
	international_full: "P 2_1/c 2_1/a 2_1/b",
	hall_symbol: "-P 2bc 2ac",
	international: "P c a b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"292": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "",
	international_full: "P 2_1/n 2_1/m 2_1/a",
	hall_symbol: "-P 2ac 2n",
	international: "P n m a",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"293": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmnb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "ba-c",
	international_full: "P 2_1/m 2_1/n 2_1/b",
	hall_symbol: "-P 2bc 2a",
	international: "P m n b",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"294": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pbnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "cab",
	international_full: "P 2_1/b 2_1/n 2_1/m",
	hall_symbol: "-P 2c 2ab",
	international: "P b n m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"295": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pcmn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "-cba",
	international_full: "P 2_1/c 2_1/m 2_1/n",
	hall_symbol: "-P 2n 2ac",
	international: "P c m n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"296": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pmcn",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "bca",
	international_full: "P 2_1/m 2_1/c 2_1/n",
	hall_symbol: "-P 2n 2a",
	international: "P m c n",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"297": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^16",
	pointgroup_schoenflies: "mmm",
	international_short: "Pnam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 62,
	choice: "a-cb",
	international_full: "P 2_1/n 2_1/a 2_1/m",
	hall_symbol: "-P 2c 2n",
	international: "P n a m",
	arithmetic_crystal_class_number: 18,
	arithmetic_crystal_class_symbol: "mmmP"
},
	"298": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Cmcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "",
	international_full: "C 2/m 2/c 2_1/m",
	hall_symbol: "-C 2c 2",
	international: "C m c m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"299": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "ba-c",
	international_full: "C 2/c 2/m 2_1/m",
	hall_symbol: "-C 2c 2c",
	international: "C c m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"300": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Amma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "cab",
	international_full: "A 2_1/m 2/m 2/a",
	hall_symbol: "-A 2a 2a",
	international: "A m m a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"301": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Amam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "-cba",
	international_full: "A 2_1/m 2/a 2/m",
	hall_symbol: "-A 2 2a",
	international: "A m a m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"302": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "bca",
	international_full: "B 2/b 2_1/m 2/m",
	hall_symbol: "-B 2 2b",
	international: "B b m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"303": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^17",
	pointgroup_schoenflies: "mmm",
	international_short: "Bmmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 63,
	choice: "a-cb",
	international_full: "B 2/m 2_1/m 2/b",
	hall_symbol: "-B 2b 2",
	international: "B m m b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"304": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Cmce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "",
	international_full: "C 2/m 2/c 2_1/e",
	hall_symbol: "-C 2bc 2",
	international: "C m c e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"305": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccme",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "ba-c",
	international_full: "C 2/c 2/m 2_1/e",
	hall_symbol: "-C 2bc 2bc",
	international: "C c m e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"306": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Aema",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "cab",
	international_full: "A 2_1/e 2/m 2/a",
	hall_symbol: "-A 2ac 2ac",
	international: "A e m a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"307": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Aeam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "-cba",
	international_full: "A 2_1/e 2/a 2/m",
	hall_symbol: "-A 2 2ac",
	international: "A e a m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"308": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbem",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "bca",
	international_full: "B 2/b 2_1/e 2/m",
	hall_symbol: "-B 2 2bc",
	international: "B b e m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"309": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^18",
	pointgroup_schoenflies: "mmm",
	international_short: "Bmeb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 64,
	choice: "a-cb",
	international_full: "B 2/m 2_1/e 2/b",
	hall_symbol: "-B 2bc 2",
	international: "B m e b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"310": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^19",
	pointgroup_schoenflies: "mmm",
	international_short: "Cmmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 65,
	choice: "",
	international_full: "C 2/m 2/m 2/m",
	hall_symbol: "-C 2 2",
	international: "C m m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"311": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^19",
	pointgroup_schoenflies: "mmm",
	international_short: "Ammm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 65,
	choice: "cab",
	international_full: "A 2/m 2/m 2/m",
	hall_symbol: "-A 2 2",
	international: "A m m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"312": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^19",
	pointgroup_schoenflies: "mmm",
	international_short: "Bmmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 65,
	choice: "bca",
	international_full: "B 2/m 2/m 2/m",
	hall_symbol: "-B 2 2",
	international: "B m m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"313": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^20",
	pointgroup_schoenflies: "mmm",
	international_short: "Cccm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 66,
	choice: "",
	international_full: "C 2/c 2/c 2/m",
	hall_symbol: "-C 2 2c",
	international: "C c c m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"314": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^20",
	pointgroup_schoenflies: "mmm",
	international_short: "Amaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 66,
	choice: "cab",
	international_full: "A 2/m 2/a 2/a",
	hall_symbol: "-A 2a 2",
	international: "A m a a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"315": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^20",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbmb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 66,
	choice: "bca",
	international_full: "B 2/b 2/m 2/b",
	hall_symbol: "-B 2b 2b",
	international: "B b m b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"316": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Cmme",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "",
	international_full: "C 2/m 2/m 2/e",
	hall_symbol: "-C 2b 2",
	international: "C m m e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"317": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Cmme",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "ba-c",
	international_full: "C 2/m 2/m 2/e",
	hall_symbol: "-C 2b 2b",
	international: "C m m e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"318": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Aemm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "cab",
	international_full: "A 2/e 2/m 2/m",
	hall_symbol: "-A 2c 2c",
	international: "A e m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"319": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Aemm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "-cba",
	international_full: "A 2/e 2/m 2/m",
	hall_symbol: "-A 2 2c",
	international: "A e m m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"320": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Bmem",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "bca",
	international_full: "B 2/m 2/e 2/m",
	hall_symbol: "-B 2 2c",
	international: "B m e m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"321": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^21",
	pointgroup_schoenflies: "mmm",
	international_short: "Bmem",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 67,
	choice: "a-cb",
	international_full: "B 2/m 2/e 2/m",
	hall_symbol: "-B 2c 2",
	international: "B m e m",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"322": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1",
	international_full: "C 2/c 2/c 2/e",
	hall_symbol: "C 2 2 -1bc",
	international: "C c c e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"323": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2",
	international_full: "C 2/c 2/c 2/e",
	hall_symbol: "-C 2b 2bc",
	international: "C c c e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"324": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1ba-c",
	international_full: "C 2/c 2/c 2/e",
	hall_symbol: "C 2 2 -1bc",
	international: "C c c e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"325": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Ccce",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2ba-c",
	international_full: "C 2/c 2/c 2/e",
	hall_symbol: "-C 2b 2c",
	international: "C c c e",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"326": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Aeaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1cab",
	international_full: "A 2/e 2/a 2/a",
	hall_symbol: "A 2 2 -1ac",
	international: "A e a a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"327": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Aeaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2cab",
	international_full: "A 2/e 2/a 2/a",
	hall_symbol: "-A 2a 2c",
	international: "A e a a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"328": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Aeaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1-cba",
	international_full: "A 2/e 2/a 2/a",
	hall_symbol: "A 2 2 -1ac",
	international: "A e a a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"329": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Aeaa",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2-cba",
	international_full: "A 2/e 2/a 2/a",
	hall_symbol: "-A 2ac 2c",
	international: "A e a a",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"330": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbeb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1bca",
	international_full: "B 2/b 2/e 2/b",
	hall_symbol: "B 2 2 -1bc",
	international: "B b e b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"331": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbcb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2bca",
	international_full: "B 2/b 2/e 2/b",
	hall_symbol: "-B 2bc 2b",
	international: "B b c b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"332": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbeb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "1a-cb",
	international_full: "B 2/b 2/e 2/b",
	hall_symbol: "B 2 2 -1bc",
	international: "B b e b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"333": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^22",
	pointgroup_schoenflies: "mmm",
	international_short: "Bbeb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 68,
	choice: "2a-cb",
	international_full: "B 2/b 2/e 2/b",
	hall_symbol: "-B 2b 2bc",
	international: "B b e b",
	arithmetic_crystal_class_number: 19,
	arithmetic_crystal_class_symbol: "mmmC"
},
	"334": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^23",
	pointgroup_schoenflies: "mmm",
	international_short: "Fmmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 69,
	choice: "",
	international_full: "F 2/m 2/m 2/m",
	hall_symbol: "-F 2 2",
	international: "F m m m",
	arithmetic_crystal_class_number: 20,
	arithmetic_crystal_class_symbol: "mmmF"
},
	"335": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^24",
	pointgroup_schoenflies: "mmm",
	international_short: "Fddd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 70,
	choice: "1",
	international_full: "F 2/d 2/d 2/d",
	hall_symbol: "F 2 2 -1d",
	international: "F d d d",
	arithmetic_crystal_class_number: 20,
	arithmetic_crystal_class_symbol: "mmmF"
},
	"336": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^24",
	pointgroup_schoenflies: "mmm",
	international_short: "Fddd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 70,
	choice: "2",
	international_full: "F 2/d 2/d 2/d",
	hall_symbol: "-F 2uv 2vw",
	international: "F d d d",
	arithmetic_crystal_class_number: 20,
	arithmetic_crystal_class_symbol: "mmmF"
},
	"337": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^25",
	pointgroup_schoenflies: "mmm",
	international_short: "Immm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 71,
	choice: "",
	international_full: "I 2/m 2/m 2/m",
	hall_symbol: "-I 2 2",
	international: "I m m m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"338": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^26",
	pointgroup_schoenflies: "mmm",
	international_short: "Ibam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 72,
	choice: "",
	international_full: "I 2/b 2/a 2/m",
	hall_symbol: "-I 2 2c",
	international: "I b a m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"339": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^26",
	pointgroup_schoenflies: "mmm",
	international_short: "Imcb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 72,
	choice: "cab",
	international_full: "I 2/m 2/c 2/b",
	hall_symbol: "-I 2a 2",
	international: "I m c b",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"340": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^26",
	pointgroup_schoenflies: "mmm",
	international_short: "Icma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 72,
	choice: "bca",
	international_full: "I 2/c 2/m 2/a",
	hall_symbol: "-I 2b 2b",
	international: "I c m a",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"341": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^27",
	pointgroup_schoenflies: "mmm",
	international_short: "Ibca",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 73,
	choice: "",
	international_full: "I 2/b 2/c 2/a",
	hall_symbol: "-I 2b 2c",
	international: "I b c a",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"342": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^27",
	pointgroup_schoenflies: "mmm",
	international_short: "Icab",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 73,
	choice: "ba-c",
	international_full: "I 2/c 2/a 2/b",
	hall_symbol: "-I 2a 2b",
	international: "I c a b",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"343": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Imma",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "",
	international_full: "I 2/m 2/m 2/a",
	hall_symbol: "-I 2b 2",
	international: "I m m a",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"344": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Immb",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "ba-c",
	international_full: "I 2/m 2/m 2/b",
	hall_symbol: "-I 2a 2a",
	international: "I m m b",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"345": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Ibmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "cab",
	international_full: "I 2/b 2/m 2/m",
	hall_symbol: "-I 2c 2c",
	international: "I b m m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"346": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Icmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "-cba",
	international_full: "I 2/c 2/m 2/m",
	hall_symbol: "-I 2 2b",
	international: "I c m m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"347": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Imcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "bca",
	international_full: "I 2/m 2/c 2/m",
	hall_symbol: "-I 2 2a",
	international: "I m c m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"348": {
	pointgroup_international: "D2h",
	schoenflies: "D2h^28",
	pointgroup_schoenflies: "mmm",
	international_short: "Imam",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 74,
	choice: "a-cb",
	international_full: "I 2/m 2/a 2/m",
	hall_symbol: "-I 2c 2",
	international: "I m a m",
	arithmetic_crystal_class_number: 21,
	arithmetic_crystal_class_symbol: "mmmI"
},
	"349": {
	pointgroup_international: "C4",
	schoenflies: "C4^1",
	pointgroup_schoenflies: "4",
	international_short: "P4",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 75,
	choice: "",
	international_full: "P 4",
	hall_symbol: "P 4",
	international: "P 4",
	arithmetic_crystal_class_number: 22,
	arithmetic_crystal_class_symbol: "4P"
},
	"350": {
	pointgroup_international: "C4",
	schoenflies: "C4^2",
	pointgroup_schoenflies: "4",
	international_short: "P4_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 76,
	choice: "",
	international_full: "P 4_1",
	hall_symbol: "P 4w",
	international: "P 4_1",
	arithmetic_crystal_class_number: 22,
	arithmetic_crystal_class_symbol: "4P"
},
	"351": {
	pointgroup_international: "C4",
	schoenflies: "C4^3",
	pointgroup_schoenflies: "4",
	international_short: "P4_2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 77,
	choice: "",
	international_full: "P 4_2",
	hall_symbol: "P 4c",
	international: "P 4_2",
	arithmetic_crystal_class_number: 22,
	arithmetic_crystal_class_symbol: "4P"
},
	"352": {
	pointgroup_international: "C4",
	schoenflies: "C4^4",
	pointgroup_schoenflies: "4",
	international_short: "P4_3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 78,
	choice: "",
	international_full: "P 4_3",
	hall_symbol: "P 4cw",
	international: "P 4_3",
	arithmetic_crystal_class_number: 22,
	arithmetic_crystal_class_symbol: "4P"
},
	"353": {
	pointgroup_international: "C4",
	schoenflies: "C4^5",
	pointgroup_schoenflies: "4",
	international_short: "I4",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 79,
	choice: "",
	international_full: "I 4",
	hall_symbol: "I 4",
	international: "I 4",
	arithmetic_crystal_class_number: 23,
	arithmetic_crystal_class_symbol: "4I"
},
	"354": {
	pointgroup_international: "C4",
	schoenflies: "C4^6",
	pointgroup_schoenflies: "4",
	international_short: "I4_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 80,
	choice: "",
	international_full: "I 4_1",
	hall_symbol: "I 4bw",
	international: "I 4_1",
	arithmetic_crystal_class_number: 23,
	arithmetic_crystal_class_symbol: "4I"
},
	"355": {
	pointgroup_international: "S4",
	schoenflies: "S4^1",
	pointgroup_schoenflies: "-4",
	international_short: "P-4",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 81,
	choice: "",
	international_full: "P -4",
	hall_symbol: "P -4",
	international: "P -4",
	arithmetic_crystal_class_number: 24,
	arithmetic_crystal_class_symbol: "-4P"
},
	"356": {
	pointgroup_international: "S4",
	schoenflies: "S4^2",
	pointgroup_schoenflies: "-4",
	international_short: "I-4",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 82,
	choice: "",
	international_full: "I -4",
	hall_symbol: "I -4",
	international: "I -4",
	arithmetic_crystal_class_number: 25,
	arithmetic_crystal_class_symbol: "-4I"
},
	"357": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^1",
	pointgroup_schoenflies: "4/m",
	international_short: "P4/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 83,
	choice: "",
	international_full: "P 4/m",
	hall_symbol: "-P 4",
	international: "P 4/m",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"358": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^2",
	pointgroup_schoenflies: "4/m",
	international_short: "P4_2/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 84,
	choice: "",
	international_full: "P 4_2/m",
	hall_symbol: "-P 4c",
	international: "P 4_2/m",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"359": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^3",
	pointgroup_schoenflies: "4/m",
	international_short: "P4/n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 85,
	choice: "1",
	international_full: "P 4/n",
	hall_symbol: "P 4ab -1ab",
	international: "P 4/n",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"360": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^3",
	pointgroup_schoenflies: "4/m",
	international_short: "P4/n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 85,
	choice: "2",
	international_full: "P 4/n",
	hall_symbol: "-P 4a",
	international: "P 4/n",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"361": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^4",
	pointgroup_schoenflies: "4/m",
	international_short: "P4_2/n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 86,
	choice: "1",
	international_full: "P 4_2/n",
	hall_symbol: "P 4n -1n",
	international: "P 4_2/n",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"362": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^4",
	pointgroup_schoenflies: "4/m",
	international_short: "P4_2/n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 86,
	choice: "2",
	international_full: "P 4_2/n",
	hall_symbol: "-P 4bc",
	international: "P 4_2/n",
	arithmetic_crystal_class_number: 26,
	arithmetic_crystal_class_symbol: "4/mP"
},
	"363": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^5",
	pointgroup_schoenflies: "4/m",
	international_short: "I4/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 87,
	choice: "",
	international_full: "I 4/m",
	hall_symbol: "-I 4",
	international: "I 4/m",
	arithmetic_crystal_class_number: 27,
	arithmetic_crystal_class_symbol: "4/mI"
},
	"364": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^6",
	pointgroup_schoenflies: "4/m",
	international_short: "I4_1/a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 88,
	choice: "1",
	international_full: "I 4_1/a",
	hall_symbol: "I 4bw -1bw",
	international: "I 4_1/a",
	arithmetic_crystal_class_number: 27,
	arithmetic_crystal_class_symbol: "4/mI"
},
	"365": {
	pointgroup_international: "C4h",
	schoenflies: "C4h^6",
	pointgroup_schoenflies: "4/m",
	international_short: "I4_1/a",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 88,
	choice: "2",
	international_full: "I 4_1/a",
	hall_symbol: "-I 4ad",
	international: "I 4_1/a",
	arithmetic_crystal_class_number: 27,
	arithmetic_crystal_class_symbol: "4/mI"
},
	"366": {
	pointgroup_international: "D4",
	schoenflies: "D4^1",
	pointgroup_schoenflies: "422",
	international_short: "P422",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 89,
	choice: "",
	international_full: "P 4 2 2",
	hall_symbol: "P 4 2",
	international: "P 4 2 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"367": {
	pointgroup_international: "D4",
	schoenflies: "D4^2",
	pointgroup_schoenflies: "422",
	international_short: "P42_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 90,
	choice: "",
	international_full: "P 4 2_1 2",
	hall_symbol: "P 4ab 2ab",
	international: "P 4 2_1 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"368": {
	pointgroup_international: "D4",
	schoenflies: "D4^3",
	pointgroup_schoenflies: "422",
	international_short: "P4_122",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 91,
	choice: "",
	international_full: "P 4_1 2 2",
	hall_symbol: "P 4w 2c",
	international: "P 4_1 2 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"369": {
	pointgroup_international: "D4",
	schoenflies: "D4^4",
	pointgroup_schoenflies: "422",
	international_short: "P4_12_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.75
		],
		[
			0.5,
			0.5,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 92,
	choice: "",
	international_full: "P 4_1 2_1 2",
	hall_symbol: "P 4abw 2nw",
	international: "P 4_1 2_1 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"370": {
	pointgroup_international: "D4",
	schoenflies: "D4^5",
	pointgroup_schoenflies: "422",
	international_short: "P4_222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 93,
	choice: "",
	international_full: "P 4_2 2 2",
	hall_symbol: "P 4c 2",
	international: "P 4_2 2 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"371": {
	pointgroup_international: "D4",
	schoenflies: "D4^6",
	pointgroup_schoenflies: "422",
	international_short: "P4_22_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 94,
	choice: "",
	international_full: "P 4_2 2_1 2",
	hall_symbol: "P 4n 2n",
	international: "P 4_2 2_1 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"372": {
	pointgroup_international: "D4",
	schoenflies: "D4^7",
	pointgroup_schoenflies: "422",
	international_short: "P4_322",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 95,
	choice: "",
	international_full: "P 4_3 2 2",
	hall_symbol: "P 4cw 2c",
	international: "P 4_3 2 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"373": {
	pointgroup_international: "D4",
	schoenflies: "D4^8",
	pointgroup_schoenflies: "422",
	international_short: "P4_32_12",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.75
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 96,
	choice: "",
	international_full: "P 4_3 2_1 2",
	hall_symbol: "P 4nw 2abw",
	international: "P 4_3 2_1 2",
	arithmetic_crystal_class_number: 28,
	arithmetic_crystal_class_symbol: "422P"
},
	"374": {
	pointgroup_international: "D4",
	schoenflies: "D4^9",
	pointgroup_schoenflies: "422",
	international_short: "I422",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 97,
	choice: "",
	international_full: "I 4 2 2",
	hall_symbol: "I 4 2",
	international: "I 4 2 2",
	arithmetic_crystal_class_number: 29,
	arithmetic_crystal_class_symbol: "422I"
},
	"375": {
	pointgroup_international: "D4",
	schoenflies: "D4^10",
	pointgroup_schoenflies: "422",
	international_short: "I4_122",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 98,
	choice: "",
	international_full: "I 4_1 2 2",
	hall_symbol: "I 4bw 2bw",
	international: "I 4_1 2 2",
	arithmetic_crystal_class_number: 29,
	arithmetic_crystal_class_symbol: "422I"
},
	"376": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^1",
	pointgroup_schoenflies: "4mm",
	international_short: "P4mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 99,
	choice: "",
	international_full: "P 4 m m",
	hall_symbol: "P 4 -2",
	international: "P 4 m m",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"377": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^2",
	pointgroup_schoenflies: "4mm",
	international_short: "P4bm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 100,
	choice: "",
	international_full: "P 4 b m",
	hall_symbol: "P 4 -2ab",
	international: "P 4 b m",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"378": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^3",
	pointgroup_schoenflies: "4mm",
	international_short: "P4_2cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 101,
	choice: "",
	international_full: "P 4_2 c m",
	hall_symbol: "P 4c -2c",
	international: "P 4_2 c m",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"379": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^4",
	pointgroup_schoenflies: "4mm",
	international_short: "P4_2nm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 102,
	choice: "",
	international_full: "P 4_2 n m",
	hall_symbol: "P 4n -2n",
	international: "P 4_2 n m",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"380": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^5",
	pointgroup_schoenflies: "4mm",
	international_short: "P4cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 103,
	choice: "",
	international_full: "P 4 c c",
	hall_symbol: "P 4 -2c",
	international: "P 4 c c",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"381": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^6",
	pointgroup_schoenflies: "4mm",
	international_short: "P4nc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 104,
	choice: "",
	international_full: "P 4 n c",
	hall_symbol: "P 4 -2n",
	international: "P 4 n c",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"382": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^7",
	pointgroup_schoenflies: "4mm",
	international_short: "P4_2mc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 105,
	choice: "",
	international_full: "P 4_2 m c",
	hall_symbol: "P 4c -2",
	international: "P 4_2 m c",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"383": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^8",
	pointgroup_schoenflies: "4mm",
	international_short: "P4_2bc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 106,
	choice: "",
	international_full: "P 4_2 b c",
	hall_symbol: "P 4c -2ab",
	international: "P 4_2 b c",
	arithmetic_crystal_class_number: 30,
	arithmetic_crystal_class_symbol: "4mmP"
},
	"384": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^9",
	pointgroup_schoenflies: "4mm",
	international_short: "I4mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 107,
	choice: "",
	international_full: "I 4 m m",
	hall_symbol: "I 4 -2",
	international: "I 4 m m",
	arithmetic_crystal_class_number: 31,
	arithmetic_crystal_class_symbol: "4mmI"
},
	"385": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^10",
	pointgroup_schoenflies: "4mm",
	international_short: "I4cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 108,
	choice: "",
	international_full: "I 4 c m",
	hall_symbol: "I 4 -2c",
	international: "I 4 c m",
	arithmetic_crystal_class_number: 31,
	arithmetic_crystal_class_symbol: "4mmI"
},
	"386": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^11",
	pointgroup_schoenflies: "4mm",
	international_short: "I4_1md",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 109,
	choice: "",
	international_full: "I 4_1 m d",
	hall_symbol: "I 4bw -2",
	international: "I 4_1 m d",
	arithmetic_crystal_class_number: 31,
	arithmetic_crystal_class_symbol: "4mmI"
},
	"387": {
	pointgroup_international: "C4v",
	schoenflies: "C4v^12",
	pointgroup_schoenflies: "4mm",
	international_short: "I4_1cd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 110,
	choice: "",
	international_full: "I 4_1 c d",
	hall_symbol: "I 4bw -2c",
	international: "I 4_1 c d",
	arithmetic_crystal_class_number: 31,
	arithmetic_crystal_class_symbol: "4mmI"
},
	"388": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^1",
	pointgroup_schoenflies: "-42m",
	international_short: "P-42m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 111,
	choice: "",
	international_full: "P -4 2 m",
	hall_symbol: "P -4 2",
	international: "P -4 2 m",
	arithmetic_crystal_class_number: 32,
	arithmetic_crystal_class_symbol: "-42mP"
},
	"389": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^2",
	pointgroup_schoenflies: "-42m",
	international_short: "P-42c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 112,
	choice: "",
	international_full: "P -4 2 c",
	hall_symbol: "P -4 2c",
	international: "P -4 2 c",
	arithmetic_crystal_class_number: 32,
	arithmetic_crystal_class_symbol: "-42mP"
},
	"390": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^3",
	pointgroup_schoenflies: "-42m",
	international_short: "P-42_1m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 113,
	choice: "",
	international_full: "P -4 2_1 m",
	hall_symbol: "P -4 2ab",
	international: "P -4 2_1 m",
	arithmetic_crystal_class_number: 32,
	arithmetic_crystal_class_symbol: "-42mP"
},
	"391": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^4",
	pointgroup_schoenflies: "-42m",
	international_short: "P-42_1c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 114,
	choice: "",
	international_full: "P -4 2_1 c",
	hall_symbol: "P -4 2n",
	international: "P -4 2_1 c",
	arithmetic_crystal_class_number: 32,
	arithmetic_crystal_class_symbol: "-42mP"
},
	"392": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^5",
	pointgroup_schoenflies: "-42m",
	international_short: "P-4m2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 115,
	choice: "",
	international_full: "P -4 m 2",
	hall_symbol: "P -4 -2",
	international: "P -4 m 2",
	arithmetic_crystal_class_number: 33,
	arithmetic_crystal_class_symbol: "-4m2P"
},
	"393": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^6",
	pointgroup_schoenflies: "-42m",
	international_short: "P-4c2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 116,
	choice: "",
	international_full: "P -4 c 2",
	hall_symbol: "P -4 -2c",
	international: "P -4 c 2",
	arithmetic_crystal_class_number: 33,
	arithmetic_crystal_class_symbol: "-4m2P"
},
	"394": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^7",
	pointgroup_schoenflies: "-42m",
	international_short: "P-4b2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 117,
	choice: "",
	international_full: "P -4 b 2",
	hall_symbol: "P -4 -2ab",
	international: "P -4 b 2",
	arithmetic_crystal_class_number: 33,
	arithmetic_crystal_class_symbol: "-4m2P"
},
	"395": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^8",
	pointgroup_schoenflies: "-42m",
	international_short: "P-4n2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 118,
	choice: "",
	international_full: "P -4 n 2",
	hall_symbol: "P -4 -2n",
	international: "P -4 n 2",
	arithmetic_crystal_class_number: 33,
	arithmetic_crystal_class_symbol: "-4m2P"
},
	"396": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^9",
	pointgroup_schoenflies: "-42m",
	international_short: "I-4m2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 119,
	choice: "",
	international_full: "I -4 m 2",
	hall_symbol: "I -4 -2",
	international: "I -4 m 2",
	arithmetic_crystal_class_number: 34,
	arithmetic_crystal_class_symbol: "-4m2I"
},
	"397": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^10",
	pointgroup_schoenflies: "-42m",
	international_short: "I-4c2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 120,
	choice: "",
	international_full: "I -4 c 2",
	hall_symbol: "I -4 -2c",
	international: "I -4 c 2",
	arithmetic_crystal_class_number: 34,
	arithmetic_crystal_class_symbol: "-4m2I"
},
	"398": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^11",
	pointgroup_schoenflies: "-42m",
	international_short: "I-42m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 121,
	choice: "",
	international_full: "I -4 2 m",
	hall_symbol: "I -4 2",
	international: "I -4 2 m",
	arithmetic_crystal_class_number: 35,
	arithmetic_crystal_class_symbol: "-42mI"
},
	"399": {
	pointgroup_international: "D2d",
	schoenflies: "D2d^12",
	pointgroup_schoenflies: "-42m",
	international_short: "I-42d",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 122,
	choice: "",
	international_full: "I -4 2 d",
	hall_symbol: "I -4 2bw",
	international: "I -4 2 d",
	arithmetic_crystal_class_number: 35,
	arithmetic_crystal_class_symbol: "-42mI"
},
	"400": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^1",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/mmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 123,
	choice: "",
	international_full: "P 4/m 2/m 2/m",
	hall_symbol: "-P 4 2",
	international: "P 4/m m m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"401": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^2",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/mcc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 124,
	choice: "",
	international_full: "P 4/m 2/c 2/c",
	hall_symbol: "-P 4 2c",
	international: "P 4/m c c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"402": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^3",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nbm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 125,
	choice: "1",
	international_full: "P 4/n 2/b 2/m",
	hall_symbol: "P 4 2 -1ab",
	international: "P 4/n b m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"403": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^3",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nbm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 125,
	choice: "2",
	international_full: "P 4/n 2/b 2/m",
	hall_symbol: "-P 4a 2b",
	international: "P 4/n b m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"404": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^4",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nnc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 126,
	choice: "1",
	international_full: "P 4/n 2/n 2/c",
	hall_symbol: "P 4 2 -1n",
	international: "P 4/n n c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"405": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^4",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nnc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 126,
	choice: "2",
	international_full: "P 4/n 2/n 2/c",
	hall_symbol: "-P 4a 2bc",
	international: "P 4/n n c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"406": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^5",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/mbm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 127,
	choice: "",
	international_full: "P 4/m 2_1/b m",
	hall_symbol: "-P 4 2ab",
	international: "P 4/m b m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"407": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^6",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/mnc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 128,
	choice: "",
	international_full: "P 4/m 2_1/n c",
	hall_symbol: "-P 4 2n",
	international: "P 4/m n c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"408": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^7",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 129,
	choice: "1",
	international_full: "P 4/n 2_1/m m",
	hall_symbol: "P 4ab 2ab -1ab",
	international: "P 4/n m m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"409": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^7",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/nmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 129,
	choice: "2",
	international_full: "P 4/n 2_1/m m",
	hall_symbol: "-P 4a 2a",
	international: "P 4/n m m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"410": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^8",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/ncc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 130,
	choice: "1",
	international_full: "P 4/n 2_1/c c",
	hall_symbol: "P 4ab 2n -1ab",
	international: "P 4/n c c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"411": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^8",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4/ncc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 130,
	choice: "2",
	international_full: "P 4/n 2_1/c c",
	hall_symbol: "-P 4a 2ac",
	international: "P 4/n c c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"412": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^9",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/mmc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 131,
	choice: "",
	international_full: "P 4_2/m 2/m 2/c",
	hall_symbol: "-P 4c 2",
	international: "P 4_2/m m c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"413": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^10",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/mcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 132,
	choice: "",
	international_full: "P 4_2/m 2/c 2/m",
	hall_symbol: "-P 4c 2c",
	international: "P 4_2/m c m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"414": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^11",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nbc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 133,
	choice: "1",
	international_full: "P 4_2/n 2/b 2/c",
	hall_symbol: "P 4n 2c -1n",
	international: "P 4_2/n b c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"415": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^11",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nbc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 133,
	choice: "2",
	international_full: "P 4_2/n 2/b 2/c",
	hall_symbol: "-P 4ac 2b",
	international: "P 4_2/n b c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"416": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^12",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 134,
	choice: "1",
	international_full: "P 4_2/n 2/n 2/m",
	hall_symbol: "P 4n 2 -1n",
	international: "P 4_2/n n m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"417": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^12",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 134,
	choice: "2",
	international_full: "P 4_2/n 2/n 2/m",
	hall_symbol: "-P 4ac 2bc",
	international: "P 4_2/n n m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"418": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^13",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/mbc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 135,
	choice: "",
	international_full: "P 4_2/m 2_1/b 2/c",
	hall_symbol: "-P 4c 2ab",
	international: "P 4_2/m b c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"419": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^14",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/mnm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 136,
	choice: "",
	international_full: "P 4_2/m 2_1/n 2/m",
	hall_symbol: "-P 4n 2n",
	international: "P 4_2/m n m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"420": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^15",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nmc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 137,
	choice: "1",
	international_full: "P 4_2/n 2_1/m 2/c",
	hall_symbol: "P 4n 2n -1n",
	international: "P 4_2/n m c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"421": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^15",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/nmc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 137,
	choice: "2",
	international_full: "P 4_2/n 2_1/m 2/c",
	hall_symbol: "-P 4ac 2a",
	international: "P 4_2/n m c",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"422": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^16",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/ncm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 138,
	choice: "1",
	international_full: "P 4_2/n 2_1/c 2/m",
	hall_symbol: "P 4n 2ab -1n",
	international: "P 4_2/n c m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"423": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^16",
	pointgroup_schoenflies: "4/mmm",
	international_short: "P4_2/ncm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 138,
	choice: "2",
	international_full: "P 4_2/n 2_1/c 2/m",
	hall_symbol: "-P 4ac 2ac",
	international: "P 4_2/n c m",
	arithmetic_crystal_class_number: 36,
	arithmetic_crystal_class_symbol: "4/mmmP"
},
	"424": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^17",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4/mmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 139,
	choice: "",
	international_full: "I 4/m 2/m 2/m",
	hall_symbol: "-I 4 2",
	international: "I 4/m m m",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"425": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^18",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4/mcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 140,
	choice: "",
	international_full: "I 4/m 2/c 2/m",
	hall_symbol: "-I 4 2c",
	international: "I 4/m c m",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"426": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^19",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4_1/amd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 141,
	choice: "1",
	international_full: "I 4_1/a 2/m 2/d",
	hall_symbol: "I 4bw 2bw -1bw",
	international: "I 4_1/a m d",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"427": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^19",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4_1/amd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 141,
	choice: "2",
	international_full: "I 4_1/a 2/m 2/d",
	hall_symbol: "-I 4bd 2",
	international: "I 4_1/a m d",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"428": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^20",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4_1/acd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0.5,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 142,
	choice: "1",
	international_full: "I 4_1/a 2/c 2/d",
	hall_symbol: "I 4bw 2aw -1bw",
	international: "I 4_1/a c d",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"429": {
	pointgroup_international: "D4h",
	schoenflies: "D4h^20",
	pointgroup_schoenflies: "4/mmm",
	international_short: "I4_1/acd",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 142,
	choice: "2",
	international_full: "I 4_1/a 2/c 2/d",
	hall_symbol: "-I 4bd 2c",
	international: "I 4_1/a c d",
	arithmetic_crystal_class_number: 37,
	arithmetic_crystal_class_symbol: "4/mmmI"
},
	"430": {
	pointgroup_international: "C3",
	schoenflies: "C3^1",
	pointgroup_schoenflies: "3",
	international_short: "P3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 143,
	choice: "",
	international_full: "P 3",
	hall_symbol: "P 3",
	international: "P 3",
	arithmetic_crystal_class_number: 38,
	arithmetic_crystal_class_symbol: "3P"
},
	"431": {
	pointgroup_international: "C3",
	schoenflies: "C3^2",
	pointgroup_schoenflies: "3",
	international_short: "P3_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 144,
	choice: "",
	international_full: "P 3_1",
	hall_symbol: "P 31",
	international: "P 3_1",
	arithmetic_crystal_class_number: 38,
	arithmetic_crystal_class_symbol: "3P"
},
	"432": {
	pointgroup_international: "C3",
	schoenflies: "C3^3",
	pointgroup_schoenflies: "3",
	international_short: "P3_2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 145,
	choice: "",
	international_full: "P 3_2",
	hall_symbol: "P 32",
	international: "P 3_2",
	arithmetic_crystal_class_number: 38,
	arithmetic_crystal_class_symbol: "3P"
},
	"433": {
	pointgroup_international: "C3",
	schoenflies: "C3^4",
	pointgroup_schoenflies: "3",
	international_short: "R3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 146,
	choice: "H",
	international_full: "R 3",
	hall_symbol: "R 3",
	international: "R 3",
	arithmetic_crystal_class_number: 39,
	arithmetic_crystal_class_symbol: "3R"
},
	"434": {
	pointgroup_international: "C3",
	schoenflies: "C3^4",
	pointgroup_schoenflies: "3",
	international_short: "R3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 146,
	choice: "R",
	international_full: "R 3",
	hall_symbol: "P 3*",
	international: "R 3",
	arithmetic_crystal_class_number: 39,
	arithmetic_crystal_class_symbol: "3R"
},
	"435": {
	pointgroup_international: "C3i",
	schoenflies: "C3i^1",
	pointgroup_schoenflies: "-3",
	international_short: "P-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 147,
	choice: "",
	international_full: "P -3",
	hall_symbol: "-P 3",
	international: "P -3",
	arithmetic_crystal_class_number: 40,
	arithmetic_crystal_class_symbol: "-3P"
},
	"436": {
	pointgroup_international: "C3i",
	schoenflies: "C3i^2",
	pointgroup_schoenflies: "-3",
	international_short: "R-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 148,
	choice: "H",
	international_full: "R -3",
	hall_symbol: "-R 3",
	international: "R -3",
	arithmetic_crystal_class_number: 41,
	arithmetic_crystal_class_symbol: "-3R"
},
	"437": {
	pointgroup_international: "C3i",
	schoenflies: "C3i^2",
	pointgroup_schoenflies: "-3",
	international_short: "R-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 148,
	choice: "R",
	international_full: "R -3",
	hall_symbol: "-P 3*",
	international: "R -3",
	arithmetic_crystal_class_number: 41,
	arithmetic_crystal_class_symbol: "-3R"
},
	"438": {
	pointgroup_international: "D3",
	schoenflies: "D3^1",
	pointgroup_schoenflies: "32",
	international_short: "P312",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 149,
	choice: "",
	international_full: "P 3 1 2",
	hall_symbol: "P 3 2",
	international: "P 3 1 2",
	arithmetic_crystal_class_number: 42,
	arithmetic_crystal_class_symbol: "312P"
},
	"439": {
	pointgroup_international: "D3",
	schoenflies: "D3^2",
	pointgroup_schoenflies: "32",
	international_short: "P321",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 150,
	choice: "",
	international_full: "P 3 2 1",
	hall_symbol: "P 3 2\"",
	international: "P 3 2 1",
	arithmetic_crystal_class_number: 43,
	arithmetic_crystal_class_symbol: "321P"
},
	"440": {
	pointgroup_international: "D3",
	schoenflies: "D3^3",
	pointgroup_schoenflies: "32",
	international_short: "P3_112",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 151,
	choice: "",
	international_full: "P 3_1 1 2",
	hall_symbol: "P 31 2c (0 0 1)",
	international: "P 3_1 1 2",
	arithmetic_crystal_class_number: 42,
	arithmetic_crystal_class_symbol: "312P"
},
	"441": {
	pointgroup_international: "D3",
	schoenflies: "D3^4",
	pointgroup_schoenflies: "32",
	international_short: "P3_121",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 152,
	choice: "",
	international_full: "P 3_1 2 1",
	hall_symbol: "P 31 2\"",
	international: "P 3_1 2 1",
	arithmetic_crystal_class_number: 43,
	arithmetic_crystal_class_symbol: "321P"
},
	"442": {
	pointgroup_international: "D3",
	schoenflies: "D3^5",
	pointgroup_schoenflies: "32",
	international_short: "P3_212",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 153,
	choice: "",
	international_full: "P 3_2 1 2",
	hall_symbol: "P 32 2c (0 0 -1)",
	international: "P 3_2 1 2",
	arithmetic_crystal_class_number: 42,
	arithmetic_crystal_class_symbol: "312P"
},
	"443": {
	pointgroup_international: "D3",
	schoenflies: "D3^6",
	pointgroup_schoenflies: "32",
	international_short: "P3_221",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 154,
	choice: "",
	international_full: "P 3_2 2 1",
	hall_symbol: "P 32 2\"",
	international: "P 3_2 2 1",
	arithmetic_crystal_class_number: 43,
	arithmetic_crystal_class_symbol: "321P"
},
	"444": {
	pointgroup_international: "D3",
	schoenflies: "D3^7",
	pointgroup_schoenflies: "32",
	international_short: "R32",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 155,
	choice: "H",
	international_full: "R 3 2",
	hall_symbol: "R 3 2\"",
	international: "R 3 2",
	arithmetic_crystal_class_number: 44,
	arithmetic_crystal_class_symbol: "32R"
},
	"445": {
	pointgroup_international: "D3",
	schoenflies: "D3^7",
	pointgroup_schoenflies: "32",
	international_short: "R32",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 155,
	choice: "R",
	international_full: "R 3 2",
	hall_symbol: "P 3* 2",
	international: "R 3 2",
	arithmetic_crystal_class_number: 44,
	arithmetic_crystal_class_symbol: "32R"
},
	"446": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^1",
	pointgroup_schoenflies: "3m",
	international_short: "P3m1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 156,
	choice: "",
	international_full: "P 3 m 1",
	hall_symbol: "P 3 -2\"",
	international: "P 3 m 1",
	arithmetic_crystal_class_number: 45,
	arithmetic_crystal_class_symbol: "3m1P"
},
	"447": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^2",
	pointgroup_schoenflies: "3m",
	international_short: "P31m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 157,
	choice: "",
	international_full: "P 3 1 m",
	hall_symbol: "P 3 -2",
	international: "P 3 1 m",
	arithmetic_crystal_class_number: 46,
	arithmetic_crystal_class_symbol: "31mP"
},
	"448": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^3",
	pointgroup_schoenflies: "3m",
	international_short: "P3c1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 158,
	choice: "",
	international_full: "P 3 c 1",
	hall_symbol: "P 3 -2\"c",
	international: "P 3 c 1",
	arithmetic_crystal_class_number: 45,
	arithmetic_crystal_class_symbol: "3m1P"
},
	"449": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^4",
	pointgroup_schoenflies: "3m",
	international_short: "P31c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 159,
	choice: "",
	international_full: "P 3 1 c",
	hall_symbol: "P 3 -2c",
	international: "P 3 1 c",
	arithmetic_crystal_class_number: 46,
	arithmetic_crystal_class_symbol: "31mP"
},
	"450": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^5",
	pointgroup_schoenflies: "3m",
	international_short: "R3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 160,
	choice: "H",
	international_full: "R 3 m",
	hall_symbol: "R 3 -2\"",
	international: "R 3 m",
	arithmetic_crystal_class_number: 47,
	arithmetic_crystal_class_symbol: "3mR"
},
	"451": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^5",
	pointgroup_schoenflies: "3m",
	international_short: "R3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 160,
	choice: "R",
	international_full: "R 3 m",
	hall_symbol: "P 3* -2",
	international: "R 3 m",
	arithmetic_crystal_class_number: 47,
	arithmetic_crystal_class_symbol: "3mR"
},
	"452": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^6",
	pointgroup_schoenflies: "3m",
	international_short: "R3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 161,
	choice: "H",
	international_full: "R 3 c",
	hall_symbol: "R 3 -2\"c",
	international: "R 3 c",
	arithmetic_crystal_class_number: 47,
	arithmetic_crystal_class_symbol: "3mR"
},
	"453": {
	pointgroup_international: "C3v",
	schoenflies: "C3v^6",
	pointgroup_schoenflies: "3m",
	international_short: "R3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 161,
	choice: "R",
	international_full: "R 3 c",
	hall_symbol: "P 3* -2n",
	international: "R 3 c",
	arithmetic_crystal_class_number: 47,
	arithmetic_crystal_class_symbol: "3mR"
},
	"454": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^1",
	pointgroup_schoenflies: "-3m",
	international_short: "P-31m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 162,
	choice: "",
	international_full: "P -3 1 2/m",
	hall_symbol: "-P 3 2",
	international: "P -3 1 m",
	arithmetic_crystal_class_number: 48,
	arithmetic_crystal_class_symbol: "-31mP"
},
	"455": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^2",
	pointgroup_schoenflies: "-3m",
	international_short: "P-31c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 163,
	choice: "",
	international_full: "P -3 1 2/c",
	hall_symbol: "-P 3 2c",
	international: "P -3 1 c",
	arithmetic_crystal_class_number: 48,
	arithmetic_crystal_class_symbol: "-31mP"
},
	"456": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^3",
	pointgroup_schoenflies: "-3m",
	international_short: "P-3m1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 164,
	choice: "",
	international_full: "P -3 2/m 1",
	hall_symbol: "-P 3 2\"",
	international: "P -3 m 1",
	arithmetic_crystal_class_number: 49,
	arithmetic_crystal_class_symbol: "-3m1P"
},
	"457": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^4",
	pointgroup_schoenflies: "-3m",
	international_short: "P-3c1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 165,
	choice: "",
	international_full: "P -3 2/c 1",
	hall_symbol: "-P 3 2\"c",
	international: "P -3 c 1",
	arithmetic_crystal_class_number: 49,
	arithmetic_crystal_class_symbol: "-3m1P"
},
	"458": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^5",
	pointgroup_schoenflies: "-3m",
	international_short: "R-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 166,
	choice: "H",
	international_full: "R -3 2/m",
	hall_symbol: "-R 3 2\"",
	international: "R -3 m",
	arithmetic_crystal_class_number: 50,
	arithmetic_crystal_class_symbol: "-3mR"
},
	"459": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^5",
	pointgroup_schoenflies: "-3m",
	international_short: "R-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 166,
	choice: "R",
	international_full: "R -3 2/m",
	hall_symbol: "-P 3* 2",
	international: "R -3 m",
	arithmetic_crystal_class_number: 50,
	arithmetic_crystal_class_symbol: "-3mR"
},
	"460": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^6",
	pointgroup_schoenflies: "-3m",
	international_short: "R-3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.3333333333333333
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.6666666666666666,
			0.3333333333333333,
			0.8333333333333334
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.6666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		],
		[
			0.3333333333333333,
			0.6666666666666666,
			0.16666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 167,
	choice: "H",
	international_full: "R -3 2/c",
	hall_symbol: "-R 3 2\"c",
	international: "R -3 c",
	arithmetic_crystal_class_number: 50,
	arithmetic_crystal_class_symbol: "-3mR"
},
	"461": {
	pointgroup_international: "D3d",
	schoenflies: "D3d^6",
	pointgroup_schoenflies: "-3m",
	international_short: "R-3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 167,
	choice: "R",
	international_full: "R -3 2/c",
	hall_symbol: "-P 3* 2n",
	international: "R -3 c",
	arithmetic_crystal_class_number: 50,
	arithmetic_crystal_class_symbol: "-3mR"
},
	"462": {
	pointgroup_international: "C6",
	schoenflies: "C6^1",
	pointgroup_schoenflies: "6",
	international_short: "P6",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 168,
	choice: "",
	international_full: "P 6",
	hall_symbol: "P 6",
	international: "P 6",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"463": {
	pointgroup_international: "C6",
	schoenflies: "C6^2",
	pointgroup_schoenflies: "6",
	international_short: "P6_1",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.16666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.8333333333333334
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 169,
	choice: "",
	international_full: "P 6_1",
	hall_symbol: "P 61",
	international: "P 6_1",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"464": {
	pointgroup_international: "C6",
	schoenflies: "C6^3",
	pointgroup_schoenflies: "6",
	international_short: "P6_5",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.8333333333333334
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.16666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 170,
	choice: "",
	international_full: "P 6_5",
	hall_symbol: "P 65",
	international: "P 6_5",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"465": {
	pointgroup_international: "C6",
	schoenflies: "C6^4",
	pointgroup_schoenflies: "6",
	international_short: "P6_2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 171,
	choice: "",
	international_full: "P 6_2",
	hall_symbol: "P 62",
	international: "P 6_2",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"466": {
	pointgroup_international: "C6",
	schoenflies: "C6^5",
	pointgroup_schoenflies: "6",
	international_short: "P6_4",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 172,
	choice: "",
	international_full: "P 6_4",
	hall_symbol: "P 64",
	international: "P 6_4",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"467": {
	pointgroup_international: "C6",
	schoenflies: "C6^6",
	pointgroup_schoenflies: "6",
	international_short: "P6_3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 173,
	choice: "",
	international_full: "P 6_3",
	hall_symbol: "P 6c",
	international: "P 6_3",
	arithmetic_crystal_class_number: 51,
	arithmetic_crystal_class_symbol: "6P"
},
	"468": {
	pointgroup_international: "C3h",
	schoenflies: "C3h^1",
	pointgroup_schoenflies: "-6",
	international_short: "P-6",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 174,
	choice: "",
	international_full: "P -6",
	hall_symbol: "P -6",
	international: "P -6",
	arithmetic_crystal_class_number: 52,
	arithmetic_crystal_class_symbol: "-6P"
},
	"469": {
	pointgroup_international: "C6h",
	schoenflies: "C6h^1",
	pointgroup_schoenflies: "6/m",
	international_short: "P6/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 175,
	choice: "",
	international_full: "P 6/m",
	hall_symbol: "-P 6",
	international: "P 6/m",
	arithmetic_crystal_class_number: 53,
	arithmetic_crystal_class_symbol: "6/mP"
},
	"470": {
	pointgroup_international: "C6h",
	schoenflies: "C6h^2",
	pointgroup_schoenflies: "6/m",
	international_short: "P6_3/m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 176,
	choice: "",
	international_full: "P 6_3/m",
	hall_symbol: "-P 6c",
	international: "P 6_3/m",
	arithmetic_crystal_class_number: 53,
	arithmetic_crystal_class_symbol: "6/mP"
},
	"471": {
	pointgroup_international: "D6",
	schoenflies: "D6^1",
	pointgroup_schoenflies: "622",
	international_short: "P622",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 177,
	choice: "",
	international_full: "P 6 2 2",
	hall_symbol: "P 6 2",
	international: "P 6 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"472": {
	pointgroup_international: "D6",
	schoenflies: "D6^2",
	pointgroup_schoenflies: "622",
	international_short: "P6_122",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.16666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.8333333333333334
		],
		[
			0,
			0,
			0.8333333333333334
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.16666666666666666
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 178,
	choice: "",
	international_full: "P 6_1 2 2",
	hall_symbol: "P 61 2 (0 0 -1)",
	international: "P 6_1 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"473": {
	pointgroup_international: "D6",
	schoenflies: "D6^3",
	pointgroup_schoenflies: "622",
	international_short: "P6_522",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.8333333333333334
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.16666666666666666
		],
		[
			0,
			0,
			0.16666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.8333333333333334
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 179,
	choice: "",
	international_full: "P 6_5 2 2",
	hall_symbol: "P 65 2 (0 0 1)",
	international: "P 6_5 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"474": {
	pointgroup_international: "D6",
	schoenflies: "D6^4",
	pointgroup_schoenflies: "622",
	international_short: "P6_222",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 180,
	choice: "",
	international_full: "P 6_2 2 2",
	hall_symbol: "P 62 2c (0 0 1)",
	international: "P 6_2 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"475": {
	pointgroup_international: "D6",
	schoenflies: "D6^5",
	pointgroup_schoenflies: "622",
	international_short: "P6_422",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.3333333333333333
		],
		[
			0,
			0,
			0.6666666666666666
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 181,
	choice: "",
	international_full: "P 6_4 2 2",
	hall_symbol: "P 64 2c (0 0 -1)",
	international: "P 6_4 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"476": {
	pointgroup_international: "D6",
	schoenflies: "D6^6",
	pointgroup_schoenflies: "622",
	international_short: "P6_322",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 182,
	choice: "",
	international_full: "P 6_3 2 2",
	hall_symbol: "P 6c 2c",
	international: "P 6_3 2 2",
	arithmetic_crystal_class_number: 54,
	arithmetic_crystal_class_symbol: "622P"
},
	"477": {
	pointgroup_international: "C6v",
	schoenflies: "C6v^1",
	pointgroup_schoenflies: "6mm",
	international_short: "P6mm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 183,
	choice: "",
	international_full: "P 6 m m",
	hall_symbol: "P 6 -2",
	international: "P 6 m m",
	arithmetic_crystal_class_number: 55,
	arithmetic_crystal_class_symbol: "6mmP"
},
	"478": {
	pointgroup_international: "C6v",
	schoenflies: "C6v^2",
	pointgroup_schoenflies: "6mm",
	international_short: "P6cc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 184,
	choice: "",
	international_full: "P 6 c c",
	hall_symbol: "P 6 -2c",
	international: "P 6 c c",
	arithmetic_crystal_class_number: 55,
	arithmetic_crystal_class_symbol: "6mmP"
},
	"479": {
	pointgroup_international: "C6v",
	schoenflies: "C6v^3",
	pointgroup_schoenflies: "6mm",
	international_short: "P6_3cm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 185,
	choice: "",
	international_full: "P 6_3 c m",
	hall_symbol: "P 6c -2",
	international: "P 6_3 c m",
	arithmetic_crystal_class_number: 55,
	arithmetic_crystal_class_symbol: "6mmP"
},
	"480": {
	pointgroup_international: "C6v",
	schoenflies: "C6v^4",
	pointgroup_schoenflies: "6mm",
	international_short: "P6_3mc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 186,
	choice: "",
	international_full: "P 6_3 m c",
	hall_symbol: "P 6c -2c",
	international: "P 6_3 m c",
	arithmetic_crystal_class_number: 55,
	arithmetic_crystal_class_symbol: "6mmP"
},
	"481": {
	pointgroup_international: "D3h",
	schoenflies: "D3h^1",
	pointgroup_schoenflies: "-6m2",
	international_short: "P-6m2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 187,
	choice: "",
	international_full: "P -6 m 2",
	hall_symbol: "P -6 2",
	international: "P -6 m 2",
	arithmetic_crystal_class_number: 56,
	arithmetic_crystal_class_symbol: "-62mP"
},
	"482": {
	pointgroup_international: "D3h",
	schoenflies: "D3h^2",
	pointgroup_schoenflies: "-6m2",
	international_short: "P-6c2",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 188,
	choice: "",
	international_full: "P -6 c 2",
	hall_symbol: "P -6c 2",
	international: "P -6 c 2",
	arithmetic_crystal_class_number: 56,
	arithmetic_crystal_class_symbol: "-62mP"
},
	"483": {
	pointgroup_international: "D3h",
	schoenflies: "D3h^3",
	pointgroup_schoenflies: "-6m2",
	international_short: "P-62m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 189,
	choice: "",
	international_full: "P -6 2 m",
	hall_symbol: "P -6 -2",
	international: "P -6 2 m",
	arithmetic_crystal_class_number: 57,
	arithmetic_crystal_class_symbol: "-6m2P"
},
	"484": {
	pointgroup_international: "D3h",
	schoenflies: "D3h^4",
	pointgroup_schoenflies: "-6m2",
	international_short: "P-62c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		]
	],
	number: 190,
	choice: "",
	international_full: "P -6 2 c",
	hall_symbol: "P -6c -2c",
	international: "P -6 2 c",
	arithmetic_crystal_class_number: 57,
	arithmetic_crystal_class_symbol: "-6m2P"
},
	"485": {
	pointgroup_international: "D6h",
	schoenflies: "D6h^1",
	pointgroup_schoenflies: "6/mmm",
	international_short: "P6/mmm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 191,
	choice: "",
	international_full: "P 6/m 2/m 2/m",
	hall_symbol: "-P 6 2",
	international: "P 6/m m m",
	arithmetic_crystal_class_number: 58,
	arithmetic_crystal_class_symbol: "6/mmm"
},
	"486": {
	pointgroup_international: "D6h",
	schoenflies: "D6h^2",
	pointgroup_schoenflies: "6/mmm",
	international_short: "P6/mcc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 192,
	choice: "",
	international_full: "P 6/m 2/c 2/c",
	hall_symbol: "-P 6 2c",
	international: "P 6/m c c",
	arithmetic_crystal_class_number: 58,
	arithmetic_crystal_class_symbol: "6/mmm"
},
	"487": {
	pointgroup_international: "D6h",
	schoenflies: "D6h^3",
	pointgroup_schoenflies: "6/mmm",
	international_short: "P6_3/mcm",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 193,
	choice: "",
	international_full: "P 6_3/m 2/c 2/m",
	hall_symbol: "-P 6c 2",
	international: "P 6_3/m c m",
	arithmetic_crystal_class_number: 58,
	arithmetic_crystal_class_symbol: "6/mmm"
},
	"488": {
	pointgroup_international: "D6h",
	schoenflies: "D6h^4",
	pointgroup_schoenflies: "6/mmm",
	international_short: "P6_3/mmc",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				1,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				-1,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				-1,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				1,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		]
	],
	number: 194,
	choice: "",
	international_full: "P 6_3/m 2/m 2/c",
	hall_symbol: "-P 6c 2c",
	international: "P 6_3/m m c",
	arithmetic_crystal_class_number: 58,
	arithmetic_crystal_class_symbol: "6/mmm"
},
	"489": {
	pointgroup_international: "T",
	schoenflies: "T^1",
	pointgroup_schoenflies: "23",
	international_short: "P23",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 195,
	choice: "",
	international_full: "P 2 3",
	hall_symbol: "P 2 2 3",
	international: "P 2 3",
	arithmetic_crystal_class_number: 59,
	arithmetic_crystal_class_symbol: "23P"
},
	"490": {
	pointgroup_international: "T",
	schoenflies: "T^2",
	pointgroup_schoenflies: "23",
	international_short: "F23",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 196,
	choice: "",
	international_full: "F 2 3",
	hall_symbol: "F 2 2 3",
	international: "F 2 3",
	arithmetic_crystal_class_number: 60,
	arithmetic_crystal_class_symbol: "23F"
},
	"491": {
	pointgroup_international: "T",
	schoenflies: "T^3",
	pointgroup_schoenflies: "23",
	international_short: "I23",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 197,
	choice: "",
	international_full: "I 2 3",
	hall_symbol: "I 2 2 3",
	international: "I 2 3",
	arithmetic_crystal_class_number: 61,
	arithmetic_crystal_class_symbol: "23I"
},
	"492": {
	pointgroup_international: "T",
	schoenflies: "T^4",
	pointgroup_schoenflies: "23",
	international_short: "P2_13",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 198,
	choice: "",
	international_full: "P 2_1 3",
	hall_symbol: "P 2ac 2ab 3",
	international: "P 2_1 3",
	arithmetic_crystal_class_number: 59,
	arithmetic_crystal_class_symbol: "23P"
},
	"493": {
	pointgroup_international: "T",
	schoenflies: "T^5",
	pointgroup_schoenflies: "23",
	international_short: "I2_13",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		]
	],
	number: 199,
	choice: "",
	international_full: "I 2_1 3",
	hall_symbol: "I 2b 2c 3",
	international: "I 2_1 3",
	arithmetic_crystal_class_number: 61,
	arithmetic_crystal_class_symbol: "23I"
},
	"494": {
	pointgroup_international: "Th",
	schoenflies: "Th^1",
	pointgroup_schoenflies: "m-3",
	international_short: "Pm-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 200,
	choice: "",
	international_full: "P 2/m -3",
	hall_symbol: "-P 2 2 3",
	international: "P m -3",
	arithmetic_crystal_class_number: 62,
	arithmetic_crystal_class_symbol: "m-3P"
},
	"495": {
	pointgroup_international: "Th",
	schoenflies: "Th^2",
	pointgroup_schoenflies: "m-3",
	international_short: "Pn-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 201,
	choice: "1",
	international_full: "P 2/n -3",
	hall_symbol: "P 2 2 3 -1n",
	international: "P n -3",
	arithmetic_crystal_class_number: 62,
	arithmetic_crystal_class_symbol: "m-3P"
},
	"496": {
	pointgroup_international: "Th",
	schoenflies: "Th^2",
	pointgroup_schoenflies: "m-3",
	international_short: "Pn-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 201,
	choice: "2",
	international_full: "P 2/n -3",
	hall_symbol: "-P 2ab 2bc 3",
	international: "P n -3",
	arithmetic_crystal_class_number: 62,
	arithmetic_crystal_class_symbol: "m-3P"
},
	"497": {
	pointgroup_international: "Th",
	schoenflies: "Th^3",
	pointgroup_schoenflies: "m-3",
	international_short: "Fm-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 202,
	choice: "",
	international_full: "F 2/m -3",
	hall_symbol: "-F 2 2 3",
	international: "F m -3",
	arithmetic_crystal_class_number: 63,
	arithmetic_crystal_class_symbol: "m-3F"
},
	"498": {
	pointgroup_international: "Th",
	schoenflies: "Th^4",
	pointgroup_schoenflies: "m-3",
	international_short: "Fd-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 203,
	choice: "1",
	international_full: "F 2/d -3",
	hall_symbol: "F 2 2 3 -1d",
	international: "F d -3",
	arithmetic_crystal_class_number: 63,
	arithmetic_crystal_class_symbol: "m-3F"
},
	"499": {
	pointgroup_international: "Th",
	schoenflies: "Th^4",
	pointgroup_schoenflies: "m-3",
	international_short: "Fd-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 203,
	choice: "2",
	international_full: "F 2/d -3",
	hall_symbol: "-F 2uv 2vw 3",
	international: "F d -3",
	arithmetic_crystal_class_number: 63,
	arithmetic_crystal_class_symbol: "m-3F"
},
	"500": {
	pointgroup_international: "Th",
	schoenflies: "Th^5",
	pointgroup_schoenflies: "m-3",
	international_short: "Im-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 204,
	choice: "",
	international_full: "I 2/m -3",
	hall_symbol: "-I 2 2 3",
	international: "I m -3",
	arithmetic_crystal_class_number: 64,
	arithmetic_crystal_class_symbol: "m-3I"
},
	"501": {
	pointgroup_international: "Th",
	schoenflies: "Th^6",
	pointgroup_schoenflies: "m-3",
	international_short: "Pa-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 205,
	choice: "",
	international_full: "P 2_1/a -3",
	hall_symbol: "-P 2ac 2ab 3",
	international: "P a -3",
	arithmetic_crystal_class_number: 62,
	arithmetic_crystal_class_symbol: "m-3P"
},
	"502": {
	pointgroup_international: "Th",
	schoenflies: "Th^7",
	pointgroup_schoenflies: "m-3",
	international_short: "Ia-3",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		]
	],
	number: 206,
	choice: "",
	international_full: "I 2_1/a -3",
	hall_symbol: "-I 2b 2c 3",
	international: "I a -3",
	arithmetic_crystal_class_number: 64,
	arithmetic_crystal_class_symbol: "m-3I"
},
	"503": {
	pointgroup_international: "O",
	schoenflies: "O^1",
	pointgroup_schoenflies: "432",
	international_short: "P432",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 207,
	choice: "",
	international_full: "P 4 3 2",
	hall_symbol: "P 4 2 3",
	international: "P 4 3 2",
	arithmetic_crystal_class_number: 65,
	arithmetic_crystal_class_symbol: "432P"
},
	"504": {
	pointgroup_international: "O",
	schoenflies: "O^2",
	pointgroup_schoenflies: "432",
	international_short: "P4_232",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 208,
	choice: "",
	international_full: "P 4_2 3 2",
	hall_symbol: "P 4n 2 3",
	international: "P 4_2 3 2",
	arithmetic_crystal_class_number: 65,
	arithmetic_crystal_class_symbol: "432P"
},
	"505": {
	pointgroup_international: "O",
	schoenflies: "O^3",
	pointgroup_schoenflies: "432",
	international_short: "F432",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 209,
	choice: "",
	international_full: "F 4 3 2",
	hall_symbol: "F 4 2 3",
	international: "F 4 3 2",
	arithmetic_crystal_class_number: 66,
	arithmetic_crystal_class_symbol: "432F"
},
	"506": {
	pointgroup_international: "O",
	schoenflies: "O^4",
	pointgroup_schoenflies: "432",
	international_short: "F4_132",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 210,
	choice: "",
	international_full: "F 4_1 3 2",
	hall_symbol: "F 4d 2 3",
	international: "F 4_1 3 2",
	arithmetic_crystal_class_number: 66,
	arithmetic_crystal_class_symbol: "432F"
},
	"507": {
	pointgroup_international: "O",
	schoenflies: "O^5",
	pointgroup_schoenflies: "432",
	international_short: "I432",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 211,
	choice: "",
	international_full: "I 4 3 2",
	hall_symbol: "I 4 2 3",
	international: "I 4 3 2",
	arithmetic_crystal_class_number: 67,
	arithmetic_crystal_class_symbol: "432I"
},
	"508": {
	pointgroup_international: "O",
	schoenflies: "O^6",
	pointgroup_schoenflies: "432",
	international_short: "P4_332",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 212,
	choice: "",
	international_full: "P 4_3 3 2",
	hall_symbol: "P 4acd 2ab 3",
	international: "P 4_3 3 2",
	arithmetic_crystal_class_number: 65,
	arithmetic_crystal_class_symbol: "432P"
},
	"509": {
	pointgroup_international: "O",
	schoenflies: "O^7",
	pointgroup_schoenflies: "432",
	international_short: "P4_132",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 213,
	choice: "",
	international_full: "P 4_1 3 2",
	hall_symbol: "P 4bd 2ab 3",
	international: "P 4_1 3 2",
	arithmetic_crystal_class_number: 65,
	arithmetic_crystal_class_symbol: "432P"
},
	"510": {
	pointgroup_international: "O",
	schoenflies: "O^8",
	pointgroup_schoenflies: "432",
	international_short: "I4_132",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		]
	],
	number: 214,
	choice: "",
	international_full: "I 4_1 3 2",
	hall_symbol: "I 4bd 2c 3",
	international: "I 4_1 3 2",
	arithmetic_crystal_class_number: 67,
	arithmetic_crystal_class_symbol: "432I"
},
	"511": {
	pointgroup_international: "Td",
	schoenflies: "Td^1",
	pointgroup_schoenflies: "-43m",
	international_short: "P-43m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 215,
	choice: "",
	international_full: "P -4 3 m",
	hall_symbol: "P -4 2 3",
	international: "P -4 3 m",
	arithmetic_crystal_class_number: 68,
	arithmetic_crystal_class_symbol: "-43mP"
},
	"512": {
	pointgroup_international: "Td",
	schoenflies: "Td^2",
	pointgroup_schoenflies: "-43m",
	international_short: "F-43m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 216,
	choice: "",
	international_full: "F -4 3 m",
	hall_symbol: "F -4 2 3",
	international: "F -4 3 m",
	arithmetic_crystal_class_number: 69,
	arithmetic_crystal_class_symbol: "-43mF"
},
	"513": {
	pointgroup_international: "Td",
	schoenflies: "Td^3",
	pointgroup_schoenflies: "-43m",
	international_short: "I-43m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 217,
	choice: "",
	international_full: "I -4 3 m",
	hall_symbol: "I -4 2 3",
	international: "I -4 3 m",
	arithmetic_crystal_class_number: 70,
	arithmetic_crystal_class_symbol: "-43mI"
},
	"514": {
	pointgroup_international: "Td",
	schoenflies: "Td^4",
	pointgroup_schoenflies: "-43m",
	international_short: "P-43n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 218,
	choice: "",
	international_full: "P -4 3 n",
	hall_symbol: "P -4n 2 3",
	international: "P -4 3 n",
	arithmetic_crystal_class_number: 68,
	arithmetic_crystal_class_symbol: "-43mP"
},
	"515": {
	pointgroup_international: "Td",
	schoenflies: "Td^5",
	pointgroup_schoenflies: "-43m",
	international_short: "F-43c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 219,
	choice: "",
	international_full: "F -4 3 c",
	hall_symbol: "F -4c 2 3",
	international: "F -4 3 c",
	arithmetic_crystal_class_number: 69,
	arithmetic_crystal_class_symbol: "-43mF"
},
	"516": {
	pointgroup_international: "Td",
	schoenflies: "Td^6",
	pointgroup_schoenflies: "-43m",
	international_short: "I-43d",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 220,
	choice: "",
	international_full: "I -4 3 d",
	hall_symbol: "I -4bd 2c 3",
	international: "I -4 3 d",
	arithmetic_crystal_class_number: 70,
	arithmetic_crystal_class_symbol: "-43mI"
},
	"517": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^1",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pm-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 221,
	choice: "",
	international_full: "P 4/m -3 2/m",
	hall_symbol: "-P 4 2 3",
	international: "P m -3 m",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"518": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^2",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pn-3n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 222,
	choice: "1",
	international_full: "P 4/n -3 2/n",
	hall_symbol: "P 4 2 3 -1n",
	international: "P n -3 n",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"519": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^2",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pn-3n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 222,
	choice: "2",
	international_full: "P 4/n -3 2/n",
	hall_symbol: "-P 4a 2bc 3",
	international: "P n -3 n",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"520": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^3",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pm-3n",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 223,
	choice: "",
	international_full: "P 4_2/m -3 2/n",
	hall_symbol: "-P 4n 2 3",
	international: "P m -3 n",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"521": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^4",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pn-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 224,
	choice: "1",
	international_full: "P 4_2/n -3 2/m",
	hall_symbol: "P 4n 2 3 -1n",
	international: "P n -3 m",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"522": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^4",
	pointgroup_schoenflies: "m-3m",
	international_short: "Pn-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 224,
	choice: "2",
	international_full: "P 4_2/n -3 2/m",
	hall_symbol: "-P 4bc 2bc 3",
	international: "P n -3 m",
	arithmetic_crystal_class_number: 71,
	arithmetic_crystal_class_symbol: "m-3mP"
},
	"523": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^5",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fm-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 225,
	choice: "",
	international_full: "F 4/m -3 2/m",
	hall_symbol: "-F 4 2 3",
	international: "F m -3 m",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"524": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^6",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fm-3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 226,
	choice: "",
	international_full: "F 4/m -3 2/c",
	hall_symbol: "-F 4c 2 3",
	international: "F m -3 c",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"525": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^7",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fd-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 227,
	choice: "1",
	international_full: "F 4_1/d -3 2/m",
	hall_symbol: "F 4d 2 3 -1d",
	international: "F d -3 m",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"526": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^7",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fd-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 227,
	choice: "2",
	international_full: "F 4_1/d -3 2/m",
	hall_symbol: "-F 4vw 2vw 3",
	international: "F d -3 m",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"527": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^8",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fd-3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 228,
	choice: "1",
	international_full: "F 4_1/d -3 2/c",
	hall_symbol: "F 4d 2 3 -1cd",
	international: "F d -3 c",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"528": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^8",
	pointgroup_schoenflies: "m-3m",
	international_short: "Fd-3c",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.5,
			0.75
		],
		[
			0.75,
			0.5,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.5,
			0.75
		],
		[
			0.75,
			0.5,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0,
			0.25
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.25,
			0.25,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0.25,
			0,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0.75,
			0.75,
			0.5
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.75,
			0.25,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0.75,
			0,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.75,
			0.5
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.5,
			0.75
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.25,
			0.75,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0.25,
			0.5,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0.75,
			0.5,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.25,
			0.25,
			0
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.5,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0.75,
			0.25,
			0
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.75,
			0,
			0.75
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.5,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.75,
			0.75,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.5,
			0.25,
			0.75
		],
		[
			0.75,
			0.5,
			0.75
		],
		[
			0.75,
			0.5,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 228,
	choice: "2",
	international_full: "F 4_1/d -3 2/c",
	hall_symbol: "-F 4cvw 2vw 3",
	international: "F d -3 c",
	arithmetic_crystal_class_number: 72,
	arithmetic_crystal_class_symbol: "m-3mF"
},
	"529": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^9",
	pointgroup_schoenflies: "m-3m",
	international_short: "Im-3m",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 229,
	choice: "",
	international_full: "I 4/m -3 2/m",
	hall_symbol: "-I 4 2 3",
	international: "I m -3 m",
	arithmetic_crystal_class_number: 73,
	arithmetic_crystal_class_symbol: "m-3mI"
},
	"530": {
	pointgroup_international: "Oh",
	schoenflies: "Oh^10",
	pointgroup_schoenflies: "m-3m",
	international_short: "Ia-3d",
	translations: [
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0,
			0
		],
		[
			0,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0.25,
			0.25,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0,
			0.5,
			0
		],
		[
			0,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.75,
			0.25,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0.75,
			0.75,
			0.25
		],
		[
			0,
			0,
			0.5
		],
		[
			0,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0,
			0.5,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.25,
			0.75,
			0.25
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.5,
			0.5,
			0.5
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.25,
			0.75,
			0.75
		],
		[
			0.5,
			0,
			0
		],
		[
			0.5,
			0,
			0
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.75,
			0.25,
			0.75
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.5,
			0,
			0.5
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.75,
			0.75,
			0.75
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.5,
			0.5,
			0
		],
		[
			0.25,
			0.25,
			0.75
		],
		[
			0.25,
			0.25,
			0.75
		]
	],
	rotations: [
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				-1,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				0,
				1,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				-1,
				0,
				0
			]
		],
		[
			[
				0,
				-1,
				0
			],
			[
				0,
				0,
				1
			],
			[
				1,
				0,
				0
			]
		],
		[
			[
				1,
				0,
				0
			],
			[
				0,
				0,
				-1
			],
			[
				0,
				1,
				0
			]
		],
		[
			[
				-1,
				0,
				0
			],
			[
				0,
				0,
				1
			],
			[
				0,
				-1,
				0
			]
		]
	],
	number: 230,
	choice: "",
	international_full: "I 4_1/a -3 2/d",
	hall_symbol: "-I 4bd 2c 3",
	international: "I a -3 d",
	arithmetic_crystal_class_number: 73,
	arithmetic_crystal_class_symbol: "m-3mI"
}
};

var symdata = require$$0;

/* Symmetry and space group related methods 
 */

/**
 * Parse a symmetry operation string in the format:
 *     +x,y-1/2,z
 * into a rotation matrix + translation vector representation.
 * @param  {string} symopstr A string representation of the symmetry operation
 * @return {Object}          The symmetry operation as [rotation, translation]
 */
function parseSymOp(symopstr) {
  // First, split by commas
  var xyz = symopstr.split(',');
  if (xyz.length != 3) {
    throw 'Invalid symop string';
  }
  // Then capture all elements
  var symre = /([+-]{0,1})(?:([xyz])|(?:([0-9]+)\/([0-9]+)))/g;
  var rotm = []; // Rotation
  var trns = []; // Translation

  for (var i = 0; i < 3; ++i) {
    symre.lastIndex = 0;
    var r = [0, 0, 0];
    var t = 0.0;
    do {
      var res = symre.exec(xyz[i]);
      if (!res) break;
      var sign = res[1] == '-' ? -1 : 1;
      if (res[2] === undefined) {
        // Translation!
        t += sign * parseFloat(res[3]) / parseFloat(res[4]);
      } else {
        // Rotation!
        var j = 'xyz'.search(res[2]);
        r[j] += sign;
      }
    } while (res);
    rotm.push(r);
    trns.push(t);
  }
  return [rotm, trns];
}
symmetry$1.parseSymOp = parseSymOp;

/**
 * Interpret a Hall symbol and return a full list of symmetry
 * operations for it in.
 * @param  {string} hsym Hall symbol
 * @return {Object}      Symmetry operations as list of [rotation, translation]
 */
function interpretHallSymbol(hsym) {
  var hsym = hsym.trim();
  for (var i = 1; i <= 530; ++i) {
    // Iterate over all spacegroups
    if (symdata[i]['hall_symbol'] == hsym) {
      var rotms = symdata[i]['rotations'];
      var trnss = symdata[i]['translations'];
      return rotms.map(function (r, i) {
        return [r, trnss[i]];
      });
    }
  }
  throw 'Invalid Hall symbol';
}
symmetry$1.interpretHallSymbol = interpretHallSymbol;

var mjs = require$$0$2;
var mndtable = mendeleev.PeriodicTable;
var utils = utils$1;
var parseCif$1 = parse$1.parseCif;
var symmetry = symmetry$1;

/*

Functions and classes useful to transform a parsed CIF data structure into a
series of crystallographic structures.

*/

/**
 *   Convert a cartesian coordinates cell into a lengths and angles representation
 *   @param  {Array} cell    Cartesian form cell (must be 3x3)
 *   @param  {bool}  radians If true, angles are returned in radians
 *   @return {Array}         Parameters in form [lengths, angles]
 */
function cellToCellpar(cell, radians) {
  var lengths = cell.map(function (c) {
    return mjs.norm(c);
  });
  var angles = [];
  for (var i = 0; i < 3; ++i) {
    var j = (i + 2) % 3;
    var k = (i + 1) % 3;
    var ll = lengths[j] * lengths[k];
    if (ll > 1e-16) {
      var x = mjs.dot(cell[j], cell[k]) / ll;
      var angle = Math.acos(x);
    } else {
      var angle = Math.PI / 2.0;
    }
    angles.push(angle);
  }
  if (!radians) {
    angles = angles.map(utils.radToDeg);
  }
  return [lengths, angles];
}
cryst.cellToCellpar = cellToCellpar;

/**
 *  Convert a cell into lengths and angles representation to cartesian form
 *  @param  {Array} cellpar     Lengths and angles form of cell (must be 2x3)
 *  @param  {Array} ab_normal   Desired direction for the normal to the AB plane
 *  @param  {Array} a_direction Direction for the a parameter
 *  @param  {bool}  radians     If true, consider the angles in radians
 *  @return {Array}             Cell in Cartesian form
 */
function cellparToCell(cellpar, ab_normal, a_direction, radians) {
  ab_normal = ab_normal || [0, 0, 1]; // Default is the XY plane

  if (!a_direction) {
    if (mjs.norm(utils.cross(ab_normal, [1, 0, 0])) < 1e-5) {
      a_direction = [0, 0, 1]; // Only if the AB plane contains X
    } else {
      a_direction = [1, 0, 0];
    }
  }

  // Define rotated X,Y,Z-system, with Z along ab_normal and X along
  // the projection of a_direction onto the normal plane of Z.
  var ad = utils.unit(a_direction);
  var Z = utils.unit(ab_normal);
  var X = utils.unit(mjs.subtract(ad, mjs.dotMultiply(mjs.dot(ad, Z), Z)));
  var Y = utils.cross(Z, X);

  // Express va, vb and vc in the X,Y,Z-system
  var l = cellpar[0];
  var angs = cellpar[1];
  if (!radians) {
    angs = angs.map(utils.degToRad);
  }
  var cosa = angs.map(Math.cos);
  var sina = angs.map(Math.sin);
  for (var i = 0; i < 3; ++i) {
    // Round for orthorombic cells
    if (Math.abs(Math.abs(sina[i]) - 1) < 1e-14) {
      sina[i] = Math.sign(sina[i]);
      cosa[i] = 0.0;
    }
  }

  // Build the cell vectors
  var va = [l[0], 0, 0];
  var vb = [l[1] * cosa[2], l[1] * sina[2], 0];
  var vc = [l[2] * cosa[1], l[2] * (cosa[0] - cosa[1] * cosa[2]) / sina[2], 0];
  vc[2] = Math.sqrt(l[2] * l[2] - vc[0] * vc[0] - vc[1] * vc[1]);

  // Convert to the Cartesian x, y, z - system
  var cell = mjs.multiply([va, vb, vc], [X, Y, Z]);
  return cell;
}
cryst.cellparToCell = cellparToCell;

/** 
 *  A class holding a crystallographic structure. Inspired by the Atoms class
 *  of the Atomic Simulation Environment.
 *  @class
 *  @param {Array}  elems       Array of element symbols or atomic numbers
 *  @param {Array}  positions   Array of 3D positions
 *  @param {Array}  cell        Array describing the unit cell. Can be any of
 *                              the following:
 *                              - false/null: no periodic boundary
 *                              - Single float: cubic cell with that parameter
 *                              - Array of 3 floats: orthorombic cell with 
 *                                those parameters
 *                              - Array of 3x3 floats: full carthesian cell
 *                                definition
 *                              - Any of the previous two, but with one or two
 *                                elements replaced by false/null: partial 
 *                                periodicity
 *                              - Array of 2x3 floats: cell in lengths+angles
 *                                format. Angles must be in degrees
 *  @param {Object} info        Additional data attached to the structure
 *  @param {bool}   scaled      If true, interpret the positions as scaled
 *                              instead of absolute
 *  @param {bool}   tolerant    If true, accept even symbols of elements that
 *                              do not exist in the periodic table
 */
var Atoms$1 = function Atoms(elems, positions, cell, info, scaled, tolerant) {
  // Sanity checks
  var symbols = [];
  var numbers = [];
  for (var i = 0; i < elems.length; ++i) {
    var el = elems[i];
    var a;
    var is_num = typeof el == 'number';
    if (is_num) {
      a = mndtable.getAtomic(el);
    } else {
      a = mndtable.getElement(el);
    }
    if (a === null) {
      if (is_num || !tolerant) {
        throw Error('Non-existing element "' + el + '" passed to Atoms');
      } else {
        a = {
          'symbol': el,
          // Default for unknown element symbols
          'number': -1
        };
      }
    }
    symbols.push(a.symbol);
    numbers.push(a.number);
  }
  this._arrays = {
    'symbols': symbols,
    'numbers': numbers
  };
  this._N = symbols.length;

  // Now on to storing the cell
  this._pbc = [true, true, true];
  this._inv_cell = null;
  if (!cell) {
    this._pbc = [false, false, false];
    this._cell = null;
  } else if (typeof cell == 'number') {
    var a = cell;
    this._cell = [[a, 0, 0], [0, a, 0], [0, 0, a]];
  } else if (cell.length == 2 && cell[0].length == 3 && cell[1].length == 3) {
    // Lenghts + angles format
    this._cell = cellparToCell(cell);
  } else if (cell.length != 3) {
    throw Error('Invalid cell passed to set_cell');
  } else {
    this._cell = [];
    for (var i = 0; i < 3; ++i) {
      if (!cell[i]) {
        this._cell.push(null);
        this._pbc[i] = false;
      } else if (typeof cell[i] == 'number') {
        var row = [0, 0, 0];
        row[i] = cell[i];
        this._cell.push(row);
      } else if (cell[i].length != 3) {
        throw Error('Invalid cell passed to set_cell');
      } else {
        this._cell.push(cell[i]);
      }
    }
  }
  if (cell && !this._cell.includes(null)) this._inv_cell = mjs.inv(this._cell);

  // Check that the positions are the right size
  var check_pos = positions.length == this._N;
  for (var i = 0; i < positions.length; ++i) {
    check_pos = check_pos && positions[i].length == 3;
  }
  if (!check_pos) {
    throw Error('Invalid positions array passed to Atoms');
  }
  if (scaled) {
    if (this._inv_cell === null) {
      // Periodicity isn't full!
      throw Error('Impossible to use scaled coordinates with non-periodic system');
    }
    positions = mjs.multiply(positions, this._cell);
  }
  this.set_array('positions', positions);
  info = info || {};
  this.info = info;
};

// Prototype for Atoms. We focus on getters, not setters, because it's not 
// meant to be modified besides its arrays.
Atoms$1.prototype = {
  length: function length() {
    return this._N;
  },
  set_array: function set_array(name, arr) {
    // Check that it's the right shape
    if (!(arr.length == this._N)) {
      throw Error('Invalid array size');
    }
    this._arrays[name] = arr;
  },
  get_array: function get_array(name) {
    return this._arrays[name];
  },
  get_chemical_symbols: function get_chemical_symbols() {
    return utils.deepClone(this.get_array('symbols'));
  },
  get_atomic_numbers: function get_atomic_numbers() {
    return utils.deepClone(this.get_array('numbers'));
  },
  get_cell: function get_cell() {
    return utils.deepClone(this._cell);
  },
  get_inv_cell: function get_inv_cell() {
    return utils.deepClone(this._inv_cell);
  },
  get_pbc: function get_pbc() {
    return utils.deepClone(this._pbc);
  },
  get_positions: function get_positions() {
    return utils.deepClone(this.get_array('positions'));
  },
  get_scaled_positions: function get_scaled_positions() {
    var pos = this.get_array('positions');
    var spos = [];
    var ic = this._inv_cell;
    // Going the long way about this because it's performance critical
    for (var i = 0; i < pos.length; ++i) {
      var p = pos[i];
      var sp = [p[0] * ic[0][0] + p[1] * ic[1][0] + p[2] * ic[2][0], p[0] * ic[0][1] + p[1] * ic[1][1] + p[2] * ic[2][1], p[0] * ic[0][2] + p[1] * ic[1][2] + p[2] * ic[2][2]];
      spos.push(sp);
    }
    return spos;
  }
};

// Utility functions needed for CIF parsing. Not meant for outside use!

/** 
 *  This function extracts a series of tags from a cif block. It searches for
 *  them and, if they are loops, only returns the ones that are as long as the
 *  FIRST element of tags (which is assumed obligatory; if not found, null is
 *  returned)
 */
function _extract_tags(cblock, tags) {
  var extracted = tags.map(function (tag) {
    return cblock[tag];
  });
  if (extracted[0] === undefined) return null;
  // Verify that, in case of loops, all tags have the same length
  var basetype = extracted[0].type;
  var baselen = null;
  if (basetype == 'loop') {
    baselen = extracted[0].value.length;
  }
  extracted = extracted.map(function (x) {
    if (x === undefined) return null;
    if (x.type != basetype) return null;
    if (basetype == 'loop' && x.value.length != baselen) return null;
    if (basetype == 'loop') {
      return x.value;
    } else {
      return [x.value];
    }
  });
  return extracted;
}
function _atom_types(cblock) {
  // Extract atom types from cblock
  var atype_tags = ['_atom_type_symbol', '_atom_type_description', '_atom_type_radius_bond'];
  var typevals = _extract_tags(cblock, atype_tags);
  if (!typevals) {
    return null; // No types found
  }

  var atypes = {};
  for (var i = 0; i < typevals[0].length; ++i) {
    var sym = typevals[0][i].text;
    atypes[sym] = {};
    for (var j = 1; j < atype_tags.length; ++j) {
      if (typevals[j] != null) atypes[sym][atype_tags[j].slice(11)] = typevals[j][i].get_value();
    }
  }
  return atypes;
}
function _atom_sites(cblock) {
  // Extract atom sites from cblock
  var asite_tags = ['_atom_site_label', '_atom_site_type_symbol', '_atom_site_Cartn_x', '_atom_site_Cartn_y', '_atom_site_Cartn_z', '_atom_site_fract_x', '_atom_site_fract_y', '_atom_site_fract_z'];
  var sitevals = _extract_tags(cblock, asite_tags);
  if (!sitevals) {
    return null; // No sites found
  }

  var asites = [];
  for (var i = 0; i < sitevals[0].length; ++i) {
    asites.push({});
    for (var j = 0; j < asite_tags.length; ++j) {
      if (sitevals[j] != null) asites[i][asite_tags[j].slice(11)] = sitevals[j][i].get_value();
    }
  }
  return asites;
}
function _cellpars(cblock) {
  var cell_tags = ['_cell_length_a', '_cell_length_b', '_cell_length_c', '_cell_angle_alpha', '_cell_angle_beta', '_cell_angle_gamma'];
  var cellpars = [[], []];
  for (var i = 0; i < 6; ++i) {
    var val = cblock[cell_tags[i]];
    if (val === undefined) return null;
    cellpars[Math.floor(i / 3)].push(val.value.get_value());
  }

  // If any of a, b, c is zero, then it's invalid
  if (cellpars[0].some(function (x) {
    return x == 0;
  })) {
    return null;
  }
  return cellpars;
}
function _symops(cblock) {
  // Look for either tag
  var symopvals = cblock._space_group_symop_operation_xyz || cblock._symmetry_equiv_pos_as_xyz;

  // Hall symbol?
  var hallsymbol = cblock._space_group_name_Hall || cblock._symmetry_space_group_name_Hall;
  var symops = null;
  if (symopvals) {
    symops = [];
    if (symopvals.type == 'single' || symopvals.value.length == 1) {
      // Either way is pointless (only one value means identity)
      return null;
    }
    for (var i = 1; i < symopvals.value.length; ++i) {
      symops.push(symmetry.parseSymOp(symopvals.value[i].text));
    }
  } else if (hallsymbol) {
    symops = symmetry.interpretHallSymbol(hallsymbol);
  }
  return symops;
}

/** CIF to Atoms parser
 *  @static
 *  @param  {string}    cif     CIF file in text format
 *  @param  {float}     symtol  Distance under which two symmetric copies are
 *                              considered equivalent
 *                              
 *  @return {Object}            Dictionary of parsed crystal structures
 */
Atoms$1.readCif = function (cif) {
  var symtol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;
  var cifdict = parseCif$1(cif);

  // Consider any data block
  var structs = {};
  for (var bname in cifdict) {
    var block = cifdict[bname];
    if ('_atom_site_label' in block) {
      structs[bname] = block;
    }
  }
  for (var sname in structs) {
    var cblock = cifdict[sname];
    // Start by identifying atom types, if present
    _atom_types(cblock);
    var asites = _atom_sites(cblock);
    var cellpars = _cellpars(cblock);

    // Is this system periodic?
    var pbc = cellpars !== null;
    if (pbc) {
      var cell = cellparToCell(cellpars);
    }

    // Extract symbols, labels, and positions
    var symbols = [];
    var labels = [];
    var positions = [];
    for (var i = 0; i < asites.length; ++i) {
      symbols.push(asites[i].type_symbol);
      labels.push(asites[i].label);
      var p = [asites[i].Cartn_x, asites[i].Cartn_y, asites[i].Cartn_z];
      if (p.some(function (x) {
        return x === undefined;
      })) {
        // Then we need the fractional ones!
        if (!pbc) {
          // Does not make sense...
          throw Error('Absolute coordinates are necessary without a unit cell');
        }
        p = [asites[i].fract_x, asites[i].fract_y, asites[i].fract_z];
        p = mjs.multiply(p, cell);
      }
      positions.push(p);
    }

    // Now for symmetry operations...
    if (pbc) {
      var symops = _symops(cblock);
      if (symops) {
        var fpos = mjs.multiply(positions, mjs.inv(cell));
        var allfpos = [];
        var allsyms = [];
        var alllabs = [];
        // Otherwise, find the new positions
        for (var i = 0; i < fpos.length; ++i) {
          var p0 = fpos[i];
          var allp = [p0];
          for (var j = 0; j < symops.length; ++j) {
            var rot = symops[j][0];
            var tr = symops[j][1];
            var p = mjs.add(mjs.multiply(rot, p0), tr);
            p = utils.mod1(p);
            // Is it equivalent to something else?
            var eq = false;
            for (var k = 0; k < allp.length; ++k) {
              var r = mjs.subtract(p, allp[k]);
              r = utils.shortestPeriodicLength(utils.mod1(r));
              if (r < symtol) {
                eq = true;
                break;
              }
            }
            if (!eq) {
              allp.push(p);
            }
          }
          // Concatenate
          allfpos = allfpos.concat(allp);
          allsyms = allsyms.concat(Array(allp.length).fill(symbols[i]));
          alllabs = alllabs.concat(Array(allp.length).fill(labels[i]));
        }
        symbols = allsyms;
        labels = alllabs;
        positions = mjs.multiply(allfpos, cell);
      }
    }

    // Create the atoms object
    var a = new Atoms$1(symbols, positions, cell, {});
    a.set_array('labels', labels);
    structs[sname] = a;
  }
  return structs;
};
cryst.Atoms = Atoms$1;

var parser = parse$1;
var Atoms = cryst.Atoms;

/**
 * Parses a cif file in string format, returning it as a data structure
 * @param  {string} ciftext CIF file as a string
 * @return {Object}
 */
var parseCifStructures = crystcifParse.parseCifStructures = function (ciftext) {
  return Atoms.readCif(ciftext);
};

// Additional exports
var Atoms_1 = crystcifParse.Atoms = Atoms;
var parseCif = crystcifParse.parseCif = parser.parseCif;

var index = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  Atoms: Atoms_1,
  default: crystcifParse,
  parseCif: parseCif,
  parseCifStructures: parseCifStructures
}, [crystcifParse]);

exports.CIFLoader = CIFLoader;
exports.crystcif = index;
exports.parse = parse$2;
